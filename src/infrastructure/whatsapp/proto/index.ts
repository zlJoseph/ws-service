// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.2
//   protoc               v6.31.1
// source: WAProto/WAProto.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "proto";

export enum ADVEncryptionType {
  E2EE = 0,
  HOSTED = 1,
  UNRECOGNIZED = -1,
}

export function aDVEncryptionTypeFromJSON(object: any): ADVEncryptionType {
  switch (object) {
    case 0:
    case "E2EE":
      return ADVEncryptionType.E2EE;
    case 1:
    case "HOSTED":
      return ADVEncryptionType.HOSTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ADVEncryptionType.UNRECOGNIZED;
  }
}

export function aDVEncryptionTypeToJSON(object: ADVEncryptionType): string {
  switch (object) {
    case ADVEncryptionType.E2EE:
      return "E2EE";
    case ADVEncryptionType.HOSTED:
      return "HOSTED";
    case ADVEncryptionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BotMetricsEntryPoint {
  UNKNOWN = 0,
  FAVICON = 1,
  CHATLIST = 2,
  AISEARCH_NULL_STATE_PAPER_PLANE = 3,
  AISEARCH_NULL_STATE_SUGGESTION = 4,
  AISEARCH_TYPE_AHEAD_SUGGESTION = 5,
  AISEARCH_TYPE_AHEAD_PAPER_PLANE = 6,
  AISEARCH_TYPE_AHEAD_RESULT_CHATLIST = 7,
  AISEARCH_TYPE_AHEAD_RESULT_MESSAGES = 8,
  AIVOICE_SEARCH_BAR = 9,
  AIVOICE_FAVICON = 10,
  AISTUDIO = 11,
  DEEPLINK = 12,
  NOTIFICATION = 13,
  PROFILE_MESSAGE_BUTTON = 14,
  FORWARD = 15,
  APP_SHORTCUT = 16,
  FF_FAMILY = 17,
  AI_TAB = 18,
  AI_HOME = 19,
  AI_DEEPLINK_IMMERSIVE = 20,
  AI_DEEPLINK = 21,
  META_AI_CHAT_SHORTCUT_AI_STUDIO = 22,
  UGC_CHAT_SHORTCUT_AI_STUDIO = 23,
  NEW_CHAT_AI_STUDIO = 24,
  UNRECOGNIZED = -1,
}

export function botMetricsEntryPointFromJSON(object: any): BotMetricsEntryPoint {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return BotMetricsEntryPoint.UNKNOWN;
    case 1:
    case "FAVICON":
      return BotMetricsEntryPoint.FAVICON;
    case 2:
    case "CHATLIST":
      return BotMetricsEntryPoint.CHATLIST;
    case 3:
    case "AISEARCH_NULL_STATE_PAPER_PLANE":
      return BotMetricsEntryPoint.AISEARCH_NULL_STATE_PAPER_PLANE;
    case 4:
    case "AISEARCH_NULL_STATE_SUGGESTION":
      return BotMetricsEntryPoint.AISEARCH_NULL_STATE_SUGGESTION;
    case 5:
    case "AISEARCH_TYPE_AHEAD_SUGGESTION":
      return BotMetricsEntryPoint.AISEARCH_TYPE_AHEAD_SUGGESTION;
    case 6:
    case "AISEARCH_TYPE_AHEAD_PAPER_PLANE":
      return BotMetricsEntryPoint.AISEARCH_TYPE_AHEAD_PAPER_PLANE;
    case 7:
    case "AISEARCH_TYPE_AHEAD_RESULT_CHATLIST":
      return BotMetricsEntryPoint.AISEARCH_TYPE_AHEAD_RESULT_CHATLIST;
    case 8:
    case "AISEARCH_TYPE_AHEAD_RESULT_MESSAGES":
      return BotMetricsEntryPoint.AISEARCH_TYPE_AHEAD_RESULT_MESSAGES;
    case 9:
    case "AIVOICE_SEARCH_BAR":
      return BotMetricsEntryPoint.AIVOICE_SEARCH_BAR;
    case 10:
    case "AIVOICE_FAVICON":
      return BotMetricsEntryPoint.AIVOICE_FAVICON;
    case 11:
    case "AISTUDIO":
      return BotMetricsEntryPoint.AISTUDIO;
    case 12:
    case "DEEPLINK":
      return BotMetricsEntryPoint.DEEPLINK;
    case 13:
    case "NOTIFICATION":
      return BotMetricsEntryPoint.NOTIFICATION;
    case 14:
    case "PROFILE_MESSAGE_BUTTON":
      return BotMetricsEntryPoint.PROFILE_MESSAGE_BUTTON;
    case 15:
    case "FORWARD":
      return BotMetricsEntryPoint.FORWARD;
    case 16:
    case "APP_SHORTCUT":
      return BotMetricsEntryPoint.APP_SHORTCUT;
    case 17:
    case "FF_FAMILY":
      return BotMetricsEntryPoint.FF_FAMILY;
    case 18:
    case "AI_TAB":
      return BotMetricsEntryPoint.AI_TAB;
    case 19:
    case "AI_HOME":
      return BotMetricsEntryPoint.AI_HOME;
    case 20:
    case "AI_DEEPLINK_IMMERSIVE":
      return BotMetricsEntryPoint.AI_DEEPLINK_IMMERSIVE;
    case 21:
    case "AI_DEEPLINK":
      return BotMetricsEntryPoint.AI_DEEPLINK;
    case 22:
    case "META_AI_CHAT_SHORTCUT_AI_STUDIO":
      return BotMetricsEntryPoint.META_AI_CHAT_SHORTCUT_AI_STUDIO;
    case 23:
    case "UGC_CHAT_SHORTCUT_AI_STUDIO":
      return BotMetricsEntryPoint.UGC_CHAT_SHORTCUT_AI_STUDIO;
    case 24:
    case "NEW_CHAT_AI_STUDIO":
      return BotMetricsEntryPoint.NEW_CHAT_AI_STUDIO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BotMetricsEntryPoint.UNRECOGNIZED;
  }
}

export function botMetricsEntryPointToJSON(object: BotMetricsEntryPoint): string {
  switch (object) {
    case BotMetricsEntryPoint.UNKNOWN:
      return "UNKNOWN";
    case BotMetricsEntryPoint.FAVICON:
      return "FAVICON";
    case BotMetricsEntryPoint.CHATLIST:
      return "CHATLIST";
    case BotMetricsEntryPoint.AISEARCH_NULL_STATE_PAPER_PLANE:
      return "AISEARCH_NULL_STATE_PAPER_PLANE";
    case BotMetricsEntryPoint.AISEARCH_NULL_STATE_SUGGESTION:
      return "AISEARCH_NULL_STATE_SUGGESTION";
    case BotMetricsEntryPoint.AISEARCH_TYPE_AHEAD_SUGGESTION:
      return "AISEARCH_TYPE_AHEAD_SUGGESTION";
    case BotMetricsEntryPoint.AISEARCH_TYPE_AHEAD_PAPER_PLANE:
      return "AISEARCH_TYPE_AHEAD_PAPER_PLANE";
    case BotMetricsEntryPoint.AISEARCH_TYPE_AHEAD_RESULT_CHATLIST:
      return "AISEARCH_TYPE_AHEAD_RESULT_CHATLIST";
    case BotMetricsEntryPoint.AISEARCH_TYPE_AHEAD_RESULT_MESSAGES:
      return "AISEARCH_TYPE_AHEAD_RESULT_MESSAGES";
    case BotMetricsEntryPoint.AIVOICE_SEARCH_BAR:
      return "AIVOICE_SEARCH_BAR";
    case BotMetricsEntryPoint.AIVOICE_FAVICON:
      return "AIVOICE_FAVICON";
    case BotMetricsEntryPoint.AISTUDIO:
      return "AISTUDIO";
    case BotMetricsEntryPoint.DEEPLINK:
      return "DEEPLINK";
    case BotMetricsEntryPoint.NOTIFICATION:
      return "NOTIFICATION";
    case BotMetricsEntryPoint.PROFILE_MESSAGE_BUTTON:
      return "PROFILE_MESSAGE_BUTTON";
    case BotMetricsEntryPoint.FORWARD:
      return "FORWARD";
    case BotMetricsEntryPoint.APP_SHORTCUT:
      return "APP_SHORTCUT";
    case BotMetricsEntryPoint.FF_FAMILY:
      return "FF_FAMILY";
    case BotMetricsEntryPoint.AI_TAB:
      return "AI_TAB";
    case BotMetricsEntryPoint.AI_HOME:
      return "AI_HOME";
    case BotMetricsEntryPoint.AI_DEEPLINK_IMMERSIVE:
      return "AI_DEEPLINK_IMMERSIVE";
    case BotMetricsEntryPoint.AI_DEEPLINK:
      return "AI_DEEPLINK";
    case BotMetricsEntryPoint.META_AI_CHAT_SHORTCUT_AI_STUDIO:
      return "META_AI_CHAT_SHORTCUT_AI_STUDIO";
    case BotMetricsEntryPoint.UGC_CHAT_SHORTCUT_AI_STUDIO:
      return "UGC_CHAT_SHORTCUT_AI_STUDIO";
    case BotMetricsEntryPoint.NEW_CHAT_AI_STUDIO:
      return "NEW_CHAT_AI_STUDIO";
    case BotMetricsEntryPoint.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BotMetricsThreadEntryPoint {
  AI_UNKNOWN = 0,
  AI_TAB_THREAD = 1,
  AI_HOME_THREAD = 2,
  AI_DEEPLINK_IMMERSIVE_THREAD = 3,
  AI_DEEPLINK_THREAD = 4,
  UNRECOGNIZED = -1,
}

export function botMetricsThreadEntryPointFromJSON(object: any): BotMetricsThreadEntryPoint {
  switch (object) {
    case 0:
    case "AI_UNKNOWN":
      return BotMetricsThreadEntryPoint.AI_UNKNOWN;
    case 1:
    case "AI_TAB_THREAD":
      return BotMetricsThreadEntryPoint.AI_TAB_THREAD;
    case 2:
    case "AI_HOME_THREAD":
      return BotMetricsThreadEntryPoint.AI_HOME_THREAD;
    case 3:
    case "AI_DEEPLINK_IMMERSIVE_THREAD":
      return BotMetricsThreadEntryPoint.AI_DEEPLINK_IMMERSIVE_THREAD;
    case 4:
    case "AI_DEEPLINK_THREAD":
      return BotMetricsThreadEntryPoint.AI_DEEPLINK_THREAD;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BotMetricsThreadEntryPoint.UNRECOGNIZED;
  }
}

export function botMetricsThreadEntryPointToJSON(object: BotMetricsThreadEntryPoint): string {
  switch (object) {
    case BotMetricsThreadEntryPoint.AI_UNKNOWN:
      return "AI_UNKNOWN";
    case BotMetricsThreadEntryPoint.AI_TAB_THREAD:
      return "AI_TAB_THREAD";
    case BotMetricsThreadEntryPoint.AI_HOME_THREAD:
      return "AI_HOME_THREAD";
    case BotMetricsThreadEntryPoint.AI_DEEPLINK_IMMERSIVE_THREAD:
      return "AI_DEEPLINK_IMMERSIVE_THREAD";
    case BotMetricsThreadEntryPoint.AI_DEEPLINK_THREAD:
      return "AI_DEEPLINK_THREAD";
    case BotMetricsThreadEntryPoint.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BotSessionSource {
  NONE = 0,
  NULL_STATE = 1,
  TYPEAHEAD = 2,
  USER_INPUT = 3,
  EMU_FLASH = 4,
  EMU_FLASH_FOLLOWUP = 5,
  VOICE = 6,
  UNRECOGNIZED = -1,
}

export function botSessionSourceFromJSON(object: any): BotSessionSource {
  switch (object) {
    case 0:
    case "NONE":
      return BotSessionSource.NONE;
    case 1:
    case "NULL_STATE":
      return BotSessionSource.NULL_STATE;
    case 2:
    case "TYPEAHEAD":
      return BotSessionSource.TYPEAHEAD;
    case 3:
    case "USER_INPUT":
      return BotSessionSource.USER_INPUT;
    case 4:
    case "EMU_FLASH":
      return BotSessionSource.EMU_FLASH;
    case 5:
    case "EMU_FLASH_FOLLOWUP":
      return BotSessionSource.EMU_FLASH_FOLLOWUP;
    case 6:
    case "VOICE":
      return BotSessionSource.VOICE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BotSessionSource.UNRECOGNIZED;
  }
}

export function botSessionSourceToJSON(object: BotSessionSource): string {
  switch (object) {
    case BotSessionSource.NONE:
      return "NONE";
    case BotSessionSource.NULL_STATE:
      return "NULL_STATE";
    case BotSessionSource.TYPEAHEAD:
      return "TYPEAHEAD";
    case BotSessionSource.USER_INPUT:
      return "USER_INPUT";
    case BotSessionSource.EMU_FLASH:
      return "EMU_FLASH";
    case BotSessionSource.EMU_FLASH_FOLLOWUP:
      return "EMU_FLASH_FOLLOWUP";
    case BotSessionSource.VOICE:
      return "VOICE";
    case BotSessionSource.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum KeepType {
  KEEP_UNKNOWN = 0,
  KEEP_FOR_ALL = 1,
  UNDO_KEEP_FOR_ALL = 2,
  UNRECOGNIZED = -1,
}

export function keepTypeFromJSON(object: any): KeepType {
  switch (object) {
    case 0:
    case "KEEP_UNKNOWN":
      return KeepType.KEEP_UNKNOWN;
    case 1:
    case "KEEP_FOR_ALL":
      return KeepType.KEEP_FOR_ALL;
    case 2:
    case "UNDO_KEEP_FOR_ALL":
      return KeepType.UNDO_KEEP_FOR_ALL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return KeepType.UNRECOGNIZED;
  }
}

export function keepTypeToJSON(object: KeepType): string {
  switch (object) {
    case KeepType.KEEP_UNKNOWN:
      return "KEEP_UNKNOWN";
    case KeepType.KEEP_FOR_ALL:
      return "KEEP_FOR_ALL";
    case KeepType.UNDO_KEEP_FOR_ALL:
      return "UNDO_KEEP_FOR_ALL";
    case KeepType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum MediaVisibility {
  DEFAULT = 0,
  OFF = 1,
  ON = 2,
  UNRECOGNIZED = -1,
}

export function mediaVisibilityFromJSON(object: any): MediaVisibility {
  switch (object) {
    case 0:
    case "DEFAULT":
      return MediaVisibility.DEFAULT;
    case 1:
    case "OFF":
      return MediaVisibility.OFF;
    case 2:
    case "ON":
      return MediaVisibility.ON;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MediaVisibility.UNRECOGNIZED;
  }
}

export function mediaVisibilityToJSON(object: MediaVisibility): string {
  switch (object) {
    case MediaVisibility.DEFAULT:
      return "DEFAULT";
    case MediaVisibility.OFF:
      return "OFF";
    case MediaVisibility.ON:
      return "ON";
    case MediaVisibility.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PrivacySystemMessage {
  E2EE_UNKNOWN = 0,
  E2EE_MSG = 1,
  NE2EE_SELF = 2,
  NE2EE_OTHER = 3,
  UNRECOGNIZED = -1,
}

export function privacySystemMessageFromJSON(object: any): PrivacySystemMessage {
  switch (object) {
    case 0:
    case "E2EE_UNKNOWN":
      return PrivacySystemMessage.E2EE_UNKNOWN;
    case 1:
    case "E2EE_MSG":
      return PrivacySystemMessage.E2EE_MSG;
    case 2:
    case "NE2EE_SELF":
      return PrivacySystemMessage.NE2EE_SELF;
    case 3:
    case "NE2EE_OTHER":
      return PrivacySystemMessage.NE2EE_OTHER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PrivacySystemMessage.UNRECOGNIZED;
  }
}

export function privacySystemMessageToJSON(object: PrivacySystemMessage): string {
  switch (object) {
    case PrivacySystemMessage.E2EE_UNKNOWN:
      return "E2EE_UNKNOWN";
    case PrivacySystemMessage.E2EE_MSG:
      return "E2EE_MSG";
    case PrivacySystemMessage.NE2EE_SELF:
      return "NE2EE_SELF";
    case PrivacySystemMessage.NE2EE_OTHER:
      return "NE2EE_OTHER";
    case PrivacySystemMessage.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ADVDeviceIdentity {
  rawId?: number | undefined;
  timestamp?: number | undefined;
  keyIndex?: number | undefined;
  accountType?: ADVEncryptionType | undefined;
  deviceType?: ADVEncryptionType | undefined;
}

export interface ADVKeyIndexList {
  rawId?: number | undefined;
  timestamp?: number | undefined;
  currentIndex?: number | undefined;
  validIndexes: number[];
  accountType?: ADVEncryptionType | undefined;
}

export interface ADVSignedDeviceIdentity {
  details?: Uint8Array | undefined;
  accountSignatureKey?: Uint8Array | undefined;
  accountSignature?: Uint8Array | undefined;
  deviceSignature?: Uint8Array | undefined;
}

export interface ADVSignedDeviceIdentityHMAC {
  details?: Uint8Array | undefined;
  hmac?: Uint8Array | undefined;
  accountType?: ADVEncryptionType | undefined;
}

export interface ADVSignedKeyIndexList {
  details?: Uint8Array | undefined;
  accountSignature?: Uint8Array | undefined;
  accountSignatureKey?: Uint8Array | undefined;
}

export interface AIQueryFanout {
  messageKey?: MessageKey | undefined;
  message?: Message | undefined;
  timestamp?: number | undefined;
}

export interface AIRichResponseMessage {
  messageType?: AIRichResponseMessage_AIRichResponseMessageType | undefined;
  submessages: AIRichResponseMessage_AIRichResponseSubMessage[];
  unifiedResponse?: AIRichResponseMessage_AIRichResponseUnifiedResponse | undefined;
}

export enum AIRichResponseMessage_AIRichResponseMessageType {
  AI_RICH_RESPONSE_TYPE_UNKNOWN = 0,
  AI_RICH_RESPONSE_TYPE_STANDARD = 1,
  UNRECOGNIZED = -1,
}

export function aIRichResponseMessage_AIRichResponseMessageTypeFromJSON(
  object: any,
): AIRichResponseMessage_AIRichResponseMessageType {
  switch (object) {
    case 0:
    case "AI_RICH_RESPONSE_TYPE_UNKNOWN":
      return AIRichResponseMessage_AIRichResponseMessageType.AI_RICH_RESPONSE_TYPE_UNKNOWN;
    case 1:
    case "AI_RICH_RESPONSE_TYPE_STANDARD":
      return AIRichResponseMessage_AIRichResponseMessageType.AI_RICH_RESPONSE_TYPE_STANDARD;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AIRichResponseMessage_AIRichResponseMessageType.UNRECOGNIZED;
  }
}

export function aIRichResponseMessage_AIRichResponseMessageTypeToJSON(
  object: AIRichResponseMessage_AIRichResponseMessageType,
): string {
  switch (object) {
    case AIRichResponseMessage_AIRichResponseMessageType.AI_RICH_RESPONSE_TYPE_UNKNOWN:
      return "AI_RICH_RESPONSE_TYPE_UNKNOWN";
    case AIRichResponseMessage_AIRichResponseMessageType.AI_RICH_RESPONSE_TYPE_STANDARD:
      return "AI_RICH_RESPONSE_TYPE_STANDARD";
    case AIRichResponseMessage_AIRichResponseMessageType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum AIRichResponseMessage_AIRichResponseSubMessageType {
  AI_RICH_RESPONSE_UNKNOWN = 0,
  AI_RICH_RESPONSE_GRID_IMAGE = 1,
  AI_RICH_RESPONSE_TEXT = 2,
  AI_RICH_RESPONSE_INLINE_IMAGE = 3,
  AI_RICH_RESPONSE_TABLE = 4,
  AI_RICH_RESPONSE_CODE = 5,
  AI_RICH_RESPONSE_DYNAMIC = 6,
  AI_RICH_RESPONSE_MAP = 7,
  AI_RICH_RESPONSE_LATEX = 8,
  AI_RICH_RESPONSE_CONTENT_ITEMS = 9,
  UNRECOGNIZED = -1,
}

export function aIRichResponseMessage_AIRichResponseSubMessageTypeFromJSON(
  object: any,
): AIRichResponseMessage_AIRichResponseSubMessageType {
  switch (object) {
    case 0:
    case "AI_RICH_RESPONSE_UNKNOWN":
      return AIRichResponseMessage_AIRichResponseSubMessageType.AI_RICH_RESPONSE_UNKNOWN;
    case 1:
    case "AI_RICH_RESPONSE_GRID_IMAGE":
      return AIRichResponseMessage_AIRichResponseSubMessageType.AI_RICH_RESPONSE_GRID_IMAGE;
    case 2:
    case "AI_RICH_RESPONSE_TEXT":
      return AIRichResponseMessage_AIRichResponseSubMessageType.AI_RICH_RESPONSE_TEXT;
    case 3:
    case "AI_RICH_RESPONSE_INLINE_IMAGE":
      return AIRichResponseMessage_AIRichResponseSubMessageType.AI_RICH_RESPONSE_INLINE_IMAGE;
    case 4:
    case "AI_RICH_RESPONSE_TABLE":
      return AIRichResponseMessage_AIRichResponseSubMessageType.AI_RICH_RESPONSE_TABLE;
    case 5:
    case "AI_RICH_RESPONSE_CODE":
      return AIRichResponseMessage_AIRichResponseSubMessageType.AI_RICH_RESPONSE_CODE;
    case 6:
    case "AI_RICH_RESPONSE_DYNAMIC":
      return AIRichResponseMessage_AIRichResponseSubMessageType.AI_RICH_RESPONSE_DYNAMIC;
    case 7:
    case "AI_RICH_RESPONSE_MAP":
      return AIRichResponseMessage_AIRichResponseSubMessageType.AI_RICH_RESPONSE_MAP;
    case 8:
    case "AI_RICH_RESPONSE_LATEX":
      return AIRichResponseMessage_AIRichResponseSubMessageType.AI_RICH_RESPONSE_LATEX;
    case 9:
    case "AI_RICH_RESPONSE_CONTENT_ITEMS":
      return AIRichResponseMessage_AIRichResponseSubMessageType.AI_RICH_RESPONSE_CONTENT_ITEMS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AIRichResponseMessage_AIRichResponseSubMessageType.UNRECOGNIZED;
  }
}

export function aIRichResponseMessage_AIRichResponseSubMessageTypeToJSON(
  object: AIRichResponseMessage_AIRichResponseSubMessageType,
): string {
  switch (object) {
    case AIRichResponseMessage_AIRichResponseSubMessageType.AI_RICH_RESPONSE_UNKNOWN:
      return "AI_RICH_RESPONSE_UNKNOWN";
    case AIRichResponseMessage_AIRichResponseSubMessageType.AI_RICH_RESPONSE_GRID_IMAGE:
      return "AI_RICH_RESPONSE_GRID_IMAGE";
    case AIRichResponseMessage_AIRichResponseSubMessageType.AI_RICH_RESPONSE_TEXT:
      return "AI_RICH_RESPONSE_TEXT";
    case AIRichResponseMessage_AIRichResponseSubMessageType.AI_RICH_RESPONSE_INLINE_IMAGE:
      return "AI_RICH_RESPONSE_INLINE_IMAGE";
    case AIRichResponseMessage_AIRichResponseSubMessageType.AI_RICH_RESPONSE_TABLE:
      return "AI_RICH_RESPONSE_TABLE";
    case AIRichResponseMessage_AIRichResponseSubMessageType.AI_RICH_RESPONSE_CODE:
      return "AI_RICH_RESPONSE_CODE";
    case AIRichResponseMessage_AIRichResponseSubMessageType.AI_RICH_RESPONSE_DYNAMIC:
      return "AI_RICH_RESPONSE_DYNAMIC";
    case AIRichResponseMessage_AIRichResponseSubMessageType.AI_RICH_RESPONSE_MAP:
      return "AI_RICH_RESPONSE_MAP";
    case AIRichResponseMessage_AIRichResponseSubMessageType.AI_RICH_RESPONSE_LATEX:
      return "AI_RICH_RESPONSE_LATEX";
    case AIRichResponseMessage_AIRichResponseSubMessageType.AI_RICH_RESPONSE_CONTENT_ITEMS:
      return "AI_RICH_RESPONSE_CONTENT_ITEMS";
    case AIRichResponseMessage_AIRichResponseSubMessageType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface AIRichResponseMessage_AIRichResponseCodeMetadata {
  codeLanguage?: string | undefined;
  codeBlocks: AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeBlock[];
}

export enum AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeHighlightType {
  AI_RICH_RESPONSE_CODE_HIGHLIGHT_DEFAULT = 0,
  AI_RICH_RESPONSE_CODE_HIGHLIGHT_KEYWORD = 1,
  AI_RICH_RESPONSE_CODE_HIGHLIGHT_METHOD = 2,
  AI_RICH_RESPONSE_CODE_HIGHLIGHT_STRING = 3,
  AI_RICH_RESPONSE_CODE_HIGHLIGHT_NUMBER = 4,
  AI_RICH_RESPONSE_CODE_HIGHLIGHT_COMMENT = 5,
  UNRECOGNIZED = -1,
}

export function aIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeHighlightTypeFromJSON(
  object: any,
): AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeHighlightType {
  switch (object) {
    case 0:
    case "AI_RICH_RESPONSE_CODE_HIGHLIGHT_DEFAULT":
      return AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeHighlightType
        .AI_RICH_RESPONSE_CODE_HIGHLIGHT_DEFAULT;
    case 1:
    case "AI_RICH_RESPONSE_CODE_HIGHLIGHT_KEYWORD":
      return AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeHighlightType
        .AI_RICH_RESPONSE_CODE_HIGHLIGHT_KEYWORD;
    case 2:
    case "AI_RICH_RESPONSE_CODE_HIGHLIGHT_METHOD":
      return AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeHighlightType
        .AI_RICH_RESPONSE_CODE_HIGHLIGHT_METHOD;
    case 3:
    case "AI_RICH_RESPONSE_CODE_HIGHLIGHT_STRING":
      return AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeHighlightType
        .AI_RICH_RESPONSE_CODE_HIGHLIGHT_STRING;
    case 4:
    case "AI_RICH_RESPONSE_CODE_HIGHLIGHT_NUMBER":
      return AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeHighlightType
        .AI_RICH_RESPONSE_CODE_HIGHLIGHT_NUMBER;
    case 5:
    case "AI_RICH_RESPONSE_CODE_HIGHLIGHT_COMMENT":
      return AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeHighlightType
        .AI_RICH_RESPONSE_CODE_HIGHLIGHT_COMMENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeHighlightType.UNRECOGNIZED;
  }
}

export function aIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeHighlightTypeToJSON(
  object: AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeHighlightType,
): string {
  switch (object) {
    case AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeHighlightType
      .AI_RICH_RESPONSE_CODE_HIGHLIGHT_DEFAULT:
      return "AI_RICH_RESPONSE_CODE_HIGHLIGHT_DEFAULT";
    case AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeHighlightType
      .AI_RICH_RESPONSE_CODE_HIGHLIGHT_KEYWORD:
      return "AI_RICH_RESPONSE_CODE_HIGHLIGHT_KEYWORD";
    case AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeHighlightType
      .AI_RICH_RESPONSE_CODE_HIGHLIGHT_METHOD:
      return "AI_RICH_RESPONSE_CODE_HIGHLIGHT_METHOD";
    case AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeHighlightType
      .AI_RICH_RESPONSE_CODE_HIGHLIGHT_STRING:
      return "AI_RICH_RESPONSE_CODE_HIGHLIGHT_STRING";
    case AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeHighlightType
      .AI_RICH_RESPONSE_CODE_HIGHLIGHT_NUMBER:
      return "AI_RICH_RESPONSE_CODE_HIGHLIGHT_NUMBER";
    case AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeHighlightType
      .AI_RICH_RESPONSE_CODE_HIGHLIGHT_COMMENT:
      return "AI_RICH_RESPONSE_CODE_HIGHLIGHT_COMMENT";
    case AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeHighlightType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeBlock {
  highlightType?: AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeHighlightType | undefined;
  codeContent?: string | undefined;
}

export interface AIRichResponseMessage_AIRichResponseContentItemsMetadata {
  itemsMetadata: AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseContentItemMetadata[];
  contentType?: AIRichResponseMessage_AIRichResponseContentItemsMetadata_ContentType | undefined;
}

export enum AIRichResponseMessage_AIRichResponseContentItemsMetadata_ContentType {
  DEFAULT = 0,
  CAROUSEL = 1,
  UNRECOGNIZED = -1,
}

export function aIRichResponseMessage_AIRichResponseContentItemsMetadata_ContentTypeFromJSON(
  object: any,
): AIRichResponseMessage_AIRichResponseContentItemsMetadata_ContentType {
  switch (object) {
    case 0:
    case "DEFAULT":
      return AIRichResponseMessage_AIRichResponseContentItemsMetadata_ContentType.DEFAULT;
    case 1:
    case "CAROUSEL":
      return AIRichResponseMessage_AIRichResponseContentItemsMetadata_ContentType.CAROUSEL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AIRichResponseMessage_AIRichResponseContentItemsMetadata_ContentType.UNRECOGNIZED;
  }
}

export function aIRichResponseMessage_AIRichResponseContentItemsMetadata_ContentTypeToJSON(
  object: AIRichResponseMessage_AIRichResponseContentItemsMetadata_ContentType,
): string {
  switch (object) {
    case AIRichResponseMessage_AIRichResponseContentItemsMetadata_ContentType.DEFAULT:
      return "DEFAULT";
    case AIRichResponseMessage_AIRichResponseContentItemsMetadata_ContentType.CAROUSEL:
      return "CAROUSEL";
    case AIRichResponseMessage_AIRichResponseContentItemsMetadata_ContentType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseContentItemMetadata {
  reelItem?: AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseReelItem | undefined;
}

export interface AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseReelItem {
  title?: string | undefined;
  profileIconUrl?: string | undefined;
  thumbnailUrl?: string | undefined;
  videoUrl?: string | undefined;
}

export interface AIRichResponseMessage_AIRichResponseDynamicMetadata {
  type?: AIRichResponseMessage_AIRichResponseDynamicMetadata_AIRichResponseDynamicMetadataType | undefined;
  version?: number | undefined;
  url?: string | undefined;
  loopCount?: number | undefined;
}

export enum AIRichResponseMessage_AIRichResponseDynamicMetadata_AIRichResponseDynamicMetadataType {
  AI_RICH_RESPONSE_DYNAMIC_METADATA_TYPE_UNKNOWN = 0,
  AI_RICH_RESPONSE_DYNAMIC_METADATA_TYPE_IMAGE = 1,
  AI_RICH_RESPONSE_DYNAMIC_METADATA_TYPE_GIF = 2,
  UNRECOGNIZED = -1,
}

export function aIRichResponseMessage_AIRichResponseDynamicMetadata_AIRichResponseDynamicMetadataTypeFromJSON(
  object: any,
): AIRichResponseMessage_AIRichResponseDynamicMetadata_AIRichResponseDynamicMetadataType {
  switch (object) {
    case 0:
    case "AI_RICH_RESPONSE_DYNAMIC_METADATA_TYPE_UNKNOWN":
      return AIRichResponseMessage_AIRichResponseDynamicMetadata_AIRichResponseDynamicMetadataType
        .AI_RICH_RESPONSE_DYNAMIC_METADATA_TYPE_UNKNOWN;
    case 1:
    case "AI_RICH_RESPONSE_DYNAMIC_METADATA_TYPE_IMAGE":
      return AIRichResponseMessage_AIRichResponseDynamicMetadata_AIRichResponseDynamicMetadataType
        .AI_RICH_RESPONSE_DYNAMIC_METADATA_TYPE_IMAGE;
    case 2:
    case "AI_RICH_RESPONSE_DYNAMIC_METADATA_TYPE_GIF":
      return AIRichResponseMessage_AIRichResponseDynamicMetadata_AIRichResponseDynamicMetadataType
        .AI_RICH_RESPONSE_DYNAMIC_METADATA_TYPE_GIF;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AIRichResponseMessage_AIRichResponseDynamicMetadata_AIRichResponseDynamicMetadataType.UNRECOGNIZED;
  }
}

export function aIRichResponseMessage_AIRichResponseDynamicMetadata_AIRichResponseDynamicMetadataTypeToJSON(
  object: AIRichResponseMessage_AIRichResponseDynamicMetadata_AIRichResponseDynamicMetadataType,
): string {
  switch (object) {
    case AIRichResponseMessage_AIRichResponseDynamicMetadata_AIRichResponseDynamicMetadataType
      .AI_RICH_RESPONSE_DYNAMIC_METADATA_TYPE_UNKNOWN:
      return "AI_RICH_RESPONSE_DYNAMIC_METADATA_TYPE_UNKNOWN";
    case AIRichResponseMessage_AIRichResponseDynamicMetadata_AIRichResponseDynamicMetadataType
      .AI_RICH_RESPONSE_DYNAMIC_METADATA_TYPE_IMAGE:
      return "AI_RICH_RESPONSE_DYNAMIC_METADATA_TYPE_IMAGE";
    case AIRichResponseMessage_AIRichResponseDynamicMetadata_AIRichResponseDynamicMetadataType
      .AI_RICH_RESPONSE_DYNAMIC_METADATA_TYPE_GIF:
      return "AI_RICH_RESPONSE_DYNAMIC_METADATA_TYPE_GIF";
    case AIRichResponseMessage_AIRichResponseDynamicMetadata_AIRichResponseDynamicMetadataType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface AIRichResponseMessage_AIRichResponseGridImageMetadata {
  gridImageUrl?: AIRichResponseMessage_AIRichResponseImageURL | undefined;
  imageUrls: AIRichResponseMessage_AIRichResponseImageURL[];
}

export interface AIRichResponseMessage_AIRichResponseImageURL {
  imagePreviewUrl?: string | undefined;
  imageHighResUrl?: string | undefined;
  sourceUrl?: string | undefined;
}

export interface AIRichResponseMessage_AIRichResponseInlineImageMetadata {
  imageUrl?: AIRichResponseMessage_AIRichResponseImageURL | undefined;
  imageText?: string | undefined;
  alignment?: AIRichResponseMessage_AIRichResponseInlineImageMetadata_AIRichResponseImageAlignment | undefined;
  tapLinkUrl?: string | undefined;
}

export enum AIRichResponseMessage_AIRichResponseInlineImageMetadata_AIRichResponseImageAlignment {
  AI_RICH_RESPONSE_IMAGE_LAYOUT_LEADING_ALIGNED = 0,
  AI_RICH_RESPONSE_IMAGE_LAYOUT_TRAILING_ALIGNED = 1,
  AI_RICH_RESPONSE_IMAGE_LAYOUT_CENTER_ALIGNED = 2,
  UNRECOGNIZED = -1,
}

export function aIRichResponseMessage_AIRichResponseInlineImageMetadata_AIRichResponseImageAlignmentFromJSON(
  object: any,
): AIRichResponseMessage_AIRichResponseInlineImageMetadata_AIRichResponseImageAlignment {
  switch (object) {
    case 0:
    case "AI_RICH_RESPONSE_IMAGE_LAYOUT_LEADING_ALIGNED":
      return AIRichResponseMessage_AIRichResponseInlineImageMetadata_AIRichResponseImageAlignment
        .AI_RICH_RESPONSE_IMAGE_LAYOUT_LEADING_ALIGNED;
    case 1:
    case "AI_RICH_RESPONSE_IMAGE_LAYOUT_TRAILING_ALIGNED":
      return AIRichResponseMessage_AIRichResponseInlineImageMetadata_AIRichResponseImageAlignment
        .AI_RICH_RESPONSE_IMAGE_LAYOUT_TRAILING_ALIGNED;
    case 2:
    case "AI_RICH_RESPONSE_IMAGE_LAYOUT_CENTER_ALIGNED":
      return AIRichResponseMessage_AIRichResponseInlineImageMetadata_AIRichResponseImageAlignment
        .AI_RICH_RESPONSE_IMAGE_LAYOUT_CENTER_ALIGNED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AIRichResponseMessage_AIRichResponseInlineImageMetadata_AIRichResponseImageAlignment.UNRECOGNIZED;
  }
}

export function aIRichResponseMessage_AIRichResponseInlineImageMetadata_AIRichResponseImageAlignmentToJSON(
  object: AIRichResponseMessage_AIRichResponseInlineImageMetadata_AIRichResponseImageAlignment,
): string {
  switch (object) {
    case AIRichResponseMessage_AIRichResponseInlineImageMetadata_AIRichResponseImageAlignment
      .AI_RICH_RESPONSE_IMAGE_LAYOUT_LEADING_ALIGNED:
      return "AI_RICH_RESPONSE_IMAGE_LAYOUT_LEADING_ALIGNED";
    case AIRichResponseMessage_AIRichResponseInlineImageMetadata_AIRichResponseImageAlignment
      .AI_RICH_RESPONSE_IMAGE_LAYOUT_TRAILING_ALIGNED:
      return "AI_RICH_RESPONSE_IMAGE_LAYOUT_TRAILING_ALIGNED";
    case AIRichResponseMessage_AIRichResponseInlineImageMetadata_AIRichResponseImageAlignment
      .AI_RICH_RESPONSE_IMAGE_LAYOUT_CENTER_ALIGNED:
      return "AI_RICH_RESPONSE_IMAGE_LAYOUT_CENTER_ALIGNED";
    case AIRichResponseMessage_AIRichResponseInlineImageMetadata_AIRichResponseImageAlignment.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface AIRichResponseMessage_AIRichResponseLatexMetadata {
  text?: string | undefined;
  expressions: AIRichResponseMessage_AIRichResponseLatexMetadata_AIRichResponseLatexExpression[];
}

export interface AIRichResponseMessage_AIRichResponseLatexMetadata_AIRichResponseLatexExpression {
  latexExpression?: string | undefined;
  url?: string | undefined;
  width?: number | undefined;
  height?: number | undefined;
  fontHeight?: number | undefined;
  imageTopPadding?: number | undefined;
  imageLeadingPadding?: number | undefined;
  imageBottomPadding?: number | undefined;
  imageTrailingPadding?: number | undefined;
}

export interface AIRichResponseMessage_AIRichResponseMapMetadata {
  centerLatitude?: number | undefined;
  centerLongitude?: number | undefined;
  latitudeDelta?: number | undefined;
  longitudeDelta?: number | undefined;
  annotations: AIRichResponseMessage_AIRichResponseMapMetadata_AIRichResponseMapAnnotation[];
  showInfoList?: boolean | undefined;
}

export interface AIRichResponseMessage_AIRichResponseMapMetadata_AIRichResponseMapAnnotation {
  annotationNumber?: number | undefined;
  latitude?: number | undefined;
  longitude?: number | undefined;
  title?: string | undefined;
  body?: string | undefined;
}

export interface AIRichResponseMessage_AIRichResponseSubMessage {
  messageType?: AIRichResponseMessage_AIRichResponseSubMessageType | undefined;
  gridImageMetadata?: AIRichResponseMessage_AIRichResponseGridImageMetadata | undefined;
  messageText?: string | undefined;
  imageMetadata?: AIRichResponseMessage_AIRichResponseInlineImageMetadata | undefined;
  codeMetadata?: AIRichResponseMessage_AIRichResponseCodeMetadata | undefined;
  tableMetadata?: AIRichResponseMessage_AIRichResponseTableMetadata | undefined;
  dynamicMetadata?: AIRichResponseMessage_AIRichResponseDynamicMetadata | undefined;
  latexMetadata?: AIRichResponseMessage_AIRichResponseLatexMetadata | undefined;
  mapMetadata?: AIRichResponseMessage_AIRichResponseMapMetadata | undefined;
  contentItemsMetadata?: AIRichResponseMessage_AIRichResponseContentItemsMetadata | undefined;
}

export interface AIRichResponseMessage_AIRichResponseTableMetadata {
  rows: AIRichResponseMessage_AIRichResponseTableMetadata_AIRichResponseTableRow[];
}

export interface AIRichResponseMessage_AIRichResponseTableMetadata_AIRichResponseTableRow {
  items: string[];
  isHeading?: boolean | undefined;
}

export interface AIRichResponseMessage_AIRichResponseUnifiedResponse {
  data?: Uint8Array | undefined;
}

export interface Account {
  lid?: string | undefined;
  username?: string | undefined;
  countryCode?: string | undefined;
  isUsernameDeleted?: boolean | undefined;
}

export interface ActionLink {
  url?: string | undefined;
  buttonTitle?: string | undefined;
}

export interface AutoDownloadSettings {
  downloadImages?: boolean | undefined;
  downloadAudio?: boolean | undefined;
  downloadVideo?: boolean | undefined;
  downloadDocuments?: boolean | undefined;
}

export interface AvatarUserSettings {
  fbid?: string | undefined;
  password?: string | undefined;
}

export interface BizAccountLinkInfo {
  whatsappBizAcctFbid?: number | undefined;
  whatsappAcctNumber?: string | undefined;
  issueTime?: number | undefined;
  hostStorage?: BizAccountLinkInfo_HostStorageType | undefined;
  accountType?: BizAccountLinkInfo_AccountType | undefined;
}

export enum BizAccountLinkInfo_AccountType {
  ENTERPRISE = 0,
  UNRECOGNIZED = -1,
}

export function bizAccountLinkInfo_AccountTypeFromJSON(object: any): BizAccountLinkInfo_AccountType {
  switch (object) {
    case 0:
    case "ENTERPRISE":
      return BizAccountLinkInfo_AccountType.ENTERPRISE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BizAccountLinkInfo_AccountType.UNRECOGNIZED;
  }
}

export function bizAccountLinkInfo_AccountTypeToJSON(object: BizAccountLinkInfo_AccountType): string {
  switch (object) {
    case BizAccountLinkInfo_AccountType.ENTERPRISE:
      return "ENTERPRISE";
    case BizAccountLinkInfo_AccountType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BizAccountLinkInfo_HostStorageType {
  ON_PREMISE = 0,
  FACEBOOK = 1,
  UNRECOGNIZED = -1,
}

export function bizAccountLinkInfo_HostStorageTypeFromJSON(object: any): BizAccountLinkInfo_HostStorageType {
  switch (object) {
    case 0:
    case "ON_PREMISE":
      return BizAccountLinkInfo_HostStorageType.ON_PREMISE;
    case 1:
    case "FACEBOOK":
      return BizAccountLinkInfo_HostStorageType.FACEBOOK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BizAccountLinkInfo_HostStorageType.UNRECOGNIZED;
  }
}

export function bizAccountLinkInfo_HostStorageTypeToJSON(object: BizAccountLinkInfo_HostStorageType): string {
  switch (object) {
    case BizAccountLinkInfo_HostStorageType.ON_PREMISE:
      return "ON_PREMISE";
    case BizAccountLinkInfo_HostStorageType.FACEBOOK:
      return "FACEBOOK";
    case BizAccountLinkInfo_HostStorageType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BizAccountPayload {
  vnameCert?: VerifiedNameCertificate | undefined;
  bizAcctLinkInfo?: Uint8Array | undefined;
}

export interface BizIdentityInfo {
  vlevel?: BizIdentityInfo_VerifiedLevelValue | undefined;
  vnameCert?: VerifiedNameCertificate | undefined;
  signed?: boolean | undefined;
  revoked?: boolean | undefined;
  hostStorage?: BizIdentityInfo_HostStorageType | undefined;
  actualActors?: BizIdentityInfo_ActualActorsType | undefined;
  privacyModeTs?: number | undefined;
  featureControls?: number | undefined;
}

export enum BizIdentityInfo_ActualActorsType {
  SELF = 0,
  BSP = 1,
  UNRECOGNIZED = -1,
}

export function bizIdentityInfo_ActualActorsTypeFromJSON(object: any): BizIdentityInfo_ActualActorsType {
  switch (object) {
    case 0:
    case "SELF":
      return BizIdentityInfo_ActualActorsType.SELF;
    case 1:
    case "BSP":
      return BizIdentityInfo_ActualActorsType.BSP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BizIdentityInfo_ActualActorsType.UNRECOGNIZED;
  }
}

export function bizIdentityInfo_ActualActorsTypeToJSON(object: BizIdentityInfo_ActualActorsType): string {
  switch (object) {
    case BizIdentityInfo_ActualActorsType.SELF:
      return "SELF";
    case BizIdentityInfo_ActualActorsType.BSP:
      return "BSP";
    case BizIdentityInfo_ActualActorsType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BizIdentityInfo_HostStorageType {
  ON_PREMISE = 0,
  FACEBOOK = 1,
  UNRECOGNIZED = -1,
}

export function bizIdentityInfo_HostStorageTypeFromJSON(object: any): BizIdentityInfo_HostStorageType {
  switch (object) {
    case 0:
    case "ON_PREMISE":
      return BizIdentityInfo_HostStorageType.ON_PREMISE;
    case 1:
    case "FACEBOOK":
      return BizIdentityInfo_HostStorageType.FACEBOOK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BizIdentityInfo_HostStorageType.UNRECOGNIZED;
  }
}

export function bizIdentityInfo_HostStorageTypeToJSON(object: BizIdentityInfo_HostStorageType): string {
  switch (object) {
    case BizIdentityInfo_HostStorageType.ON_PREMISE:
      return "ON_PREMISE";
    case BizIdentityInfo_HostStorageType.FACEBOOK:
      return "FACEBOOK";
    case BizIdentityInfo_HostStorageType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BizIdentityInfo_VerifiedLevelValue {
  UNKNOWN = 0,
  LOW = 1,
  HIGH = 2,
  UNRECOGNIZED = -1,
}

export function bizIdentityInfo_VerifiedLevelValueFromJSON(object: any): BizIdentityInfo_VerifiedLevelValue {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return BizIdentityInfo_VerifiedLevelValue.UNKNOWN;
    case 1:
    case "LOW":
      return BizIdentityInfo_VerifiedLevelValue.LOW;
    case 2:
    case "HIGH":
      return BizIdentityInfo_VerifiedLevelValue.HIGH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BizIdentityInfo_VerifiedLevelValue.UNRECOGNIZED;
  }
}

export function bizIdentityInfo_VerifiedLevelValueToJSON(object: BizIdentityInfo_VerifiedLevelValue): string {
  switch (object) {
    case BizIdentityInfo_VerifiedLevelValue.UNKNOWN:
      return "UNKNOWN";
    case BizIdentityInfo_VerifiedLevelValue.LOW:
      return "LOW";
    case BizIdentityInfo_VerifiedLevelValue.HIGH:
      return "HIGH";
    case BizIdentityInfo_VerifiedLevelValue.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BotAgeCollectionMetadata {
  ageCollectionEligible?: boolean | undefined;
  shouldTriggerAgeCollectionOnClient?: boolean | undefined;
}

export interface BotAvatarMetadata {
  sentiment?: number | undefined;
  behaviorGraph?: string | undefined;
  action?: number | undefined;
  intensity?: number | undefined;
  wordCount?: number | undefined;
}

export interface BotCapabilityMetadata {
  capabilities: BotCapabilityMetadata_BotCapabilityType[];
}

export enum BotCapabilityMetadata_BotCapabilityType {
  UNKNOWN = 0,
  PROGRESS_INDICATOR = 1,
  RICH_RESPONSE_HEADING = 2,
  RICH_RESPONSE_NESTED_LIST = 3,
  AI_MEMORY = 4,
  RICH_RESPONSE_THREAD_SURFING = 5,
  RICH_RESPONSE_TABLE = 6,
  RICH_RESPONSE_CODE = 7,
  RICH_RESPONSE_STRUCTURED_RESPONSE = 8,
  RICH_RESPONSE_INLINE_IMAGE = 9,
  WA_IG_1P_PLUGIN_RANKING_CONTROL = 10,
  WA_IG_1P_PLUGIN_RANKING_UPDATE_1 = 11,
  WA_IG_1P_PLUGIN_RANKING_UPDATE_2 = 12,
  WA_IG_1P_PLUGIN_RANKING_UPDATE_3 = 13,
  WA_IG_1P_PLUGIN_RANKING_UPDATE_4 = 14,
  WA_IG_1P_PLUGIN_RANKING_UPDATE_5 = 15,
  WA_IG_1P_PLUGIN_RANKING_UPDATE_6 = 16,
  WA_IG_1P_PLUGIN_RANKING_UPDATE_7 = 17,
  WA_IG_1P_PLUGIN_RANKING_UPDATE_8 = 18,
  WA_IG_1P_PLUGIN_RANKING_UPDATE_9 = 19,
  WA_IG_1P_PLUGIN_RANKING_UPDATE_10 = 20,
  RICH_RESPONSE_SUB_HEADING = 21,
  RICH_RESPONSE_GRID_IMAGE = 22,
  AI_STUDIO_UGC_MEMORY = 23,
  RICH_RESPONSE_LATEX = 24,
  RICH_RESPONSE_MAPS = 25,
  RICH_RESPONSE_INLINE_REELS = 26,
  AGENTIC_PLANNING = 27,
  ACCOUNT_LINKING = 28,
  STREAMING_DISAGGREGATION = 29,
  RICH_RESPONSE_GRID_IMAGE_3P = 30,
  RICH_RESPONSE_LATEX_INLINE = 31,
  QUERY_PLAN = 32,
  PROACTIVE_MESSAGE = 33,
  RICH_RESPONSE_UNIFIED_RESPONSE = 34,
  PROMOTION_MESSAGE = 35,
  UNRECOGNIZED = -1,
}

export function botCapabilityMetadata_BotCapabilityTypeFromJSON(object: any): BotCapabilityMetadata_BotCapabilityType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return BotCapabilityMetadata_BotCapabilityType.UNKNOWN;
    case 1:
    case "PROGRESS_INDICATOR":
      return BotCapabilityMetadata_BotCapabilityType.PROGRESS_INDICATOR;
    case 2:
    case "RICH_RESPONSE_HEADING":
      return BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_HEADING;
    case 3:
    case "RICH_RESPONSE_NESTED_LIST":
      return BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_NESTED_LIST;
    case 4:
    case "AI_MEMORY":
      return BotCapabilityMetadata_BotCapabilityType.AI_MEMORY;
    case 5:
    case "RICH_RESPONSE_THREAD_SURFING":
      return BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_THREAD_SURFING;
    case 6:
    case "RICH_RESPONSE_TABLE":
      return BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_TABLE;
    case 7:
    case "RICH_RESPONSE_CODE":
      return BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_CODE;
    case 8:
    case "RICH_RESPONSE_STRUCTURED_RESPONSE":
      return BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_STRUCTURED_RESPONSE;
    case 9:
    case "RICH_RESPONSE_INLINE_IMAGE":
      return BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_INLINE_IMAGE;
    case 10:
    case "WA_IG_1P_PLUGIN_RANKING_CONTROL":
      return BotCapabilityMetadata_BotCapabilityType.WA_IG_1P_PLUGIN_RANKING_CONTROL;
    case 11:
    case "WA_IG_1P_PLUGIN_RANKING_UPDATE_1":
      return BotCapabilityMetadata_BotCapabilityType.WA_IG_1P_PLUGIN_RANKING_UPDATE_1;
    case 12:
    case "WA_IG_1P_PLUGIN_RANKING_UPDATE_2":
      return BotCapabilityMetadata_BotCapabilityType.WA_IG_1P_PLUGIN_RANKING_UPDATE_2;
    case 13:
    case "WA_IG_1P_PLUGIN_RANKING_UPDATE_3":
      return BotCapabilityMetadata_BotCapabilityType.WA_IG_1P_PLUGIN_RANKING_UPDATE_3;
    case 14:
    case "WA_IG_1P_PLUGIN_RANKING_UPDATE_4":
      return BotCapabilityMetadata_BotCapabilityType.WA_IG_1P_PLUGIN_RANKING_UPDATE_4;
    case 15:
    case "WA_IG_1P_PLUGIN_RANKING_UPDATE_5":
      return BotCapabilityMetadata_BotCapabilityType.WA_IG_1P_PLUGIN_RANKING_UPDATE_5;
    case 16:
    case "WA_IG_1P_PLUGIN_RANKING_UPDATE_6":
      return BotCapabilityMetadata_BotCapabilityType.WA_IG_1P_PLUGIN_RANKING_UPDATE_6;
    case 17:
    case "WA_IG_1P_PLUGIN_RANKING_UPDATE_7":
      return BotCapabilityMetadata_BotCapabilityType.WA_IG_1P_PLUGIN_RANKING_UPDATE_7;
    case 18:
    case "WA_IG_1P_PLUGIN_RANKING_UPDATE_8":
      return BotCapabilityMetadata_BotCapabilityType.WA_IG_1P_PLUGIN_RANKING_UPDATE_8;
    case 19:
    case "WA_IG_1P_PLUGIN_RANKING_UPDATE_9":
      return BotCapabilityMetadata_BotCapabilityType.WA_IG_1P_PLUGIN_RANKING_UPDATE_9;
    case 20:
    case "WA_IG_1P_PLUGIN_RANKING_UPDATE_10":
      return BotCapabilityMetadata_BotCapabilityType.WA_IG_1P_PLUGIN_RANKING_UPDATE_10;
    case 21:
    case "RICH_RESPONSE_SUB_HEADING":
      return BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_SUB_HEADING;
    case 22:
    case "RICH_RESPONSE_GRID_IMAGE":
      return BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_GRID_IMAGE;
    case 23:
    case "AI_STUDIO_UGC_MEMORY":
      return BotCapabilityMetadata_BotCapabilityType.AI_STUDIO_UGC_MEMORY;
    case 24:
    case "RICH_RESPONSE_LATEX":
      return BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_LATEX;
    case 25:
    case "RICH_RESPONSE_MAPS":
      return BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_MAPS;
    case 26:
    case "RICH_RESPONSE_INLINE_REELS":
      return BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_INLINE_REELS;
    case 27:
    case "AGENTIC_PLANNING":
      return BotCapabilityMetadata_BotCapabilityType.AGENTIC_PLANNING;
    case 28:
    case "ACCOUNT_LINKING":
      return BotCapabilityMetadata_BotCapabilityType.ACCOUNT_LINKING;
    case 29:
    case "STREAMING_DISAGGREGATION":
      return BotCapabilityMetadata_BotCapabilityType.STREAMING_DISAGGREGATION;
    case 30:
    case "RICH_RESPONSE_GRID_IMAGE_3P":
      return BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_GRID_IMAGE_3P;
    case 31:
    case "RICH_RESPONSE_LATEX_INLINE":
      return BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_LATEX_INLINE;
    case 32:
    case "QUERY_PLAN":
      return BotCapabilityMetadata_BotCapabilityType.QUERY_PLAN;
    case 33:
    case "PROACTIVE_MESSAGE":
      return BotCapabilityMetadata_BotCapabilityType.PROACTIVE_MESSAGE;
    case 34:
    case "RICH_RESPONSE_UNIFIED_RESPONSE":
      return BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_UNIFIED_RESPONSE;
    case 35:
    case "PROMOTION_MESSAGE":
      return BotCapabilityMetadata_BotCapabilityType.PROMOTION_MESSAGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BotCapabilityMetadata_BotCapabilityType.UNRECOGNIZED;
  }
}

export function botCapabilityMetadata_BotCapabilityTypeToJSON(object: BotCapabilityMetadata_BotCapabilityType): string {
  switch (object) {
    case BotCapabilityMetadata_BotCapabilityType.UNKNOWN:
      return "UNKNOWN";
    case BotCapabilityMetadata_BotCapabilityType.PROGRESS_INDICATOR:
      return "PROGRESS_INDICATOR";
    case BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_HEADING:
      return "RICH_RESPONSE_HEADING";
    case BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_NESTED_LIST:
      return "RICH_RESPONSE_NESTED_LIST";
    case BotCapabilityMetadata_BotCapabilityType.AI_MEMORY:
      return "AI_MEMORY";
    case BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_THREAD_SURFING:
      return "RICH_RESPONSE_THREAD_SURFING";
    case BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_TABLE:
      return "RICH_RESPONSE_TABLE";
    case BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_CODE:
      return "RICH_RESPONSE_CODE";
    case BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_STRUCTURED_RESPONSE:
      return "RICH_RESPONSE_STRUCTURED_RESPONSE";
    case BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_INLINE_IMAGE:
      return "RICH_RESPONSE_INLINE_IMAGE";
    case BotCapabilityMetadata_BotCapabilityType.WA_IG_1P_PLUGIN_RANKING_CONTROL:
      return "WA_IG_1P_PLUGIN_RANKING_CONTROL";
    case BotCapabilityMetadata_BotCapabilityType.WA_IG_1P_PLUGIN_RANKING_UPDATE_1:
      return "WA_IG_1P_PLUGIN_RANKING_UPDATE_1";
    case BotCapabilityMetadata_BotCapabilityType.WA_IG_1P_PLUGIN_RANKING_UPDATE_2:
      return "WA_IG_1P_PLUGIN_RANKING_UPDATE_2";
    case BotCapabilityMetadata_BotCapabilityType.WA_IG_1P_PLUGIN_RANKING_UPDATE_3:
      return "WA_IG_1P_PLUGIN_RANKING_UPDATE_3";
    case BotCapabilityMetadata_BotCapabilityType.WA_IG_1P_PLUGIN_RANKING_UPDATE_4:
      return "WA_IG_1P_PLUGIN_RANKING_UPDATE_4";
    case BotCapabilityMetadata_BotCapabilityType.WA_IG_1P_PLUGIN_RANKING_UPDATE_5:
      return "WA_IG_1P_PLUGIN_RANKING_UPDATE_5";
    case BotCapabilityMetadata_BotCapabilityType.WA_IG_1P_PLUGIN_RANKING_UPDATE_6:
      return "WA_IG_1P_PLUGIN_RANKING_UPDATE_6";
    case BotCapabilityMetadata_BotCapabilityType.WA_IG_1P_PLUGIN_RANKING_UPDATE_7:
      return "WA_IG_1P_PLUGIN_RANKING_UPDATE_7";
    case BotCapabilityMetadata_BotCapabilityType.WA_IG_1P_PLUGIN_RANKING_UPDATE_8:
      return "WA_IG_1P_PLUGIN_RANKING_UPDATE_8";
    case BotCapabilityMetadata_BotCapabilityType.WA_IG_1P_PLUGIN_RANKING_UPDATE_9:
      return "WA_IG_1P_PLUGIN_RANKING_UPDATE_9";
    case BotCapabilityMetadata_BotCapabilityType.WA_IG_1P_PLUGIN_RANKING_UPDATE_10:
      return "WA_IG_1P_PLUGIN_RANKING_UPDATE_10";
    case BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_SUB_HEADING:
      return "RICH_RESPONSE_SUB_HEADING";
    case BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_GRID_IMAGE:
      return "RICH_RESPONSE_GRID_IMAGE";
    case BotCapabilityMetadata_BotCapabilityType.AI_STUDIO_UGC_MEMORY:
      return "AI_STUDIO_UGC_MEMORY";
    case BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_LATEX:
      return "RICH_RESPONSE_LATEX";
    case BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_MAPS:
      return "RICH_RESPONSE_MAPS";
    case BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_INLINE_REELS:
      return "RICH_RESPONSE_INLINE_REELS";
    case BotCapabilityMetadata_BotCapabilityType.AGENTIC_PLANNING:
      return "AGENTIC_PLANNING";
    case BotCapabilityMetadata_BotCapabilityType.ACCOUNT_LINKING:
      return "ACCOUNT_LINKING";
    case BotCapabilityMetadata_BotCapabilityType.STREAMING_DISAGGREGATION:
      return "STREAMING_DISAGGREGATION";
    case BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_GRID_IMAGE_3P:
      return "RICH_RESPONSE_GRID_IMAGE_3P";
    case BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_LATEX_INLINE:
      return "RICH_RESPONSE_LATEX_INLINE";
    case BotCapabilityMetadata_BotCapabilityType.QUERY_PLAN:
      return "QUERY_PLAN";
    case BotCapabilityMetadata_BotCapabilityType.PROACTIVE_MESSAGE:
      return "PROACTIVE_MESSAGE";
    case BotCapabilityMetadata_BotCapabilityType.RICH_RESPONSE_UNIFIED_RESPONSE:
      return "RICH_RESPONSE_UNIFIED_RESPONSE";
    case BotCapabilityMetadata_BotCapabilityType.PROMOTION_MESSAGE:
      return "PROMOTION_MESSAGE";
    case BotCapabilityMetadata_BotCapabilityType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BotImagineMetadata {
  imagineType?: BotImagineMetadata_ImagineType | undefined;
}

export enum BotImagineMetadata_ImagineType {
  UNKNOWN = 0,
  IMAGINE = 1,
  MEMU = 2,
  FLASH = 3,
  EDIT = 4,
  UNRECOGNIZED = -1,
}

export function botImagineMetadata_ImagineTypeFromJSON(object: any): BotImagineMetadata_ImagineType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return BotImagineMetadata_ImagineType.UNKNOWN;
    case 1:
    case "IMAGINE":
      return BotImagineMetadata_ImagineType.IMAGINE;
    case 2:
    case "MEMU":
      return BotImagineMetadata_ImagineType.MEMU;
    case 3:
    case "FLASH":
      return BotImagineMetadata_ImagineType.FLASH;
    case 4:
    case "EDIT":
      return BotImagineMetadata_ImagineType.EDIT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BotImagineMetadata_ImagineType.UNRECOGNIZED;
  }
}

export function botImagineMetadata_ImagineTypeToJSON(object: BotImagineMetadata_ImagineType): string {
  switch (object) {
    case BotImagineMetadata_ImagineType.UNKNOWN:
      return "UNKNOWN";
    case BotImagineMetadata_ImagineType.IMAGINE:
      return "IMAGINE";
    case BotImagineMetadata_ImagineType.MEMU:
      return "MEMU";
    case BotImagineMetadata_ImagineType.FLASH:
      return "FLASH";
    case BotImagineMetadata_ImagineType.EDIT:
      return "EDIT";
    case BotImagineMetadata_ImagineType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BotLinkedAccount {
  type?: BotLinkedAccount_BotLinkedAccountType | undefined;
}

export enum BotLinkedAccount_BotLinkedAccountType {
  BOT_LINKED_ACCOUNT_TYPE_1P = 0,
  UNRECOGNIZED = -1,
}

export function botLinkedAccount_BotLinkedAccountTypeFromJSON(object: any): BotLinkedAccount_BotLinkedAccountType {
  switch (object) {
    case 0:
    case "BOT_LINKED_ACCOUNT_TYPE_1P":
      return BotLinkedAccount_BotLinkedAccountType.BOT_LINKED_ACCOUNT_TYPE_1P;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BotLinkedAccount_BotLinkedAccountType.UNRECOGNIZED;
  }
}

export function botLinkedAccount_BotLinkedAccountTypeToJSON(object: BotLinkedAccount_BotLinkedAccountType): string {
  switch (object) {
    case BotLinkedAccount_BotLinkedAccountType.BOT_LINKED_ACCOUNT_TYPE_1P:
      return "BOT_LINKED_ACCOUNT_TYPE_1P";
    case BotLinkedAccount_BotLinkedAccountType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BotLinkedAccountsMetadata {
  accounts: BotLinkedAccount[];
  acAuthTokens?: Uint8Array | undefined;
  acErrorCode?: number | undefined;
}

export interface BotMediaMetadata {
  fileSha256?: string | undefined;
  mediaKey?: string | undefined;
  fileEncSha256?: string | undefined;
  directPath?: string | undefined;
  mediaKeyTimestamp?: number | undefined;
  mimetype?: string | undefined;
  orientationType?: BotMediaMetadata_OrientationType | undefined;
}

export enum BotMediaMetadata_OrientationType {
  UNKNOWN = 0,
  CENTER = 1,
  LEFT = 2,
  RIGHT = 3,
  UNRECOGNIZED = -1,
}

export function botMediaMetadata_OrientationTypeFromJSON(object: any): BotMediaMetadata_OrientationType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return BotMediaMetadata_OrientationType.UNKNOWN;
    case 1:
    case "CENTER":
      return BotMediaMetadata_OrientationType.CENTER;
    case 2:
    case "LEFT":
      return BotMediaMetadata_OrientationType.LEFT;
    case 3:
    case "RIGHT":
      return BotMediaMetadata_OrientationType.RIGHT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BotMediaMetadata_OrientationType.UNRECOGNIZED;
  }
}

export function botMediaMetadata_OrientationTypeToJSON(object: BotMediaMetadata_OrientationType): string {
  switch (object) {
    case BotMediaMetadata_OrientationType.UNKNOWN:
      return "UNKNOWN";
    case BotMediaMetadata_OrientationType.CENTER:
      return "CENTER";
    case BotMediaMetadata_OrientationType.LEFT:
      return "LEFT";
    case BotMediaMetadata_OrientationType.RIGHT:
      return "RIGHT";
    case BotMediaMetadata_OrientationType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BotMemoryFact {
  fact?: string | undefined;
  factId?: string | undefined;
}

export interface BotMemoryMetadata {
  addedFacts: BotMemoryFact[];
  removedFacts: BotMemoryFact[];
  disclaimer?: string | undefined;
}

export interface BotMemuMetadata {
  faceImages: BotMediaMetadata[];
}

export interface BotMetadata {
  avatarMetadata?: BotAvatarMetadata | undefined;
  personaId?: string | undefined;
  pluginMetadata?: BotPluginMetadata | undefined;
  suggestedPromptMetadata?: BotSuggestedPromptMetadata | undefined;
  invokerJid?: string | undefined;
  sessionMetadata?: BotSessionMetadata | undefined;
  memuMetadata?: BotMemuMetadata | undefined;
  timezone?: string | undefined;
  reminderMetadata?: BotReminderMetadata | undefined;
  modelMetadata?: BotModelMetadata | undefined;
  messageDisclaimerText?: string | undefined;
  progressIndicatorMetadata?: BotProgressIndicatorMetadata | undefined;
  capabilityMetadata?: BotCapabilityMetadata | undefined;
  imagineMetadata?: BotImagineMetadata | undefined;
  memoryMetadata?: BotMemoryMetadata | undefined;
  renderingMetadata?: BotRenderingMetadata | undefined;
  botMetricsMetadata?: BotMetricsMetadata | undefined;
  botLinkedAccountsMetadata?: BotLinkedAccountsMetadata | undefined;
  richResponseSourcesMetadata?: BotSourcesMetadata | undefined;
  aiConversationContext?: Uint8Array | undefined;
  botPromotionMessageMetadata?: BotPromotionMessageMetadata | undefined;
  botModeSelectionMetadata?: BotModeSelectionMetadata | undefined;
  botQuotaMetadata?: BotQuotaMetadata | undefined;
  botAgeCollectionMetadata?: BotAgeCollectionMetadata | undefined;
}

export interface BotMetricsMetadata {
  destinationId?: string | undefined;
  destinationEntryPoint?: BotMetricsEntryPoint | undefined;
  threadOrigin?: BotMetricsThreadEntryPoint | undefined;
}

export interface BotModeSelectionMetadata {
  mode: BotModeSelectionMetadata_BotUserSelectionMode[];
}

export enum BotModeSelectionMetadata_BotUserSelectionMode {
  UNKNOWN_MODE = 0,
  REASONING_MODE = 1,
  UNRECOGNIZED = -1,
}

export function botModeSelectionMetadata_BotUserSelectionModeFromJSON(
  object: any,
): BotModeSelectionMetadata_BotUserSelectionMode {
  switch (object) {
    case 0:
    case "UNKNOWN_MODE":
      return BotModeSelectionMetadata_BotUserSelectionMode.UNKNOWN_MODE;
    case 1:
    case "REASONING_MODE":
      return BotModeSelectionMetadata_BotUserSelectionMode.REASONING_MODE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BotModeSelectionMetadata_BotUserSelectionMode.UNRECOGNIZED;
  }
}

export function botModeSelectionMetadata_BotUserSelectionModeToJSON(
  object: BotModeSelectionMetadata_BotUserSelectionMode,
): string {
  switch (object) {
    case BotModeSelectionMetadata_BotUserSelectionMode.UNKNOWN_MODE:
      return "UNKNOWN_MODE";
    case BotModeSelectionMetadata_BotUserSelectionMode.REASONING_MODE:
      return "REASONING_MODE";
    case BotModeSelectionMetadata_BotUserSelectionMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BotModelMetadata {
  modelType?: BotModelMetadata_ModelType | undefined;
  premiumModelStatus?: BotModelMetadata_PremiumModelStatus | undefined;
}

export enum BotModelMetadata_ModelType {
  UNKNOWN_TYPE = 0,
  LLAMA_PROD = 1,
  LLAMA_PROD_PREMIUM = 2,
  UNRECOGNIZED = -1,
}

export function botModelMetadata_ModelTypeFromJSON(object: any): BotModelMetadata_ModelType {
  switch (object) {
    case 0:
    case "UNKNOWN_TYPE":
      return BotModelMetadata_ModelType.UNKNOWN_TYPE;
    case 1:
    case "LLAMA_PROD":
      return BotModelMetadata_ModelType.LLAMA_PROD;
    case 2:
    case "LLAMA_PROD_PREMIUM":
      return BotModelMetadata_ModelType.LLAMA_PROD_PREMIUM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BotModelMetadata_ModelType.UNRECOGNIZED;
  }
}

export function botModelMetadata_ModelTypeToJSON(object: BotModelMetadata_ModelType): string {
  switch (object) {
    case BotModelMetadata_ModelType.UNKNOWN_TYPE:
      return "UNKNOWN_TYPE";
    case BotModelMetadata_ModelType.LLAMA_PROD:
      return "LLAMA_PROD";
    case BotModelMetadata_ModelType.LLAMA_PROD_PREMIUM:
      return "LLAMA_PROD_PREMIUM";
    case BotModelMetadata_ModelType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BotModelMetadata_PremiumModelStatus {
  UNKNOWN_STATUS = 0,
  AVAILABLE = 1,
  QUOTA_EXCEED_LIMIT = 2,
  UNRECOGNIZED = -1,
}

export function botModelMetadata_PremiumModelStatusFromJSON(object: any): BotModelMetadata_PremiumModelStatus {
  switch (object) {
    case 0:
    case "UNKNOWN_STATUS":
      return BotModelMetadata_PremiumModelStatus.UNKNOWN_STATUS;
    case 1:
    case "AVAILABLE":
      return BotModelMetadata_PremiumModelStatus.AVAILABLE;
    case 2:
    case "QUOTA_EXCEED_LIMIT":
      return BotModelMetadata_PremiumModelStatus.QUOTA_EXCEED_LIMIT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BotModelMetadata_PremiumModelStatus.UNRECOGNIZED;
  }
}

export function botModelMetadata_PremiumModelStatusToJSON(object: BotModelMetadata_PremiumModelStatus): string {
  switch (object) {
    case BotModelMetadata_PremiumModelStatus.UNKNOWN_STATUS:
      return "UNKNOWN_STATUS";
    case BotModelMetadata_PremiumModelStatus.AVAILABLE:
      return "AVAILABLE";
    case BotModelMetadata_PremiumModelStatus.QUOTA_EXCEED_LIMIT:
      return "QUOTA_EXCEED_LIMIT";
    case BotModelMetadata_PremiumModelStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BotPluginMetadata {
  provider?: BotPluginMetadata_SearchProvider | undefined;
  pluginType?: BotPluginMetadata_PluginType | undefined;
  thumbnailCdnUrl?: string | undefined;
  profilePhotoCdnUrl?: string | undefined;
  searchProviderUrl?: string | undefined;
  referenceIndex?: number | undefined;
  expectedLinksCount?: number | undefined;
  searchQuery?: string | undefined;
  parentPluginMessageKey?: MessageKey | undefined;
  deprecatedField?: BotPluginMetadata_PluginType | undefined;
  parentPluginType?: BotPluginMetadata_PluginType | undefined;
  faviconCdnUrl?: string | undefined;
}

export enum BotPluginMetadata_PluginType {
  UNKNOWN_PLUGIN = 0,
  REELS = 1,
  SEARCH = 2,
  UNRECOGNIZED = -1,
}

export function botPluginMetadata_PluginTypeFromJSON(object: any): BotPluginMetadata_PluginType {
  switch (object) {
    case 0:
    case "UNKNOWN_PLUGIN":
      return BotPluginMetadata_PluginType.UNKNOWN_PLUGIN;
    case 1:
    case "REELS":
      return BotPluginMetadata_PluginType.REELS;
    case 2:
    case "SEARCH":
      return BotPluginMetadata_PluginType.SEARCH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BotPluginMetadata_PluginType.UNRECOGNIZED;
  }
}

export function botPluginMetadata_PluginTypeToJSON(object: BotPluginMetadata_PluginType): string {
  switch (object) {
    case BotPluginMetadata_PluginType.UNKNOWN_PLUGIN:
      return "UNKNOWN_PLUGIN";
    case BotPluginMetadata_PluginType.REELS:
      return "REELS";
    case BotPluginMetadata_PluginType.SEARCH:
      return "SEARCH";
    case BotPluginMetadata_PluginType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BotPluginMetadata_SearchProvider {
  UNKNOWN = 0,
  BING = 1,
  GOOGLE = 2,
  SUPPORT = 3,
  UNRECOGNIZED = -1,
}

export function botPluginMetadata_SearchProviderFromJSON(object: any): BotPluginMetadata_SearchProvider {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return BotPluginMetadata_SearchProvider.UNKNOWN;
    case 1:
    case "BING":
      return BotPluginMetadata_SearchProvider.BING;
    case 2:
    case "GOOGLE":
      return BotPluginMetadata_SearchProvider.GOOGLE;
    case 3:
    case "SUPPORT":
      return BotPluginMetadata_SearchProvider.SUPPORT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BotPluginMetadata_SearchProvider.UNRECOGNIZED;
  }
}

export function botPluginMetadata_SearchProviderToJSON(object: BotPluginMetadata_SearchProvider): string {
  switch (object) {
    case BotPluginMetadata_SearchProvider.UNKNOWN:
      return "UNKNOWN";
    case BotPluginMetadata_SearchProvider.BING:
      return "BING";
    case BotPluginMetadata_SearchProvider.GOOGLE:
      return "GOOGLE";
    case BotPluginMetadata_SearchProvider.SUPPORT:
      return "SUPPORT";
    case BotPluginMetadata_SearchProvider.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BotProgressIndicatorMetadata {
  progressDescription?: string | undefined;
  stepsMetadata: BotProgressIndicatorMetadata_BotPlanningStepMetadata[];
}

export interface BotProgressIndicatorMetadata_BotPlanningStepMetadata {
  statusTitle?: string | undefined;
  statusBody?: string | undefined;
  sourcesMetadata: BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata[];
  status?: BotProgressIndicatorMetadata_BotPlanningStepMetadata_PlanningStepStatus | undefined;
  isReasoning?: boolean | undefined;
  isEnhancedSearch?: boolean | undefined;
  sections: BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningStepSectionMetadata[];
}

export enum BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotSearchSourceProvider {
  UNKNOWN_PROVIDER = 0,
  OTHER = 1,
  GOOGLE = 2,
  BING = 3,
  UNRECOGNIZED = -1,
}

export function botProgressIndicatorMetadata_BotPlanningStepMetadata_BotSearchSourceProviderFromJSON(
  object: any,
): BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotSearchSourceProvider {
  switch (object) {
    case 0:
    case "UNKNOWN_PROVIDER":
      return BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotSearchSourceProvider.UNKNOWN_PROVIDER;
    case 1:
    case "OTHER":
      return BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotSearchSourceProvider.OTHER;
    case 2:
    case "GOOGLE":
      return BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotSearchSourceProvider.GOOGLE;
    case 3:
    case "BING":
      return BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotSearchSourceProvider.BING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotSearchSourceProvider.UNRECOGNIZED;
  }
}

export function botProgressIndicatorMetadata_BotPlanningStepMetadata_BotSearchSourceProviderToJSON(
  object: BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotSearchSourceProvider,
): string {
  switch (object) {
    case BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotSearchSourceProvider.UNKNOWN_PROVIDER:
      return "UNKNOWN_PROVIDER";
    case BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotSearchSourceProvider.OTHER:
      return "OTHER";
    case BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotSearchSourceProvider.GOOGLE:
      return "GOOGLE";
    case BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotSearchSourceProvider.BING:
      return "BING";
    case BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotSearchSourceProvider.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BotProgressIndicatorMetadata_BotPlanningStepMetadata_PlanningStepStatus {
  UNKNOWN = 0,
  PLANNED = 1,
  EXECUTING = 2,
  FINISHED = 3,
  UNRECOGNIZED = -1,
}

export function botProgressIndicatorMetadata_BotPlanningStepMetadata_PlanningStepStatusFromJSON(
  object: any,
): BotProgressIndicatorMetadata_BotPlanningStepMetadata_PlanningStepStatus {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return BotProgressIndicatorMetadata_BotPlanningStepMetadata_PlanningStepStatus.UNKNOWN;
    case 1:
    case "PLANNED":
      return BotProgressIndicatorMetadata_BotPlanningStepMetadata_PlanningStepStatus.PLANNED;
    case 2:
    case "EXECUTING":
      return BotProgressIndicatorMetadata_BotPlanningStepMetadata_PlanningStepStatus.EXECUTING;
    case 3:
    case "FINISHED":
      return BotProgressIndicatorMetadata_BotPlanningStepMetadata_PlanningStepStatus.FINISHED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BotProgressIndicatorMetadata_BotPlanningStepMetadata_PlanningStepStatus.UNRECOGNIZED;
  }
}

export function botProgressIndicatorMetadata_BotPlanningStepMetadata_PlanningStepStatusToJSON(
  object: BotProgressIndicatorMetadata_BotPlanningStepMetadata_PlanningStepStatus,
): string {
  switch (object) {
    case BotProgressIndicatorMetadata_BotPlanningStepMetadata_PlanningStepStatus.UNKNOWN:
      return "UNKNOWN";
    case BotProgressIndicatorMetadata_BotPlanningStepMetadata_PlanningStepStatus.PLANNED:
      return "PLANNED";
    case BotProgressIndicatorMetadata_BotPlanningStepMetadata_PlanningStepStatus.EXECUTING:
      return "EXECUTING";
    case BotProgressIndicatorMetadata_BotPlanningStepMetadata_PlanningStepStatus.FINISHED:
      return "FINISHED";
    case BotProgressIndicatorMetadata_BotPlanningStepMetadata_PlanningStepStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourceMetadata {
  title?: string | undefined;
  provider?: BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotSearchSourceProvider | undefined;
  sourceUrl?: string | undefined;
  favIconUrl?: string | undefined;
}

export interface BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata {
  sourceTitle?: string | undefined;
  provider?:
    | BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata_BotPlanningSearchSourceProvider
    | undefined;
  sourceUrl?: string | undefined;
}

export enum BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata_BotPlanningSearchSourceProvider {
  UNKNOWN = 0,
  OTHER = 1,
  GOOGLE = 2,
  BING = 3,
  UNRECOGNIZED = -1,
}

export function botProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata_BotPlanningSearchSourceProviderFromJSON(
  object: any,
): BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata_BotPlanningSearchSourceProvider {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata_BotPlanningSearchSourceProvider
        .UNKNOWN;
    case 1:
    case "OTHER":
      return BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata_BotPlanningSearchSourceProvider
        .OTHER;
    case 2:
    case "GOOGLE":
      return BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata_BotPlanningSearchSourceProvider
        .GOOGLE;
    case 3:
    case "BING":
      return BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata_BotPlanningSearchSourceProvider
        .BING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata_BotPlanningSearchSourceProvider
        .UNRECOGNIZED;
  }
}

export function botProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata_BotPlanningSearchSourceProviderToJSON(
  object:
    BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata_BotPlanningSearchSourceProvider,
): string {
  switch (object) {
    case BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata_BotPlanningSearchSourceProvider
      .UNKNOWN:
      return "UNKNOWN";
    case BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata_BotPlanningSearchSourceProvider
      .OTHER:
      return "OTHER";
    case BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata_BotPlanningSearchSourceProvider
      .GOOGLE:
      return "GOOGLE";
    case BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata_BotPlanningSearchSourceProvider
      .BING:
      return "BING";
    case BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata_BotPlanningSearchSourceProvider
      .UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningStepSectionMetadata {
  sectionTitle?: string | undefined;
  sectionBody?: string | undefined;
  sourcesMetadata: BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourceMetadata[];
}

export interface BotPromotionMessageMetadata {
  promotionType?: BotPromotionMessageMetadata_BotPromotionType | undefined;
  buttonTitle?: string | undefined;
}

export enum BotPromotionMessageMetadata_BotPromotionType {
  UNKNOWN_TYPE = 0,
  C50 = 1,
  UNRECOGNIZED = -1,
}

export function botPromotionMessageMetadata_BotPromotionTypeFromJSON(
  object: any,
): BotPromotionMessageMetadata_BotPromotionType {
  switch (object) {
    case 0:
    case "UNKNOWN_TYPE":
      return BotPromotionMessageMetadata_BotPromotionType.UNKNOWN_TYPE;
    case 1:
    case "C50":
      return BotPromotionMessageMetadata_BotPromotionType.C50;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BotPromotionMessageMetadata_BotPromotionType.UNRECOGNIZED;
  }
}

export function botPromotionMessageMetadata_BotPromotionTypeToJSON(
  object: BotPromotionMessageMetadata_BotPromotionType,
): string {
  switch (object) {
    case BotPromotionMessageMetadata_BotPromotionType.UNKNOWN_TYPE:
      return "UNKNOWN_TYPE";
    case BotPromotionMessageMetadata_BotPromotionType.C50:
      return "C50";
    case BotPromotionMessageMetadata_BotPromotionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BotPromptSuggestion {
  prompt?: string | undefined;
  promptId?: string | undefined;
}

export interface BotPromptSuggestions {
  suggestions: BotPromptSuggestion[];
}

export interface BotQuotaMetadata {
  botFeatureQuotaMetadata: BotQuotaMetadata_BotFeatureQuotaMetadata[];
}

export interface BotQuotaMetadata_BotFeatureQuotaMetadata {
  featureType?: BotQuotaMetadata_BotFeatureQuotaMetadata_BotFeatureType | undefined;
  remainingQuota?: number | undefined;
  expirationTimestamp?: number | undefined;
}

export enum BotQuotaMetadata_BotFeatureQuotaMetadata_BotFeatureType {
  UNKNOWN_FEATURE = 0,
  REASONING_FEATURE = 1,
  UNRECOGNIZED = -1,
}

export function botQuotaMetadata_BotFeatureQuotaMetadata_BotFeatureTypeFromJSON(
  object: any,
): BotQuotaMetadata_BotFeatureQuotaMetadata_BotFeatureType {
  switch (object) {
    case 0:
    case "UNKNOWN_FEATURE":
      return BotQuotaMetadata_BotFeatureQuotaMetadata_BotFeatureType.UNKNOWN_FEATURE;
    case 1:
    case "REASONING_FEATURE":
      return BotQuotaMetadata_BotFeatureQuotaMetadata_BotFeatureType.REASONING_FEATURE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BotQuotaMetadata_BotFeatureQuotaMetadata_BotFeatureType.UNRECOGNIZED;
  }
}

export function botQuotaMetadata_BotFeatureQuotaMetadata_BotFeatureTypeToJSON(
  object: BotQuotaMetadata_BotFeatureQuotaMetadata_BotFeatureType,
): string {
  switch (object) {
    case BotQuotaMetadata_BotFeatureQuotaMetadata_BotFeatureType.UNKNOWN_FEATURE:
      return "UNKNOWN_FEATURE";
    case BotQuotaMetadata_BotFeatureQuotaMetadata_BotFeatureType.REASONING_FEATURE:
      return "REASONING_FEATURE";
    case BotQuotaMetadata_BotFeatureQuotaMetadata_BotFeatureType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BotReminderMetadata {
  requestMessageKey?: MessageKey | undefined;
  action?: BotReminderMetadata_ReminderAction | undefined;
  name?: string | undefined;
  nextTriggerTimestamp?: number | undefined;
  frequency?: BotReminderMetadata_ReminderFrequency | undefined;
}

export enum BotReminderMetadata_ReminderAction {
  UNKNOWN = 0,
  NOTIFY = 1,
  CREATE = 2,
  DELETE = 3,
  UPDATE = 4,
  UNRECOGNIZED = -1,
}

export function botReminderMetadata_ReminderActionFromJSON(object: any): BotReminderMetadata_ReminderAction {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return BotReminderMetadata_ReminderAction.UNKNOWN;
    case 1:
    case "NOTIFY":
      return BotReminderMetadata_ReminderAction.NOTIFY;
    case 2:
    case "CREATE":
      return BotReminderMetadata_ReminderAction.CREATE;
    case 3:
    case "DELETE":
      return BotReminderMetadata_ReminderAction.DELETE;
    case 4:
    case "UPDATE":
      return BotReminderMetadata_ReminderAction.UPDATE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BotReminderMetadata_ReminderAction.UNRECOGNIZED;
  }
}

export function botReminderMetadata_ReminderActionToJSON(object: BotReminderMetadata_ReminderAction): string {
  switch (object) {
    case BotReminderMetadata_ReminderAction.UNKNOWN:
      return "UNKNOWN";
    case BotReminderMetadata_ReminderAction.NOTIFY:
      return "NOTIFY";
    case BotReminderMetadata_ReminderAction.CREATE:
      return "CREATE";
    case BotReminderMetadata_ReminderAction.DELETE:
      return "DELETE";
    case BotReminderMetadata_ReminderAction.UPDATE:
      return "UPDATE";
    case BotReminderMetadata_ReminderAction.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum BotReminderMetadata_ReminderFrequency {
  DEFAULT = 0,
  ONCE = 1,
  DAILY = 2,
  WEEKLY = 3,
  BIWEEKLY = 4,
  MONTHLY = 5,
  UNRECOGNIZED = -1,
}

export function botReminderMetadata_ReminderFrequencyFromJSON(object: any): BotReminderMetadata_ReminderFrequency {
  switch (object) {
    case 0:
    case "DEFAULT":
      return BotReminderMetadata_ReminderFrequency.DEFAULT;
    case 1:
    case "ONCE":
      return BotReminderMetadata_ReminderFrequency.ONCE;
    case 2:
    case "DAILY":
      return BotReminderMetadata_ReminderFrequency.DAILY;
    case 3:
    case "WEEKLY":
      return BotReminderMetadata_ReminderFrequency.WEEKLY;
    case 4:
    case "BIWEEKLY":
      return BotReminderMetadata_ReminderFrequency.BIWEEKLY;
    case 5:
    case "MONTHLY":
      return BotReminderMetadata_ReminderFrequency.MONTHLY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BotReminderMetadata_ReminderFrequency.UNRECOGNIZED;
  }
}

export function botReminderMetadata_ReminderFrequencyToJSON(object: BotReminderMetadata_ReminderFrequency): string {
  switch (object) {
    case BotReminderMetadata_ReminderFrequency.DEFAULT:
      return "DEFAULT";
    case BotReminderMetadata_ReminderFrequency.ONCE:
      return "ONCE";
    case BotReminderMetadata_ReminderFrequency.DAILY:
      return "DAILY";
    case BotReminderMetadata_ReminderFrequency.WEEKLY:
      return "WEEKLY";
    case BotReminderMetadata_ReminderFrequency.BIWEEKLY:
      return "BIWEEKLY";
    case BotReminderMetadata_ReminderFrequency.MONTHLY:
      return "MONTHLY";
    case BotReminderMetadata_ReminderFrequency.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BotRenderingMetadata {
  keywords: BotRenderingMetadata_Keyword[];
}

export interface BotRenderingMetadata_Keyword {
  value?: string | undefined;
  associatedPrompts: string[];
}

export interface BotSessionMetadata {
  sessionId?: string | undefined;
  sessionSource?: BotSessionSource | undefined;
}

export interface BotSourcesMetadata {
  sources: BotSourcesMetadata_BotSourceItem[];
}

export interface BotSourcesMetadata_BotSourceItem {
  provider?: BotSourcesMetadata_BotSourceItem_SourceProvider | undefined;
  thumbnailCdnUrl?: string | undefined;
  sourceProviderUrl?: string | undefined;
  sourceQuery?: string | undefined;
  faviconCdnUrl?: string | undefined;
  citationNumber?: number | undefined;
}

export enum BotSourcesMetadata_BotSourceItem_SourceProvider {
  UNKNOWN = 0,
  BING = 1,
  GOOGLE = 2,
  SUPPORT = 3,
  UNRECOGNIZED = -1,
}

export function botSourcesMetadata_BotSourceItem_SourceProviderFromJSON(
  object: any,
): BotSourcesMetadata_BotSourceItem_SourceProvider {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return BotSourcesMetadata_BotSourceItem_SourceProvider.UNKNOWN;
    case 1:
    case "BING":
      return BotSourcesMetadata_BotSourceItem_SourceProvider.BING;
    case 2:
    case "GOOGLE":
      return BotSourcesMetadata_BotSourceItem_SourceProvider.GOOGLE;
    case 3:
    case "SUPPORT":
      return BotSourcesMetadata_BotSourceItem_SourceProvider.SUPPORT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BotSourcesMetadata_BotSourceItem_SourceProvider.UNRECOGNIZED;
  }
}

export function botSourcesMetadata_BotSourceItem_SourceProviderToJSON(
  object: BotSourcesMetadata_BotSourceItem_SourceProvider,
): string {
  switch (object) {
    case BotSourcesMetadata_BotSourceItem_SourceProvider.UNKNOWN:
      return "UNKNOWN";
    case BotSourcesMetadata_BotSourceItem_SourceProvider.BING:
      return "BING";
    case BotSourcesMetadata_BotSourceItem_SourceProvider.GOOGLE:
      return "GOOGLE";
    case BotSourcesMetadata_BotSourceItem_SourceProvider.SUPPORT:
      return "SUPPORT";
    case BotSourcesMetadata_BotSourceItem_SourceProvider.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface BotSuggestedPromptMetadata {
  suggestedPrompts: string[];
  selectedPromptIndex?: number | undefined;
  promptSuggestions?: BotPromptSuggestions | undefined;
  selectedPromptId?: string | undefined;
}

export interface CallLogRecord {
  callResult?: CallLogRecord_CallResult | undefined;
  isDndMode?: boolean | undefined;
  silenceReason?: CallLogRecord_SilenceReason | undefined;
  duration?: number | undefined;
  startTime?: number | undefined;
  isIncoming?: boolean | undefined;
  isVideo?: boolean | undefined;
  isCallLink?: boolean | undefined;
  callLinkToken?: string | undefined;
  scheduledCallId?: string | undefined;
  callId?: string | undefined;
  callCreatorJid?: string | undefined;
  groupJid?: string | undefined;
  participants: CallLogRecord_ParticipantInfo[];
  callType?: CallLogRecord_CallType | undefined;
}

export enum CallLogRecord_CallResult {
  CONNECTED = 0,
  REJECTED = 1,
  CANCELLED = 2,
  ACCEPTEDELSEWHERE = 3,
  MISSED = 4,
  INVALID = 5,
  UNAVAILABLE = 6,
  UPCOMING = 7,
  FAILED = 8,
  ABANDONED = 9,
  ONGOING = 10,
  UNRECOGNIZED = -1,
}

export function callLogRecord_CallResultFromJSON(object: any): CallLogRecord_CallResult {
  switch (object) {
    case 0:
    case "CONNECTED":
      return CallLogRecord_CallResult.CONNECTED;
    case 1:
    case "REJECTED":
      return CallLogRecord_CallResult.REJECTED;
    case 2:
    case "CANCELLED":
      return CallLogRecord_CallResult.CANCELLED;
    case 3:
    case "ACCEPTEDELSEWHERE":
      return CallLogRecord_CallResult.ACCEPTEDELSEWHERE;
    case 4:
    case "MISSED":
      return CallLogRecord_CallResult.MISSED;
    case 5:
    case "INVALID":
      return CallLogRecord_CallResult.INVALID;
    case 6:
    case "UNAVAILABLE":
      return CallLogRecord_CallResult.UNAVAILABLE;
    case 7:
    case "UPCOMING":
      return CallLogRecord_CallResult.UPCOMING;
    case 8:
    case "FAILED":
      return CallLogRecord_CallResult.FAILED;
    case 9:
    case "ABANDONED":
      return CallLogRecord_CallResult.ABANDONED;
    case 10:
    case "ONGOING":
      return CallLogRecord_CallResult.ONGOING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CallLogRecord_CallResult.UNRECOGNIZED;
  }
}

export function callLogRecord_CallResultToJSON(object: CallLogRecord_CallResult): string {
  switch (object) {
    case CallLogRecord_CallResult.CONNECTED:
      return "CONNECTED";
    case CallLogRecord_CallResult.REJECTED:
      return "REJECTED";
    case CallLogRecord_CallResult.CANCELLED:
      return "CANCELLED";
    case CallLogRecord_CallResult.ACCEPTEDELSEWHERE:
      return "ACCEPTEDELSEWHERE";
    case CallLogRecord_CallResult.MISSED:
      return "MISSED";
    case CallLogRecord_CallResult.INVALID:
      return "INVALID";
    case CallLogRecord_CallResult.UNAVAILABLE:
      return "UNAVAILABLE";
    case CallLogRecord_CallResult.UPCOMING:
      return "UPCOMING";
    case CallLogRecord_CallResult.FAILED:
      return "FAILED";
    case CallLogRecord_CallResult.ABANDONED:
      return "ABANDONED";
    case CallLogRecord_CallResult.ONGOING:
      return "ONGOING";
    case CallLogRecord_CallResult.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum CallLogRecord_CallType {
  REGULAR = 0,
  SCHEDULED_CALL = 1,
  VOICE_CHAT = 2,
  UNRECOGNIZED = -1,
}

export function callLogRecord_CallTypeFromJSON(object: any): CallLogRecord_CallType {
  switch (object) {
    case 0:
    case "REGULAR":
      return CallLogRecord_CallType.REGULAR;
    case 1:
    case "SCHEDULED_CALL":
      return CallLogRecord_CallType.SCHEDULED_CALL;
    case 2:
    case "VOICE_CHAT":
      return CallLogRecord_CallType.VOICE_CHAT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CallLogRecord_CallType.UNRECOGNIZED;
  }
}

export function callLogRecord_CallTypeToJSON(object: CallLogRecord_CallType): string {
  switch (object) {
    case CallLogRecord_CallType.REGULAR:
      return "REGULAR";
    case CallLogRecord_CallType.SCHEDULED_CALL:
      return "SCHEDULED_CALL";
    case CallLogRecord_CallType.VOICE_CHAT:
      return "VOICE_CHAT";
    case CallLogRecord_CallType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum CallLogRecord_SilenceReason {
  NONE = 0,
  SCHEDULED = 1,
  PRIVACY = 2,
  LIGHTWEIGHT = 3,
  UNRECOGNIZED = -1,
}

export function callLogRecord_SilenceReasonFromJSON(object: any): CallLogRecord_SilenceReason {
  switch (object) {
    case 0:
    case "NONE":
      return CallLogRecord_SilenceReason.NONE;
    case 1:
    case "SCHEDULED":
      return CallLogRecord_SilenceReason.SCHEDULED;
    case 2:
    case "PRIVACY":
      return CallLogRecord_SilenceReason.PRIVACY;
    case 3:
    case "LIGHTWEIGHT":
      return CallLogRecord_SilenceReason.LIGHTWEIGHT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CallLogRecord_SilenceReason.UNRECOGNIZED;
  }
}

export function callLogRecord_SilenceReasonToJSON(object: CallLogRecord_SilenceReason): string {
  switch (object) {
    case CallLogRecord_SilenceReason.NONE:
      return "NONE";
    case CallLogRecord_SilenceReason.SCHEDULED:
      return "SCHEDULED";
    case CallLogRecord_SilenceReason.PRIVACY:
      return "PRIVACY";
    case CallLogRecord_SilenceReason.LIGHTWEIGHT:
      return "LIGHTWEIGHT";
    case CallLogRecord_SilenceReason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface CallLogRecord_ParticipantInfo {
  userJid?: string | undefined;
  callResult?: CallLogRecord_CallResult | undefined;
}

export interface CertChain {
  leaf?: CertChain_NoiseCertificate | undefined;
  intermediate?: CertChain_NoiseCertificate | undefined;
}

export interface CertChain_NoiseCertificate {
  details?: Uint8Array | undefined;
  signature?: Uint8Array | undefined;
}

export interface CertChain_NoiseCertificate_Details {
  serial?: number | undefined;
  issuerSerial?: number | undefined;
  key?: Uint8Array | undefined;
  notBefore?: number | undefined;
  notAfter?: number | undefined;
}

export interface ChatLockSettings {
  hideLockedChats?: boolean | undefined;
  secretCode?: UserPassword | undefined;
}

export interface ChatRowOpaqueData {
  draftMessage?: ChatRowOpaqueData_DraftMessage | undefined;
}

export interface ChatRowOpaqueData_DraftMessage {
  text?: string | undefined;
  omittedUrl?: string | undefined;
  ctwaContextLinkData?: ChatRowOpaqueData_DraftMessage_CtwaContextLinkData | undefined;
  ctwaContext?: ChatRowOpaqueData_DraftMessage_CtwaContextData | undefined;
  timestamp?: number | undefined;
}

export interface ChatRowOpaqueData_DraftMessage_CtwaContextData {
  conversionSource?: string | undefined;
  conversionData?: Uint8Array | undefined;
  sourceUrl?: string | undefined;
  sourceId?: string | undefined;
  sourceType?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  thumbnail?: string | undefined;
  thumbnailUrl?: string | undefined;
  mediaType?: ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType | undefined;
  mediaUrl?: string | undefined;
  isSuspiciousLink?: boolean | undefined;
}

export enum ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType {
  NONE = 0,
  IMAGE = 1,
  VIDEO = 2,
  UNRECOGNIZED = -1,
}

export function chatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaTypeFromJSON(
  object: any,
): ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType {
  switch (object) {
    case 0:
    case "NONE":
      return ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType.NONE;
    case 1:
    case "IMAGE":
      return ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType.IMAGE;
    case 2:
    case "VIDEO":
      return ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType.VIDEO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType.UNRECOGNIZED;
  }
}

export function chatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaTypeToJSON(
  object: ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType,
): string {
  switch (object) {
    case ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType.NONE:
      return "NONE";
    case ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType.IMAGE:
      return "IMAGE";
    case ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType.VIDEO:
      return "VIDEO";
    case ChatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ChatRowOpaqueData_DraftMessage_CtwaContextLinkData {
  context?: string | undefined;
  sourceUrl?: string | undefined;
  icebreaker?: string | undefined;
  phone?: string | undefined;
}

export interface Citation {
  title: string;
  subtitle: string;
  cmsId: string;
  imageUrl: string;
}

export interface ClientPairingProps {
  isChatDbLidMigrated?: boolean | undefined;
  isSyncdPureLidSession?: boolean | undefined;
}

export interface ClientPayload {
  username?: number | undefined;
  passive?: boolean | undefined;
  userAgent?: ClientPayload_UserAgent | undefined;
  webInfo?: ClientPayload_WebInfo | undefined;
  pushName?: string | undefined;
  sessionId?: number | undefined;
  shortConnect?: boolean | undefined;
  connectType?: ClientPayload_ConnectType | undefined;
  connectReason?: ClientPayload_ConnectReason | undefined;
  shards: number[];
  dnsSource?: ClientPayload_DNSSource | undefined;
  connectAttemptCount?: number | undefined;
  device?: number | undefined;
  devicePairingData?: ClientPayload_DevicePairingRegistrationData | undefined;
  product?: ClientPayload_Product | undefined;
  fbCat?: Uint8Array | undefined;
  fbUserAgent?: Uint8Array | undefined;
  oc?: boolean | undefined;
  lc?: number | undefined;
  iosAppExtension?: ClientPayload_IOSAppExtension | undefined;
  fbAppId?: number | undefined;
  fbDeviceId?: Uint8Array | undefined;
  pull?: boolean | undefined;
  paddingBytes?: Uint8Array | undefined;
  yearClass?: number | undefined;
  memClass?: number | undefined;
  interopData?: ClientPayload_InteropData | undefined;
  trafficAnonymization?: ClientPayload_TrafficAnonymization | undefined;
  lidDbMigrated?: boolean | undefined;
  accountType?: ClientPayload_AccountType | undefined;
}

export enum ClientPayload_AccountType {
  DEFAULT = 0,
  GUEST = 1,
  UNRECOGNIZED = -1,
}

export function clientPayload_AccountTypeFromJSON(object: any): ClientPayload_AccountType {
  switch (object) {
    case 0:
    case "DEFAULT":
      return ClientPayload_AccountType.DEFAULT;
    case 1:
    case "GUEST":
      return ClientPayload_AccountType.GUEST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ClientPayload_AccountType.UNRECOGNIZED;
  }
}

export function clientPayload_AccountTypeToJSON(object: ClientPayload_AccountType): string {
  switch (object) {
    case ClientPayload_AccountType.DEFAULT:
      return "DEFAULT";
    case ClientPayload_AccountType.GUEST:
      return "GUEST";
    case ClientPayload_AccountType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ClientPayload_ConnectReason {
  PUSH = 0,
  USER_ACTIVATED = 1,
  SCHEDULED = 2,
  ERROR_RECONNECT = 3,
  NETWORK_SWITCH = 4,
  PING_RECONNECT = 5,
  UNKNOWN = 6,
  UNRECOGNIZED = -1,
}

export function clientPayload_ConnectReasonFromJSON(object: any): ClientPayload_ConnectReason {
  switch (object) {
    case 0:
    case "PUSH":
      return ClientPayload_ConnectReason.PUSH;
    case 1:
    case "USER_ACTIVATED":
      return ClientPayload_ConnectReason.USER_ACTIVATED;
    case 2:
    case "SCHEDULED":
      return ClientPayload_ConnectReason.SCHEDULED;
    case 3:
    case "ERROR_RECONNECT":
      return ClientPayload_ConnectReason.ERROR_RECONNECT;
    case 4:
    case "NETWORK_SWITCH":
      return ClientPayload_ConnectReason.NETWORK_SWITCH;
    case 5:
    case "PING_RECONNECT":
      return ClientPayload_ConnectReason.PING_RECONNECT;
    case 6:
    case "UNKNOWN":
      return ClientPayload_ConnectReason.UNKNOWN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ClientPayload_ConnectReason.UNRECOGNIZED;
  }
}

export function clientPayload_ConnectReasonToJSON(object: ClientPayload_ConnectReason): string {
  switch (object) {
    case ClientPayload_ConnectReason.PUSH:
      return "PUSH";
    case ClientPayload_ConnectReason.USER_ACTIVATED:
      return "USER_ACTIVATED";
    case ClientPayload_ConnectReason.SCHEDULED:
      return "SCHEDULED";
    case ClientPayload_ConnectReason.ERROR_RECONNECT:
      return "ERROR_RECONNECT";
    case ClientPayload_ConnectReason.NETWORK_SWITCH:
      return "NETWORK_SWITCH";
    case ClientPayload_ConnectReason.PING_RECONNECT:
      return "PING_RECONNECT";
    case ClientPayload_ConnectReason.UNKNOWN:
      return "UNKNOWN";
    case ClientPayload_ConnectReason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ClientPayload_ConnectType {
  CELLULAR_UNKNOWN = 0,
  WIFI_UNKNOWN = 1,
  CELLULAR_EDGE = 100,
  CELLULAR_IDEN = 101,
  CELLULAR_UMTS = 102,
  CELLULAR_EVDO = 103,
  CELLULAR_GPRS = 104,
  CELLULAR_HSDPA = 105,
  CELLULAR_HSUPA = 106,
  CELLULAR_HSPA = 107,
  CELLULAR_CDMA = 108,
  CELLULAR_1XRTT = 109,
  CELLULAR_EHRPD = 110,
  CELLULAR_LTE = 111,
  CELLULAR_HSPAP = 112,
  UNRECOGNIZED = -1,
}

export function clientPayload_ConnectTypeFromJSON(object: any): ClientPayload_ConnectType {
  switch (object) {
    case 0:
    case "CELLULAR_UNKNOWN":
      return ClientPayload_ConnectType.CELLULAR_UNKNOWN;
    case 1:
    case "WIFI_UNKNOWN":
      return ClientPayload_ConnectType.WIFI_UNKNOWN;
    case 100:
    case "CELLULAR_EDGE":
      return ClientPayload_ConnectType.CELLULAR_EDGE;
    case 101:
    case "CELLULAR_IDEN":
      return ClientPayload_ConnectType.CELLULAR_IDEN;
    case 102:
    case "CELLULAR_UMTS":
      return ClientPayload_ConnectType.CELLULAR_UMTS;
    case 103:
    case "CELLULAR_EVDO":
      return ClientPayload_ConnectType.CELLULAR_EVDO;
    case 104:
    case "CELLULAR_GPRS":
      return ClientPayload_ConnectType.CELLULAR_GPRS;
    case 105:
    case "CELLULAR_HSDPA":
      return ClientPayload_ConnectType.CELLULAR_HSDPA;
    case 106:
    case "CELLULAR_HSUPA":
      return ClientPayload_ConnectType.CELLULAR_HSUPA;
    case 107:
    case "CELLULAR_HSPA":
      return ClientPayload_ConnectType.CELLULAR_HSPA;
    case 108:
    case "CELLULAR_CDMA":
      return ClientPayload_ConnectType.CELLULAR_CDMA;
    case 109:
    case "CELLULAR_1XRTT":
      return ClientPayload_ConnectType.CELLULAR_1XRTT;
    case 110:
    case "CELLULAR_EHRPD":
      return ClientPayload_ConnectType.CELLULAR_EHRPD;
    case 111:
    case "CELLULAR_LTE":
      return ClientPayload_ConnectType.CELLULAR_LTE;
    case 112:
    case "CELLULAR_HSPAP":
      return ClientPayload_ConnectType.CELLULAR_HSPAP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ClientPayload_ConnectType.UNRECOGNIZED;
  }
}

export function clientPayload_ConnectTypeToJSON(object: ClientPayload_ConnectType): string {
  switch (object) {
    case ClientPayload_ConnectType.CELLULAR_UNKNOWN:
      return "CELLULAR_UNKNOWN";
    case ClientPayload_ConnectType.WIFI_UNKNOWN:
      return "WIFI_UNKNOWN";
    case ClientPayload_ConnectType.CELLULAR_EDGE:
      return "CELLULAR_EDGE";
    case ClientPayload_ConnectType.CELLULAR_IDEN:
      return "CELLULAR_IDEN";
    case ClientPayload_ConnectType.CELLULAR_UMTS:
      return "CELLULAR_UMTS";
    case ClientPayload_ConnectType.CELLULAR_EVDO:
      return "CELLULAR_EVDO";
    case ClientPayload_ConnectType.CELLULAR_GPRS:
      return "CELLULAR_GPRS";
    case ClientPayload_ConnectType.CELLULAR_HSDPA:
      return "CELLULAR_HSDPA";
    case ClientPayload_ConnectType.CELLULAR_HSUPA:
      return "CELLULAR_HSUPA";
    case ClientPayload_ConnectType.CELLULAR_HSPA:
      return "CELLULAR_HSPA";
    case ClientPayload_ConnectType.CELLULAR_CDMA:
      return "CELLULAR_CDMA";
    case ClientPayload_ConnectType.CELLULAR_1XRTT:
      return "CELLULAR_1XRTT";
    case ClientPayload_ConnectType.CELLULAR_EHRPD:
      return "CELLULAR_EHRPD";
    case ClientPayload_ConnectType.CELLULAR_LTE:
      return "CELLULAR_LTE";
    case ClientPayload_ConnectType.CELLULAR_HSPAP:
      return "CELLULAR_HSPAP";
    case ClientPayload_ConnectType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ClientPayload_IOSAppExtension {
  SHARE_EXTENSION = 0,
  SERVICE_EXTENSION = 1,
  INTENTS_EXTENSION = 2,
  UNRECOGNIZED = -1,
}

export function clientPayload_IOSAppExtensionFromJSON(object: any): ClientPayload_IOSAppExtension {
  switch (object) {
    case 0:
    case "SHARE_EXTENSION":
      return ClientPayload_IOSAppExtension.SHARE_EXTENSION;
    case 1:
    case "SERVICE_EXTENSION":
      return ClientPayload_IOSAppExtension.SERVICE_EXTENSION;
    case 2:
    case "INTENTS_EXTENSION":
      return ClientPayload_IOSAppExtension.INTENTS_EXTENSION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ClientPayload_IOSAppExtension.UNRECOGNIZED;
  }
}

export function clientPayload_IOSAppExtensionToJSON(object: ClientPayload_IOSAppExtension): string {
  switch (object) {
    case ClientPayload_IOSAppExtension.SHARE_EXTENSION:
      return "SHARE_EXTENSION";
    case ClientPayload_IOSAppExtension.SERVICE_EXTENSION:
      return "SERVICE_EXTENSION";
    case ClientPayload_IOSAppExtension.INTENTS_EXTENSION:
      return "INTENTS_EXTENSION";
    case ClientPayload_IOSAppExtension.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ClientPayload_Product {
  WHATSAPP = 0,
  MESSENGER = 1,
  INTEROP = 2,
  INTEROP_MSGR = 3,
  WHATSAPP_LID = 4,
  UNRECOGNIZED = -1,
}

export function clientPayload_ProductFromJSON(object: any): ClientPayload_Product {
  switch (object) {
    case 0:
    case "WHATSAPP":
      return ClientPayload_Product.WHATSAPP;
    case 1:
    case "MESSENGER":
      return ClientPayload_Product.MESSENGER;
    case 2:
    case "INTEROP":
      return ClientPayload_Product.INTEROP;
    case 3:
    case "INTEROP_MSGR":
      return ClientPayload_Product.INTEROP_MSGR;
    case 4:
    case "WHATSAPP_LID":
      return ClientPayload_Product.WHATSAPP_LID;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ClientPayload_Product.UNRECOGNIZED;
  }
}

export function clientPayload_ProductToJSON(object: ClientPayload_Product): string {
  switch (object) {
    case ClientPayload_Product.WHATSAPP:
      return "WHATSAPP";
    case ClientPayload_Product.MESSENGER:
      return "MESSENGER";
    case ClientPayload_Product.INTEROP:
      return "INTEROP";
    case ClientPayload_Product.INTEROP_MSGR:
      return "INTEROP_MSGR";
    case ClientPayload_Product.WHATSAPP_LID:
      return "WHATSAPP_LID";
    case ClientPayload_Product.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ClientPayload_TrafficAnonymization {
  OFF = 0,
  STANDARD = 1,
  UNRECOGNIZED = -1,
}

export function clientPayload_TrafficAnonymizationFromJSON(object: any): ClientPayload_TrafficAnonymization {
  switch (object) {
    case 0:
    case "OFF":
      return ClientPayload_TrafficAnonymization.OFF;
    case 1:
    case "STANDARD":
      return ClientPayload_TrafficAnonymization.STANDARD;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ClientPayload_TrafficAnonymization.UNRECOGNIZED;
  }
}

export function clientPayload_TrafficAnonymizationToJSON(object: ClientPayload_TrafficAnonymization): string {
  switch (object) {
    case ClientPayload_TrafficAnonymization.OFF:
      return "OFF";
    case ClientPayload_TrafficAnonymization.STANDARD:
      return "STANDARD";
    case ClientPayload_TrafficAnonymization.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ClientPayload_DNSSource {
  dnsMethod?: ClientPayload_DNSSource_DNSResolutionMethod | undefined;
  appCached?: boolean | undefined;
}

export enum ClientPayload_DNSSource_DNSResolutionMethod {
  SYSTEM = 0,
  GOOGLE = 1,
  HARDCODED = 2,
  OVERRIDE = 3,
  FALLBACK = 4,
  MNS = 5,
  UNRECOGNIZED = -1,
}

export function clientPayload_DNSSource_DNSResolutionMethodFromJSON(
  object: any,
): ClientPayload_DNSSource_DNSResolutionMethod {
  switch (object) {
    case 0:
    case "SYSTEM":
      return ClientPayload_DNSSource_DNSResolutionMethod.SYSTEM;
    case 1:
    case "GOOGLE":
      return ClientPayload_DNSSource_DNSResolutionMethod.GOOGLE;
    case 2:
    case "HARDCODED":
      return ClientPayload_DNSSource_DNSResolutionMethod.HARDCODED;
    case 3:
    case "OVERRIDE":
      return ClientPayload_DNSSource_DNSResolutionMethod.OVERRIDE;
    case 4:
    case "FALLBACK":
      return ClientPayload_DNSSource_DNSResolutionMethod.FALLBACK;
    case 5:
    case "MNS":
      return ClientPayload_DNSSource_DNSResolutionMethod.MNS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ClientPayload_DNSSource_DNSResolutionMethod.UNRECOGNIZED;
  }
}

export function clientPayload_DNSSource_DNSResolutionMethodToJSON(
  object: ClientPayload_DNSSource_DNSResolutionMethod,
): string {
  switch (object) {
    case ClientPayload_DNSSource_DNSResolutionMethod.SYSTEM:
      return "SYSTEM";
    case ClientPayload_DNSSource_DNSResolutionMethod.GOOGLE:
      return "GOOGLE";
    case ClientPayload_DNSSource_DNSResolutionMethod.HARDCODED:
      return "HARDCODED";
    case ClientPayload_DNSSource_DNSResolutionMethod.OVERRIDE:
      return "OVERRIDE";
    case ClientPayload_DNSSource_DNSResolutionMethod.FALLBACK:
      return "FALLBACK";
    case ClientPayload_DNSSource_DNSResolutionMethod.MNS:
      return "MNS";
    case ClientPayload_DNSSource_DNSResolutionMethod.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ClientPayload_DevicePairingRegistrationData {
  eRegid?: Uint8Array | undefined;
  eKeytype?: Uint8Array | undefined;
  eIdent?: Uint8Array | undefined;
  eSkeyId?: Uint8Array | undefined;
  eSkeyVal?: Uint8Array | undefined;
  eSkeySig?: Uint8Array | undefined;
  buildHash?: Uint8Array | undefined;
  deviceProps?: Uint8Array | undefined;
}

export interface ClientPayload_InteropData {
  accountId?: number | undefined;
  token?: Uint8Array | undefined;
  enableReadReceipts?: boolean | undefined;
}

export interface ClientPayload_UserAgent {
  platform?: ClientPayload_UserAgent_Platform | undefined;
  appVersion?: ClientPayload_UserAgent_AppVersion | undefined;
  mcc?: string | undefined;
  mnc?: string | undefined;
  osVersion?: string | undefined;
  manufacturer?: string | undefined;
  device?: string | undefined;
  osBuildNumber?: string | undefined;
  phoneId?: string | undefined;
  releaseChannel?: ClientPayload_UserAgent_ReleaseChannel | undefined;
  localeLanguageIso6391?: string | undefined;
  localeCountryIso31661Alpha2?: string | undefined;
  deviceBoard?: string | undefined;
  deviceExpId?: string | undefined;
  deviceType?: ClientPayload_UserAgent_DeviceType | undefined;
  deviceModelType?: string | undefined;
}

export enum ClientPayload_UserAgent_DeviceType {
  PHONE = 0,
  TABLET = 1,
  DESKTOP = 2,
  WEARABLE = 3,
  VR = 4,
  UNRECOGNIZED = -1,
}

export function clientPayload_UserAgent_DeviceTypeFromJSON(object: any): ClientPayload_UserAgent_DeviceType {
  switch (object) {
    case 0:
    case "PHONE":
      return ClientPayload_UserAgent_DeviceType.PHONE;
    case 1:
    case "TABLET":
      return ClientPayload_UserAgent_DeviceType.TABLET;
    case 2:
    case "DESKTOP":
      return ClientPayload_UserAgent_DeviceType.DESKTOP;
    case 3:
    case "WEARABLE":
      return ClientPayload_UserAgent_DeviceType.WEARABLE;
    case 4:
    case "VR":
      return ClientPayload_UserAgent_DeviceType.VR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ClientPayload_UserAgent_DeviceType.UNRECOGNIZED;
  }
}

export function clientPayload_UserAgent_DeviceTypeToJSON(object: ClientPayload_UserAgent_DeviceType): string {
  switch (object) {
    case ClientPayload_UserAgent_DeviceType.PHONE:
      return "PHONE";
    case ClientPayload_UserAgent_DeviceType.TABLET:
      return "TABLET";
    case ClientPayload_UserAgent_DeviceType.DESKTOP:
      return "DESKTOP";
    case ClientPayload_UserAgent_DeviceType.WEARABLE:
      return "WEARABLE";
    case ClientPayload_UserAgent_DeviceType.VR:
      return "VR";
    case ClientPayload_UserAgent_DeviceType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ClientPayload_UserAgent_Platform {
  ANDROID = 0,
  IOS = 1,
  WINDOWS_PHONE = 2,
  BLACKBERRY = 3,
  BLACKBERRYX = 4,
  S40 = 5,
  S60 = 6,
  PYTHON_CLIENT = 7,
  TIZEN = 8,
  ENTERPRISE = 9,
  SMB_ANDROID = 10,
  KAIOS = 11,
  SMB_IOS = 12,
  WINDOWS = 13,
  WEB = 14,
  PORTAL = 15,
  GREEN_ANDROID = 16,
  GREEN_IPHONE = 17,
  BLUE_ANDROID = 18,
  BLUE_IPHONE = 19,
  FBLITE_ANDROID = 20,
  MLITE_ANDROID = 21,
  IGLITE_ANDROID = 22,
  PAGE = 23,
  MACOS = 24,
  OCULUS_MSG = 25,
  OCULUS_CALL = 26,
  MILAN = 27,
  CAPI = 28,
  WEAROS = 29,
  ARDEVICE = 30,
  VRDEVICE = 31,
  BLUE_WEB = 32,
  IPAD = 33,
  TEST = 34,
  SMART_GLASSES = 35,
  UNRECOGNIZED = -1,
}

export function clientPayload_UserAgent_PlatformFromJSON(object: any): ClientPayload_UserAgent_Platform {
  switch (object) {
    case 0:
    case "ANDROID":
      return ClientPayload_UserAgent_Platform.ANDROID;
    case 1:
    case "IOS":
      return ClientPayload_UserAgent_Platform.IOS;
    case 2:
    case "WINDOWS_PHONE":
      return ClientPayload_UserAgent_Platform.WINDOWS_PHONE;
    case 3:
    case "BLACKBERRY":
      return ClientPayload_UserAgent_Platform.BLACKBERRY;
    case 4:
    case "BLACKBERRYX":
      return ClientPayload_UserAgent_Platform.BLACKBERRYX;
    case 5:
    case "S40":
      return ClientPayload_UserAgent_Platform.S40;
    case 6:
    case "S60":
      return ClientPayload_UserAgent_Platform.S60;
    case 7:
    case "PYTHON_CLIENT":
      return ClientPayload_UserAgent_Platform.PYTHON_CLIENT;
    case 8:
    case "TIZEN":
      return ClientPayload_UserAgent_Platform.TIZEN;
    case 9:
    case "ENTERPRISE":
      return ClientPayload_UserAgent_Platform.ENTERPRISE;
    case 10:
    case "SMB_ANDROID":
      return ClientPayload_UserAgent_Platform.SMB_ANDROID;
    case 11:
    case "KAIOS":
      return ClientPayload_UserAgent_Platform.KAIOS;
    case 12:
    case "SMB_IOS":
      return ClientPayload_UserAgent_Platform.SMB_IOS;
    case 13:
    case "WINDOWS":
      return ClientPayload_UserAgent_Platform.WINDOWS;
    case 14:
    case "WEB":
      return ClientPayload_UserAgent_Platform.WEB;
    case 15:
    case "PORTAL":
      return ClientPayload_UserAgent_Platform.PORTAL;
    case 16:
    case "GREEN_ANDROID":
      return ClientPayload_UserAgent_Platform.GREEN_ANDROID;
    case 17:
    case "GREEN_IPHONE":
      return ClientPayload_UserAgent_Platform.GREEN_IPHONE;
    case 18:
    case "BLUE_ANDROID":
      return ClientPayload_UserAgent_Platform.BLUE_ANDROID;
    case 19:
    case "BLUE_IPHONE":
      return ClientPayload_UserAgent_Platform.BLUE_IPHONE;
    case 20:
    case "FBLITE_ANDROID":
      return ClientPayload_UserAgent_Platform.FBLITE_ANDROID;
    case 21:
    case "MLITE_ANDROID":
      return ClientPayload_UserAgent_Platform.MLITE_ANDROID;
    case 22:
    case "IGLITE_ANDROID":
      return ClientPayload_UserAgent_Platform.IGLITE_ANDROID;
    case 23:
    case "PAGE":
      return ClientPayload_UserAgent_Platform.PAGE;
    case 24:
    case "MACOS":
      return ClientPayload_UserAgent_Platform.MACOS;
    case 25:
    case "OCULUS_MSG":
      return ClientPayload_UserAgent_Platform.OCULUS_MSG;
    case 26:
    case "OCULUS_CALL":
      return ClientPayload_UserAgent_Platform.OCULUS_CALL;
    case 27:
    case "MILAN":
      return ClientPayload_UserAgent_Platform.MILAN;
    case 28:
    case "CAPI":
      return ClientPayload_UserAgent_Platform.CAPI;
    case 29:
    case "WEAROS":
      return ClientPayload_UserAgent_Platform.WEAROS;
    case 30:
    case "ARDEVICE":
      return ClientPayload_UserAgent_Platform.ARDEVICE;
    case 31:
    case "VRDEVICE":
      return ClientPayload_UserAgent_Platform.VRDEVICE;
    case 32:
    case "BLUE_WEB":
      return ClientPayload_UserAgent_Platform.BLUE_WEB;
    case 33:
    case "IPAD":
      return ClientPayload_UserAgent_Platform.IPAD;
    case 34:
    case "TEST":
      return ClientPayload_UserAgent_Platform.TEST;
    case 35:
    case "SMART_GLASSES":
      return ClientPayload_UserAgent_Platform.SMART_GLASSES;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ClientPayload_UserAgent_Platform.UNRECOGNIZED;
  }
}

export function clientPayload_UserAgent_PlatformToJSON(object: ClientPayload_UserAgent_Platform): string {
  switch (object) {
    case ClientPayload_UserAgent_Platform.ANDROID:
      return "ANDROID";
    case ClientPayload_UserAgent_Platform.IOS:
      return "IOS";
    case ClientPayload_UserAgent_Platform.WINDOWS_PHONE:
      return "WINDOWS_PHONE";
    case ClientPayload_UserAgent_Platform.BLACKBERRY:
      return "BLACKBERRY";
    case ClientPayload_UserAgent_Platform.BLACKBERRYX:
      return "BLACKBERRYX";
    case ClientPayload_UserAgent_Platform.S40:
      return "S40";
    case ClientPayload_UserAgent_Platform.S60:
      return "S60";
    case ClientPayload_UserAgent_Platform.PYTHON_CLIENT:
      return "PYTHON_CLIENT";
    case ClientPayload_UserAgent_Platform.TIZEN:
      return "TIZEN";
    case ClientPayload_UserAgent_Platform.ENTERPRISE:
      return "ENTERPRISE";
    case ClientPayload_UserAgent_Platform.SMB_ANDROID:
      return "SMB_ANDROID";
    case ClientPayload_UserAgent_Platform.KAIOS:
      return "KAIOS";
    case ClientPayload_UserAgent_Platform.SMB_IOS:
      return "SMB_IOS";
    case ClientPayload_UserAgent_Platform.WINDOWS:
      return "WINDOWS";
    case ClientPayload_UserAgent_Platform.WEB:
      return "WEB";
    case ClientPayload_UserAgent_Platform.PORTAL:
      return "PORTAL";
    case ClientPayload_UserAgent_Platform.GREEN_ANDROID:
      return "GREEN_ANDROID";
    case ClientPayload_UserAgent_Platform.GREEN_IPHONE:
      return "GREEN_IPHONE";
    case ClientPayload_UserAgent_Platform.BLUE_ANDROID:
      return "BLUE_ANDROID";
    case ClientPayload_UserAgent_Platform.BLUE_IPHONE:
      return "BLUE_IPHONE";
    case ClientPayload_UserAgent_Platform.FBLITE_ANDROID:
      return "FBLITE_ANDROID";
    case ClientPayload_UserAgent_Platform.MLITE_ANDROID:
      return "MLITE_ANDROID";
    case ClientPayload_UserAgent_Platform.IGLITE_ANDROID:
      return "IGLITE_ANDROID";
    case ClientPayload_UserAgent_Platform.PAGE:
      return "PAGE";
    case ClientPayload_UserAgent_Platform.MACOS:
      return "MACOS";
    case ClientPayload_UserAgent_Platform.OCULUS_MSG:
      return "OCULUS_MSG";
    case ClientPayload_UserAgent_Platform.OCULUS_CALL:
      return "OCULUS_CALL";
    case ClientPayload_UserAgent_Platform.MILAN:
      return "MILAN";
    case ClientPayload_UserAgent_Platform.CAPI:
      return "CAPI";
    case ClientPayload_UserAgent_Platform.WEAROS:
      return "WEAROS";
    case ClientPayload_UserAgent_Platform.ARDEVICE:
      return "ARDEVICE";
    case ClientPayload_UserAgent_Platform.VRDEVICE:
      return "VRDEVICE";
    case ClientPayload_UserAgent_Platform.BLUE_WEB:
      return "BLUE_WEB";
    case ClientPayload_UserAgent_Platform.IPAD:
      return "IPAD";
    case ClientPayload_UserAgent_Platform.TEST:
      return "TEST";
    case ClientPayload_UserAgent_Platform.SMART_GLASSES:
      return "SMART_GLASSES";
    case ClientPayload_UserAgent_Platform.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ClientPayload_UserAgent_ReleaseChannel {
  RELEASE = 0,
  BETA = 1,
  ALPHA = 2,
  DEBUG = 3,
  UNRECOGNIZED = -1,
}

export function clientPayload_UserAgent_ReleaseChannelFromJSON(object: any): ClientPayload_UserAgent_ReleaseChannel {
  switch (object) {
    case 0:
    case "RELEASE":
      return ClientPayload_UserAgent_ReleaseChannel.RELEASE;
    case 1:
    case "BETA":
      return ClientPayload_UserAgent_ReleaseChannel.BETA;
    case 2:
    case "ALPHA":
      return ClientPayload_UserAgent_ReleaseChannel.ALPHA;
    case 3:
    case "DEBUG":
      return ClientPayload_UserAgent_ReleaseChannel.DEBUG;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ClientPayload_UserAgent_ReleaseChannel.UNRECOGNIZED;
  }
}

export function clientPayload_UserAgent_ReleaseChannelToJSON(object: ClientPayload_UserAgent_ReleaseChannel): string {
  switch (object) {
    case ClientPayload_UserAgent_ReleaseChannel.RELEASE:
      return "RELEASE";
    case ClientPayload_UserAgent_ReleaseChannel.BETA:
      return "BETA";
    case ClientPayload_UserAgent_ReleaseChannel.ALPHA:
      return "ALPHA";
    case ClientPayload_UserAgent_ReleaseChannel.DEBUG:
      return "DEBUG";
    case ClientPayload_UserAgent_ReleaseChannel.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ClientPayload_UserAgent_AppVersion {
  primary?: number | undefined;
  secondary?: number | undefined;
  tertiary?: number | undefined;
  quaternary?: number | undefined;
  quinary?: number | undefined;
}

export interface ClientPayload_WebInfo {
  refToken?: string | undefined;
  version?: string | undefined;
  webdPayload?: ClientPayload_WebInfo_WebdPayload | undefined;
  webSubPlatform?: ClientPayload_WebInfo_WebSubPlatform | undefined;
}

export enum ClientPayload_WebInfo_WebSubPlatform {
  WEB_BROWSER = 0,
  APP_STORE = 1,
  WIN_STORE = 2,
  DARWIN = 3,
  WIN32 = 4,
  WIN_HYBRID = 5,
  UNRECOGNIZED = -1,
}

export function clientPayload_WebInfo_WebSubPlatformFromJSON(object: any): ClientPayload_WebInfo_WebSubPlatform {
  switch (object) {
    case 0:
    case "WEB_BROWSER":
      return ClientPayload_WebInfo_WebSubPlatform.WEB_BROWSER;
    case 1:
    case "APP_STORE":
      return ClientPayload_WebInfo_WebSubPlatform.APP_STORE;
    case 2:
    case "WIN_STORE":
      return ClientPayload_WebInfo_WebSubPlatform.WIN_STORE;
    case 3:
    case "DARWIN":
      return ClientPayload_WebInfo_WebSubPlatform.DARWIN;
    case 4:
    case "WIN32":
      return ClientPayload_WebInfo_WebSubPlatform.WIN32;
    case 5:
    case "WIN_HYBRID":
      return ClientPayload_WebInfo_WebSubPlatform.WIN_HYBRID;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ClientPayload_WebInfo_WebSubPlatform.UNRECOGNIZED;
  }
}

export function clientPayload_WebInfo_WebSubPlatformToJSON(object: ClientPayload_WebInfo_WebSubPlatform): string {
  switch (object) {
    case ClientPayload_WebInfo_WebSubPlatform.WEB_BROWSER:
      return "WEB_BROWSER";
    case ClientPayload_WebInfo_WebSubPlatform.APP_STORE:
      return "APP_STORE";
    case ClientPayload_WebInfo_WebSubPlatform.WIN_STORE:
      return "WIN_STORE";
    case ClientPayload_WebInfo_WebSubPlatform.DARWIN:
      return "DARWIN";
    case ClientPayload_WebInfo_WebSubPlatform.WIN32:
      return "WIN32";
    case ClientPayload_WebInfo_WebSubPlatform.WIN_HYBRID:
      return "WIN_HYBRID";
    case ClientPayload_WebInfo_WebSubPlatform.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ClientPayload_WebInfo_WebdPayload {
  usesParticipantInKey?: boolean | undefined;
  supportsStarredMessages?: boolean | undefined;
  supportsDocumentMessages?: boolean | undefined;
  supportsUrlMessages?: boolean | undefined;
  supportsMediaRetry?: boolean | undefined;
  supportsE2EImage?: boolean | undefined;
  supportsE2EVideo?: boolean | undefined;
  supportsE2EAudio?: boolean | undefined;
  supportsE2EDocument?: boolean | undefined;
  documentTypes?: string | undefined;
  features?: Uint8Array | undefined;
}

export interface CommentMetadata {
  commentParentKey?: MessageKey | undefined;
  replyCount?: number | undefined;
}

export interface CompanionCommitment {
  hash?: Uint8Array | undefined;
}

export interface CompanionEphemeralIdentity {
  publicKey?: Uint8Array | undefined;
  deviceType?: DeviceProps_PlatformType | undefined;
  ref?: string | undefined;
}

export interface Config {
  field: { [key: number]: Field };
  version?: number | undefined;
}

export interface Config_FieldEntry {
  key: number;
  value: Field | undefined;
}

export interface ContextInfo {
  stanzaId?: string | undefined;
  participant?: string | undefined;
  quotedMessage?: Message | undefined;
  remoteJid?: string | undefined;
  mentionedJid: string[];
  conversionSource?: string | undefined;
  conversionData?: Uint8Array | undefined;
  conversionDelaySeconds?: number | undefined;
  forwardingScore?: number | undefined;
  isForwarded?: boolean | undefined;
  quotedAd?: ContextInfo_AdReplyInfo | undefined;
  placeholderKey?: MessageKey | undefined;
  expiration?: number | undefined;
  ephemeralSettingTimestamp?: number | undefined;
  ephemeralSharedSecret?: Uint8Array | undefined;
  externalAdReply?: ContextInfo_ExternalAdReplyInfo | undefined;
  entryPointConversionSource?: string | undefined;
  entryPointConversionApp?: string | undefined;
  entryPointConversionDelaySeconds?: number | undefined;
  disappearingMode?: DisappearingMode | undefined;
  actionLink?: ActionLink | undefined;
  groupSubject?: string | undefined;
  parentGroupJid?: string | undefined;
  trustBannerType?: string | undefined;
  trustBannerAction?: number | undefined;
  isSampled?: boolean | undefined;
  groupMentions: GroupMention[];
  utm?: ContextInfo_UTMInfo | undefined;
  forwardedNewsletterMessageInfo?: ContextInfo_ForwardedNewsletterMessageInfo | undefined;
  businessMessageForwardInfo?: ContextInfo_BusinessMessageForwardInfo | undefined;
  smbClientCampaignId?: string | undefined;
  smbServerCampaignId?: string | undefined;
  dataSharingContext?: ContextInfo_DataSharingContext | undefined;
  alwaysShowAdAttribution?: boolean | undefined;
  featureEligibilities?: ContextInfo_FeatureEligibilities | undefined;
  entryPointConversionExternalSource?: string | undefined;
  entryPointConversionExternalMedium?: string | undefined;
  ctwaSignals?: string | undefined;
  ctwaPayload?: Uint8Array | undefined;
  forwardedAiBotMessageInfo?: ContextInfo_ForwardedAIBotMessageInfo | undefined;
  statusAttributionType?: ContextInfo_StatusAttributionType | undefined;
  urlTrackingMap?: UrlTrackingMap | undefined;
  pairedMediaType?: ContextInfo_PairedMediaType | undefined;
  rankingVersion?: number | undefined;
  memberLabel?: MemberLabel | undefined;
  isQuestion?: boolean | undefined;
  statusSourceType?: ContextInfo_StatusSourceType | undefined;
}

export enum ContextInfo_PairedMediaType {
  NOT_PAIRED_MEDIA = 0,
  SD_VIDEO_PARENT = 1,
  HD_VIDEO_CHILD = 2,
  SD_IMAGE_PARENT = 3,
  HD_IMAGE_CHILD = 4,
  MOTION_PHOTO_PARENT = 5,
  MOTION_PHOTO_CHILD = 6,
  UNRECOGNIZED = -1,
}

export function contextInfo_PairedMediaTypeFromJSON(object: any): ContextInfo_PairedMediaType {
  switch (object) {
    case 0:
    case "NOT_PAIRED_MEDIA":
      return ContextInfo_PairedMediaType.NOT_PAIRED_MEDIA;
    case 1:
    case "SD_VIDEO_PARENT":
      return ContextInfo_PairedMediaType.SD_VIDEO_PARENT;
    case 2:
    case "HD_VIDEO_CHILD":
      return ContextInfo_PairedMediaType.HD_VIDEO_CHILD;
    case 3:
    case "SD_IMAGE_PARENT":
      return ContextInfo_PairedMediaType.SD_IMAGE_PARENT;
    case 4:
    case "HD_IMAGE_CHILD":
      return ContextInfo_PairedMediaType.HD_IMAGE_CHILD;
    case 5:
    case "MOTION_PHOTO_PARENT":
      return ContextInfo_PairedMediaType.MOTION_PHOTO_PARENT;
    case 6:
    case "MOTION_PHOTO_CHILD":
      return ContextInfo_PairedMediaType.MOTION_PHOTO_CHILD;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ContextInfo_PairedMediaType.UNRECOGNIZED;
  }
}

export function contextInfo_PairedMediaTypeToJSON(object: ContextInfo_PairedMediaType): string {
  switch (object) {
    case ContextInfo_PairedMediaType.NOT_PAIRED_MEDIA:
      return "NOT_PAIRED_MEDIA";
    case ContextInfo_PairedMediaType.SD_VIDEO_PARENT:
      return "SD_VIDEO_PARENT";
    case ContextInfo_PairedMediaType.HD_VIDEO_CHILD:
      return "HD_VIDEO_CHILD";
    case ContextInfo_PairedMediaType.SD_IMAGE_PARENT:
      return "SD_IMAGE_PARENT";
    case ContextInfo_PairedMediaType.HD_IMAGE_CHILD:
      return "HD_IMAGE_CHILD";
    case ContextInfo_PairedMediaType.MOTION_PHOTO_PARENT:
      return "MOTION_PHOTO_PARENT";
    case ContextInfo_PairedMediaType.MOTION_PHOTO_CHILD:
      return "MOTION_PHOTO_CHILD";
    case ContextInfo_PairedMediaType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ContextInfo_StatusAttributionType {
  NONE = 0,
  RESHARED_FROM_MENTION = 1,
  RESHARED_FROM_POST = 2,
  UNRECOGNIZED = -1,
}

export function contextInfo_StatusAttributionTypeFromJSON(object: any): ContextInfo_StatusAttributionType {
  switch (object) {
    case 0:
    case "NONE":
      return ContextInfo_StatusAttributionType.NONE;
    case 1:
    case "RESHARED_FROM_MENTION":
      return ContextInfo_StatusAttributionType.RESHARED_FROM_MENTION;
    case 2:
    case "RESHARED_FROM_POST":
      return ContextInfo_StatusAttributionType.RESHARED_FROM_POST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ContextInfo_StatusAttributionType.UNRECOGNIZED;
  }
}

export function contextInfo_StatusAttributionTypeToJSON(object: ContextInfo_StatusAttributionType): string {
  switch (object) {
    case ContextInfo_StatusAttributionType.NONE:
      return "NONE";
    case ContextInfo_StatusAttributionType.RESHARED_FROM_MENTION:
      return "RESHARED_FROM_MENTION";
    case ContextInfo_StatusAttributionType.RESHARED_FROM_POST:
      return "RESHARED_FROM_POST";
    case ContextInfo_StatusAttributionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ContextInfo_StatusSourceType {
  IMAGE = 0,
  VIDEO = 1,
  GIF = 2,
  AUDIO = 3,
  TEXT = 4,
  MUSIC_STANDALONE = 5,
  UNRECOGNIZED = -1,
}

export function contextInfo_StatusSourceTypeFromJSON(object: any): ContextInfo_StatusSourceType {
  switch (object) {
    case 0:
    case "IMAGE":
      return ContextInfo_StatusSourceType.IMAGE;
    case 1:
    case "VIDEO":
      return ContextInfo_StatusSourceType.VIDEO;
    case 2:
    case "GIF":
      return ContextInfo_StatusSourceType.GIF;
    case 3:
    case "AUDIO":
      return ContextInfo_StatusSourceType.AUDIO;
    case 4:
    case "TEXT":
      return ContextInfo_StatusSourceType.TEXT;
    case 5:
    case "MUSIC_STANDALONE":
      return ContextInfo_StatusSourceType.MUSIC_STANDALONE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ContextInfo_StatusSourceType.UNRECOGNIZED;
  }
}

export function contextInfo_StatusSourceTypeToJSON(object: ContextInfo_StatusSourceType): string {
  switch (object) {
    case ContextInfo_StatusSourceType.IMAGE:
      return "IMAGE";
    case ContextInfo_StatusSourceType.VIDEO:
      return "VIDEO";
    case ContextInfo_StatusSourceType.GIF:
      return "GIF";
    case ContextInfo_StatusSourceType.AUDIO:
      return "AUDIO";
    case ContextInfo_StatusSourceType.TEXT:
      return "TEXT";
    case ContextInfo_StatusSourceType.MUSIC_STANDALONE:
      return "MUSIC_STANDALONE";
    case ContextInfo_StatusSourceType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ContextInfo_AdReplyInfo {
  advertiserName?: string | undefined;
  mediaType?: ContextInfo_AdReplyInfo_MediaType | undefined;
  jpegThumbnail?: Uint8Array | undefined;
  caption?: string | undefined;
}

export enum ContextInfo_AdReplyInfo_MediaType {
  NONE = 0,
  IMAGE = 1,
  VIDEO = 2,
  UNRECOGNIZED = -1,
}

export function contextInfo_AdReplyInfo_MediaTypeFromJSON(object: any): ContextInfo_AdReplyInfo_MediaType {
  switch (object) {
    case 0:
    case "NONE":
      return ContextInfo_AdReplyInfo_MediaType.NONE;
    case 1:
    case "IMAGE":
      return ContextInfo_AdReplyInfo_MediaType.IMAGE;
    case 2:
    case "VIDEO":
      return ContextInfo_AdReplyInfo_MediaType.VIDEO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ContextInfo_AdReplyInfo_MediaType.UNRECOGNIZED;
  }
}

export function contextInfo_AdReplyInfo_MediaTypeToJSON(object: ContextInfo_AdReplyInfo_MediaType): string {
  switch (object) {
    case ContextInfo_AdReplyInfo_MediaType.NONE:
      return "NONE";
    case ContextInfo_AdReplyInfo_MediaType.IMAGE:
      return "IMAGE";
    case ContextInfo_AdReplyInfo_MediaType.VIDEO:
      return "VIDEO";
    case ContextInfo_AdReplyInfo_MediaType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ContextInfo_BusinessMessageForwardInfo {
  businessOwnerJid?: string | undefined;
}

export interface ContextInfo_DataSharingContext {
  showMmDisclosure?: boolean | undefined;
  encryptedSignalTokenConsented?: string | undefined;
  parameters: ContextInfo_DataSharingContext_Parameters[];
}

export interface ContextInfo_DataSharingContext_Parameters {
  key?: string | undefined;
  stringData?: string | undefined;
  intData?: number | undefined;
  floatData?: number | undefined;
  contents?: ContextInfo_DataSharingContext_Parameters | undefined;
}

export interface ContextInfo_ExternalAdReplyInfo {
  title?: string | undefined;
  body?: string | undefined;
  mediaType?: ContextInfo_ExternalAdReplyInfo_MediaType | undefined;
  thumbnailUrl?: string | undefined;
  mediaUrl?: string | undefined;
  thumbnail?: Uint8Array | undefined;
  sourceType?: string | undefined;
  sourceId?: string | undefined;
  sourceUrl?: string | undefined;
  containsAutoReply?: boolean | undefined;
  renderLargerThumbnail?: boolean | undefined;
  showAdAttribution?: boolean | undefined;
  ctwaClid?: string | undefined;
  ref?: string | undefined;
  clickToWhatsappCall?: boolean | undefined;
  adContextPreviewDismissed?: boolean | undefined;
  sourceApp?: string | undefined;
  automatedGreetingMessageShown?: boolean | undefined;
  greetingMessageBody?: string | undefined;
  ctaPayload?: string | undefined;
  disableNudge?: boolean | undefined;
  originalImageUrl?: string | undefined;
  automatedGreetingMessageCtaType?: string | undefined;
  wtwaAdFormat?: boolean | undefined;
  adType?: ContextInfo_ExternalAdReplyInfo_AdType | undefined;
}

export enum ContextInfo_ExternalAdReplyInfo_AdType {
  CTWA = 0,
  CAWC = 1,
  UNRECOGNIZED = -1,
}

export function contextInfo_ExternalAdReplyInfo_AdTypeFromJSON(object: any): ContextInfo_ExternalAdReplyInfo_AdType {
  switch (object) {
    case 0:
    case "CTWA":
      return ContextInfo_ExternalAdReplyInfo_AdType.CTWA;
    case 1:
    case "CAWC":
      return ContextInfo_ExternalAdReplyInfo_AdType.CAWC;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ContextInfo_ExternalAdReplyInfo_AdType.UNRECOGNIZED;
  }
}

export function contextInfo_ExternalAdReplyInfo_AdTypeToJSON(object: ContextInfo_ExternalAdReplyInfo_AdType): string {
  switch (object) {
    case ContextInfo_ExternalAdReplyInfo_AdType.CTWA:
      return "CTWA";
    case ContextInfo_ExternalAdReplyInfo_AdType.CAWC:
      return "CAWC";
    case ContextInfo_ExternalAdReplyInfo_AdType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ContextInfo_ExternalAdReplyInfo_MediaType {
  NONE = 0,
  IMAGE = 1,
  VIDEO = 2,
  UNRECOGNIZED = -1,
}

export function contextInfo_ExternalAdReplyInfo_MediaTypeFromJSON(
  object: any,
): ContextInfo_ExternalAdReplyInfo_MediaType {
  switch (object) {
    case 0:
    case "NONE":
      return ContextInfo_ExternalAdReplyInfo_MediaType.NONE;
    case 1:
    case "IMAGE":
      return ContextInfo_ExternalAdReplyInfo_MediaType.IMAGE;
    case 2:
    case "VIDEO":
      return ContextInfo_ExternalAdReplyInfo_MediaType.VIDEO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ContextInfo_ExternalAdReplyInfo_MediaType.UNRECOGNIZED;
  }
}

export function contextInfo_ExternalAdReplyInfo_MediaTypeToJSON(
  object: ContextInfo_ExternalAdReplyInfo_MediaType,
): string {
  switch (object) {
    case ContextInfo_ExternalAdReplyInfo_MediaType.NONE:
      return "NONE";
    case ContextInfo_ExternalAdReplyInfo_MediaType.IMAGE:
      return "IMAGE";
    case ContextInfo_ExternalAdReplyInfo_MediaType.VIDEO:
      return "VIDEO";
    case ContextInfo_ExternalAdReplyInfo_MediaType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ContextInfo_FeatureEligibilities {
  cannotBeReactedTo?: boolean | undefined;
  cannotBeRanked?: boolean | undefined;
  canRequestFeedback?: boolean | undefined;
  canBeReshared?: boolean | undefined;
}

export interface ContextInfo_ForwardedAIBotMessageInfo {
  botName?: string | undefined;
  botJid?: string | undefined;
  creatorName?: string | undefined;
}

export interface ContextInfo_ForwardedNewsletterMessageInfo {
  newsletterJid?: string | undefined;
  serverMessageId?: number | undefined;
  newsletterName?: string | undefined;
  contentType?: ContextInfo_ForwardedNewsletterMessageInfo_ContentType | undefined;
  accessibilityText?: string | undefined;
}

export enum ContextInfo_ForwardedNewsletterMessageInfo_ContentType {
  UNKNOWN = 0,
  UPDATE = 1,
  UPDATE_CARD = 2,
  LINK_CARD = 3,
  UNRECOGNIZED = -1,
}

export function contextInfo_ForwardedNewsletterMessageInfo_ContentTypeFromJSON(
  object: any,
): ContextInfo_ForwardedNewsletterMessageInfo_ContentType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return ContextInfo_ForwardedNewsletterMessageInfo_ContentType.UNKNOWN;
    case 1:
    case "UPDATE":
      return ContextInfo_ForwardedNewsletterMessageInfo_ContentType.UPDATE;
    case 2:
    case "UPDATE_CARD":
      return ContextInfo_ForwardedNewsletterMessageInfo_ContentType.UPDATE_CARD;
    case 3:
    case "LINK_CARD":
      return ContextInfo_ForwardedNewsletterMessageInfo_ContentType.LINK_CARD;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ContextInfo_ForwardedNewsletterMessageInfo_ContentType.UNRECOGNIZED;
  }
}

export function contextInfo_ForwardedNewsletterMessageInfo_ContentTypeToJSON(
  object: ContextInfo_ForwardedNewsletterMessageInfo_ContentType,
): string {
  switch (object) {
    case ContextInfo_ForwardedNewsletterMessageInfo_ContentType.UNKNOWN:
      return "UNKNOWN";
    case ContextInfo_ForwardedNewsletterMessageInfo_ContentType.UPDATE:
      return "UPDATE";
    case ContextInfo_ForwardedNewsletterMessageInfo_ContentType.UPDATE_CARD:
      return "UPDATE_CARD";
    case ContextInfo_ForwardedNewsletterMessageInfo_ContentType.LINK_CARD:
      return "LINK_CARD";
    case ContextInfo_ForwardedNewsletterMessageInfo_ContentType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ContextInfo_UTMInfo {
  utmSource?: string | undefined;
  utmCampaign?: string | undefined;
}

export interface Conversation {
  id: string;
  messages: HistorySyncMsg[];
  newJid?: string | undefined;
  oldJid?: string | undefined;
  lastMsgTimestamp?: number | undefined;
  unreadCount?: number | undefined;
  readOnly?: boolean | undefined;
  endOfHistoryTransfer?: boolean | undefined;
  ephemeralExpiration?: number | undefined;
  ephemeralSettingTimestamp?: number | undefined;
  endOfHistoryTransferType?: Conversation_EndOfHistoryTransferType | undefined;
  conversationTimestamp?: number | undefined;
  name?: string | undefined;
  pHash?: string | undefined;
  notSpam?: boolean | undefined;
  archived?: boolean | undefined;
  disappearingMode?: DisappearingMode | undefined;
  unreadMentionCount?: number | undefined;
  markedAsUnread?: boolean | undefined;
  participant: GroupParticipant[];
  tcToken?: Uint8Array | undefined;
  tcTokenTimestamp?: number | undefined;
  contactPrimaryIdentityKey?: Uint8Array | undefined;
  pinned?: number | undefined;
  muteEndTime?: number | undefined;
  wallpaper?: WallpaperSettings | undefined;
  mediaVisibility?: MediaVisibility | undefined;
  tcTokenSenderTimestamp?: number | undefined;
  suspended?: boolean | undefined;
  terminated?: boolean | undefined;
  createdAt?: number | undefined;
  createdBy?: string | undefined;
  description?: string | undefined;
  support?: boolean | undefined;
  isParentGroup?: boolean | undefined;
  parentGroupId?: string | undefined;
  isDefaultSubgroup?: boolean | undefined;
  displayName?: string | undefined;
  pnJid?: string | undefined;
  shareOwnPn?: boolean | undefined;
  pnhDuplicateLidThread?: boolean | undefined;
  lidJid?: string | undefined;
  username?: string | undefined;
  lidOriginType?: string | undefined;
  commentsCount?: number | undefined;
  locked?: boolean | undefined;
  systemMessageToInsert?: PrivacySystemMessage | undefined;
  capiCreatedGroup?: boolean | undefined;
  accountLid?: string | undefined;
  limitSharing?: boolean | undefined;
  limitSharingSettingTimestamp?: number | undefined;
  limitSharingTrigger?: LimitSharing_TriggerType | undefined;
  limitSharingInitiatedByMe?: boolean | undefined;
}

export enum Conversation_EndOfHistoryTransferType {
  COMPLETE_BUT_MORE_MESSAGES_REMAIN_ON_PRIMARY = 0,
  COMPLETE_AND_NO_MORE_MESSAGE_REMAIN_ON_PRIMARY = 1,
  COMPLETE_ON_DEMAND_SYNC_BUT_MORE_MSG_REMAIN_ON_PRIMARY = 2,
  UNRECOGNIZED = -1,
}

export function conversation_EndOfHistoryTransferTypeFromJSON(object: any): Conversation_EndOfHistoryTransferType {
  switch (object) {
    case 0:
    case "COMPLETE_BUT_MORE_MESSAGES_REMAIN_ON_PRIMARY":
      return Conversation_EndOfHistoryTransferType.COMPLETE_BUT_MORE_MESSAGES_REMAIN_ON_PRIMARY;
    case 1:
    case "COMPLETE_AND_NO_MORE_MESSAGE_REMAIN_ON_PRIMARY":
      return Conversation_EndOfHistoryTransferType.COMPLETE_AND_NO_MORE_MESSAGE_REMAIN_ON_PRIMARY;
    case 2:
    case "COMPLETE_ON_DEMAND_SYNC_BUT_MORE_MSG_REMAIN_ON_PRIMARY":
      return Conversation_EndOfHistoryTransferType.COMPLETE_ON_DEMAND_SYNC_BUT_MORE_MSG_REMAIN_ON_PRIMARY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Conversation_EndOfHistoryTransferType.UNRECOGNIZED;
  }
}

export function conversation_EndOfHistoryTransferTypeToJSON(object: Conversation_EndOfHistoryTransferType): string {
  switch (object) {
    case Conversation_EndOfHistoryTransferType.COMPLETE_BUT_MORE_MESSAGES_REMAIN_ON_PRIMARY:
      return "COMPLETE_BUT_MORE_MESSAGES_REMAIN_ON_PRIMARY";
    case Conversation_EndOfHistoryTransferType.COMPLETE_AND_NO_MORE_MESSAGE_REMAIN_ON_PRIMARY:
      return "COMPLETE_AND_NO_MORE_MESSAGE_REMAIN_ON_PRIMARY";
    case Conversation_EndOfHistoryTransferType.COMPLETE_ON_DEMAND_SYNC_BUT_MORE_MSG_REMAIN_ON_PRIMARY:
      return "COMPLETE_ON_DEMAND_SYNC_BUT_MORE_MSG_REMAIN_ON_PRIMARY";
    case Conversation_EndOfHistoryTransferType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface DeviceCapabilities {
  chatLockSupportLevel?: DeviceCapabilities_ChatLockSupportLevel | undefined;
  lidMigration?: DeviceCapabilities_LIDMigration | undefined;
}

export enum DeviceCapabilities_ChatLockSupportLevel {
  NONE = 0,
  MINIMAL = 1,
  FULL = 2,
  UNRECOGNIZED = -1,
}

export function deviceCapabilities_ChatLockSupportLevelFromJSON(object: any): DeviceCapabilities_ChatLockSupportLevel {
  switch (object) {
    case 0:
    case "NONE":
      return DeviceCapabilities_ChatLockSupportLevel.NONE;
    case 1:
    case "MINIMAL":
      return DeviceCapabilities_ChatLockSupportLevel.MINIMAL;
    case 2:
    case "FULL":
      return DeviceCapabilities_ChatLockSupportLevel.FULL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DeviceCapabilities_ChatLockSupportLevel.UNRECOGNIZED;
  }
}

export function deviceCapabilities_ChatLockSupportLevelToJSON(object: DeviceCapabilities_ChatLockSupportLevel): string {
  switch (object) {
    case DeviceCapabilities_ChatLockSupportLevel.NONE:
      return "NONE";
    case DeviceCapabilities_ChatLockSupportLevel.MINIMAL:
      return "MINIMAL";
    case DeviceCapabilities_ChatLockSupportLevel.FULL:
      return "FULL";
    case DeviceCapabilities_ChatLockSupportLevel.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface DeviceCapabilities_LIDMigration {
  chatDbMigrationTimestamp?: number | undefined;
}

export interface DeviceConsistencyCodeMessage {
  generation?: number | undefined;
  signature?: Uint8Array | undefined;
}

export interface DeviceListMetadata {
  senderKeyHash?: Uint8Array | undefined;
  senderTimestamp?: number | undefined;
  senderKeyIndexes: number[];
  senderAccountType?: ADVEncryptionType | undefined;
  receiverAccountType?: ADVEncryptionType | undefined;
  recipientKeyHash?: Uint8Array | undefined;
  recipientTimestamp?: number | undefined;
  recipientKeyIndexes: number[];
}

export interface DeviceProps {
  os?: string | undefined;
  version?: DeviceProps_AppVersion | undefined;
  platformType?: DeviceProps_PlatformType | undefined;
  requireFullSync?: boolean | undefined;
  historySyncConfig?: DeviceProps_HistorySyncConfig | undefined;
}

export enum DeviceProps_PlatformType {
  UNKNOWN = 0,
  CHROME = 1,
  FIREFOX = 2,
  IE = 3,
  OPERA = 4,
  SAFARI = 5,
  EDGE = 6,
  DESKTOP = 7,
  IPAD = 8,
  ANDROID_TABLET = 9,
  OHANA = 10,
  ALOHA = 11,
  CATALINA = 12,
  TCL_TV = 13,
  IOS_PHONE = 14,
  IOS_CATALYST = 15,
  ANDROID_PHONE = 16,
  ANDROID_AMBIGUOUS = 17,
  WEAR_OS = 18,
  AR_WRIST = 19,
  AR_DEVICE = 20,
  UWP = 21,
  VR = 22,
  CLOUD_API = 23,
  SMARTGLASSES = 24,
  UNRECOGNIZED = -1,
}

export function deviceProps_PlatformTypeFromJSON(object: any): DeviceProps_PlatformType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return DeviceProps_PlatformType.UNKNOWN;
    case 1:
    case "CHROME":
      return DeviceProps_PlatformType.CHROME;
    case 2:
    case "FIREFOX":
      return DeviceProps_PlatformType.FIREFOX;
    case 3:
    case "IE":
      return DeviceProps_PlatformType.IE;
    case 4:
    case "OPERA":
      return DeviceProps_PlatformType.OPERA;
    case 5:
    case "SAFARI":
      return DeviceProps_PlatformType.SAFARI;
    case 6:
    case "EDGE":
      return DeviceProps_PlatformType.EDGE;
    case 7:
    case "DESKTOP":
      return DeviceProps_PlatformType.DESKTOP;
    case 8:
    case "IPAD":
      return DeviceProps_PlatformType.IPAD;
    case 9:
    case "ANDROID_TABLET":
      return DeviceProps_PlatformType.ANDROID_TABLET;
    case 10:
    case "OHANA":
      return DeviceProps_PlatformType.OHANA;
    case 11:
    case "ALOHA":
      return DeviceProps_PlatformType.ALOHA;
    case 12:
    case "CATALINA":
      return DeviceProps_PlatformType.CATALINA;
    case 13:
    case "TCL_TV":
      return DeviceProps_PlatformType.TCL_TV;
    case 14:
    case "IOS_PHONE":
      return DeviceProps_PlatformType.IOS_PHONE;
    case 15:
    case "IOS_CATALYST":
      return DeviceProps_PlatformType.IOS_CATALYST;
    case 16:
    case "ANDROID_PHONE":
      return DeviceProps_PlatformType.ANDROID_PHONE;
    case 17:
    case "ANDROID_AMBIGUOUS":
      return DeviceProps_PlatformType.ANDROID_AMBIGUOUS;
    case 18:
    case "WEAR_OS":
      return DeviceProps_PlatformType.WEAR_OS;
    case 19:
    case "AR_WRIST":
      return DeviceProps_PlatformType.AR_WRIST;
    case 20:
    case "AR_DEVICE":
      return DeviceProps_PlatformType.AR_DEVICE;
    case 21:
    case "UWP":
      return DeviceProps_PlatformType.UWP;
    case 22:
    case "VR":
      return DeviceProps_PlatformType.VR;
    case 23:
    case "CLOUD_API":
      return DeviceProps_PlatformType.CLOUD_API;
    case 24:
    case "SMARTGLASSES":
      return DeviceProps_PlatformType.SMARTGLASSES;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DeviceProps_PlatformType.UNRECOGNIZED;
  }
}

export function deviceProps_PlatformTypeToJSON(object: DeviceProps_PlatformType): string {
  switch (object) {
    case DeviceProps_PlatformType.UNKNOWN:
      return "UNKNOWN";
    case DeviceProps_PlatformType.CHROME:
      return "CHROME";
    case DeviceProps_PlatformType.FIREFOX:
      return "FIREFOX";
    case DeviceProps_PlatformType.IE:
      return "IE";
    case DeviceProps_PlatformType.OPERA:
      return "OPERA";
    case DeviceProps_PlatformType.SAFARI:
      return "SAFARI";
    case DeviceProps_PlatformType.EDGE:
      return "EDGE";
    case DeviceProps_PlatformType.DESKTOP:
      return "DESKTOP";
    case DeviceProps_PlatformType.IPAD:
      return "IPAD";
    case DeviceProps_PlatformType.ANDROID_TABLET:
      return "ANDROID_TABLET";
    case DeviceProps_PlatformType.OHANA:
      return "OHANA";
    case DeviceProps_PlatformType.ALOHA:
      return "ALOHA";
    case DeviceProps_PlatformType.CATALINA:
      return "CATALINA";
    case DeviceProps_PlatformType.TCL_TV:
      return "TCL_TV";
    case DeviceProps_PlatformType.IOS_PHONE:
      return "IOS_PHONE";
    case DeviceProps_PlatformType.IOS_CATALYST:
      return "IOS_CATALYST";
    case DeviceProps_PlatformType.ANDROID_PHONE:
      return "ANDROID_PHONE";
    case DeviceProps_PlatformType.ANDROID_AMBIGUOUS:
      return "ANDROID_AMBIGUOUS";
    case DeviceProps_PlatformType.WEAR_OS:
      return "WEAR_OS";
    case DeviceProps_PlatformType.AR_WRIST:
      return "AR_WRIST";
    case DeviceProps_PlatformType.AR_DEVICE:
      return "AR_DEVICE";
    case DeviceProps_PlatformType.UWP:
      return "UWP";
    case DeviceProps_PlatformType.VR:
      return "VR";
    case DeviceProps_PlatformType.CLOUD_API:
      return "CLOUD_API";
    case DeviceProps_PlatformType.SMARTGLASSES:
      return "SMARTGLASSES";
    case DeviceProps_PlatformType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface DeviceProps_AppVersion {
  primary?: number | undefined;
  secondary?: number | undefined;
  tertiary?: number | undefined;
  quaternary?: number | undefined;
  quinary?: number | undefined;
}

export interface DeviceProps_HistorySyncConfig {
  fullSyncDaysLimit?: number | undefined;
  fullSyncSizeMbLimit?: number | undefined;
  storageQuotaMb?: number | undefined;
  inlineInitialPayloadInE2EeMsg?: boolean | undefined;
  recentSyncDaysLimit?: number | undefined;
  supportCallLogHistory?: boolean | undefined;
  supportBotUserAgentChatHistory?: boolean | undefined;
  supportCagReactionsAndPolls?: boolean | undefined;
  supportBizHostedMsg?: boolean | undefined;
  supportRecentSyncChunkMessageCountTuning?: boolean | undefined;
  supportHostedGroupMsg?: boolean | undefined;
  supportFbidBotChatHistory?: boolean | undefined;
  supportAddOnHistorySyncMigration?: boolean | undefined;
  supportMessageAssociation?: boolean | undefined;
}

export interface DisappearingMode {
  initiator?: DisappearingMode_Initiator | undefined;
  trigger?: DisappearingMode_Trigger | undefined;
  initiatorDeviceJid?: string | undefined;
  initiatedByMe?: boolean | undefined;
}

export enum DisappearingMode_Initiator {
  CHANGED_IN_CHAT = 0,
  INITIATED_BY_ME = 1,
  INITIATED_BY_OTHER = 2,
  BIZ_UPGRADE_FB_HOSTING = 3,
  UNRECOGNIZED = -1,
}

export function disappearingMode_InitiatorFromJSON(object: any): DisappearingMode_Initiator {
  switch (object) {
    case 0:
    case "CHANGED_IN_CHAT":
      return DisappearingMode_Initiator.CHANGED_IN_CHAT;
    case 1:
    case "INITIATED_BY_ME":
      return DisappearingMode_Initiator.INITIATED_BY_ME;
    case 2:
    case "INITIATED_BY_OTHER":
      return DisappearingMode_Initiator.INITIATED_BY_OTHER;
    case 3:
    case "BIZ_UPGRADE_FB_HOSTING":
      return DisappearingMode_Initiator.BIZ_UPGRADE_FB_HOSTING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DisappearingMode_Initiator.UNRECOGNIZED;
  }
}

export function disappearingMode_InitiatorToJSON(object: DisappearingMode_Initiator): string {
  switch (object) {
    case DisappearingMode_Initiator.CHANGED_IN_CHAT:
      return "CHANGED_IN_CHAT";
    case DisappearingMode_Initiator.INITIATED_BY_ME:
      return "INITIATED_BY_ME";
    case DisappearingMode_Initiator.INITIATED_BY_OTHER:
      return "INITIATED_BY_OTHER";
    case DisappearingMode_Initiator.BIZ_UPGRADE_FB_HOSTING:
      return "BIZ_UPGRADE_FB_HOSTING";
    case DisappearingMode_Initiator.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum DisappearingMode_Trigger {
  UNKNOWN = 0,
  CHAT_SETTING = 1,
  ACCOUNT_SETTING = 2,
  BULK_CHANGE = 3,
  BIZ_SUPPORTS_FB_HOSTING = 4,
  UNKNOWN_GROUPS = 5,
  UNRECOGNIZED = -1,
}

export function disappearingMode_TriggerFromJSON(object: any): DisappearingMode_Trigger {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return DisappearingMode_Trigger.UNKNOWN;
    case 1:
    case "CHAT_SETTING":
      return DisappearingMode_Trigger.CHAT_SETTING;
    case 2:
    case "ACCOUNT_SETTING":
      return DisappearingMode_Trigger.ACCOUNT_SETTING;
    case 3:
    case "BULK_CHANGE":
      return DisappearingMode_Trigger.BULK_CHANGE;
    case 4:
    case "BIZ_SUPPORTS_FB_HOSTING":
      return DisappearingMode_Trigger.BIZ_SUPPORTS_FB_HOSTING;
    case 5:
    case "UNKNOWN_GROUPS":
      return DisappearingMode_Trigger.UNKNOWN_GROUPS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DisappearingMode_Trigger.UNRECOGNIZED;
  }
}

export function disappearingMode_TriggerToJSON(object: DisappearingMode_Trigger): string {
  switch (object) {
    case DisappearingMode_Trigger.UNKNOWN:
      return "UNKNOWN";
    case DisappearingMode_Trigger.CHAT_SETTING:
      return "CHAT_SETTING";
    case DisappearingMode_Trigger.ACCOUNT_SETTING:
      return "ACCOUNT_SETTING";
    case DisappearingMode_Trigger.BULK_CHANGE:
      return "BULK_CHANGE";
    case DisappearingMode_Trigger.BIZ_SUPPORTS_FB_HOSTING:
      return "BIZ_SUPPORTS_FB_HOSTING";
    case DisappearingMode_Trigger.UNKNOWN_GROUPS:
      return "UNKNOWN_GROUPS";
    case DisappearingMode_Trigger.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface EmbeddedContent {
  embeddedMessage?: EmbeddedMessage | undefined;
  embeddedMusic?: EmbeddedMusic | undefined;
}

export interface EmbeddedMessage {
  stanzaId?: string | undefined;
  message?: Message | undefined;
}

export interface EmbeddedMusic {
  musicContentMediaId?: string | undefined;
  songId?: string | undefined;
  author?: string | undefined;
  title?: string | undefined;
  artworkDirectPath?: string | undefined;
  artworkSha256?: Uint8Array | undefined;
  artworkEncSha256?: Uint8Array | undefined;
  artworkMediaKey?: Uint8Array | undefined;
  artistAttribution?: string | undefined;
  countryBlocklist?: Uint8Array | undefined;
  isExplicit?: boolean | undefined;
}

export interface EncryptedPairingRequest {
  encryptedPayload?: Uint8Array | undefined;
  iv?: Uint8Array | undefined;
}

export interface EphemeralSetting {
  duration?: number | undefined;
  timestamp?: number | undefined;
}

export interface EventAdditionalMetadata {
  isStale?: boolean | undefined;
}

export interface EventResponse {
  eventResponseMessageKey?: MessageKey | undefined;
  timestampMs?: number | undefined;
  eventResponseMessage?: Message_EventResponseMessage | undefined;
  unread?: boolean | undefined;
}

export interface ExitCode {
  code?: number | undefined;
  text?: string | undefined;
}

export interface ExternalBlobReference {
  mediaKey?: Uint8Array | undefined;
  directPath?: string | undefined;
  handle?: string | undefined;
  fileSizeBytes?: number | undefined;
  fileSha256?: Uint8Array | undefined;
  fileEncSha256?: Uint8Array | undefined;
}

export interface Field {
  minVersion?: number | undefined;
  maxVersion?: number | undefined;
  notReportableMinVersion?: number | undefined;
  isMessage?: boolean | undefined;
  subfield: { [key: number]: Field };
}

export interface Field_SubfieldEntry {
  key: number;
  value: Field | undefined;
}

export interface GlobalSettings {
  lightThemeWallpaper?: WallpaperSettings | undefined;
  mediaVisibility?: MediaVisibility | undefined;
  darkThemeWallpaper?: WallpaperSettings | undefined;
  autoDownloadWiFi?: AutoDownloadSettings | undefined;
  autoDownloadCellular?: AutoDownloadSettings | undefined;
  autoDownloadRoaming?: AutoDownloadSettings | undefined;
  showIndividualNotificationsPreview?: boolean | undefined;
  showGroupNotificationsPreview?: boolean | undefined;
  disappearingModeDuration?: number | undefined;
  disappearingModeTimestamp?: number | undefined;
  avatarUserSettings?: AvatarUserSettings | undefined;
  fontSize?: number | undefined;
  securityNotifications?: boolean | undefined;
  autoUnarchiveChats?: boolean | undefined;
  videoQualityMode?: number | undefined;
  photoQualityMode?: number | undefined;
  individualNotificationSettings?: NotificationSettings | undefined;
  groupNotificationSettings?: NotificationSettings | undefined;
  chatLockSettings?: ChatLockSettings | undefined;
  chatDbLidMigrationTimestamp?: number | undefined;
}

export interface GroupMention {
  groupJid?: string | undefined;
  groupSubject?: string | undefined;
}

export interface GroupParticipant {
  userJid: string;
  rank?: GroupParticipant_Rank | undefined;
}

export enum GroupParticipant_Rank {
  REGULAR = 0,
  ADMIN = 1,
  SUPERADMIN = 2,
  UNRECOGNIZED = -1,
}

export function groupParticipant_RankFromJSON(object: any): GroupParticipant_Rank {
  switch (object) {
    case 0:
    case "REGULAR":
      return GroupParticipant_Rank.REGULAR;
    case 1:
    case "ADMIN":
      return GroupParticipant_Rank.ADMIN;
    case 2:
    case "SUPERADMIN":
      return GroupParticipant_Rank.SUPERADMIN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GroupParticipant_Rank.UNRECOGNIZED;
  }
}

export function groupParticipant_RankToJSON(object: GroupParticipant_Rank): string {
  switch (object) {
    case GroupParticipant_Rank.REGULAR:
      return "REGULAR";
    case GroupParticipant_Rank.ADMIN:
      return "ADMIN";
    case GroupParticipant_Rank.SUPERADMIN:
      return "SUPERADMIN";
    case GroupParticipant_Rank.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface HandshakeMessage {
  clientHello?: HandshakeMessage_ClientHello | undefined;
  serverHello?: HandshakeMessage_ServerHello | undefined;
  clientFinish?: HandshakeMessage_ClientFinish | undefined;
}

export interface HandshakeMessage_ClientFinish {
  static?: Uint8Array | undefined;
  payload?: Uint8Array | undefined;
}

export interface HandshakeMessage_ClientHello {
  ephemeral?: Uint8Array | undefined;
  static?: Uint8Array | undefined;
  payload?: Uint8Array | undefined;
}

export interface HandshakeMessage_ServerHello {
  ephemeral?: Uint8Array | undefined;
  static?: Uint8Array | undefined;
  payload?: Uint8Array | undefined;
}

export interface HistorySync {
  syncType: HistorySync_HistorySyncType;
  conversations: Conversation[];
  statusV3Messages: WebMessageInfo[];
  chunkOrder?: number | undefined;
  progress?: number | undefined;
  pushnames: Pushname[];
  globalSettings?: GlobalSettings | undefined;
  threadIdUserSecret?: Uint8Array | undefined;
  threadDsTimeframeOffset?: number | undefined;
  recentStickers: StickerMetadata[];
  pastParticipants: PastParticipants[];
  callLogRecords: CallLogRecord[];
  aiWaitListState?: HistorySync_BotAIWaitListState | undefined;
  phoneNumberToLidMappings: PhoneNumberToLIDMapping[];
  companionMetaNonce?: string | undefined;
  shareableChatIdentifierEncryptionKey?: Uint8Array | undefined;
  accounts: Account[];
}

export enum HistorySync_BotAIWaitListState {
  IN_WAITLIST = 0,
  AI_AVAILABLE = 1,
  UNRECOGNIZED = -1,
}

export function historySync_BotAIWaitListStateFromJSON(object: any): HistorySync_BotAIWaitListState {
  switch (object) {
    case 0:
    case "IN_WAITLIST":
      return HistorySync_BotAIWaitListState.IN_WAITLIST;
    case 1:
    case "AI_AVAILABLE":
      return HistorySync_BotAIWaitListState.AI_AVAILABLE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return HistorySync_BotAIWaitListState.UNRECOGNIZED;
  }
}

export function historySync_BotAIWaitListStateToJSON(object: HistorySync_BotAIWaitListState): string {
  switch (object) {
    case HistorySync_BotAIWaitListState.IN_WAITLIST:
      return "IN_WAITLIST";
    case HistorySync_BotAIWaitListState.AI_AVAILABLE:
      return "AI_AVAILABLE";
    case HistorySync_BotAIWaitListState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum HistorySync_HistorySyncType {
  INITIAL_BOOTSTRAP = 0,
  INITIAL_STATUS_V3 = 1,
  FULL = 2,
  RECENT = 3,
  PUSH_NAME = 4,
  NON_BLOCKING_DATA = 5,
  ON_DEMAND = 6,
  UNRECOGNIZED = -1,
}

export function historySync_HistorySyncTypeFromJSON(object: any): HistorySync_HistorySyncType {
  switch (object) {
    case 0:
    case "INITIAL_BOOTSTRAP":
      return HistorySync_HistorySyncType.INITIAL_BOOTSTRAP;
    case 1:
    case "INITIAL_STATUS_V3":
      return HistorySync_HistorySyncType.INITIAL_STATUS_V3;
    case 2:
    case "FULL":
      return HistorySync_HistorySyncType.FULL;
    case 3:
    case "RECENT":
      return HistorySync_HistorySyncType.RECENT;
    case 4:
    case "PUSH_NAME":
      return HistorySync_HistorySyncType.PUSH_NAME;
    case 5:
    case "NON_BLOCKING_DATA":
      return HistorySync_HistorySyncType.NON_BLOCKING_DATA;
    case 6:
    case "ON_DEMAND":
      return HistorySync_HistorySyncType.ON_DEMAND;
    case -1:
    case "UNRECOGNIZED":
    default:
      return HistorySync_HistorySyncType.UNRECOGNIZED;
  }
}

export function historySync_HistorySyncTypeToJSON(object: HistorySync_HistorySyncType): string {
  switch (object) {
    case HistorySync_HistorySyncType.INITIAL_BOOTSTRAP:
      return "INITIAL_BOOTSTRAP";
    case HistorySync_HistorySyncType.INITIAL_STATUS_V3:
      return "INITIAL_STATUS_V3";
    case HistorySync_HistorySyncType.FULL:
      return "FULL";
    case HistorySync_HistorySyncType.RECENT:
      return "RECENT";
    case HistorySync_HistorySyncType.PUSH_NAME:
      return "PUSH_NAME";
    case HistorySync_HistorySyncType.NON_BLOCKING_DATA:
      return "NON_BLOCKING_DATA";
    case HistorySync_HistorySyncType.ON_DEMAND:
      return "ON_DEMAND";
    case HistorySync_HistorySyncType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface HistorySyncMsg {
  message?: WebMessageInfo | undefined;
  msgOrderId?: number | undefined;
}

export interface HydratedTemplateButton {
  index?: number | undefined;
  quickReplyButton?: HydratedTemplateButton_HydratedQuickReplyButton | undefined;
  urlButton?: HydratedTemplateButton_HydratedURLButton | undefined;
  callButton?: HydratedTemplateButton_HydratedCallButton | undefined;
}

export interface HydratedTemplateButton_HydratedCallButton {
  displayText?: string | undefined;
  phoneNumber?: string | undefined;
}

export interface HydratedTemplateButton_HydratedQuickReplyButton {
  displayText?: string | undefined;
  id?: string | undefined;
}

export interface HydratedTemplateButton_HydratedURLButton {
  displayText?: string | undefined;
  url?: string | undefined;
  consentedUsersUrl?: string | undefined;
  webviewPresentation?: HydratedTemplateButton_HydratedURLButton_WebviewPresentationType | undefined;
}

export enum HydratedTemplateButton_HydratedURLButton_WebviewPresentationType {
  UNKNOWN = 0,
  FULL = 1,
  TALL = 2,
  COMPACT = 3,
  UNRECOGNIZED = -1,
}

export function hydratedTemplateButton_HydratedURLButton_WebviewPresentationTypeFromJSON(
  object: any,
): HydratedTemplateButton_HydratedURLButton_WebviewPresentationType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return HydratedTemplateButton_HydratedURLButton_WebviewPresentationType.UNKNOWN;
    case 1:
    case "FULL":
      return HydratedTemplateButton_HydratedURLButton_WebviewPresentationType.FULL;
    case 2:
    case "TALL":
      return HydratedTemplateButton_HydratedURLButton_WebviewPresentationType.TALL;
    case 3:
    case "COMPACT":
      return HydratedTemplateButton_HydratedURLButton_WebviewPresentationType.COMPACT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return HydratedTemplateButton_HydratedURLButton_WebviewPresentationType.UNRECOGNIZED;
  }
}

export function hydratedTemplateButton_HydratedURLButton_WebviewPresentationTypeToJSON(
  object: HydratedTemplateButton_HydratedURLButton_WebviewPresentationType,
): string {
  switch (object) {
    case HydratedTemplateButton_HydratedURLButton_WebviewPresentationType.UNKNOWN:
      return "UNKNOWN";
    case HydratedTemplateButton_HydratedURLButton_WebviewPresentationType.FULL:
      return "FULL";
    case HydratedTemplateButton_HydratedURLButton_WebviewPresentationType.TALL:
      return "TALL";
    case HydratedTemplateButton_HydratedURLButton_WebviewPresentationType.COMPACT:
      return "COMPACT";
    case HydratedTemplateButton_HydratedURLButton_WebviewPresentationType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface IdentityKeyPairStructure {
  publicKey?: Uint8Array | undefined;
  privateKey?: Uint8Array | undefined;
}

export interface InteractiveAnnotation {
  polygonVertices: Point[];
  shouldSkipConfirmation?: boolean | undefined;
  embeddedContent?: EmbeddedContent | undefined;
  statusLinkType?: InteractiveAnnotation_StatusLinkType | undefined;
  location?: Location | undefined;
  newsletter?: ContextInfo_ForwardedNewsletterMessageInfo | undefined;
  embeddedAction?: boolean | undefined;
  tapAction?: TapLinkAction | undefined;
}

export enum InteractiveAnnotation_StatusLinkType {
  UNKNOWN = 0,
  RASTERIZED_LINK_PREVIEW = 1,
  RASTERIZED_LINK_TRUNCATED = 2,
  RASTERIZED_LINK_FULL_URL = 3,
  UNRECOGNIZED = -1,
}

export function interactiveAnnotation_StatusLinkTypeFromJSON(object: any): InteractiveAnnotation_StatusLinkType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return InteractiveAnnotation_StatusLinkType.UNKNOWN;
    case 1:
    case "RASTERIZED_LINK_PREVIEW":
      return InteractiveAnnotation_StatusLinkType.RASTERIZED_LINK_PREVIEW;
    case 2:
    case "RASTERIZED_LINK_TRUNCATED":
      return InteractiveAnnotation_StatusLinkType.RASTERIZED_LINK_TRUNCATED;
    case 3:
    case "RASTERIZED_LINK_FULL_URL":
      return InteractiveAnnotation_StatusLinkType.RASTERIZED_LINK_FULL_URL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return InteractiveAnnotation_StatusLinkType.UNRECOGNIZED;
  }
}

export function interactiveAnnotation_StatusLinkTypeToJSON(object: InteractiveAnnotation_StatusLinkType): string {
  switch (object) {
    case InteractiveAnnotation_StatusLinkType.UNKNOWN:
      return "UNKNOWN";
    case InteractiveAnnotation_StatusLinkType.RASTERIZED_LINK_PREVIEW:
      return "RASTERIZED_LINK_PREVIEW";
    case InteractiveAnnotation_StatusLinkType.RASTERIZED_LINK_TRUNCATED:
      return "RASTERIZED_LINK_TRUNCATED";
    case InteractiveAnnotation_StatusLinkType.RASTERIZED_LINK_FULL_URL:
      return "RASTERIZED_LINK_FULL_URL";
    case InteractiveAnnotation_StatusLinkType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface KeepInChat {
  keepType?: KeepType | undefined;
  serverTimestamp?: number | undefined;
  key?: MessageKey | undefined;
  deviceJid?: string | undefined;
  clientTimestampMs?: number | undefined;
  serverTimestampMs?: number | undefined;
}

export interface KeyExchangeMessage {
  id?: number | undefined;
  baseKey?: Uint8Array | undefined;
  ratchetKey?: Uint8Array | undefined;
  identityKey?: Uint8Array | undefined;
  baseKeySignature?: Uint8Array | undefined;
}

export interface KeyId {
  id?: Uint8Array | undefined;
}

export interface LIDMigrationMapping {
  pn: number;
  assignedLid: number;
  latestLid?: number | undefined;
}

export interface LIDMigrationMappingSyncMessage {
  encodedMappingPayload?: Uint8Array | undefined;
}

export interface LIDMigrationMappingSyncPayload {
  pnToLidMappings: LIDMigrationMapping[];
  chatDbMigrationTimestamp?: number | undefined;
}

export interface LegacyMessage {
  eventResponseMessage?: Message_EventResponseMessage | undefined;
  pollVote?: Message_PollVoteMessage | undefined;
}

export interface LimitSharing {
  sharingLimited?: boolean | undefined;
  trigger?: LimitSharing_TriggerType | undefined;
  limitSharingSettingTimestamp?: number | undefined;
  initiatedByMe?: boolean | undefined;
}

export enum LimitSharing_TriggerType {
  UNKNOWN = 0,
  CHAT_SETTING = 1,
  BIZ_SUPPORTS_FB_HOSTING = 2,
  UNKNOWN_GROUP = 3,
  UNRECOGNIZED = -1,
}

export function limitSharing_TriggerTypeFromJSON(object: any): LimitSharing_TriggerType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return LimitSharing_TriggerType.UNKNOWN;
    case 1:
    case "CHAT_SETTING":
      return LimitSharing_TriggerType.CHAT_SETTING;
    case 2:
    case "BIZ_SUPPORTS_FB_HOSTING":
      return LimitSharing_TriggerType.BIZ_SUPPORTS_FB_HOSTING;
    case 3:
    case "UNKNOWN_GROUP":
      return LimitSharing_TriggerType.UNKNOWN_GROUP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LimitSharing_TriggerType.UNRECOGNIZED;
  }
}

export function limitSharing_TriggerTypeToJSON(object: LimitSharing_TriggerType): string {
  switch (object) {
    case LimitSharing_TriggerType.UNKNOWN:
      return "UNKNOWN";
    case LimitSharing_TriggerType.CHAT_SETTING:
      return "CHAT_SETTING";
    case LimitSharing_TriggerType.BIZ_SUPPORTS_FB_HOSTING:
      return "BIZ_SUPPORTS_FB_HOSTING";
    case LimitSharing_TriggerType.UNKNOWN_GROUP:
      return "UNKNOWN_GROUP";
    case LimitSharing_TriggerType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface LocalizedName {
  lg?: string | undefined;
  lc?: string | undefined;
  verifiedName?: string | undefined;
}

export interface Location {
  degreesLatitude?: number | undefined;
  degreesLongitude?: number | undefined;
  name?: string | undefined;
}

export interface MediaData {
  localPath?: string | undefined;
}

export interface MediaNotifyMessage {
  expressPathUrl?: string | undefined;
  fileEncSha256?: Uint8Array | undefined;
  fileLength?: number | undefined;
}

export interface MediaRetryNotification {
  stanzaId?: string | undefined;
  directPath?: string | undefined;
  result?: MediaRetryNotification_ResultType | undefined;
  messageSecret?: Uint8Array | undefined;
}

export enum MediaRetryNotification_ResultType {
  GENERAL_ERROR = 0,
  SUCCESS = 1,
  NOT_FOUND = 2,
  DECRYPTION_ERROR = 3,
  UNRECOGNIZED = -1,
}

export function mediaRetryNotification_ResultTypeFromJSON(object: any): MediaRetryNotification_ResultType {
  switch (object) {
    case 0:
    case "GENERAL_ERROR":
      return MediaRetryNotification_ResultType.GENERAL_ERROR;
    case 1:
    case "SUCCESS":
      return MediaRetryNotification_ResultType.SUCCESS;
    case 2:
    case "NOT_FOUND":
      return MediaRetryNotification_ResultType.NOT_FOUND;
    case 3:
    case "DECRYPTION_ERROR":
      return MediaRetryNotification_ResultType.DECRYPTION_ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MediaRetryNotification_ResultType.UNRECOGNIZED;
  }
}

export function mediaRetryNotification_ResultTypeToJSON(object: MediaRetryNotification_ResultType): string {
  switch (object) {
    case MediaRetryNotification_ResultType.GENERAL_ERROR:
      return "GENERAL_ERROR";
    case MediaRetryNotification_ResultType.SUCCESS:
      return "SUCCESS";
    case MediaRetryNotification_ResultType.NOT_FOUND:
      return "NOT_FOUND";
    case MediaRetryNotification_ResultType.DECRYPTION_ERROR:
      return "DECRYPTION_ERROR";
    case MediaRetryNotification_ResultType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface MemberLabel {
  label?: string | undefined;
  labelTimestamp?: number | undefined;
}

export interface Message {
  conversation?: string | undefined;
  senderKeyDistributionMessage?: Message_SenderKeyDistributionMessage | undefined;
  imageMessage?: Message_ImageMessage | undefined;
  contactMessage?: Message_ContactMessage | undefined;
  locationMessage?: Message_LocationMessage | undefined;
  extendedTextMessage?: Message_ExtendedTextMessage | undefined;
  documentMessage?: Message_DocumentMessage | undefined;
  audioMessage?: Message_AudioMessage | undefined;
  videoMessage?: Message_VideoMessage | undefined;
  call?: Message_Call | undefined;
  chat?: Message_Chat | undefined;
  protocolMessage?: Message_ProtocolMessage | undefined;
  contactsArrayMessage?: Message_ContactsArrayMessage | undefined;
  highlyStructuredMessage?: Message_HighlyStructuredMessage | undefined;
  fastRatchetKeySenderKeyDistributionMessage?: Message_SenderKeyDistributionMessage | undefined;
  sendPaymentMessage?: Message_SendPaymentMessage | undefined;
  liveLocationMessage?: Message_LiveLocationMessage | undefined;
  requestPaymentMessage?: Message_RequestPaymentMessage | undefined;
  declinePaymentRequestMessage?: Message_DeclinePaymentRequestMessage | undefined;
  cancelPaymentRequestMessage?: Message_CancelPaymentRequestMessage | undefined;
  templateMessage?: Message_TemplateMessage | undefined;
  stickerMessage?: Message_StickerMessage | undefined;
  groupInviteMessage?: Message_GroupInviteMessage | undefined;
  templateButtonReplyMessage?: Message_TemplateButtonReplyMessage | undefined;
  productMessage?: Message_ProductMessage | undefined;
  deviceSentMessage?: Message_DeviceSentMessage | undefined;
  messageContextInfo?: MessageContextInfo | undefined;
  listMessage?: Message_ListMessage | undefined;
  viewOnceMessage?: Message_FutureProofMessage | undefined;
  orderMessage?: Message_OrderMessage | undefined;
  listResponseMessage?: Message_ListResponseMessage | undefined;
  ephemeralMessage?: Message_FutureProofMessage | undefined;
  invoiceMessage?: Message_InvoiceMessage | undefined;
  buttonsMessage?: Message_ButtonsMessage | undefined;
  buttonsResponseMessage?: Message_ButtonsResponseMessage | undefined;
  paymentInviteMessage?: Message_PaymentInviteMessage | undefined;
  interactiveMessage?: Message_InteractiveMessage | undefined;
  reactionMessage?: Message_ReactionMessage | undefined;
  stickerSyncRmrMessage?: Message_StickerSyncRMRMessage | undefined;
  interactiveResponseMessage?: Message_InteractiveResponseMessage | undefined;
  pollCreationMessage?: Message_PollCreationMessage | undefined;
  pollUpdateMessage?: Message_PollUpdateMessage | undefined;
  keepInChatMessage?: Message_KeepInChatMessage | undefined;
  documentWithCaptionMessage?: Message_FutureProofMessage | undefined;
  requestPhoneNumberMessage?: Message_RequestPhoneNumberMessage | undefined;
  viewOnceMessageV2?: Message_FutureProofMessage | undefined;
  encReactionMessage?: Message_EncReactionMessage | undefined;
  editedMessage?: Message_FutureProofMessage | undefined;
  viewOnceMessageV2Extension?: Message_FutureProofMessage | undefined;
  pollCreationMessageV2?: Message_PollCreationMessage | undefined;
  scheduledCallCreationMessage?: Message_ScheduledCallCreationMessage | undefined;
  groupMentionedMessage?: Message_FutureProofMessage | undefined;
  pinInChatMessage?: Message_PinInChatMessage | undefined;
  pollCreationMessageV3?: Message_PollCreationMessage | undefined;
  scheduledCallEditMessage?: Message_ScheduledCallEditMessage | undefined;
  ptvMessage?: Message_VideoMessage | undefined;
  botInvokeMessage?: Message_FutureProofMessage | undefined;
  callLogMesssage?: Message_CallLogMessage | undefined;
  messageHistoryBundle?: Message_MessageHistoryBundle | undefined;
  encCommentMessage?: Message_EncCommentMessage | undefined;
  bcallMessage?: Message_BCallMessage | undefined;
  lottieStickerMessage?: Message_FutureProofMessage | undefined;
  eventMessage?: Message_EventMessage | undefined;
  encEventResponseMessage?: Message_EncEventResponseMessage | undefined;
  commentMessage?: Message_CommentMessage | undefined;
  newsletterAdminInviteMessage?: Message_NewsletterAdminInviteMessage | undefined;
  placeholderMessage?: Message_PlaceholderMessage | undefined;
  secretEncryptedMessage?: Message_SecretEncryptedMessage | undefined;
  albumMessage?: Message_AlbumMessage | undefined;
  eventCoverImage?: Message_FutureProofMessage | undefined;
  stickerPackMessage?: Message_StickerPackMessage | undefined;
  statusMentionMessage?: Message_FutureProofMessage | undefined;
  pollResultSnapshotMessage?: Message_PollResultSnapshotMessage | undefined;
  pollCreationOptionImageMessage?: Message_FutureProofMessage | undefined;
  associatedChildMessage?: Message_FutureProofMessage | undefined;
  groupStatusMentionMessage?: Message_FutureProofMessage | undefined;
  pollCreationMessageV4?: Message_FutureProofMessage | undefined;
  pollCreationMessageV5?: Message_FutureProofMessage | undefined;
  statusAddYours?: Message_FutureProofMessage | undefined;
  groupStatusMessage?: Message_FutureProofMessage | undefined;
  richResponseMessage?: AIRichResponseMessage | undefined;
  statusNotificationMessage?: Message_StatusNotificationMessage | undefined;
  limitSharingMessage?: Message_FutureProofMessage | undefined;
  botTaskMessage?: Message_FutureProofMessage | undefined;
  questionMessage?: Message_FutureProofMessage | undefined;
  messageHistoryNotice?: Message_MessageHistoryNotice | undefined;
}

export enum Message_PeerDataOperationRequestType {
  UPLOAD_STICKER = 0,
  SEND_RECENT_STICKER_BOOTSTRAP = 1,
  GENERATE_LINK_PREVIEW = 2,
  HISTORY_SYNC_ON_DEMAND = 3,
  PLACEHOLDER_MESSAGE_RESEND = 4,
  WAFFLE_LINKING_NONCE_FETCH = 5,
  FULL_HISTORY_SYNC_ON_DEMAND = 6,
  COMPANION_META_NONCE_FETCH = 7,
  COMPANION_SYNCD_SNAPSHOT_FATAL_RECOVERY = 8,
  UNRECOGNIZED = -1,
}

export function message_PeerDataOperationRequestTypeFromJSON(object: any): Message_PeerDataOperationRequestType {
  switch (object) {
    case 0:
    case "UPLOAD_STICKER":
      return Message_PeerDataOperationRequestType.UPLOAD_STICKER;
    case 1:
    case "SEND_RECENT_STICKER_BOOTSTRAP":
      return Message_PeerDataOperationRequestType.SEND_RECENT_STICKER_BOOTSTRAP;
    case 2:
    case "GENERATE_LINK_PREVIEW":
      return Message_PeerDataOperationRequestType.GENERATE_LINK_PREVIEW;
    case 3:
    case "HISTORY_SYNC_ON_DEMAND":
      return Message_PeerDataOperationRequestType.HISTORY_SYNC_ON_DEMAND;
    case 4:
    case "PLACEHOLDER_MESSAGE_RESEND":
      return Message_PeerDataOperationRequestType.PLACEHOLDER_MESSAGE_RESEND;
    case 5:
    case "WAFFLE_LINKING_NONCE_FETCH":
      return Message_PeerDataOperationRequestType.WAFFLE_LINKING_NONCE_FETCH;
    case 6:
    case "FULL_HISTORY_SYNC_ON_DEMAND":
      return Message_PeerDataOperationRequestType.FULL_HISTORY_SYNC_ON_DEMAND;
    case 7:
    case "COMPANION_META_NONCE_FETCH":
      return Message_PeerDataOperationRequestType.COMPANION_META_NONCE_FETCH;
    case 8:
    case "COMPANION_SYNCD_SNAPSHOT_FATAL_RECOVERY":
      return Message_PeerDataOperationRequestType.COMPANION_SYNCD_SNAPSHOT_FATAL_RECOVERY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_PeerDataOperationRequestType.UNRECOGNIZED;
  }
}

export function message_PeerDataOperationRequestTypeToJSON(object: Message_PeerDataOperationRequestType): string {
  switch (object) {
    case Message_PeerDataOperationRequestType.UPLOAD_STICKER:
      return "UPLOAD_STICKER";
    case Message_PeerDataOperationRequestType.SEND_RECENT_STICKER_BOOTSTRAP:
      return "SEND_RECENT_STICKER_BOOTSTRAP";
    case Message_PeerDataOperationRequestType.GENERATE_LINK_PREVIEW:
      return "GENERATE_LINK_PREVIEW";
    case Message_PeerDataOperationRequestType.HISTORY_SYNC_ON_DEMAND:
      return "HISTORY_SYNC_ON_DEMAND";
    case Message_PeerDataOperationRequestType.PLACEHOLDER_MESSAGE_RESEND:
      return "PLACEHOLDER_MESSAGE_RESEND";
    case Message_PeerDataOperationRequestType.WAFFLE_LINKING_NONCE_FETCH:
      return "WAFFLE_LINKING_NONCE_FETCH";
    case Message_PeerDataOperationRequestType.FULL_HISTORY_SYNC_ON_DEMAND:
      return "FULL_HISTORY_SYNC_ON_DEMAND";
    case Message_PeerDataOperationRequestType.COMPANION_META_NONCE_FETCH:
      return "COMPANION_META_NONCE_FETCH";
    case Message_PeerDataOperationRequestType.COMPANION_SYNCD_SNAPSHOT_FATAL_RECOVERY:
      return "COMPANION_SYNCD_SNAPSHOT_FATAL_RECOVERY";
    case Message_PeerDataOperationRequestType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Message_PollContentType {
  UNKNOWN = 0,
  TEXT = 1,
  IMAGE = 2,
  UNRECOGNIZED = -1,
}

export function message_PollContentTypeFromJSON(object: any): Message_PollContentType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return Message_PollContentType.UNKNOWN;
    case 1:
    case "TEXT":
      return Message_PollContentType.TEXT;
    case 2:
    case "IMAGE":
      return Message_PollContentType.IMAGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_PollContentType.UNRECOGNIZED;
  }
}

export function message_PollContentTypeToJSON(object: Message_PollContentType): string {
  switch (object) {
    case Message_PollContentType.UNKNOWN:
      return "UNKNOWN";
    case Message_PollContentType.TEXT:
      return "TEXT";
    case Message_PollContentType.IMAGE:
      return "IMAGE";
    case Message_PollContentType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_AlbumMessage {
  expectedImageCount?: number | undefined;
  expectedVideoCount?: number | undefined;
  contextInfo?: ContextInfo | undefined;
}

export interface Message_AppStateFatalExceptionNotification {
  collectionNames: string[];
  timestamp?: number | undefined;
}

export interface Message_AppStateSyncKey {
  keyId?: Message_AppStateSyncKeyId | undefined;
  keyData?: Message_AppStateSyncKeyData | undefined;
}

export interface Message_AppStateSyncKeyData {
  keyData?: Uint8Array | undefined;
  fingerprint?: Message_AppStateSyncKeyFingerprint | undefined;
  timestamp?: number | undefined;
}

export interface Message_AppStateSyncKeyFingerprint {
  rawId?: number | undefined;
  currentIndex?: number | undefined;
  deviceIndexes: number[];
}

export interface Message_AppStateSyncKeyId {
  keyId?: Uint8Array | undefined;
}

export interface Message_AppStateSyncKeyRequest {
  keyIds: Message_AppStateSyncKeyId[];
}

export interface Message_AppStateSyncKeyShare {
  keys: Message_AppStateSyncKey[];
}

export interface Message_AudioMessage {
  url?: string | undefined;
  mimetype?: string | undefined;
  fileSha256?: Uint8Array | undefined;
  fileLength?: number | undefined;
  seconds?: number | undefined;
  ptt?: boolean | undefined;
  mediaKey?: Uint8Array | undefined;
  fileEncSha256?: Uint8Array | undefined;
  directPath?: string | undefined;
  mediaKeyTimestamp?: number | undefined;
  contextInfo?: ContextInfo | undefined;
  streamingSidecar?: Uint8Array | undefined;
  waveform?: Uint8Array | undefined;
  backgroundArgb?: number | undefined;
  viewOnce?: boolean | undefined;
  accessibilityLabel?: string | undefined;
}

export interface Message_BCallMessage {
  sessionId?: string | undefined;
  mediaType?: Message_BCallMessage_MediaType | undefined;
  masterKey?: Uint8Array | undefined;
  caption?: string | undefined;
}

export enum Message_BCallMessage_MediaType {
  UNKNOWN = 0,
  AUDIO = 1,
  VIDEO = 2,
  UNRECOGNIZED = -1,
}

export function message_BCallMessage_MediaTypeFromJSON(object: any): Message_BCallMessage_MediaType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return Message_BCallMessage_MediaType.UNKNOWN;
    case 1:
    case "AUDIO":
      return Message_BCallMessage_MediaType.AUDIO;
    case 2:
    case "VIDEO":
      return Message_BCallMessage_MediaType.VIDEO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_BCallMessage_MediaType.UNRECOGNIZED;
  }
}

export function message_BCallMessage_MediaTypeToJSON(object: Message_BCallMessage_MediaType): string {
  switch (object) {
    case Message_BCallMessage_MediaType.UNKNOWN:
      return "UNKNOWN";
    case Message_BCallMessage_MediaType.AUDIO:
      return "AUDIO";
    case Message_BCallMessage_MediaType.VIDEO:
      return "VIDEO";
    case Message_BCallMessage_MediaType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_BotFeedbackMessage {
  messageKey?: MessageKey | undefined;
  kind?: Message_BotFeedbackMessage_BotFeedbackKind | undefined;
  text?: string | undefined;
  kindNegative?: number | undefined;
  kindPositive?: number | undefined;
  kindReport?: Message_BotFeedbackMessage_ReportKind | undefined;
}

export enum Message_BotFeedbackMessage_BotFeedbackKind {
  BOT_FEEDBACK_POSITIVE = 0,
  BOT_FEEDBACK_NEGATIVE_GENERIC = 1,
  BOT_FEEDBACK_NEGATIVE_HELPFUL = 2,
  BOT_FEEDBACK_NEGATIVE_INTERESTING = 3,
  BOT_FEEDBACK_NEGATIVE_ACCURATE = 4,
  BOT_FEEDBACK_NEGATIVE_SAFE = 5,
  BOT_FEEDBACK_NEGATIVE_OTHER = 6,
  BOT_FEEDBACK_NEGATIVE_REFUSED = 7,
  BOT_FEEDBACK_NEGATIVE_NOT_VISUALLY_APPEALING = 8,
  BOT_FEEDBACK_NEGATIVE_NOT_RELEVANT_TO_TEXT = 9,
  BOT_FEEDBACK_NEGATIVE_PERSONALIZED = 10,
  BOT_FEEDBACK_NEGATIVE_CLARITY = 11,
  BOT_FEEDBACK_NEGATIVE_DOESNT_LOOK_LIKE_THE_PERSON = 12,
  UNRECOGNIZED = -1,
}

export function message_BotFeedbackMessage_BotFeedbackKindFromJSON(
  object: any,
): Message_BotFeedbackMessage_BotFeedbackKind {
  switch (object) {
    case 0:
    case "BOT_FEEDBACK_POSITIVE":
      return Message_BotFeedbackMessage_BotFeedbackKind.BOT_FEEDBACK_POSITIVE;
    case 1:
    case "BOT_FEEDBACK_NEGATIVE_GENERIC":
      return Message_BotFeedbackMessage_BotFeedbackKind.BOT_FEEDBACK_NEGATIVE_GENERIC;
    case 2:
    case "BOT_FEEDBACK_NEGATIVE_HELPFUL":
      return Message_BotFeedbackMessage_BotFeedbackKind.BOT_FEEDBACK_NEGATIVE_HELPFUL;
    case 3:
    case "BOT_FEEDBACK_NEGATIVE_INTERESTING":
      return Message_BotFeedbackMessage_BotFeedbackKind.BOT_FEEDBACK_NEGATIVE_INTERESTING;
    case 4:
    case "BOT_FEEDBACK_NEGATIVE_ACCURATE":
      return Message_BotFeedbackMessage_BotFeedbackKind.BOT_FEEDBACK_NEGATIVE_ACCURATE;
    case 5:
    case "BOT_FEEDBACK_NEGATIVE_SAFE":
      return Message_BotFeedbackMessage_BotFeedbackKind.BOT_FEEDBACK_NEGATIVE_SAFE;
    case 6:
    case "BOT_FEEDBACK_NEGATIVE_OTHER":
      return Message_BotFeedbackMessage_BotFeedbackKind.BOT_FEEDBACK_NEGATIVE_OTHER;
    case 7:
    case "BOT_FEEDBACK_NEGATIVE_REFUSED":
      return Message_BotFeedbackMessage_BotFeedbackKind.BOT_FEEDBACK_NEGATIVE_REFUSED;
    case 8:
    case "BOT_FEEDBACK_NEGATIVE_NOT_VISUALLY_APPEALING":
      return Message_BotFeedbackMessage_BotFeedbackKind.BOT_FEEDBACK_NEGATIVE_NOT_VISUALLY_APPEALING;
    case 9:
    case "BOT_FEEDBACK_NEGATIVE_NOT_RELEVANT_TO_TEXT":
      return Message_BotFeedbackMessage_BotFeedbackKind.BOT_FEEDBACK_NEGATIVE_NOT_RELEVANT_TO_TEXT;
    case 10:
    case "BOT_FEEDBACK_NEGATIVE_PERSONALIZED":
      return Message_BotFeedbackMessage_BotFeedbackKind.BOT_FEEDBACK_NEGATIVE_PERSONALIZED;
    case 11:
    case "BOT_FEEDBACK_NEGATIVE_CLARITY":
      return Message_BotFeedbackMessage_BotFeedbackKind.BOT_FEEDBACK_NEGATIVE_CLARITY;
    case 12:
    case "BOT_FEEDBACK_NEGATIVE_DOESNT_LOOK_LIKE_THE_PERSON":
      return Message_BotFeedbackMessage_BotFeedbackKind.BOT_FEEDBACK_NEGATIVE_DOESNT_LOOK_LIKE_THE_PERSON;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_BotFeedbackMessage_BotFeedbackKind.UNRECOGNIZED;
  }
}

export function message_BotFeedbackMessage_BotFeedbackKindToJSON(
  object: Message_BotFeedbackMessage_BotFeedbackKind,
): string {
  switch (object) {
    case Message_BotFeedbackMessage_BotFeedbackKind.BOT_FEEDBACK_POSITIVE:
      return "BOT_FEEDBACK_POSITIVE";
    case Message_BotFeedbackMessage_BotFeedbackKind.BOT_FEEDBACK_NEGATIVE_GENERIC:
      return "BOT_FEEDBACK_NEGATIVE_GENERIC";
    case Message_BotFeedbackMessage_BotFeedbackKind.BOT_FEEDBACK_NEGATIVE_HELPFUL:
      return "BOT_FEEDBACK_NEGATIVE_HELPFUL";
    case Message_BotFeedbackMessage_BotFeedbackKind.BOT_FEEDBACK_NEGATIVE_INTERESTING:
      return "BOT_FEEDBACK_NEGATIVE_INTERESTING";
    case Message_BotFeedbackMessage_BotFeedbackKind.BOT_FEEDBACK_NEGATIVE_ACCURATE:
      return "BOT_FEEDBACK_NEGATIVE_ACCURATE";
    case Message_BotFeedbackMessage_BotFeedbackKind.BOT_FEEDBACK_NEGATIVE_SAFE:
      return "BOT_FEEDBACK_NEGATIVE_SAFE";
    case Message_BotFeedbackMessage_BotFeedbackKind.BOT_FEEDBACK_NEGATIVE_OTHER:
      return "BOT_FEEDBACK_NEGATIVE_OTHER";
    case Message_BotFeedbackMessage_BotFeedbackKind.BOT_FEEDBACK_NEGATIVE_REFUSED:
      return "BOT_FEEDBACK_NEGATIVE_REFUSED";
    case Message_BotFeedbackMessage_BotFeedbackKind.BOT_FEEDBACK_NEGATIVE_NOT_VISUALLY_APPEALING:
      return "BOT_FEEDBACK_NEGATIVE_NOT_VISUALLY_APPEALING";
    case Message_BotFeedbackMessage_BotFeedbackKind.BOT_FEEDBACK_NEGATIVE_NOT_RELEVANT_TO_TEXT:
      return "BOT_FEEDBACK_NEGATIVE_NOT_RELEVANT_TO_TEXT";
    case Message_BotFeedbackMessage_BotFeedbackKind.BOT_FEEDBACK_NEGATIVE_PERSONALIZED:
      return "BOT_FEEDBACK_NEGATIVE_PERSONALIZED";
    case Message_BotFeedbackMessage_BotFeedbackKind.BOT_FEEDBACK_NEGATIVE_CLARITY:
      return "BOT_FEEDBACK_NEGATIVE_CLARITY";
    case Message_BotFeedbackMessage_BotFeedbackKind.BOT_FEEDBACK_NEGATIVE_DOESNT_LOOK_LIKE_THE_PERSON:
      return "BOT_FEEDBACK_NEGATIVE_DOESNT_LOOK_LIKE_THE_PERSON";
    case Message_BotFeedbackMessage_BotFeedbackKind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative {
  UNKNOWN = 0,
  BOT_FEEDBACK_MULTIPLE_NEGATIVE_GENERIC = 1,
  BOT_FEEDBACK_MULTIPLE_NEGATIVE_HELPFUL = 2,
  BOT_FEEDBACK_MULTIPLE_NEGATIVE_INTERESTING = 4,
  BOT_FEEDBACK_MULTIPLE_NEGATIVE_ACCURATE = 8,
  BOT_FEEDBACK_MULTIPLE_NEGATIVE_SAFE = 16,
  BOT_FEEDBACK_MULTIPLE_NEGATIVE_OTHER = 32,
  BOT_FEEDBACK_MULTIPLE_NEGATIVE_REFUSED = 64,
  BOT_FEEDBACK_MULTIPLE_NEGATIVE_NOT_VISUALLY_APPEALING = 128,
  BOT_FEEDBACK_MULTIPLE_NEGATIVE_NOT_RELEVANT_TO_TEXT = 256,
  UNRECOGNIZED = -1,
}

export function message_BotFeedbackMessage_BotFeedbackKindMultipleNegativeFromJSON(
  object: any,
): Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative.UNKNOWN;
    case 1:
    case "BOT_FEEDBACK_MULTIPLE_NEGATIVE_GENERIC":
      return Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative.BOT_FEEDBACK_MULTIPLE_NEGATIVE_GENERIC;
    case 2:
    case "BOT_FEEDBACK_MULTIPLE_NEGATIVE_HELPFUL":
      return Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative.BOT_FEEDBACK_MULTIPLE_NEGATIVE_HELPFUL;
    case 4:
    case "BOT_FEEDBACK_MULTIPLE_NEGATIVE_INTERESTING":
      return Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative.BOT_FEEDBACK_MULTIPLE_NEGATIVE_INTERESTING;
    case 8:
    case "BOT_FEEDBACK_MULTIPLE_NEGATIVE_ACCURATE":
      return Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative.BOT_FEEDBACK_MULTIPLE_NEGATIVE_ACCURATE;
    case 16:
    case "BOT_FEEDBACK_MULTIPLE_NEGATIVE_SAFE":
      return Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative.BOT_FEEDBACK_MULTIPLE_NEGATIVE_SAFE;
    case 32:
    case "BOT_FEEDBACK_MULTIPLE_NEGATIVE_OTHER":
      return Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative.BOT_FEEDBACK_MULTIPLE_NEGATIVE_OTHER;
    case 64:
    case "BOT_FEEDBACK_MULTIPLE_NEGATIVE_REFUSED":
      return Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative.BOT_FEEDBACK_MULTIPLE_NEGATIVE_REFUSED;
    case 128:
    case "BOT_FEEDBACK_MULTIPLE_NEGATIVE_NOT_VISUALLY_APPEALING":
      return Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative
        .BOT_FEEDBACK_MULTIPLE_NEGATIVE_NOT_VISUALLY_APPEALING;
    case 256:
    case "BOT_FEEDBACK_MULTIPLE_NEGATIVE_NOT_RELEVANT_TO_TEXT":
      return Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative
        .BOT_FEEDBACK_MULTIPLE_NEGATIVE_NOT_RELEVANT_TO_TEXT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative.UNRECOGNIZED;
  }
}

export function message_BotFeedbackMessage_BotFeedbackKindMultipleNegativeToJSON(
  object: Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative,
): string {
  switch (object) {
    case Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative.UNKNOWN:
      return "UNKNOWN";
    case Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative.BOT_FEEDBACK_MULTIPLE_NEGATIVE_GENERIC:
      return "BOT_FEEDBACK_MULTIPLE_NEGATIVE_GENERIC";
    case Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative.BOT_FEEDBACK_MULTIPLE_NEGATIVE_HELPFUL:
      return "BOT_FEEDBACK_MULTIPLE_NEGATIVE_HELPFUL";
    case Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative.BOT_FEEDBACK_MULTIPLE_NEGATIVE_INTERESTING:
      return "BOT_FEEDBACK_MULTIPLE_NEGATIVE_INTERESTING";
    case Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative.BOT_FEEDBACK_MULTIPLE_NEGATIVE_ACCURATE:
      return "BOT_FEEDBACK_MULTIPLE_NEGATIVE_ACCURATE";
    case Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative.BOT_FEEDBACK_MULTIPLE_NEGATIVE_SAFE:
      return "BOT_FEEDBACK_MULTIPLE_NEGATIVE_SAFE";
    case Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative.BOT_FEEDBACK_MULTIPLE_NEGATIVE_OTHER:
      return "BOT_FEEDBACK_MULTIPLE_NEGATIVE_OTHER";
    case Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative.BOT_FEEDBACK_MULTIPLE_NEGATIVE_REFUSED:
      return "BOT_FEEDBACK_MULTIPLE_NEGATIVE_REFUSED";
    case Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative
      .BOT_FEEDBACK_MULTIPLE_NEGATIVE_NOT_VISUALLY_APPEALING:
      return "BOT_FEEDBACK_MULTIPLE_NEGATIVE_NOT_VISUALLY_APPEALING";
    case Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative.BOT_FEEDBACK_MULTIPLE_NEGATIVE_NOT_RELEVANT_TO_TEXT:
      return "BOT_FEEDBACK_MULTIPLE_NEGATIVE_NOT_RELEVANT_TO_TEXT";
    case Message_BotFeedbackMessage_BotFeedbackKindMultipleNegative.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Message_BotFeedbackMessage_BotFeedbackKindMultiplePositive {
  DEFAULT = 0,
  BOT_FEEDBACK_MULTIPLE_POSITIVE_GENERIC = 1,
  UNRECOGNIZED = -1,
}

export function message_BotFeedbackMessage_BotFeedbackKindMultiplePositiveFromJSON(
  object: any,
): Message_BotFeedbackMessage_BotFeedbackKindMultiplePositive {
  switch (object) {
    case 0:
    case "DEFAULT":
      return Message_BotFeedbackMessage_BotFeedbackKindMultiplePositive.DEFAULT;
    case 1:
    case "BOT_FEEDBACK_MULTIPLE_POSITIVE_GENERIC":
      return Message_BotFeedbackMessage_BotFeedbackKindMultiplePositive.BOT_FEEDBACK_MULTIPLE_POSITIVE_GENERIC;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_BotFeedbackMessage_BotFeedbackKindMultiplePositive.UNRECOGNIZED;
  }
}

export function message_BotFeedbackMessage_BotFeedbackKindMultiplePositiveToJSON(
  object: Message_BotFeedbackMessage_BotFeedbackKindMultiplePositive,
): string {
  switch (object) {
    case Message_BotFeedbackMessage_BotFeedbackKindMultiplePositive.DEFAULT:
      return "DEFAULT";
    case Message_BotFeedbackMessage_BotFeedbackKindMultiplePositive.BOT_FEEDBACK_MULTIPLE_POSITIVE_GENERIC:
      return "BOT_FEEDBACK_MULTIPLE_POSITIVE_GENERIC";
    case Message_BotFeedbackMessage_BotFeedbackKindMultiplePositive.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Message_BotFeedbackMessage_ReportKind {
  GENERIC = 0,
  UNRECOGNIZED = -1,
}

export function message_BotFeedbackMessage_ReportKindFromJSON(object: any): Message_BotFeedbackMessage_ReportKind {
  switch (object) {
    case 0:
    case "GENERIC":
      return Message_BotFeedbackMessage_ReportKind.GENERIC;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_BotFeedbackMessage_ReportKind.UNRECOGNIZED;
  }
}

export function message_BotFeedbackMessage_ReportKindToJSON(object: Message_BotFeedbackMessage_ReportKind): string {
  switch (object) {
    case Message_BotFeedbackMessage_ReportKind.GENERIC:
      return "GENERIC";
    case Message_BotFeedbackMessage_ReportKind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_ButtonsMessage {
  contentText?: string | undefined;
  footerText?: string | undefined;
  contextInfo?: ContextInfo | undefined;
  buttons: Message_ButtonsMessage_Button[];
  headerType?: Message_ButtonsMessage_HeaderType | undefined;
  text?: string | undefined;
  documentMessage?: Message_DocumentMessage | undefined;
  imageMessage?: Message_ImageMessage | undefined;
  videoMessage?: Message_VideoMessage | undefined;
  locationMessage?: Message_LocationMessage | undefined;
}

export enum Message_ButtonsMessage_HeaderType {
  UNKNOWN = 0,
  EMPTY = 1,
  TEXT = 2,
  DOCUMENT = 3,
  IMAGE = 4,
  VIDEO = 5,
  LOCATION = 6,
  UNRECOGNIZED = -1,
}

export function message_ButtonsMessage_HeaderTypeFromJSON(object: any): Message_ButtonsMessage_HeaderType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return Message_ButtonsMessage_HeaderType.UNKNOWN;
    case 1:
    case "EMPTY":
      return Message_ButtonsMessage_HeaderType.EMPTY;
    case 2:
    case "TEXT":
      return Message_ButtonsMessage_HeaderType.TEXT;
    case 3:
    case "DOCUMENT":
      return Message_ButtonsMessage_HeaderType.DOCUMENT;
    case 4:
    case "IMAGE":
      return Message_ButtonsMessage_HeaderType.IMAGE;
    case 5:
    case "VIDEO":
      return Message_ButtonsMessage_HeaderType.VIDEO;
    case 6:
    case "LOCATION":
      return Message_ButtonsMessage_HeaderType.LOCATION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_ButtonsMessage_HeaderType.UNRECOGNIZED;
  }
}

export function message_ButtonsMessage_HeaderTypeToJSON(object: Message_ButtonsMessage_HeaderType): string {
  switch (object) {
    case Message_ButtonsMessage_HeaderType.UNKNOWN:
      return "UNKNOWN";
    case Message_ButtonsMessage_HeaderType.EMPTY:
      return "EMPTY";
    case Message_ButtonsMessage_HeaderType.TEXT:
      return "TEXT";
    case Message_ButtonsMessage_HeaderType.DOCUMENT:
      return "DOCUMENT";
    case Message_ButtonsMessage_HeaderType.IMAGE:
      return "IMAGE";
    case Message_ButtonsMessage_HeaderType.VIDEO:
      return "VIDEO";
    case Message_ButtonsMessage_HeaderType.LOCATION:
      return "LOCATION";
    case Message_ButtonsMessage_HeaderType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_ButtonsMessage_Button {
  buttonId?: string | undefined;
  buttonText?: Message_ButtonsMessage_Button_ButtonText | undefined;
  type?: Message_ButtonsMessage_Button_Type | undefined;
  nativeFlowInfo?: Message_ButtonsMessage_Button_NativeFlowInfo | undefined;
}

export enum Message_ButtonsMessage_Button_Type {
  UNKNOWN = 0,
  RESPONSE = 1,
  NATIVE_FLOW = 2,
  UNRECOGNIZED = -1,
}

export function message_ButtonsMessage_Button_TypeFromJSON(object: any): Message_ButtonsMessage_Button_Type {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return Message_ButtonsMessage_Button_Type.UNKNOWN;
    case 1:
    case "RESPONSE":
      return Message_ButtonsMessage_Button_Type.RESPONSE;
    case 2:
    case "NATIVE_FLOW":
      return Message_ButtonsMessage_Button_Type.NATIVE_FLOW;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_ButtonsMessage_Button_Type.UNRECOGNIZED;
  }
}

export function message_ButtonsMessage_Button_TypeToJSON(object: Message_ButtonsMessage_Button_Type): string {
  switch (object) {
    case Message_ButtonsMessage_Button_Type.UNKNOWN:
      return "UNKNOWN";
    case Message_ButtonsMessage_Button_Type.RESPONSE:
      return "RESPONSE";
    case Message_ButtonsMessage_Button_Type.NATIVE_FLOW:
      return "NATIVE_FLOW";
    case Message_ButtonsMessage_Button_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_ButtonsMessage_Button_ButtonText {
  displayText?: string | undefined;
}

export interface Message_ButtonsMessage_Button_NativeFlowInfo {
  name?: string | undefined;
  paramsJson?: string | undefined;
}

export interface Message_ButtonsResponseMessage {
  selectedButtonId?: string | undefined;
  contextInfo?: ContextInfo | undefined;
  type?: Message_ButtonsResponseMessage_Type | undefined;
  selectedDisplayText?: string | undefined;
}

export enum Message_ButtonsResponseMessage_Type {
  UNKNOWN = 0,
  DISPLAY_TEXT = 1,
  UNRECOGNIZED = -1,
}

export function message_ButtonsResponseMessage_TypeFromJSON(object: any): Message_ButtonsResponseMessage_Type {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return Message_ButtonsResponseMessage_Type.UNKNOWN;
    case 1:
    case "DISPLAY_TEXT":
      return Message_ButtonsResponseMessage_Type.DISPLAY_TEXT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_ButtonsResponseMessage_Type.UNRECOGNIZED;
  }
}

export function message_ButtonsResponseMessage_TypeToJSON(object: Message_ButtonsResponseMessage_Type): string {
  switch (object) {
    case Message_ButtonsResponseMessage_Type.UNKNOWN:
      return "UNKNOWN";
    case Message_ButtonsResponseMessage_Type.DISPLAY_TEXT:
      return "DISPLAY_TEXT";
    case Message_ButtonsResponseMessage_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_Call {
  callKey?: Uint8Array | undefined;
  conversionSource?: string | undefined;
  conversionData?: Uint8Array | undefined;
  conversionDelaySeconds?: number | undefined;
  ctwaSignals?: string | undefined;
  ctwaPayload?: Uint8Array | undefined;
  contextInfo?: ContextInfo | undefined;
}

export interface Message_CallLogMessage {
  isVideo?: boolean | undefined;
  callOutcome?: Message_CallLogMessage_CallOutcome | undefined;
  durationSecs?: number | undefined;
  callType?: Message_CallLogMessage_CallType | undefined;
  participants: Message_CallLogMessage_CallParticipant[];
}

export enum Message_CallLogMessage_CallOutcome {
  CONNECTED = 0,
  MISSED = 1,
  FAILED = 2,
  REJECTED = 3,
  ACCEPTED_ELSEWHERE = 4,
  ONGOING = 5,
  SILENCED_BY_DND = 6,
  SILENCED_UNKNOWN_CALLER = 7,
  UNRECOGNIZED = -1,
}

export function message_CallLogMessage_CallOutcomeFromJSON(object: any): Message_CallLogMessage_CallOutcome {
  switch (object) {
    case 0:
    case "CONNECTED":
      return Message_CallLogMessage_CallOutcome.CONNECTED;
    case 1:
    case "MISSED":
      return Message_CallLogMessage_CallOutcome.MISSED;
    case 2:
    case "FAILED":
      return Message_CallLogMessage_CallOutcome.FAILED;
    case 3:
    case "REJECTED":
      return Message_CallLogMessage_CallOutcome.REJECTED;
    case 4:
    case "ACCEPTED_ELSEWHERE":
      return Message_CallLogMessage_CallOutcome.ACCEPTED_ELSEWHERE;
    case 5:
    case "ONGOING":
      return Message_CallLogMessage_CallOutcome.ONGOING;
    case 6:
    case "SILENCED_BY_DND":
      return Message_CallLogMessage_CallOutcome.SILENCED_BY_DND;
    case 7:
    case "SILENCED_UNKNOWN_CALLER":
      return Message_CallLogMessage_CallOutcome.SILENCED_UNKNOWN_CALLER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_CallLogMessage_CallOutcome.UNRECOGNIZED;
  }
}

export function message_CallLogMessage_CallOutcomeToJSON(object: Message_CallLogMessage_CallOutcome): string {
  switch (object) {
    case Message_CallLogMessage_CallOutcome.CONNECTED:
      return "CONNECTED";
    case Message_CallLogMessage_CallOutcome.MISSED:
      return "MISSED";
    case Message_CallLogMessage_CallOutcome.FAILED:
      return "FAILED";
    case Message_CallLogMessage_CallOutcome.REJECTED:
      return "REJECTED";
    case Message_CallLogMessage_CallOutcome.ACCEPTED_ELSEWHERE:
      return "ACCEPTED_ELSEWHERE";
    case Message_CallLogMessage_CallOutcome.ONGOING:
      return "ONGOING";
    case Message_CallLogMessage_CallOutcome.SILENCED_BY_DND:
      return "SILENCED_BY_DND";
    case Message_CallLogMessage_CallOutcome.SILENCED_UNKNOWN_CALLER:
      return "SILENCED_UNKNOWN_CALLER";
    case Message_CallLogMessage_CallOutcome.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Message_CallLogMessage_CallType {
  REGULAR = 0,
  SCHEDULED_CALL = 1,
  VOICE_CHAT = 2,
  UNRECOGNIZED = -1,
}

export function message_CallLogMessage_CallTypeFromJSON(object: any): Message_CallLogMessage_CallType {
  switch (object) {
    case 0:
    case "REGULAR":
      return Message_CallLogMessage_CallType.REGULAR;
    case 1:
    case "SCHEDULED_CALL":
      return Message_CallLogMessage_CallType.SCHEDULED_CALL;
    case 2:
    case "VOICE_CHAT":
      return Message_CallLogMessage_CallType.VOICE_CHAT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_CallLogMessage_CallType.UNRECOGNIZED;
  }
}

export function message_CallLogMessage_CallTypeToJSON(object: Message_CallLogMessage_CallType): string {
  switch (object) {
    case Message_CallLogMessage_CallType.REGULAR:
      return "REGULAR";
    case Message_CallLogMessage_CallType.SCHEDULED_CALL:
      return "SCHEDULED_CALL";
    case Message_CallLogMessage_CallType.VOICE_CHAT:
      return "VOICE_CHAT";
    case Message_CallLogMessage_CallType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_CallLogMessage_CallParticipant {
  jid?: string | undefined;
  callOutcome?: Message_CallLogMessage_CallOutcome | undefined;
}

export interface Message_CancelPaymentRequestMessage {
  key?: MessageKey | undefined;
}

export interface Message_Chat {
  displayName?: string | undefined;
  id?: string | undefined;
}

export interface Message_CloudAPIThreadControlNotification {
  status?: Message_CloudAPIThreadControlNotification_CloudAPIThreadControl | undefined;
  senderNotificationTimestampMs?: number | undefined;
  consumerLid?: string | undefined;
  consumerPhoneNumber?: string | undefined;
  notificationContent?: Message_CloudAPIThreadControlNotification_CloudAPIThreadControlNotificationContent | undefined;
}

export enum Message_CloudAPIThreadControlNotification_CloudAPIThreadControl {
  UNKNOWN = 0,
  CONTROL_PASSED = 1,
  CONTROL_TAKEN = 2,
  UNRECOGNIZED = -1,
}

export function message_CloudAPIThreadControlNotification_CloudAPIThreadControlFromJSON(
  object: any,
): Message_CloudAPIThreadControlNotification_CloudAPIThreadControl {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return Message_CloudAPIThreadControlNotification_CloudAPIThreadControl.UNKNOWN;
    case 1:
    case "CONTROL_PASSED":
      return Message_CloudAPIThreadControlNotification_CloudAPIThreadControl.CONTROL_PASSED;
    case 2:
    case "CONTROL_TAKEN":
      return Message_CloudAPIThreadControlNotification_CloudAPIThreadControl.CONTROL_TAKEN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_CloudAPIThreadControlNotification_CloudAPIThreadControl.UNRECOGNIZED;
  }
}

export function message_CloudAPIThreadControlNotification_CloudAPIThreadControlToJSON(
  object: Message_CloudAPIThreadControlNotification_CloudAPIThreadControl,
): string {
  switch (object) {
    case Message_CloudAPIThreadControlNotification_CloudAPIThreadControl.UNKNOWN:
      return "UNKNOWN";
    case Message_CloudAPIThreadControlNotification_CloudAPIThreadControl.CONTROL_PASSED:
      return "CONTROL_PASSED";
    case Message_CloudAPIThreadControlNotification_CloudAPIThreadControl.CONTROL_TAKEN:
      return "CONTROL_TAKEN";
    case Message_CloudAPIThreadControlNotification_CloudAPIThreadControl.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_CloudAPIThreadControlNotification_CloudAPIThreadControlNotificationContent {
  handoffNotificationText?: string | undefined;
  extraJson?: string | undefined;
}

export interface Message_CommentMessage {
  message?: Message | undefined;
  targetMessageKey?: MessageKey | undefined;
}

export interface Message_ContactMessage {
  displayName?: string | undefined;
  vcard?: string | undefined;
  contextInfo?: ContextInfo | undefined;
}

export interface Message_ContactsArrayMessage {
  displayName?: string | undefined;
  contacts: Message_ContactMessage[];
  contextInfo?: ContextInfo | undefined;
}

export interface Message_DeclinePaymentRequestMessage {
  key?: MessageKey | undefined;
}

export interface Message_DeviceSentMessage {
  destinationJid?: string | undefined;
  message?: Message | undefined;
  phash?: string | undefined;
}

export interface Message_DocumentMessage {
  url?: string | undefined;
  mimetype?: string | undefined;
  title?: string | undefined;
  fileSha256?: Uint8Array | undefined;
  fileLength?: number | undefined;
  pageCount?: number | undefined;
  mediaKey?: Uint8Array | undefined;
  fileName?: string | undefined;
  fileEncSha256?: Uint8Array | undefined;
  directPath?: string | undefined;
  mediaKeyTimestamp?: number | undefined;
  contactVcard?: boolean | undefined;
  thumbnailDirectPath?: string | undefined;
  thumbnailSha256?: Uint8Array | undefined;
  thumbnailEncSha256?: Uint8Array | undefined;
  jpegThumbnail?: Uint8Array | undefined;
  contextInfo?: ContextInfo | undefined;
  thumbnailHeight?: number | undefined;
  thumbnailWidth?: number | undefined;
  caption?: string | undefined;
  accessibilityLabel?: string | undefined;
}

export interface Message_EncCommentMessage {
  targetMessageKey?: MessageKey | undefined;
  encPayload?: Uint8Array | undefined;
  encIv?: Uint8Array | undefined;
}

export interface Message_EncEventResponseMessage {
  eventCreationMessageKey?: MessageKey | undefined;
  encPayload?: Uint8Array | undefined;
  encIv?: Uint8Array | undefined;
}

export interface Message_EncReactionMessage {
  targetMessageKey?: MessageKey | undefined;
  encPayload?: Uint8Array | undefined;
  encIv?: Uint8Array | undefined;
}

export interface Message_EventMessage {
  contextInfo?: ContextInfo | undefined;
  isCanceled?: boolean | undefined;
  name?: string | undefined;
  description?: string | undefined;
  location?: Message_LocationMessage | undefined;
  joinLink?: string | undefined;
  startTime?: number | undefined;
  endTime?: number | undefined;
  extraGuestsAllowed?: boolean | undefined;
  isScheduleCall?: boolean | undefined;
}

export interface Message_EventResponseMessage {
  response?: Message_EventResponseMessage_EventResponseType | undefined;
  timestampMs?: number | undefined;
  extraGuestCount?: number | undefined;
}

export enum Message_EventResponseMessage_EventResponseType {
  UNKNOWN = 0,
  GOING = 1,
  NOT_GOING = 2,
  MAYBE = 3,
  UNRECOGNIZED = -1,
}

export function message_EventResponseMessage_EventResponseTypeFromJSON(
  object: any,
): Message_EventResponseMessage_EventResponseType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return Message_EventResponseMessage_EventResponseType.UNKNOWN;
    case 1:
    case "GOING":
      return Message_EventResponseMessage_EventResponseType.GOING;
    case 2:
    case "NOT_GOING":
      return Message_EventResponseMessage_EventResponseType.NOT_GOING;
    case 3:
    case "MAYBE":
      return Message_EventResponseMessage_EventResponseType.MAYBE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_EventResponseMessage_EventResponseType.UNRECOGNIZED;
  }
}

export function message_EventResponseMessage_EventResponseTypeToJSON(
  object: Message_EventResponseMessage_EventResponseType,
): string {
  switch (object) {
    case Message_EventResponseMessage_EventResponseType.UNKNOWN:
      return "UNKNOWN";
    case Message_EventResponseMessage_EventResponseType.GOING:
      return "GOING";
    case Message_EventResponseMessage_EventResponseType.NOT_GOING:
      return "NOT_GOING";
    case Message_EventResponseMessage_EventResponseType.MAYBE:
      return "MAYBE";
    case Message_EventResponseMessage_EventResponseType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_ExtendedTextMessage {
  text?: string | undefined;
  matchedText?: string | undefined;
  description?: string | undefined;
  title?: string | undefined;
  textArgb?: number | undefined;
  backgroundArgb?: number | undefined;
  font?: Message_ExtendedTextMessage_FontType | undefined;
  previewType?: Message_ExtendedTextMessage_PreviewType | undefined;
  jpegThumbnail?: Uint8Array | undefined;
  contextInfo?: ContextInfo | undefined;
  doNotPlayInline?: boolean | undefined;
  thumbnailDirectPath?: string | undefined;
  thumbnailSha256?: Uint8Array | undefined;
  thumbnailEncSha256?: Uint8Array | undefined;
  mediaKey?: Uint8Array | undefined;
  mediaKeyTimestamp?: number | undefined;
  thumbnailHeight?: number | undefined;
  thumbnailWidth?: number | undefined;
  inviteLinkGroupType?: Message_ExtendedTextMessage_InviteLinkGroupType | undefined;
  inviteLinkParentGroupSubjectV2?: string | undefined;
  inviteLinkParentGroupThumbnailV2?: Uint8Array | undefined;
  inviteLinkGroupTypeV2?: Message_ExtendedTextMessage_InviteLinkGroupType | undefined;
  viewOnce?: boolean | undefined;
  videoHeight?: number | undefined;
  videoWidth?: number | undefined;
  faviconMMSMetadata?: Message_MMSThumbnailMetadata | undefined;
  linkPreviewMetadata?: Message_LinkPreviewMetadata | undefined;
  paymentLinkMetadata?: Message_PaymentLinkMetadata | undefined;
}

export enum Message_ExtendedTextMessage_FontType {
  SYSTEM = 0,
  SYSTEM_TEXT = 1,
  FB_SCRIPT = 2,
  SYSTEM_BOLD = 6,
  MORNINGBREEZE_REGULAR = 7,
  CALISTOGA_REGULAR = 8,
  EXO2_EXTRABOLD = 9,
  COURIERPRIME_BOLD = 10,
  UNRECOGNIZED = -1,
}

export function message_ExtendedTextMessage_FontTypeFromJSON(object: any): Message_ExtendedTextMessage_FontType {
  switch (object) {
    case 0:
    case "SYSTEM":
      return Message_ExtendedTextMessage_FontType.SYSTEM;
    case 1:
    case "SYSTEM_TEXT":
      return Message_ExtendedTextMessage_FontType.SYSTEM_TEXT;
    case 2:
    case "FB_SCRIPT":
      return Message_ExtendedTextMessage_FontType.FB_SCRIPT;
    case 6:
    case "SYSTEM_BOLD":
      return Message_ExtendedTextMessage_FontType.SYSTEM_BOLD;
    case 7:
    case "MORNINGBREEZE_REGULAR":
      return Message_ExtendedTextMessage_FontType.MORNINGBREEZE_REGULAR;
    case 8:
    case "CALISTOGA_REGULAR":
      return Message_ExtendedTextMessage_FontType.CALISTOGA_REGULAR;
    case 9:
    case "EXO2_EXTRABOLD":
      return Message_ExtendedTextMessage_FontType.EXO2_EXTRABOLD;
    case 10:
    case "COURIERPRIME_BOLD":
      return Message_ExtendedTextMessage_FontType.COURIERPRIME_BOLD;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_ExtendedTextMessage_FontType.UNRECOGNIZED;
  }
}

export function message_ExtendedTextMessage_FontTypeToJSON(object: Message_ExtendedTextMessage_FontType): string {
  switch (object) {
    case Message_ExtendedTextMessage_FontType.SYSTEM:
      return "SYSTEM";
    case Message_ExtendedTextMessage_FontType.SYSTEM_TEXT:
      return "SYSTEM_TEXT";
    case Message_ExtendedTextMessage_FontType.FB_SCRIPT:
      return "FB_SCRIPT";
    case Message_ExtendedTextMessage_FontType.SYSTEM_BOLD:
      return "SYSTEM_BOLD";
    case Message_ExtendedTextMessage_FontType.MORNINGBREEZE_REGULAR:
      return "MORNINGBREEZE_REGULAR";
    case Message_ExtendedTextMessage_FontType.CALISTOGA_REGULAR:
      return "CALISTOGA_REGULAR";
    case Message_ExtendedTextMessage_FontType.EXO2_EXTRABOLD:
      return "EXO2_EXTRABOLD";
    case Message_ExtendedTextMessage_FontType.COURIERPRIME_BOLD:
      return "COURIERPRIME_BOLD";
    case Message_ExtendedTextMessage_FontType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Message_ExtendedTextMessage_InviteLinkGroupType {
  DEFAULT = 0,
  PARENT = 1,
  SUB = 2,
  DEFAULT_SUB = 3,
  UNRECOGNIZED = -1,
}

export function message_ExtendedTextMessage_InviteLinkGroupTypeFromJSON(
  object: any,
): Message_ExtendedTextMessage_InviteLinkGroupType {
  switch (object) {
    case 0:
    case "DEFAULT":
      return Message_ExtendedTextMessage_InviteLinkGroupType.DEFAULT;
    case 1:
    case "PARENT":
      return Message_ExtendedTextMessage_InviteLinkGroupType.PARENT;
    case 2:
    case "SUB":
      return Message_ExtendedTextMessage_InviteLinkGroupType.SUB;
    case 3:
    case "DEFAULT_SUB":
      return Message_ExtendedTextMessage_InviteLinkGroupType.DEFAULT_SUB;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_ExtendedTextMessage_InviteLinkGroupType.UNRECOGNIZED;
  }
}

export function message_ExtendedTextMessage_InviteLinkGroupTypeToJSON(
  object: Message_ExtendedTextMessage_InviteLinkGroupType,
): string {
  switch (object) {
    case Message_ExtendedTextMessage_InviteLinkGroupType.DEFAULT:
      return "DEFAULT";
    case Message_ExtendedTextMessage_InviteLinkGroupType.PARENT:
      return "PARENT";
    case Message_ExtendedTextMessage_InviteLinkGroupType.SUB:
      return "SUB";
    case Message_ExtendedTextMessage_InviteLinkGroupType.DEFAULT_SUB:
      return "DEFAULT_SUB";
    case Message_ExtendedTextMessage_InviteLinkGroupType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Message_ExtendedTextMessage_PreviewType {
  NONE = 0,
  VIDEO = 1,
  PLACEHOLDER = 4,
  IMAGE = 5,
  PAYMENT_LINKS = 6,
  PROFILE = 7,
  UNRECOGNIZED = -1,
}

export function message_ExtendedTextMessage_PreviewTypeFromJSON(object: any): Message_ExtendedTextMessage_PreviewType {
  switch (object) {
    case 0:
    case "NONE":
      return Message_ExtendedTextMessage_PreviewType.NONE;
    case 1:
    case "VIDEO":
      return Message_ExtendedTextMessage_PreviewType.VIDEO;
    case 4:
    case "PLACEHOLDER":
      return Message_ExtendedTextMessage_PreviewType.PLACEHOLDER;
    case 5:
    case "IMAGE":
      return Message_ExtendedTextMessage_PreviewType.IMAGE;
    case 6:
    case "PAYMENT_LINKS":
      return Message_ExtendedTextMessage_PreviewType.PAYMENT_LINKS;
    case 7:
    case "PROFILE":
      return Message_ExtendedTextMessage_PreviewType.PROFILE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_ExtendedTextMessage_PreviewType.UNRECOGNIZED;
  }
}

export function message_ExtendedTextMessage_PreviewTypeToJSON(object: Message_ExtendedTextMessage_PreviewType): string {
  switch (object) {
    case Message_ExtendedTextMessage_PreviewType.NONE:
      return "NONE";
    case Message_ExtendedTextMessage_PreviewType.VIDEO:
      return "VIDEO";
    case Message_ExtendedTextMessage_PreviewType.PLACEHOLDER:
      return "PLACEHOLDER";
    case Message_ExtendedTextMessage_PreviewType.IMAGE:
      return "IMAGE";
    case Message_ExtendedTextMessage_PreviewType.PAYMENT_LINKS:
      return "PAYMENT_LINKS";
    case Message_ExtendedTextMessage_PreviewType.PROFILE:
      return "PROFILE";
    case Message_ExtendedTextMessage_PreviewType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_FullHistorySyncOnDemandRequestMetadata {
  requestId?: string | undefined;
}

export interface Message_FutureProofMessage {
  message?: Message | undefined;
}

export interface Message_GroupInviteMessage {
  groupJid?: string | undefined;
  inviteCode?: string | undefined;
  inviteExpiration?: number | undefined;
  groupName?: string | undefined;
  jpegThumbnail?: Uint8Array | undefined;
  caption?: string | undefined;
  contextInfo?: ContextInfo | undefined;
  groupType?: Message_GroupInviteMessage_GroupType | undefined;
}

export enum Message_GroupInviteMessage_GroupType {
  DEFAULT = 0,
  PARENT = 1,
  UNRECOGNIZED = -1,
}

export function message_GroupInviteMessage_GroupTypeFromJSON(object: any): Message_GroupInviteMessage_GroupType {
  switch (object) {
    case 0:
    case "DEFAULT":
      return Message_GroupInviteMessage_GroupType.DEFAULT;
    case 1:
    case "PARENT":
      return Message_GroupInviteMessage_GroupType.PARENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_GroupInviteMessage_GroupType.UNRECOGNIZED;
  }
}

export function message_GroupInviteMessage_GroupTypeToJSON(object: Message_GroupInviteMessage_GroupType): string {
  switch (object) {
    case Message_GroupInviteMessage_GroupType.DEFAULT:
      return "DEFAULT";
    case Message_GroupInviteMessage_GroupType.PARENT:
      return "PARENT";
    case Message_GroupInviteMessage_GroupType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_HighlyStructuredMessage {
  namespace?: string | undefined;
  elementName?: string | undefined;
  params: string[];
  fallbackLg?: string | undefined;
  fallbackLc?: string | undefined;
  localizableParams: Message_HighlyStructuredMessage_HSMLocalizableParameter[];
  deterministicLg?: string | undefined;
  deterministicLc?: string | undefined;
  hydratedHsm?: Message_TemplateMessage | undefined;
}

export interface Message_HighlyStructuredMessage_HSMLocalizableParameter {
  default?: string | undefined;
  currency?: Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency | undefined;
  dateTime?: Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime | undefined;
}

export interface Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency {
  currencyCode?: string | undefined;
  amount1000?: number | undefined;
}

export interface Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime {
  component?: Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent | undefined;
  unixEpoch?: Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch | undefined;
}

export interface Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent {
  dayOfWeek?:
    | Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType
    | undefined;
  year?: number | undefined;
  month?: number | undefined;
  dayOfMonth?: number | undefined;
  hour?: number | undefined;
  minute?: number | undefined;
  calendar?:
    | Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType
    | undefined;
}

export enum Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType {
  UNKNOWN = 0,
  GREGORIAN = 1,
  SOLAR_HIJRI = 2,
  UNRECOGNIZED = -1,
}

export function message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarTypeFromJSON(
  object: any,
): Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType
        .UNKNOWN;
    case 1:
    case "GREGORIAN":
      return Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType
        .GREGORIAN;
    case 2:
    case "SOLAR_HIJRI":
      return Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType
        .SOLAR_HIJRI;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType
        .UNRECOGNIZED;
  }
}

export function message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarTypeToJSON(
  object: Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType,
): string {
  switch (object) {
    case Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType.UNKNOWN:
      return "UNKNOWN";
    case Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType
      .GREGORIAN:
      return "GREGORIAN";
    case Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType
      .SOLAR_HIJRI:
      return "SOLAR_HIJRI";
    case Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarType
      .UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType {
  DEFAULT = 0,
  MONDAY = 1,
  TUESDAY = 2,
  WEDNESDAY = 3,
  THURSDAY = 4,
  FRIDAY = 5,
  SATURDAY = 6,
  SUNDAY = 7,
  UNRECOGNIZED = -1,
}

export function message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekTypeFromJSON(
  object: any,
): Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType {
  switch (object) {
    case 0:
    case "DEFAULT":
      return Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType
        .DEFAULT;
    case 1:
    case "MONDAY":
      return Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType
        .MONDAY;
    case 2:
    case "TUESDAY":
      return Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType
        .TUESDAY;
    case 3:
    case "WEDNESDAY":
      return Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType
        .WEDNESDAY;
    case 4:
    case "THURSDAY":
      return Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType
        .THURSDAY;
    case 5:
    case "FRIDAY":
      return Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType
        .FRIDAY;
    case 6:
    case "SATURDAY":
      return Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType
        .SATURDAY;
    case 7:
    case "SUNDAY":
      return Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType
        .SUNDAY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType
        .UNRECOGNIZED;
  }
}

export function message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekTypeToJSON(
  object: Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType,
): string {
  switch (object) {
    case Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType.DEFAULT:
      return "DEFAULT";
    case Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType.MONDAY:
      return "MONDAY";
    case Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType.TUESDAY:
      return "TUESDAY";
    case Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType
      .WEDNESDAY:
      return "WEDNESDAY";
    case Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType
      .THURSDAY:
      return "THURSDAY";
    case Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType.FRIDAY:
      return "FRIDAY";
    case Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType
      .SATURDAY:
      return "SATURDAY";
    case Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType.SUNDAY:
      return "SUNDAY";
    case Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekType
      .UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch {
  timestamp?: number | undefined;
}

export interface Message_HistorySyncNotification {
  fileSha256?: Uint8Array | undefined;
  fileLength?: number | undefined;
  mediaKey?: Uint8Array | undefined;
  fileEncSha256?: Uint8Array | undefined;
  directPath?: string | undefined;
  syncType?: Message_HistorySyncNotification_HistorySyncType | undefined;
  chunkOrder?: number | undefined;
  originalMessageId?: string | undefined;
  progress?: number | undefined;
  oldestMsgInChunkTimestampSec?: number | undefined;
  initialHistBootstrapInlinePayload?: Uint8Array | undefined;
  peerDataRequestSessionId?: string | undefined;
  fullHistorySyncOnDemandRequestMetadata?: Message_FullHistorySyncOnDemandRequestMetadata | undefined;
  encHandle?: string | undefined;
}

export enum Message_HistorySyncNotification_HistorySyncType {
  INITIAL_BOOTSTRAP = 0,
  INITIAL_STATUS_V3 = 1,
  FULL = 2,
  RECENT = 3,
  PUSH_NAME = 4,
  NON_BLOCKING_DATA = 5,
  ON_DEMAND = 6,
  NO_HISTORY = 7,
  UNRECOGNIZED = -1,
}

export function message_HistorySyncNotification_HistorySyncTypeFromJSON(
  object: any,
): Message_HistorySyncNotification_HistorySyncType {
  switch (object) {
    case 0:
    case "INITIAL_BOOTSTRAP":
      return Message_HistorySyncNotification_HistorySyncType.INITIAL_BOOTSTRAP;
    case 1:
    case "INITIAL_STATUS_V3":
      return Message_HistorySyncNotification_HistorySyncType.INITIAL_STATUS_V3;
    case 2:
    case "FULL":
      return Message_HistorySyncNotification_HistorySyncType.FULL;
    case 3:
    case "RECENT":
      return Message_HistorySyncNotification_HistorySyncType.RECENT;
    case 4:
    case "PUSH_NAME":
      return Message_HistorySyncNotification_HistorySyncType.PUSH_NAME;
    case 5:
    case "NON_BLOCKING_DATA":
      return Message_HistorySyncNotification_HistorySyncType.NON_BLOCKING_DATA;
    case 6:
    case "ON_DEMAND":
      return Message_HistorySyncNotification_HistorySyncType.ON_DEMAND;
    case 7:
    case "NO_HISTORY":
      return Message_HistorySyncNotification_HistorySyncType.NO_HISTORY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_HistorySyncNotification_HistorySyncType.UNRECOGNIZED;
  }
}

export function message_HistorySyncNotification_HistorySyncTypeToJSON(
  object: Message_HistorySyncNotification_HistorySyncType,
): string {
  switch (object) {
    case Message_HistorySyncNotification_HistorySyncType.INITIAL_BOOTSTRAP:
      return "INITIAL_BOOTSTRAP";
    case Message_HistorySyncNotification_HistorySyncType.INITIAL_STATUS_V3:
      return "INITIAL_STATUS_V3";
    case Message_HistorySyncNotification_HistorySyncType.FULL:
      return "FULL";
    case Message_HistorySyncNotification_HistorySyncType.RECENT:
      return "RECENT";
    case Message_HistorySyncNotification_HistorySyncType.PUSH_NAME:
      return "PUSH_NAME";
    case Message_HistorySyncNotification_HistorySyncType.NON_BLOCKING_DATA:
      return "NON_BLOCKING_DATA";
    case Message_HistorySyncNotification_HistorySyncType.ON_DEMAND:
      return "ON_DEMAND";
    case Message_HistorySyncNotification_HistorySyncType.NO_HISTORY:
      return "NO_HISTORY";
    case Message_HistorySyncNotification_HistorySyncType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_ImageMessage {
  url?: string | undefined;
  mimetype?: string | undefined;
  caption?: string | undefined;
  fileSha256?: Uint8Array | undefined;
  fileLength?: number | undefined;
  height?: number | undefined;
  width?: number | undefined;
  mediaKey?: Uint8Array | undefined;
  fileEncSha256?: Uint8Array | undefined;
  interactiveAnnotations: InteractiveAnnotation[];
  directPath?: string | undefined;
  mediaKeyTimestamp?: number | undefined;
  jpegThumbnail?: Uint8Array | undefined;
  contextInfo?: ContextInfo | undefined;
  firstScanSidecar?: Uint8Array | undefined;
  firstScanLength?: number | undefined;
  experimentGroupId?: number | undefined;
  scansSidecar?: Uint8Array | undefined;
  scanLengths: number[];
  midQualityFileSha256?: Uint8Array | undefined;
  midQualityFileEncSha256?: Uint8Array | undefined;
  viewOnce?: boolean | undefined;
  thumbnailDirectPath?: string | undefined;
  thumbnailSha256?: Uint8Array | undefined;
  thumbnailEncSha256?: Uint8Array | undefined;
  staticUrl?: string | undefined;
  annotations: InteractiveAnnotation[];
  imageSourceType?: Message_ImageMessage_ImageSourceType | undefined;
  accessibilityLabel?: string | undefined;
}

export enum Message_ImageMessage_ImageSourceType {
  USER_IMAGE = 0,
  AI_GENERATED = 1,
  AI_MODIFIED = 2,
  RASTERIZED_TEXT_STATUS = 3,
  UNRECOGNIZED = -1,
}

export function message_ImageMessage_ImageSourceTypeFromJSON(object: any): Message_ImageMessage_ImageSourceType {
  switch (object) {
    case 0:
    case "USER_IMAGE":
      return Message_ImageMessage_ImageSourceType.USER_IMAGE;
    case 1:
    case "AI_GENERATED":
      return Message_ImageMessage_ImageSourceType.AI_GENERATED;
    case 2:
    case "AI_MODIFIED":
      return Message_ImageMessage_ImageSourceType.AI_MODIFIED;
    case 3:
    case "RASTERIZED_TEXT_STATUS":
      return Message_ImageMessage_ImageSourceType.RASTERIZED_TEXT_STATUS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_ImageMessage_ImageSourceType.UNRECOGNIZED;
  }
}

export function message_ImageMessage_ImageSourceTypeToJSON(object: Message_ImageMessage_ImageSourceType): string {
  switch (object) {
    case Message_ImageMessage_ImageSourceType.USER_IMAGE:
      return "USER_IMAGE";
    case Message_ImageMessage_ImageSourceType.AI_GENERATED:
      return "AI_GENERATED";
    case Message_ImageMessage_ImageSourceType.AI_MODIFIED:
      return "AI_MODIFIED";
    case Message_ImageMessage_ImageSourceType.RASTERIZED_TEXT_STATUS:
      return "RASTERIZED_TEXT_STATUS";
    case Message_ImageMessage_ImageSourceType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_InitialSecurityNotificationSettingSync {
  securityNotificationEnabled?: boolean | undefined;
}

export interface Message_InteractiveMessage {
  header?: Message_InteractiveMessage_Header | undefined;
  body?: Message_InteractiveMessage_Body | undefined;
  footer?: Message_InteractiveMessage_Footer | undefined;
  contextInfo?: ContextInfo | undefined;
  urlTrackingMap?: UrlTrackingMap | undefined;
  shopStorefrontMessage?: Message_InteractiveMessage_ShopMessage | undefined;
  collectionMessage?: Message_InteractiveMessage_CollectionMessage | undefined;
  nativeFlowMessage?: Message_InteractiveMessage_NativeFlowMessage | undefined;
  carouselMessage?: Message_InteractiveMessage_CarouselMessage | undefined;
}

export interface Message_InteractiveMessage_Body {
  text?: string | undefined;
}

export interface Message_InteractiveMessage_CarouselMessage {
  cards: Message_InteractiveMessage[];
  messageVersion?: number | undefined;
}

export interface Message_InteractiveMessage_CollectionMessage {
  bizJid?: string | undefined;
  id?: string | undefined;
  messageVersion?: number | undefined;
}

export interface Message_InteractiveMessage_Footer {
  text?: string | undefined;
}

export interface Message_InteractiveMessage_Header {
  title?: string | undefined;
  subtitle?: string | undefined;
  hasMediaAttachment?: boolean | undefined;
  documentMessage?: Message_DocumentMessage | undefined;
  imageMessage?: Message_ImageMessage | undefined;
  jpegThumbnail?: Uint8Array | undefined;
  videoMessage?: Message_VideoMessage | undefined;
  locationMessage?: Message_LocationMessage | undefined;
  productMessage?: Message_ProductMessage | undefined;
}

export interface Message_InteractiveMessage_NativeFlowMessage {
  buttons: Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton[];
  messageParamsJson?: string | undefined;
  messageVersion?: number | undefined;
}

export interface Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton {
  name?: string | undefined;
  buttonParamsJson?: string | undefined;
}

export interface Message_InteractiveMessage_ShopMessage {
  id?: string | undefined;
  surface?: Message_InteractiveMessage_ShopMessage_Surface | undefined;
  messageVersion?: number | undefined;
}

export enum Message_InteractiveMessage_ShopMessage_Surface {
  UNKNOWN_SURFACE = 0,
  FB = 1,
  IG = 2,
  WA = 3,
  UNRECOGNIZED = -1,
}

export function message_InteractiveMessage_ShopMessage_SurfaceFromJSON(
  object: any,
): Message_InteractiveMessage_ShopMessage_Surface {
  switch (object) {
    case 0:
    case "UNKNOWN_SURFACE":
      return Message_InteractiveMessage_ShopMessage_Surface.UNKNOWN_SURFACE;
    case 1:
    case "FB":
      return Message_InteractiveMessage_ShopMessage_Surface.FB;
    case 2:
    case "IG":
      return Message_InteractiveMessage_ShopMessage_Surface.IG;
    case 3:
    case "WA":
      return Message_InteractiveMessage_ShopMessage_Surface.WA;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_InteractiveMessage_ShopMessage_Surface.UNRECOGNIZED;
  }
}

export function message_InteractiveMessage_ShopMessage_SurfaceToJSON(
  object: Message_InteractiveMessage_ShopMessage_Surface,
): string {
  switch (object) {
    case Message_InteractiveMessage_ShopMessage_Surface.UNKNOWN_SURFACE:
      return "UNKNOWN_SURFACE";
    case Message_InteractiveMessage_ShopMessage_Surface.FB:
      return "FB";
    case Message_InteractiveMessage_ShopMessage_Surface.IG:
      return "IG";
    case Message_InteractiveMessage_ShopMessage_Surface.WA:
      return "WA";
    case Message_InteractiveMessage_ShopMessage_Surface.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_InteractiveResponseMessage {
  body?: Message_InteractiveResponseMessage_Body | undefined;
  contextInfo?: ContextInfo | undefined;
  nativeFlowResponseMessage?: Message_InteractiveResponseMessage_NativeFlowResponseMessage | undefined;
}

export interface Message_InteractiveResponseMessage_Body {
  text?: string | undefined;
  format?: Message_InteractiveResponseMessage_Body_Format | undefined;
}

export enum Message_InteractiveResponseMessage_Body_Format {
  DEFAULT = 0,
  EXTENSIONS_1 = 1,
  UNRECOGNIZED = -1,
}

export function message_InteractiveResponseMessage_Body_FormatFromJSON(
  object: any,
): Message_InteractiveResponseMessage_Body_Format {
  switch (object) {
    case 0:
    case "DEFAULT":
      return Message_InteractiveResponseMessage_Body_Format.DEFAULT;
    case 1:
    case "EXTENSIONS_1":
      return Message_InteractiveResponseMessage_Body_Format.EXTENSIONS_1;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_InteractiveResponseMessage_Body_Format.UNRECOGNIZED;
  }
}

export function message_InteractiveResponseMessage_Body_FormatToJSON(
  object: Message_InteractiveResponseMessage_Body_Format,
): string {
  switch (object) {
    case Message_InteractiveResponseMessage_Body_Format.DEFAULT:
      return "DEFAULT";
    case Message_InteractiveResponseMessage_Body_Format.EXTENSIONS_1:
      return "EXTENSIONS_1";
    case Message_InteractiveResponseMessage_Body_Format.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_InteractiveResponseMessage_NativeFlowResponseMessage {
  name?: string | undefined;
  paramsJson?: string | undefined;
  version?: number | undefined;
}

export interface Message_InvoiceMessage {
  note?: string | undefined;
  token?: string | undefined;
  attachmentType?: Message_InvoiceMessage_AttachmentType | undefined;
  attachmentMimetype?: string | undefined;
  attachmentMediaKey?: Uint8Array | undefined;
  attachmentMediaKeyTimestamp?: number | undefined;
  attachmentFileSha256?: Uint8Array | undefined;
  attachmentFileEncSha256?: Uint8Array | undefined;
  attachmentDirectPath?: string | undefined;
  attachmentJpegThumbnail?: Uint8Array | undefined;
}

export enum Message_InvoiceMessage_AttachmentType {
  IMAGE = 0,
  PDF = 1,
  UNRECOGNIZED = -1,
}

export function message_InvoiceMessage_AttachmentTypeFromJSON(object: any): Message_InvoiceMessage_AttachmentType {
  switch (object) {
    case 0:
    case "IMAGE":
      return Message_InvoiceMessage_AttachmentType.IMAGE;
    case 1:
    case "PDF":
      return Message_InvoiceMessage_AttachmentType.PDF;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_InvoiceMessage_AttachmentType.UNRECOGNIZED;
  }
}

export function message_InvoiceMessage_AttachmentTypeToJSON(object: Message_InvoiceMessage_AttachmentType): string {
  switch (object) {
    case Message_InvoiceMessage_AttachmentType.IMAGE:
      return "IMAGE";
    case Message_InvoiceMessage_AttachmentType.PDF:
      return "PDF";
    case Message_InvoiceMessage_AttachmentType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_KeepInChatMessage {
  key?: MessageKey | undefined;
  keepType?: KeepType | undefined;
  timestampMs?: number | undefined;
}

export interface Message_LinkPreviewMetadata {
  paymentLinkMetadata?: Message_PaymentLinkMetadata | undefined;
  urlMetadata?: Message_URLMetadata | undefined;
  fbExperimentId?: number | undefined;
}

export interface Message_ListMessage {
  title?: string | undefined;
  description?: string | undefined;
  buttonText?: string | undefined;
  listType?: Message_ListMessage_ListType | undefined;
  sections: Message_ListMessage_Section[];
  productListInfo?: Message_ListMessage_ProductListInfo | undefined;
  footerText?: string | undefined;
  contextInfo?: ContextInfo | undefined;
}

export enum Message_ListMessage_ListType {
  UNKNOWN = 0,
  SINGLE_SELECT = 1,
  PRODUCT_LIST = 2,
  UNRECOGNIZED = -1,
}

export function message_ListMessage_ListTypeFromJSON(object: any): Message_ListMessage_ListType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return Message_ListMessage_ListType.UNKNOWN;
    case 1:
    case "SINGLE_SELECT":
      return Message_ListMessage_ListType.SINGLE_SELECT;
    case 2:
    case "PRODUCT_LIST":
      return Message_ListMessage_ListType.PRODUCT_LIST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_ListMessage_ListType.UNRECOGNIZED;
  }
}

export function message_ListMessage_ListTypeToJSON(object: Message_ListMessage_ListType): string {
  switch (object) {
    case Message_ListMessage_ListType.UNKNOWN:
      return "UNKNOWN";
    case Message_ListMessage_ListType.SINGLE_SELECT:
      return "SINGLE_SELECT";
    case Message_ListMessage_ListType.PRODUCT_LIST:
      return "PRODUCT_LIST";
    case Message_ListMessage_ListType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_ListMessage_Product {
  productId?: string | undefined;
}

export interface Message_ListMessage_ProductListHeaderImage {
  productId?: string | undefined;
  jpegThumbnail?: Uint8Array | undefined;
}

export interface Message_ListMessage_ProductListInfo {
  productSections: Message_ListMessage_ProductSection[];
  headerImage?: Message_ListMessage_ProductListHeaderImage | undefined;
  businessOwnerJid?: string | undefined;
}

export interface Message_ListMessage_ProductSection {
  title?: string | undefined;
  products: Message_ListMessage_Product[];
}

export interface Message_ListMessage_Row {
  title?: string | undefined;
  description?: string | undefined;
  rowId?: string | undefined;
}

export interface Message_ListMessage_Section {
  title?: string | undefined;
  rows: Message_ListMessage_Row[];
}

export interface Message_ListResponseMessage {
  title?: string | undefined;
  listType?: Message_ListResponseMessage_ListType | undefined;
  singleSelectReply?: Message_ListResponseMessage_SingleSelectReply | undefined;
  contextInfo?: ContextInfo | undefined;
  description?: string | undefined;
}

export enum Message_ListResponseMessage_ListType {
  UNKNOWN = 0,
  SINGLE_SELECT = 1,
  UNRECOGNIZED = -1,
}

export function message_ListResponseMessage_ListTypeFromJSON(object: any): Message_ListResponseMessage_ListType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return Message_ListResponseMessage_ListType.UNKNOWN;
    case 1:
    case "SINGLE_SELECT":
      return Message_ListResponseMessage_ListType.SINGLE_SELECT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_ListResponseMessage_ListType.UNRECOGNIZED;
  }
}

export function message_ListResponseMessage_ListTypeToJSON(object: Message_ListResponseMessage_ListType): string {
  switch (object) {
    case Message_ListResponseMessage_ListType.UNKNOWN:
      return "UNKNOWN";
    case Message_ListResponseMessage_ListType.SINGLE_SELECT:
      return "SINGLE_SELECT";
    case Message_ListResponseMessage_ListType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_ListResponseMessage_SingleSelectReply {
  selectedRowId?: string | undefined;
}

export interface Message_LiveLocationMessage {
  degreesLatitude?: number | undefined;
  degreesLongitude?: number | undefined;
  accuracyInMeters?: number | undefined;
  speedInMps?: number | undefined;
  degreesClockwiseFromMagneticNorth?: number | undefined;
  caption?: string | undefined;
  sequenceNumber?: number | undefined;
  timeOffset?: number | undefined;
  jpegThumbnail?: Uint8Array | undefined;
  contextInfo?: ContextInfo | undefined;
}

export interface Message_LocationMessage {
  degreesLatitude?: number | undefined;
  degreesLongitude?: number | undefined;
  name?: string | undefined;
  address?: string | undefined;
  url?: string | undefined;
  isLive?: boolean | undefined;
  accuracyInMeters?: number | undefined;
  speedInMps?: number | undefined;
  degreesClockwiseFromMagneticNorth?: number | undefined;
  comment?: string | undefined;
  jpegThumbnail?: Uint8Array | undefined;
  contextInfo?: ContextInfo | undefined;
}

export interface Message_MMSThumbnailMetadata {
  thumbnailDirectPath?: string | undefined;
  thumbnailSha256?: Uint8Array | undefined;
  thumbnailEncSha256?: Uint8Array | undefined;
  mediaKey?: Uint8Array | undefined;
  mediaKeyTimestamp?: number | undefined;
  thumbnailHeight?: number | undefined;
  thumbnailWidth?: number | undefined;
}

export interface Message_MessageHistoryBundle {
  mimetype?: string | undefined;
  fileSha256?: Uint8Array | undefined;
  mediaKey?: Uint8Array | undefined;
  fileEncSha256?: Uint8Array | undefined;
  directPath?: string | undefined;
  mediaKeyTimestamp?: number | undefined;
  contextInfo?: ContextInfo | undefined;
  messageHistoryMetadata?: Message_MessageHistoryMetadata | undefined;
}

export interface Message_MessageHistoryMetadata {
  historyReceivers: string[];
  firstMessageTimestamp?: number | undefined;
  messageCount?: number | undefined;
}

export interface Message_MessageHistoryNotice {
  contextInfo?: ContextInfo | undefined;
  messageHistoryMetadata?: Message_MessageHistoryMetadata | undefined;
}

export interface Message_NewsletterAdminInviteMessage {
  newsletterJid?: string | undefined;
  newsletterName?: string | undefined;
  jpegThumbnail?: Uint8Array | undefined;
  caption?: string | undefined;
  inviteExpiration?: number | undefined;
  contextInfo?: ContextInfo | undefined;
}

export interface Message_OrderMessage {
  orderId?: string | undefined;
  thumbnail?: Uint8Array | undefined;
  itemCount?: number | undefined;
  status?: Message_OrderMessage_OrderStatus | undefined;
  surface?: Message_OrderMessage_OrderSurface | undefined;
  message?: string | undefined;
  orderTitle?: string | undefined;
  sellerJid?: string | undefined;
  token?: string | undefined;
  totalAmount1000?: number | undefined;
  totalCurrencyCode?: string | undefined;
  contextInfo?: ContextInfo | undefined;
  messageVersion?: number | undefined;
  orderRequestMessageId?: MessageKey | undefined;
  catalogType?: string | undefined;
}

export enum Message_OrderMessage_OrderStatus {
  UNKNOWN = 0,
  INQUIRY = 1,
  ACCEPTED = 2,
  DECLINED = 3,
  UNRECOGNIZED = -1,
}

export function message_OrderMessage_OrderStatusFromJSON(object: any): Message_OrderMessage_OrderStatus {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return Message_OrderMessage_OrderStatus.UNKNOWN;
    case 1:
    case "INQUIRY":
      return Message_OrderMessage_OrderStatus.INQUIRY;
    case 2:
    case "ACCEPTED":
      return Message_OrderMessage_OrderStatus.ACCEPTED;
    case 3:
    case "DECLINED":
      return Message_OrderMessage_OrderStatus.DECLINED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_OrderMessage_OrderStatus.UNRECOGNIZED;
  }
}

export function message_OrderMessage_OrderStatusToJSON(object: Message_OrderMessage_OrderStatus): string {
  switch (object) {
    case Message_OrderMessage_OrderStatus.UNKNOWN:
      return "UNKNOWN";
    case Message_OrderMessage_OrderStatus.INQUIRY:
      return "INQUIRY";
    case Message_OrderMessage_OrderStatus.ACCEPTED:
      return "ACCEPTED";
    case Message_OrderMessage_OrderStatus.DECLINED:
      return "DECLINED";
    case Message_OrderMessage_OrderStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Message_OrderMessage_OrderSurface {
  DEFAULT = 0,
  CATALOG = 1,
  UNRECOGNIZED = -1,
}

export function message_OrderMessage_OrderSurfaceFromJSON(object: any): Message_OrderMessage_OrderSurface {
  switch (object) {
    case 0:
    case "DEFAULT":
      return Message_OrderMessage_OrderSurface.DEFAULT;
    case 1:
    case "CATALOG":
      return Message_OrderMessage_OrderSurface.CATALOG;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_OrderMessage_OrderSurface.UNRECOGNIZED;
  }
}

export function message_OrderMessage_OrderSurfaceToJSON(object: Message_OrderMessage_OrderSurface): string {
  switch (object) {
    case Message_OrderMessage_OrderSurface.DEFAULT:
      return "DEFAULT";
    case Message_OrderMessage_OrderSurface.CATALOG:
      return "CATALOG";
    case Message_OrderMessage_OrderSurface.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_PaymentInviteMessage {
  serviceType?: Message_PaymentInviteMessage_ServiceType | undefined;
  expiryTimestamp?: number | undefined;
}

export enum Message_PaymentInviteMessage_ServiceType {
  UNKNOWN = 0,
  FBPAY = 1,
  NOVI = 2,
  UPI = 3,
  UNRECOGNIZED = -1,
}

export function message_PaymentInviteMessage_ServiceTypeFromJSON(
  object: any,
): Message_PaymentInviteMessage_ServiceType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return Message_PaymentInviteMessage_ServiceType.UNKNOWN;
    case 1:
    case "FBPAY":
      return Message_PaymentInviteMessage_ServiceType.FBPAY;
    case 2:
    case "NOVI":
      return Message_PaymentInviteMessage_ServiceType.NOVI;
    case 3:
    case "UPI":
      return Message_PaymentInviteMessage_ServiceType.UPI;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_PaymentInviteMessage_ServiceType.UNRECOGNIZED;
  }
}

export function message_PaymentInviteMessage_ServiceTypeToJSON(
  object: Message_PaymentInviteMessage_ServiceType,
): string {
  switch (object) {
    case Message_PaymentInviteMessage_ServiceType.UNKNOWN:
      return "UNKNOWN";
    case Message_PaymentInviteMessage_ServiceType.FBPAY:
      return "FBPAY";
    case Message_PaymentInviteMessage_ServiceType.NOVI:
      return "NOVI";
    case Message_PaymentInviteMessage_ServiceType.UPI:
      return "UPI";
    case Message_PaymentInviteMessage_ServiceType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_PaymentLinkMetadata {
  button?: Message_PaymentLinkMetadata_PaymentLinkButton | undefined;
  header?: Message_PaymentLinkMetadata_PaymentLinkHeader | undefined;
}

export interface Message_PaymentLinkMetadata_PaymentLinkButton {
  displayText?: string | undefined;
}

export interface Message_PaymentLinkMetadata_PaymentLinkHeader {
  headerType?: Message_PaymentLinkMetadata_PaymentLinkHeader_PaymentLinkHeaderType | undefined;
}

export enum Message_PaymentLinkMetadata_PaymentLinkHeader_PaymentLinkHeaderType {
  LINK_PREVIEW = 0,
  ORDER = 1,
  UNRECOGNIZED = -1,
}

export function message_PaymentLinkMetadata_PaymentLinkHeader_PaymentLinkHeaderTypeFromJSON(
  object: any,
): Message_PaymentLinkMetadata_PaymentLinkHeader_PaymentLinkHeaderType {
  switch (object) {
    case 0:
    case "LINK_PREVIEW":
      return Message_PaymentLinkMetadata_PaymentLinkHeader_PaymentLinkHeaderType.LINK_PREVIEW;
    case 1:
    case "ORDER":
      return Message_PaymentLinkMetadata_PaymentLinkHeader_PaymentLinkHeaderType.ORDER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_PaymentLinkMetadata_PaymentLinkHeader_PaymentLinkHeaderType.UNRECOGNIZED;
  }
}

export function message_PaymentLinkMetadata_PaymentLinkHeader_PaymentLinkHeaderTypeToJSON(
  object: Message_PaymentLinkMetadata_PaymentLinkHeader_PaymentLinkHeaderType,
): string {
  switch (object) {
    case Message_PaymentLinkMetadata_PaymentLinkHeader_PaymentLinkHeaderType.LINK_PREVIEW:
      return "LINK_PREVIEW";
    case Message_PaymentLinkMetadata_PaymentLinkHeader_PaymentLinkHeaderType.ORDER:
      return "ORDER";
    case Message_PaymentLinkMetadata_PaymentLinkHeader_PaymentLinkHeaderType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_PeerDataOperationRequestMessage {
  peerDataOperationRequestType?: Message_PeerDataOperationRequestType | undefined;
  requestStickerReupload: Message_PeerDataOperationRequestMessage_RequestStickerReupload[];
  requestUrlPreview: Message_PeerDataOperationRequestMessage_RequestUrlPreview[];
  historySyncOnDemandRequest?: Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest | undefined;
  placeholderMessageResendRequest: Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest[];
  fullHistorySyncOnDemandRequest?: Message_PeerDataOperationRequestMessage_FullHistorySyncOnDemandRequest | undefined;
  syncdCollectionFatalRecoveryRequest?:
    | Message_PeerDataOperationRequestMessage_SyncDCollectionFatalRecoveryRequest
    | undefined;
}

export interface Message_PeerDataOperationRequestMessage_FullHistorySyncOnDemandRequest {
  requestMetadata?: Message_FullHistorySyncOnDemandRequestMetadata | undefined;
  historySyncConfig?: DeviceProps_HistorySyncConfig | undefined;
}

export interface Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest {
  chatJid?: string | undefined;
  oldestMsgId?: string | undefined;
  oldestMsgFromMe?: boolean | undefined;
  onDemandMsgCount?: number | undefined;
  oldestMsgTimestampMs?: number | undefined;
  accountLid?: string | undefined;
}

export interface Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest {
  messageKey?: MessageKey | undefined;
}

export interface Message_PeerDataOperationRequestMessage_RequestStickerReupload {
  fileSha256?: string | undefined;
}

export interface Message_PeerDataOperationRequestMessage_RequestUrlPreview {
  url?: string | undefined;
  includeHqThumbnail?: boolean | undefined;
}

export interface Message_PeerDataOperationRequestMessage_SyncDCollectionFatalRecoveryRequest {
  collectionName?: string | undefined;
  timestamp?: number | undefined;
}

export interface Message_PeerDataOperationRequestResponseMessage {
  peerDataOperationRequestType?: Message_PeerDataOperationRequestType | undefined;
  stanzaId?: string | undefined;
  peerDataOperationResult: Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult[];
}

export interface Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult {
  mediaUploadResult?: MediaRetryNotification_ResultType | undefined;
  stickerMessage?: Message_StickerMessage | undefined;
  linkPreviewResponse?:
    | Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse
    | undefined;
  placeholderMessageResendResponse?:
    | Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse
    | undefined;
  waffleNonceFetchRequestResponse?:
    | Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_WaffleNonceFetchResponse
    | undefined;
  fullHistorySyncOnDemandRequestResponse?:
    | Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandRequestResponse
    | undefined;
  companionMetaNonceFetchRequestResponse?:
    | Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_CompanionMetaNonceFetchResponse
    | undefined;
  syncdSnapshotFatalRecoveryResponse?:
    | Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_SyncDSnapshotFatalRecoveryResponse
    | undefined;
}

export enum Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandResponseCode {
  REQUEST_SUCCESS = 0,
  REQUEST_TIME_EXPIRED = 1,
  DECLINED_SHARING_HISTORY = 2,
  GENERIC_ERROR = 3,
  ERROR_REQUEST_ON_NON_SMB_PRIMARY = 4,
  ERROR_HOSTED_DEVICE_NOT_CONNECTED = 5,
  ERROR_HOSTED_DEVICE_LOGIN_TIME_NOT_SET = 6,
  UNRECOGNIZED = -1,
}

export function message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandResponseCodeFromJSON(
  object: any,
): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandResponseCode {
  switch (object) {
    case 0:
    case "REQUEST_SUCCESS":
      return Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandResponseCode
        .REQUEST_SUCCESS;
    case 1:
    case "REQUEST_TIME_EXPIRED":
      return Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandResponseCode
        .REQUEST_TIME_EXPIRED;
    case 2:
    case "DECLINED_SHARING_HISTORY":
      return Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandResponseCode
        .DECLINED_SHARING_HISTORY;
    case 3:
    case "GENERIC_ERROR":
      return Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandResponseCode
        .GENERIC_ERROR;
    case 4:
    case "ERROR_REQUEST_ON_NON_SMB_PRIMARY":
      return Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandResponseCode
        .ERROR_REQUEST_ON_NON_SMB_PRIMARY;
    case 5:
    case "ERROR_HOSTED_DEVICE_NOT_CONNECTED":
      return Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandResponseCode
        .ERROR_HOSTED_DEVICE_NOT_CONNECTED;
    case 6:
    case "ERROR_HOSTED_DEVICE_LOGIN_TIME_NOT_SET":
      return Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandResponseCode
        .ERROR_HOSTED_DEVICE_LOGIN_TIME_NOT_SET;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandResponseCode
        .UNRECOGNIZED;
  }
}

export function message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandResponseCodeToJSON(
  object: Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandResponseCode,
): string {
  switch (object) {
    case Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandResponseCode
      .REQUEST_SUCCESS:
      return "REQUEST_SUCCESS";
    case Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandResponseCode
      .REQUEST_TIME_EXPIRED:
      return "REQUEST_TIME_EXPIRED";
    case Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandResponseCode
      .DECLINED_SHARING_HISTORY:
      return "DECLINED_SHARING_HISTORY";
    case Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandResponseCode
      .GENERIC_ERROR:
      return "GENERIC_ERROR";
    case Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandResponseCode
      .ERROR_REQUEST_ON_NON_SMB_PRIMARY:
      return "ERROR_REQUEST_ON_NON_SMB_PRIMARY";
    case Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandResponseCode
      .ERROR_HOSTED_DEVICE_NOT_CONNECTED:
      return "ERROR_HOSTED_DEVICE_NOT_CONNECTED";
    case Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandResponseCode
      .ERROR_HOSTED_DEVICE_LOGIN_TIME_NOT_SET:
      return "ERROR_HOSTED_DEVICE_LOGIN_TIME_NOT_SET";
    case Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandResponseCode
      .UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_CompanionMetaNonceFetchResponse {
  nonce?: string | undefined;
}

export interface Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandRequestResponse {
  requestMetadata?: Message_FullHistorySyncOnDemandRequestMetadata | undefined;
  responseCode?:
    | Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandResponseCode
    | undefined;
}

export interface Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse {
  url?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  thumbData?: Uint8Array | undefined;
  matchText?: string | undefined;
  previewType?: string | undefined;
  hqThumbnail?:
    | Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail
    | undefined;
}

export interface Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail {
  directPath?: string | undefined;
  thumbHash?: string | undefined;
  encThumbHash?: string | undefined;
  mediaKey?: Uint8Array | undefined;
  mediaKeyTimestampMs?: number | undefined;
  thumbWidth?: number | undefined;
  thumbHeight?: number | undefined;
}

export interface Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse {
  webMessageInfoBytes?: Uint8Array | undefined;
}

export interface Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_SyncDSnapshotFatalRecoveryResponse {
  collectionSnapshot?: Uint8Array | undefined;
  isCompressed?: boolean | undefined;
}

export interface Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_WaffleNonceFetchResponse {
  nonce?: string | undefined;
  waEntFbid?: string | undefined;
}

export interface Message_PinInChatMessage {
  key?: MessageKey | undefined;
  type?: Message_PinInChatMessage_Type | undefined;
  senderTimestampMs?: number | undefined;
}

export enum Message_PinInChatMessage_Type {
  UNKNOWN_TYPE = 0,
  PIN_FOR_ALL = 1,
  UNPIN_FOR_ALL = 2,
  UNRECOGNIZED = -1,
}

export function message_PinInChatMessage_TypeFromJSON(object: any): Message_PinInChatMessage_Type {
  switch (object) {
    case 0:
    case "UNKNOWN_TYPE":
      return Message_PinInChatMessage_Type.UNKNOWN_TYPE;
    case 1:
    case "PIN_FOR_ALL":
      return Message_PinInChatMessage_Type.PIN_FOR_ALL;
    case 2:
    case "UNPIN_FOR_ALL":
      return Message_PinInChatMessage_Type.UNPIN_FOR_ALL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_PinInChatMessage_Type.UNRECOGNIZED;
  }
}

export function message_PinInChatMessage_TypeToJSON(object: Message_PinInChatMessage_Type): string {
  switch (object) {
    case Message_PinInChatMessage_Type.UNKNOWN_TYPE:
      return "UNKNOWN_TYPE";
    case Message_PinInChatMessage_Type.PIN_FOR_ALL:
      return "PIN_FOR_ALL";
    case Message_PinInChatMessage_Type.UNPIN_FOR_ALL:
      return "UNPIN_FOR_ALL";
    case Message_PinInChatMessage_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_PlaceholderMessage {
  type?: Message_PlaceholderMessage_PlaceholderType | undefined;
}

export enum Message_PlaceholderMessage_PlaceholderType {
  MASK_LINKED_DEVICES = 0,
  UNRECOGNIZED = -1,
}

export function message_PlaceholderMessage_PlaceholderTypeFromJSON(
  object: any,
): Message_PlaceholderMessage_PlaceholderType {
  switch (object) {
    case 0:
    case "MASK_LINKED_DEVICES":
      return Message_PlaceholderMessage_PlaceholderType.MASK_LINKED_DEVICES;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_PlaceholderMessage_PlaceholderType.UNRECOGNIZED;
  }
}

export function message_PlaceholderMessage_PlaceholderTypeToJSON(
  object: Message_PlaceholderMessage_PlaceholderType,
): string {
  switch (object) {
    case Message_PlaceholderMessage_PlaceholderType.MASK_LINKED_DEVICES:
      return "MASK_LINKED_DEVICES";
    case Message_PlaceholderMessage_PlaceholderType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_PollCreationMessage {
  encKey?: Uint8Array | undefined;
  name?: string | undefined;
  options: Message_PollCreationMessage_Option[];
  selectableOptionsCount?: number | undefined;
  contextInfo?: ContextInfo | undefined;
  pollContentType?: Message_PollContentType | undefined;
  pollType?: Message_PollCreationMessage_PollType | undefined;
  correctAnswer?: Message_PollCreationMessage_Option | undefined;
}

export enum Message_PollCreationMessage_PollType {
  POLL = 0,
  QUIZ = 1,
  UNRECOGNIZED = -1,
}

export function message_PollCreationMessage_PollTypeFromJSON(object: any): Message_PollCreationMessage_PollType {
  switch (object) {
    case 0:
    case "POLL":
      return Message_PollCreationMessage_PollType.POLL;
    case 1:
    case "QUIZ":
      return Message_PollCreationMessage_PollType.QUIZ;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_PollCreationMessage_PollType.UNRECOGNIZED;
  }
}

export function message_PollCreationMessage_PollTypeToJSON(object: Message_PollCreationMessage_PollType): string {
  switch (object) {
    case Message_PollCreationMessage_PollType.POLL:
      return "POLL";
    case Message_PollCreationMessage_PollType.QUIZ:
      return "QUIZ";
    case Message_PollCreationMessage_PollType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_PollCreationMessage_Option {
  optionName?: string | undefined;
  optionHash?: string | undefined;
}

export interface Message_PollEncValue {
  encPayload?: Uint8Array | undefined;
  encIv?: Uint8Array | undefined;
}

export interface Message_PollResultSnapshotMessage {
  name?: string | undefined;
  pollVotes: Message_PollResultSnapshotMessage_PollVote[];
  contextInfo?: ContextInfo | undefined;
}

export interface Message_PollResultSnapshotMessage_PollVote {
  optionName?: string | undefined;
  optionVoteCount?: number | undefined;
}

export interface Message_PollUpdateMessage {
  pollCreationMessageKey?: MessageKey | undefined;
  vote?: Message_PollEncValue | undefined;
  metadata?: Message_PollUpdateMessageMetadata | undefined;
  senderTimestampMs?: number | undefined;
}

export interface Message_PollUpdateMessageMetadata {
}

export interface Message_PollVoteMessage {
  selectedOptions: Uint8Array[];
}

export interface Message_ProductMessage {
  product?: Message_ProductMessage_ProductSnapshot | undefined;
  businessOwnerJid?: string | undefined;
  catalog?: Message_ProductMessage_CatalogSnapshot | undefined;
  body?: string | undefined;
  footer?: string | undefined;
  contextInfo?: ContextInfo | undefined;
}

export interface Message_ProductMessage_CatalogSnapshot {
  catalogImage?: Message_ImageMessage | undefined;
  title?: string | undefined;
  description?: string | undefined;
}

export interface Message_ProductMessage_ProductSnapshot {
  productImage?: Message_ImageMessage | undefined;
  productId?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  currencyCode?: string | undefined;
  priceAmount1000?: number | undefined;
  retailerId?: string | undefined;
  url?: string | undefined;
  productImageCount?: number | undefined;
  firstImageId?: string | undefined;
  salePriceAmount1000?: number | undefined;
  signedUrl?: string | undefined;
}

export interface Message_ProtocolMessage {
  key?: MessageKey | undefined;
  type?: Message_ProtocolMessage_Type | undefined;
  ephemeralExpiration?: number | undefined;
  ephemeralSettingTimestamp?: number | undefined;
  historySyncNotification?: Message_HistorySyncNotification | undefined;
  appStateSyncKeyShare?: Message_AppStateSyncKeyShare | undefined;
  appStateSyncKeyRequest?: Message_AppStateSyncKeyRequest | undefined;
  initialSecurityNotificationSettingSync?: Message_InitialSecurityNotificationSettingSync | undefined;
  appStateFatalExceptionNotification?: Message_AppStateFatalExceptionNotification | undefined;
  disappearingMode?: DisappearingMode | undefined;
  editedMessage?: Message | undefined;
  timestampMs?: number | undefined;
  peerDataOperationRequestMessage?: Message_PeerDataOperationRequestMessage | undefined;
  peerDataOperationRequestResponseMessage?: Message_PeerDataOperationRequestResponseMessage | undefined;
  botFeedbackMessage?: Message_BotFeedbackMessage | undefined;
  invokerJid?: string | undefined;
  requestWelcomeMessageMetadata?: Message_RequestWelcomeMessageMetadata | undefined;
  mediaNotifyMessage?: MediaNotifyMessage | undefined;
  cloudApiThreadControlNotification?: Message_CloudAPIThreadControlNotification | undefined;
  lidMigrationMappingSyncMessage?: LIDMigrationMappingSyncMessage | undefined;
  limitSharing?: LimitSharing | undefined;
  aiPsiMetadata?: Uint8Array | undefined;
  aiQueryFanout?: AIQueryFanout | undefined;
  memberLabel?: MemberLabel | undefined;
}

export enum Message_ProtocolMessage_Type {
  REVOKE = 0,
  EPHEMERAL_SETTING = 3,
  EPHEMERAL_SYNC_RESPONSE = 4,
  HISTORY_SYNC_NOTIFICATION = 5,
  APP_STATE_SYNC_KEY_SHARE = 6,
  APP_STATE_SYNC_KEY_REQUEST = 7,
  MSG_FANOUT_BACKFILL_REQUEST = 8,
  INITIAL_SECURITY_NOTIFICATION_SETTING_SYNC = 9,
  APP_STATE_FATAL_EXCEPTION_NOTIFICATION = 10,
  SHARE_PHONE_NUMBER = 11,
  MESSAGE_EDIT = 14,
  PEER_DATA_OPERATION_REQUEST_MESSAGE = 16,
  PEER_DATA_OPERATION_REQUEST_RESPONSE_MESSAGE = 17,
  REQUEST_WELCOME_MESSAGE = 18,
  BOT_FEEDBACK_MESSAGE = 19,
  MEDIA_NOTIFY_MESSAGE = 20,
  CLOUD_API_THREAD_CONTROL_NOTIFICATION = 21,
  LID_MIGRATION_MAPPING_SYNC = 22,
  REMINDER_MESSAGE = 23,
  BOT_MEMU_ONBOARDING_MESSAGE = 24,
  STATUS_MENTION_MESSAGE = 25,
  STOP_GENERATION_MESSAGE = 26,
  LIMIT_SHARING = 27,
  AI_PSI_METADATA = 28,
  AI_QUERY_FANOUT = 29,
  GROUP_MEMBER_LABEL_CHANGE = 30,
  UNRECOGNIZED = -1,
}

export function message_ProtocolMessage_TypeFromJSON(object: any): Message_ProtocolMessage_Type {
  switch (object) {
    case 0:
    case "REVOKE":
      return Message_ProtocolMessage_Type.REVOKE;
    case 3:
    case "EPHEMERAL_SETTING":
      return Message_ProtocolMessage_Type.EPHEMERAL_SETTING;
    case 4:
    case "EPHEMERAL_SYNC_RESPONSE":
      return Message_ProtocolMessage_Type.EPHEMERAL_SYNC_RESPONSE;
    case 5:
    case "HISTORY_SYNC_NOTIFICATION":
      return Message_ProtocolMessage_Type.HISTORY_SYNC_NOTIFICATION;
    case 6:
    case "APP_STATE_SYNC_KEY_SHARE":
      return Message_ProtocolMessage_Type.APP_STATE_SYNC_KEY_SHARE;
    case 7:
    case "APP_STATE_SYNC_KEY_REQUEST":
      return Message_ProtocolMessage_Type.APP_STATE_SYNC_KEY_REQUEST;
    case 8:
    case "MSG_FANOUT_BACKFILL_REQUEST":
      return Message_ProtocolMessage_Type.MSG_FANOUT_BACKFILL_REQUEST;
    case 9:
    case "INITIAL_SECURITY_NOTIFICATION_SETTING_SYNC":
      return Message_ProtocolMessage_Type.INITIAL_SECURITY_NOTIFICATION_SETTING_SYNC;
    case 10:
    case "APP_STATE_FATAL_EXCEPTION_NOTIFICATION":
      return Message_ProtocolMessage_Type.APP_STATE_FATAL_EXCEPTION_NOTIFICATION;
    case 11:
    case "SHARE_PHONE_NUMBER":
      return Message_ProtocolMessage_Type.SHARE_PHONE_NUMBER;
    case 14:
    case "MESSAGE_EDIT":
      return Message_ProtocolMessage_Type.MESSAGE_EDIT;
    case 16:
    case "PEER_DATA_OPERATION_REQUEST_MESSAGE":
      return Message_ProtocolMessage_Type.PEER_DATA_OPERATION_REQUEST_MESSAGE;
    case 17:
    case "PEER_DATA_OPERATION_REQUEST_RESPONSE_MESSAGE":
      return Message_ProtocolMessage_Type.PEER_DATA_OPERATION_REQUEST_RESPONSE_MESSAGE;
    case 18:
    case "REQUEST_WELCOME_MESSAGE":
      return Message_ProtocolMessage_Type.REQUEST_WELCOME_MESSAGE;
    case 19:
    case "BOT_FEEDBACK_MESSAGE":
      return Message_ProtocolMessage_Type.BOT_FEEDBACK_MESSAGE;
    case 20:
    case "MEDIA_NOTIFY_MESSAGE":
      return Message_ProtocolMessage_Type.MEDIA_NOTIFY_MESSAGE;
    case 21:
    case "CLOUD_API_THREAD_CONTROL_NOTIFICATION":
      return Message_ProtocolMessage_Type.CLOUD_API_THREAD_CONTROL_NOTIFICATION;
    case 22:
    case "LID_MIGRATION_MAPPING_SYNC":
      return Message_ProtocolMessage_Type.LID_MIGRATION_MAPPING_SYNC;
    case 23:
    case "REMINDER_MESSAGE":
      return Message_ProtocolMessage_Type.REMINDER_MESSAGE;
    case 24:
    case "BOT_MEMU_ONBOARDING_MESSAGE":
      return Message_ProtocolMessage_Type.BOT_MEMU_ONBOARDING_MESSAGE;
    case 25:
    case "STATUS_MENTION_MESSAGE":
      return Message_ProtocolMessage_Type.STATUS_MENTION_MESSAGE;
    case 26:
    case "STOP_GENERATION_MESSAGE":
      return Message_ProtocolMessage_Type.STOP_GENERATION_MESSAGE;
    case 27:
    case "LIMIT_SHARING":
      return Message_ProtocolMessage_Type.LIMIT_SHARING;
    case 28:
    case "AI_PSI_METADATA":
      return Message_ProtocolMessage_Type.AI_PSI_METADATA;
    case 29:
    case "AI_QUERY_FANOUT":
      return Message_ProtocolMessage_Type.AI_QUERY_FANOUT;
    case 30:
    case "GROUP_MEMBER_LABEL_CHANGE":
      return Message_ProtocolMessage_Type.GROUP_MEMBER_LABEL_CHANGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_ProtocolMessage_Type.UNRECOGNIZED;
  }
}

export function message_ProtocolMessage_TypeToJSON(object: Message_ProtocolMessage_Type): string {
  switch (object) {
    case Message_ProtocolMessage_Type.REVOKE:
      return "REVOKE";
    case Message_ProtocolMessage_Type.EPHEMERAL_SETTING:
      return "EPHEMERAL_SETTING";
    case Message_ProtocolMessage_Type.EPHEMERAL_SYNC_RESPONSE:
      return "EPHEMERAL_SYNC_RESPONSE";
    case Message_ProtocolMessage_Type.HISTORY_SYNC_NOTIFICATION:
      return "HISTORY_SYNC_NOTIFICATION";
    case Message_ProtocolMessage_Type.APP_STATE_SYNC_KEY_SHARE:
      return "APP_STATE_SYNC_KEY_SHARE";
    case Message_ProtocolMessage_Type.APP_STATE_SYNC_KEY_REQUEST:
      return "APP_STATE_SYNC_KEY_REQUEST";
    case Message_ProtocolMessage_Type.MSG_FANOUT_BACKFILL_REQUEST:
      return "MSG_FANOUT_BACKFILL_REQUEST";
    case Message_ProtocolMessage_Type.INITIAL_SECURITY_NOTIFICATION_SETTING_SYNC:
      return "INITIAL_SECURITY_NOTIFICATION_SETTING_SYNC";
    case Message_ProtocolMessage_Type.APP_STATE_FATAL_EXCEPTION_NOTIFICATION:
      return "APP_STATE_FATAL_EXCEPTION_NOTIFICATION";
    case Message_ProtocolMessage_Type.SHARE_PHONE_NUMBER:
      return "SHARE_PHONE_NUMBER";
    case Message_ProtocolMessage_Type.MESSAGE_EDIT:
      return "MESSAGE_EDIT";
    case Message_ProtocolMessage_Type.PEER_DATA_OPERATION_REQUEST_MESSAGE:
      return "PEER_DATA_OPERATION_REQUEST_MESSAGE";
    case Message_ProtocolMessage_Type.PEER_DATA_OPERATION_REQUEST_RESPONSE_MESSAGE:
      return "PEER_DATA_OPERATION_REQUEST_RESPONSE_MESSAGE";
    case Message_ProtocolMessage_Type.REQUEST_WELCOME_MESSAGE:
      return "REQUEST_WELCOME_MESSAGE";
    case Message_ProtocolMessage_Type.BOT_FEEDBACK_MESSAGE:
      return "BOT_FEEDBACK_MESSAGE";
    case Message_ProtocolMessage_Type.MEDIA_NOTIFY_MESSAGE:
      return "MEDIA_NOTIFY_MESSAGE";
    case Message_ProtocolMessage_Type.CLOUD_API_THREAD_CONTROL_NOTIFICATION:
      return "CLOUD_API_THREAD_CONTROL_NOTIFICATION";
    case Message_ProtocolMessage_Type.LID_MIGRATION_MAPPING_SYNC:
      return "LID_MIGRATION_MAPPING_SYNC";
    case Message_ProtocolMessage_Type.REMINDER_MESSAGE:
      return "REMINDER_MESSAGE";
    case Message_ProtocolMessage_Type.BOT_MEMU_ONBOARDING_MESSAGE:
      return "BOT_MEMU_ONBOARDING_MESSAGE";
    case Message_ProtocolMessage_Type.STATUS_MENTION_MESSAGE:
      return "STATUS_MENTION_MESSAGE";
    case Message_ProtocolMessage_Type.STOP_GENERATION_MESSAGE:
      return "STOP_GENERATION_MESSAGE";
    case Message_ProtocolMessage_Type.LIMIT_SHARING:
      return "LIMIT_SHARING";
    case Message_ProtocolMessage_Type.AI_PSI_METADATA:
      return "AI_PSI_METADATA";
    case Message_ProtocolMessage_Type.AI_QUERY_FANOUT:
      return "AI_QUERY_FANOUT";
    case Message_ProtocolMessage_Type.GROUP_MEMBER_LABEL_CHANGE:
      return "GROUP_MEMBER_LABEL_CHANGE";
    case Message_ProtocolMessage_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_ReactionMessage {
  key?: MessageKey | undefined;
  text?: string | undefined;
  groupingKey?: string | undefined;
  senderTimestampMs?: number | undefined;
}

export interface Message_RequestPaymentMessage {
  noteMessage?: Message | undefined;
  currencyCodeIso4217?: string | undefined;
  amount1000?: number | undefined;
  requestFrom?: string | undefined;
  expiryTimestamp?: number | undefined;
  amount?: Money | undefined;
  background?: PaymentBackground | undefined;
}

export interface Message_RequestPhoneNumberMessage {
  contextInfo?: ContextInfo | undefined;
}

export interface Message_RequestWelcomeMessageMetadata {
  localChatState?: Message_RequestWelcomeMessageMetadata_LocalChatState | undefined;
}

export enum Message_RequestWelcomeMessageMetadata_LocalChatState {
  EMPTY = 0,
  NON_EMPTY = 1,
  UNRECOGNIZED = -1,
}

export function message_RequestWelcomeMessageMetadata_LocalChatStateFromJSON(
  object: any,
): Message_RequestWelcomeMessageMetadata_LocalChatState {
  switch (object) {
    case 0:
    case "EMPTY":
      return Message_RequestWelcomeMessageMetadata_LocalChatState.EMPTY;
    case 1:
    case "NON_EMPTY":
      return Message_RequestWelcomeMessageMetadata_LocalChatState.NON_EMPTY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_RequestWelcomeMessageMetadata_LocalChatState.UNRECOGNIZED;
  }
}

export function message_RequestWelcomeMessageMetadata_LocalChatStateToJSON(
  object: Message_RequestWelcomeMessageMetadata_LocalChatState,
): string {
  switch (object) {
    case Message_RequestWelcomeMessageMetadata_LocalChatState.EMPTY:
      return "EMPTY";
    case Message_RequestWelcomeMessageMetadata_LocalChatState.NON_EMPTY:
      return "NON_EMPTY";
    case Message_RequestWelcomeMessageMetadata_LocalChatState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_ScheduledCallCreationMessage {
  scheduledTimestampMs?: number | undefined;
  callType?: Message_ScheduledCallCreationMessage_CallType | undefined;
  title?: string | undefined;
}

export enum Message_ScheduledCallCreationMessage_CallType {
  UNKNOWN = 0,
  VOICE = 1,
  VIDEO = 2,
  UNRECOGNIZED = -1,
}

export function message_ScheduledCallCreationMessage_CallTypeFromJSON(
  object: any,
): Message_ScheduledCallCreationMessage_CallType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return Message_ScheduledCallCreationMessage_CallType.UNKNOWN;
    case 1:
    case "VOICE":
      return Message_ScheduledCallCreationMessage_CallType.VOICE;
    case 2:
    case "VIDEO":
      return Message_ScheduledCallCreationMessage_CallType.VIDEO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_ScheduledCallCreationMessage_CallType.UNRECOGNIZED;
  }
}

export function message_ScheduledCallCreationMessage_CallTypeToJSON(
  object: Message_ScheduledCallCreationMessage_CallType,
): string {
  switch (object) {
    case Message_ScheduledCallCreationMessage_CallType.UNKNOWN:
      return "UNKNOWN";
    case Message_ScheduledCallCreationMessage_CallType.VOICE:
      return "VOICE";
    case Message_ScheduledCallCreationMessage_CallType.VIDEO:
      return "VIDEO";
    case Message_ScheduledCallCreationMessage_CallType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_ScheduledCallEditMessage {
  key?: MessageKey | undefined;
  editType?: Message_ScheduledCallEditMessage_EditType | undefined;
}

export enum Message_ScheduledCallEditMessage_EditType {
  UNKNOWN = 0,
  CANCEL = 1,
  UNRECOGNIZED = -1,
}

export function message_ScheduledCallEditMessage_EditTypeFromJSON(
  object: any,
): Message_ScheduledCallEditMessage_EditType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return Message_ScheduledCallEditMessage_EditType.UNKNOWN;
    case 1:
    case "CANCEL":
      return Message_ScheduledCallEditMessage_EditType.CANCEL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_ScheduledCallEditMessage_EditType.UNRECOGNIZED;
  }
}

export function message_ScheduledCallEditMessage_EditTypeToJSON(
  object: Message_ScheduledCallEditMessage_EditType,
): string {
  switch (object) {
    case Message_ScheduledCallEditMessage_EditType.UNKNOWN:
      return "UNKNOWN";
    case Message_ScheduledCallEditMessage_EditType.CANCEL:
      return "CANCEL";
    case Message_ScheduledCallEditMessage_EditType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_SecretEncryptedMessage {
  targetMessageKey?: MessageKey | undefined;
  encPayload?: Uint8Array | undefined;
  encIv?: Uint8Array | undefined;
  secretEncType?: Message_SecretEncryptedMessage_SecretEncType | undefined;
}

export enum Message_SecretEncryptedMessage_SecretEncType {
  UNKNOWN = 0,
  EVENT_EDIT = 1,
  MESSAGE_EDIT = 2,
  UNRECOGNIZED = -1,
}

export function message_SecretEncryptedMessage_SecretEncTypeFromJSON(
  object: any,
): Message_SecretEncryptedMessage_SecretEncType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return Message_SecretEncryptedMessage_SecretEncType.UNKNOWN;
    case 1:
    case "EVENT_EDIT":
      return Message_SecretEncryptedMessage_SecretEncType.EVENT_EDIT;
    case 2:
    case "MESSAGE_EDIT":
      return Message_SecretEncryptedMessage_SecretEncType.MESSAGE_EDIT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_SecretEncryptedMessage_SecretEncType.UNRECOGNIZED;
  }
}

export function message_SecretEncryptedMessage_SecretEncTypeToJSON(
  object: Message_SecretEncryptedMessage_SecretEncType,
): string {
  switch (object) {
    case Message_SecretEncryptedMessage_SecretEncType.UNKNOWN:
      return "UNKNOWN";
    case Message_SecretEncryptedMessage_SecretEncType.EVENT_EDIT:
      return "EVENT_EDIT";
    case Message_SecretEncryptedMessage_SecretEncType.MESSAGE_EDIT:
      return "MESSAGE_EDIT";
    case Message_SecretEncryptedMessage_SecretEncType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_SendPaymentMessage {
  noteMessage?: Message | undefined;
  requestMessageKey?: MessageKey | undefined;
  background?: PaymentBackground | undefined;
}

export interface Message_SenderKeyDistributionMessage {
  groupId?: string | undefined;
  axolotlSenderKeyDistributionMessage?: Uint8Array | undefined;
}

export interface Message_StatusNotificationMessage {
  responseMessageKey?: MessageKey | undefined;
  originalMessageKey?: MessageKey | undefined;
  type?: Message_StatusNotificationMessage_StatusNotificationType | undefined;
}

export enum Message_StatusNotificationMessage_StatusNotificationType {
  UNKNOWN = 0,
  STATUS_ADD_YOURS = 1,
  STATUS_RESHARE = 2,
  UNRECOGNIZED = -1,
}

export function message_StatusNotificationMessage_StatusNotificationTypeFromJSON(
  object: any,
): Message_StatusNotificationMessage_StatusNotificationType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return Message_StatusNotificationMessage_StatusNotificationType.UNKNOWN;
    case 1:
    case "STATUS_ADD_YOURS":
      return Message_StatusNotificationMessage_StatusNotificationType.STATUS_ADD_YOURS;
    case 2:
    case "STATUS_RESHARE":
      return Message_StatusNotificationMessage_StatusNotificationType.STATUS_RESHARE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_StatusNotificationMessage_StatusNotificationType.UNRECOGNIZED;
  }
}

export function message_StatusNotificationMessage_StatusNotificationTypeToJSON(
  object: Message_StatusNotificationMessage_StatusNotificationType,
): string {
  switch (object) {
    case Message_StatusNotificationMessage_StatusNotificationType.UNKNOWN:
      return "UNKNOWN";
    case Message_StatusNotificationMessage_StatusNotificationType.STATUS_ADD_YOURS:
      return "STATUS_ADD_YOURS";
    case Message_StatusNotificationMessage_StatusNotificationType.STATUS_RESHARE:
      return "STATUS_RESHARE";
    case Message_StatusNotificationMessage_StatusNotificationType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_StickerMessage {
  url?: string | undefined;
  fileSha256?: Uint8Array | undefined;
  fileEncSha256?: Uint8Array | undefined;
  mediaKey?: Uint8Array | undefined;
  mimetype?: string | undefined;
  height?: number | undefined;
  width?: number | undefined;
  directPath?: string | undefined;
  fileLength?: number | undefined;
  mediaKeyTimestamp?: number | undefined;
  firstFrameLength?: number | undefined;
  firstFrameSidecar?: Uint8Array | undefined;
  isAnimated?: boolean | undefined;
  pngThumbnail?: Uint8Array | undefined;
  contextInfo?: ContextInfo | undefined;
  stickerSentTs?: number | undefined;
  isAvatar?: boolean | undefined;
  isAiSticker?: boolean | undefined;
  isLottie?: boolean | undefined;
  accessibilityLabel?: string | undefined;
}

export interface Message_StickerPackMessage {
  stickerPackId?: string | undefined;
  name?: string | undefined;
  publisher?: string | undefined;
  stickers: Message_StickerPackMessage_Sticker[];
  fileLength?: number | undefined;
  fileSha256?: Uint8Array | undefined;
  fileEncSha256?: Uint8Array | undefined;
  mediaKey?: Uint8Array | undefined;
  directPath?: string | undefined;
  caption?: string | undefined;
  contextInfo?: ContextInfo | undefined;
  packDescription?: string | undefined;
  mediaKeyTimestamp?: number | undefined;
  trayIconFileName?: string | undefined;
  thumbnailDirectPath?: string | undefined;
  thumbnailSha256?: Uint8Array | undefined;
  thumbnailEncSha256?: Uint8Array | undefined;
  thumbnailHeight?: number | undefined;
  thumbnailWidth?: number | undefined;
  imageDataHash?: string | undefined;
  stickerPackSize?: number | undefined;
  stickerPackOrigin?: Message_StickerPackMessage_StickerPackOrigin | undefined;
}

export enum Message_StickerPackMessage_StickerPackOrigin {
  FIRST_PARTY = 0,
  THIRD_PARTY = 1,
  USER_CREATED = 2,
  UNRECOGNIZED = -1,
}

export function message_StickerPackMessage_StickerPackOriginFromJSON(
  object: any,
): Message_StickerPackMessage_StickerPackOrigin {
  switch (object) {
    case 0:
    case "FIRST_PARTY":
      return Message_StickerPackMessage_StickerPackOrigin.FIRST_PARTY;
    case 1:
    case "THIRD_PARTY":
      return Message_StickerPackMessage_StickerPackOrigin.THIRD_PARTY;
    case 2:
    case "USER_CREATED":
      return Message_StickerPackMessage_StickerPackOrigin.USER_CREATED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_StickerPackMessage_StickerPackOrigin.UNRECOGNIZED;
  }
}

export function message_StickerPackMessage_StickerPackOriginToJSON(
  object: Message_StickerPackMessage_StickerPackOrigin,
): string {
  switch (object) {
    case Message_StickerPackMessage_StickerPackOrigin.FIRST_PARTY:
      return "FIRST_PARTY";
    case Message_StickerPackMessage_StickerPackOrigin.THIRD_PARTY:
      return "THIRD_PARTY";
    case Message_StickerPackMessage_StickerPackOrigin.USER_CREATED:
      return "USER_CREATED";
    case Message_StickerPackMessage_StickerPackOrigin.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Message_StickerPackMessage_Sticker {
  fileName?: string | undefined;
  isAnimated?: boolean | undefined;
  emojis: string[];
  accessibilityLabel?: string | undefined;
  isLottie?: boolean | undefined;
  mimetype?: string | undefined;
}

export interface Message_StickerSyncRMRMessage {
  filehash: string[];
  rmrSource?: string | undefined;
  requestTimestamp?: number | undefined;
}

export interface Message_TemplateButtonReplyMessage {
  selectedId?: string | undefined;
  selectedDisplayText?: string | undefined;
  contextInfo?: ContextInfo | undefined;
  selectedIndex?: number | undefined;
  selectedCarouselCardIndex?: number | undefined;
}

export interface Message_TemplateMessage {
  contextInfo?: ContextInfo | undefined;
  hydratedTemplate?: Message_TemplateMessage_HydratedFourRowTemplate | undefined;
  templateId?: string | undefined;
  fourRowTemplate?: Message_TemplateMessage_FourRowTemplate | undefined;
  hydratedFourRowTemplate?: Message_TemplateMessage_HydratedFourRowTemplate | undefined;
  interactiveMessageTemplate?: Message_InteractiveMessage | undefined;
}

export interface Message_TemplateMessage_FourRowTemplate {
  content?: Message_HighlyStructuredMessage | undefined;
  footer?: Message_HighlyStructuredMessage | undefined;
  buttons: TemplateButton[];
  documentMessage?: Message_DocumentMessage | undefined;
  highlyStructuredMessage?: Message_HighlyStructuredMessage | undefined;
  imageMessage?: Message_ImageMessage | undefined;
  videoMessage?: Message_VideoMessage | undefined;
  locationMessage?: Message_LocationMessage | undefined;
}

export interface Message_TemplateMessage_HydratedFourRowTemplate {
  hydratedContentText?: string | undefined;
  hydratedFooterText?: string | undefined;
  hydratedButtons: HydratedTemplateButton[];
  templateId?: string | undefined;
  maskLinkedDevices?: boolean | undefined;
  documentMessage?: Message_DocumentMessage | undefined;
  hydratedTitleText?: string | undefined;
  imageMessage?: Message_ImageMessage | undefined;
  videoMessage?: Message_VideoMessage | undefined;
  locationMessage?: Message_LocationMessage | undefined;
}

export interface Message_URLMetadata {
  fbExperimentId?: number | undefined;
}

export interface Message_VideoMessage {
  url?: string | undefined;
  mimetype?: string | undefined;
  fileSha256?: Uint8Array | undefined;
  fileLength?: number | undefined;
  seconds?: number | undefined;
  mediaKey?: Uint8Array | undefined;
  caption?: string | undefined;
  gifPlayback?: boolean | undefined;
  height?: number | undefined;
  width?: number | undefined;
  fileEncSha256?: Uint8Array | undefined;
  interactiveAnnotations: InteractiveAnnotation[];
  directPath?: string | undefined;
  mediaKeyTimestamp?: number | undefined;
  jpegThumbnail?: Uint8Array | undefined;
  contextInfo?: ContextInfo | undefined;
  streamingSidecar?: Uint8Array | undefined;
  gifAttribution?: Message_VideoMessage_Attribution | undefined;
  viewOnce?: boolean | undefined;
  thumbnailDirectPath?: string | undefined;
  thumbnailSha256?: Uint8Array | undefined;
  thumbnailEncSha256?: Uint8Array | undefined;
  staticUrl?: string | undefined;
  annotations: InteractiveAnnotation[];
  accessibilityLabel?: string | undefined;
  processedVideos: ProcessedVideo[];
  externalShareFullVideoDurationInSeconds?: number | undefined;
}

export enum Message_VideoMessage_Attribution {
  NONE = 0,
  GIPHY = 1,
  TENOR = 2,
  UNRECOGNIZED = -1,
}

export function message_VideoMessage_AttributionFromJSON(object: any): Message_VideoMessage_Attribution {
  switch (object) {
    case 0:
    case "NONE":
      return Message_VideoMessage_Attribution.NONE;
    case 1:
    case "GIPHY":
      return Message_VideoMessage_Attribution.GIPHY;
    case 2:
    case "TENOR":
      return Message_VideoMessage_Attribution.TENOR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Message_VideoMessage_Attribution.UNRECOGNIZED;
  }
}

export function message_VideoMessage_AttributionToJSON(object: Message_VideoMessage_Attribution): string {
  switch (object) {
    case Message_VideoMessage_Attribution.NONE:
      return "NONE";
    case Message_VideoMessage_Attribution.GIPHY:
      return "GIPHY";
    case Message_VideoMessage_Attribution.TENOR:
      return "TENOR";
    case Message_VideoMessage_Attribution.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface MessageAddOn {
  messageAddOnType?: MessageAddOn_MessageAddOnType | undefined;
  messageAddOn?: Message | undefined;
  senderTimestampMs?: number | undefined;
  serverTimestampMs?: number | undefined;
  status?: WebMessageInfo_Status | undefined;
  addOnContextInfo?: MessageAddOnContextInfo | undefined;
  messageAddOnKey?: MessageKey | undefined;
  legacyMessage?: LegacyMessage | undefined;
}

export enum MessageAddOn_MessageAddOnType {
  UNDEFINED = 0,
  REACTION = 1,
  EVENT_RESPONSE = 2,
  POLL_UPDATE = 3,
  PIN_IN_CHAT = 4,
  UNRECOGNIZED = -1,
}

export function messageAddOn_MessageAddOnTypeFromJSON(object: any): MessageAddOn_MessageAddOnType {
  switch (object) {
    case 0:
    case "UNDEFINED":
      return MessageAddOn_MessageAddOnType.UNDEFINED;
    case 1:
    case "REACTION":
      return MessageAddOn_MessageAddOnType.REACTION;
    case 2:
    case "EVENT_RESPONSE":
      return MessageAddOn_MessageAddOnType.EVENT_RESPONSE;
    case 3:
    case "POLL_UPDATE":
      return MessageAddOn_MessageAddOnType.POLL_UPDATE;
    case 4:
    case "PIN_IN_CHAT":
      return MessageAddOn_MessageAddOnType.PIN_IN_CHAT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MessageAddOn_MessageAddOnType.UNRECOGNIZED;
  }
}

export function messageAddOn_MessageAddOnTypeToJSON(object: MessageAddOn_MessageAddOnType): string {
  switch (object) {
    case MessageAddOn_MessageAddOnType.UNDEFINED:
      return "UNDEFINED";
    case MessageAddOn_MessageAddOnType.REACTION:
      return "REACTION";
    case MessageAddOn_MessageAddOnType.EVENT_RESPONSE:
      return "EVENT_RESPONSE";
    case MessageAddOn_MessageAddOnType.POLL_UPDATE:
      return "POLL_UPDATE";
    case MessageAddOn_MessageAddOnType.PIN_IN_CHAT:
      return "PIN_IN_CHAT";
    case MessageAddOn_MessageAddOnType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface MessageAddOnContextInfo {
  messageAddOnDurationInSecs?: number | undefined;
  messageAddOnExpiryType?: MessageContextInfo_MessageAddonExpiryType | undefined;
}

export interface MessageAssociation {
  associationType?: MessageAssociation_AssociationType | undefined;
  parentMessageKey?: MessageKey | undefined;
  messageIndex?: number | undefined;
}

export enum MessageAssociation_AssociationType {
  UNKNOWN = 0,
  MEDIA_ALBUM = 1,
  BOT_PLUGIN = 2,
  EVENT_COVER_IMAGE = 3,
  STATUS_POLL = 4,
  HD_VIDEO_DUAL_UPLOAD = 5,
  STATUS_EXTERNAL_RESHARE = 6,
  MEDIA_POLL = 7,
  STATUS_ADD_YOURS = 8,
  STATUS_NOTIFICATION = 9,
  HD_IMAGE_DUAL_UPLOAD = 10,
  STICKER_ANNOTATION = 11,
  MOTION_PHOTO = 12,
  STATUS_LINK_ACTION = 13,
  VIEW_ALL_REPLIES = 14,
  UNRECOGNIZED = -1,
}

export function messageAssociation_AssociationTypeFromJSON(object: any): MessageAssociation_AssociationType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return MessageAssociation_AssociationType.UNKNOWN;
    case 1:
    case "MEDIA_ALBUM":
      return MessageAssociation_AssociationType.MEDIA_ALBUM;
    case 2:
    case "BOT_PLUGIN":
      return MessageAssociation_AssociationType.BOT_PLUGIN;
    case 3:
    case "EVENT_COVER_IMAGE":
      return MessageAssociation_AssociationType.EVENT_COVER_IMAGE;
    case 4:
    case "STATUS_POLL":
      return MessageAssociation_AssociationType.STATUS_POLL;
    case 5:
    case "HD_VIDEO_DUAL_UPLOAD":
      return MessageAssociation_AssociationType.HD_VIDEO_DUAL_UPLOAD;
    case 6:
    case "STATUS_EXTERNAL_RESHARE":
      return MessageAssociation_AssociationType.STATUS_EXTERNAL_RESHARE;
    case 7:
    case "MEDIA_POLL":
      return MessageAssociation_AssociationType.MEDIA_POLL;
    case 8:
    case "STATUS_ADD_YOURS":
      return MessageAssociation_AssociationType.STATUS_ADD_YOURS;
    case 9:
    case "STATUS_NOTIFICATION":
      return MessageAssociation_AssociationType.STATUS_NOTIFICATION;
    case 10:
    case "HD_IMAGE_DUAL_UPLOAD":
      return MessageAssociation_AssociationType.HD_IMAGE_DUAL_UPLOAD;
    case 11:
    case "STICKER_ANNOTATION":
      return MessageAssociation_AssociationType.STICKER_ANNOTATION;
    case 12:
    case "MOTION_PHOTO":
      return MessageAssociation_AssociationType.MOTION_PHOTO;
    case 13:
    case "STATUS_LINK_ACTION":
      return MessageAssociation_AssociationType.STATUS_LINK_ACTION;
    case 14:
    case "VIEW_ALL_REPLIES":
      return MessageAssociation_AssociationType.VIEW_ALL_REPLIES;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MessageAssociation_AssociationType.UNRECOGNIZED;
  }
}

export function messageAssociation_AssociationTypeToJSON(object: MessageAssociation_AssociationType): string {
  switch (object) {
    case MessageAssociation_AssociationType.UNKNOWN:
      return "UNKNOWN";
    case MessageAssociation_AssociationType.MEDIA_ALBUM:
      return "MEDIA_ALBUM";
    case MessageAssociation_AssociationType.BOT_PLUGIN:
      return "BOT_PLUGIN";
    case MessageAssociation_AssociationType.EVENT_COVER_IMAGE:
      return "EVENT_COVER_IMAGE";
    case MessageAssociation_AssociationType.STATUS_POLL:
      return "STATUS_POLL";
    case MessageAssociation_AssociationType.HD_VIDEO_DUAL_UPLOAD:
      return "HD_VIDEO_DUAL_UPLOAD";
    case MessageAssociation_AssociationType.STATUS_EXTERNAL_RESHARE:
      return "STATUS_EXTERNAL_RESHARE";
    case MessageAssociation_AssociationType.MEDIA_POLL:
      return "MEDIA_POLL";
    case MessageAssociation_AssociationType.STATUS_ADD_YOURS:
      return "STATUS_ADD_YOURS";
    case MessageAssociation_AssociationType.STATUS_NOTIFICATION:
      return "STATUS_NOTIFICATION";
    case MessageAssociation_AssociationType.HD_IMAGE_DUAL_UPLOAD:
      return "HD_IMAGE_DUAL_UPLOAD";
    case MessageAssociation_AssociationType.STICKER_ANNOTATION:
      return "STICKER_ANNOTATION";
    case MessageAssociation_AssociationType.MOTION_PHOTO:
      return "MOTION_PHOTO";
    case MessageAssociation_AssociationType.STATUS_LINK_ACTION:
      return "STATUS_LINK_ACTION";
    case MessageAssociation_AssociationType.VIEW_ALL_REPLIES:
      return "VIEW_ALL_REPLIES";
    case MessageAssociation_AssociationType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface MessageContextInfo {
  deviceListMetadata?: DeviceListMetadata | undefined;
  deviceListMetadataVersion?: number | undefined;
  messageSecret?: Uint8Array | undefined;
  paddingBytes?: Uint8Array | undefined;
  messageAddOnDurationInSecs?: number | undefined;
  botMessageSecret?: Uint8Array | undefined;
  botMetadata?: BotMetadata | undefined;
  reportingTokenVersion?: number | undefined;
  messageAddOnExpiryType?: MessageContextInfo_MessageAddonExpiryType | undefined;
  messageAssociation?: MessageAssociation | undefined;
  capiCreatedGroup?: boolean | undefined;
  supportPayload?: string | undefined;
  limitSharing?: LimitSharing | undefined;
  limitSharingV2?: LimitSharing | undefined;
}

export enum MessageContextInfo_MessageAddonExpiryType {
  UNKNOWN = 0,
  STATIC = 1,
  DEPENDENT_ON_PARENT = 2,
  UNRECOGNIZED = -1,
}

export function messageContextInfo_MessageAddonExpiryTypeFromJSON(
  object: any,
): MessageContextInfo_MessageAddonExpiryType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return MessageContextInfo_MessageAddonExpiryType.UNKNOWN;
    case 1:
    case "STATIC":
      return MessageContextInfo_MessageAddonExpiryType.STATIC;
    case 2:
    case "DEPENDENT_ON_PARENT":
      return MessageContextInfo_MessageAddonExpiryType.DEPENDENT_ON_PARENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MessageContextInfo_MessageAddonExpiryType.UNRECOGNIZED;
  }
}

export function messageContextInfo_MessageAddonExpiryTypeToJSON(
  object: MessageContextInfo_MessageAddonExpiryType,
): string {
  switch (object) {
    case MessageContextInfo_MessageAddonExpiryType.UNKNOWN:
      return "UNKNOWN";
    case MessageContextInfo_MessageAddonExpiryType.STATIC:
      return "STATIC";
    case MessageContextInfo_MessageAddonExpiryType.DEPENDENT_ON_PARENT:
      return "DEPENDENT_ON_PARENT";
    case MessageContextInfo_MessageAddonExpiryType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface MessageKey {
  remoteJid?: string | undefined;
  fromMe?: boolean | undefined;
  id?: string | undefined;
  participant?: string | undefined;
}

export interface MessageSecretMessage {
  version?: number | undefined;
  encIv?: Uint8Array | undefined;
  encPayload?: Uint8Array | undefined;
}

export interface Money {
  value?: number | undefined;
  offset?: number | undefined;
  currencyCode?: string | undefined;
}

export interface MsgOpaqueData {
  body?: string | undefined;
  caption?: string | undefined;
  lng?: number | undefined;
  isLive?: boolean | undefined;
  lat?: number | undefined;
  paymentAmount1000?: number | undefined;
  paymentNoteMsgBody?: string | undefined;
  matchedText?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  futureproofBuffer?: Uint8Array | undefined;
  clientUrl?: string | undefined;
  loc?: string | undefined;
  pollName?: string | undefined;
  pollOptions: MsgOpaqueData_PollOption[];
  pollSelectableOptionsCount?: number | undefined;
  messageSecret?: Uint8Array | undefined;
  originalSelfAuthor?: string | undefined;
  senderTimestampMs?: number | undefined;
  pollUpdateParentKey?: string | undefined;
  encPollVote?: PollEncValue | undefined;
  isSentCagPollCreation?: boolean | undefined;
  pollContentType?: MsgOpaqueData_PollContentType | undefined;
  pollVotesSnapshot?: MsgOpaqueData_PollVotesSnapshot | undefined;
  encReactionTargetMessageKey?: string | undefined;
  encReactionEncPayload?: Uint8Array | undefined;
  encReactionEncIv?: Uint8Array | undefined;
  botMessageSecret?: Uint8Array | undefined;
  targetMessageKey?: string | undefined;
  encPayload?: Uint8Array | undefined;
  encIv?: Uint8Array | undefined;
  eventName?: string | undefined;
  isEventCanceled?: boolean | undefined;
  eventDescription?: string | undefined;
  eventJoinLink?: string | undefined;
  eventStartTime?: number | undefined;
  eventLocation?: MsgOpaqueData_EventLocation | undefined;
  eventEndTime?: number | undefined;
  plainProtobufBytes?: Uint8Array | undefined;
}

export enum MsgOpaqueData_PollContentType {
  UNKNOWN = 0,
  TEXT = 1,
  IMAGE = 2,
  UNRECOGNIZED = -1,
}

export function msgOpaqueData_PollContentTypeFromJSON(object: any): MsgOpaqueData_PollContentType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return MsgOpaqueData_PollContentType.UNKNOWN;
    case 1:
    case "TEXT":
      return MsgOpaqueData_PollContentType.TEXT;
    case 2:
    case "IMAGE":
      return MsgOpaqueData_PollContentType.IMAGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MsgOpaqueData_PollContentType.UNRECOGNIZED;
  }
}

export function msgOpaqueData_PollContentTypeToJSON(object: MsgOpaqueData_PollContentType): string {
  switch (object) {
    case MsgOpaqueData_PollContentType.UNKNOWN:
      return "UNKNOWN";
    case MsgOpaqueData_PollContentType.TEXT:
      return "TEXT";
    case MsgOpaqueData_PollContentType.IMAGE:
      return "IMAGE";
    case MsgOpaqueData_PollContentType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface MsgOpaqueData_EventLocation {
  degreesLatitude?: number | undefined;
  degreesLongitude?: number | undefined;
  name?: string | undefined;
  address?: string | undefined;
  url?: string | undefined;
  jpegThumbnail?: Uint8Array | undefined;
}

export interface MsgOpaqueData_PollOption {
  name?: string | undefined;
  hash?: string | undefined;
}

export interface MsgOpaqueData_PollVoteSnapshot {
  option?: MsgOpaqueData_PollOption | undefined;
  optionVoteCount?: number | undefined;
}

export interface MsgOpaqueData_PollVotesSnapshot {
  pollVotes: MsgOpaqueData_PollVoteSnapshot[];
}

export interface MsgRowOpaqueData {
  currentMsg?: MsgOpaqueData | undefined;
  quotedMsg?: MsgOpaqueData | undefined;
}

export interface NoiseCertificate {
  details?: Uint8Array | undefined;
  signature?: Uint8Array | undefined;
}

export interface NoiseCertificate_Details {
  serial?: number | undefined;
  issuer?: string | undefined;
  expires?: number | undefined;
  subject?: string | undefined;
  key?: Uint8Array | undefined;
}

export interface NotificationMessageInfo {
  key?: MessageKey | undefined;
  message?: Message | undefined;
  messageTimestamp?: number | undefined;
  participant?: string | undefined;
}

export interface NotificationSettings {
  messageVibrate?: string | undefined;
  messagePopup?: string | undefined;
  messageLight?: string | undefined;
  lowPriorityNotifications?: boolean | undefined;
  reactionsMuted?: boolean | undefined;
  callVibrate?: string | undefined;
}

export interface PairingRequest {
  companionPublicKey?: Uint8Array | undefined;
  companionIdentityKey?: Uint8Array | undefined;
  advSecret?: Uint8Array | undefined;
}

export interface PastParticipant {
  userJid?: string | undefined;
  leaveReason?: PastParticipant_LeaveReason | undefined;
  leaveTs?: number | undefined;
}

export enum PastParticipant_LeaveReason {
  LEFT = 0,
  REMOVED = 1,
  UNRECOGNIZED = -1,
}

export function pastParticipant_LeaveReasonFromJSON(object: any): PastParticipant_LeaveReason {
  switch (object) {
    case 0:
    case "LEFT":
      return PastParticipant_LeaveReason.LEFT;
    case 1:
    case "REMOVED":
      return PastParticipant_LeaveReason.REMOVED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PastParticipant_LeaveReason.UNRECOGNIZED;
  }
}

export function pastParticipant_LeaveReasonToJSON(object: PastParticipant_LeaveReason): string {
  switch (object) {
    case PastParticipant_LeaveReason.LEFT:
      return "LEFT";
    case PastParticipant_LeaveReason.REMOVED:
      return "REMOVED";
    case PastParticipant_LeaveReason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PastParticipants {
  groupJid?: string | undefined;
  pastParticipants: PastParticipant[];
}

export interface PatchDebugData {
  currentLthash?: Uint8Array | undefined;
  newLthash?: Uint8Array | undefined;
  patchVersion?: Uint8Array | undefined;
  collectionName?: Uint8Array | undefined;
  firstFourBytesFromAHashOfSnapshotMacKey?: Uint8Array | undefined;
  newLthashSubtract?: Uint8Array | undefined;
  numberAdd?: number | undefined;
  numberRemove?: number | undefined;
  numberOverride?: number | undefined;
  senderPlatform?: PatchDebugData_Platform | undefined;
  isSenderPrimary?: boolean | undefined;
}

export enum PatchDebugData_Platform {
  ANDROID = 0,
  SMBA = 1,
  IPHONE = 2,
  SMBI = 3,
  WEB = 4,
  UWP = 5,
  DARWIN = 6,
  IPAD = 7,
  WEAROS = 8,
  UNRECOGNIZED = -1,
}

export function patchDebugData_PlatformFromJSON(object: any): PatchDebugData_Platform {
  switch (object) {
    case 0:
    case "ANDROID":
      return PatchDebugData_Platform.ANDROID;
    case 1:
    case "SMBA":
      return PatchDebugData_Platform.SMBA;
    case 2:
    case "IPHONE":
      return PatchDebugData_Platform.IPHONE;
    case 3:
    case "SMBI":
      return PatchDebugData_Platform.SMBI;
    case 4:
    case "WEB":
      return PatchDebugData_Platform.WEB;
    case 5:
    case "UWP":
      return PatchDebugData_Platform.UWP;
    case 6:
    case "DARWIN":
      return PatchDebugData_Platform.DARWIN;
    case 7:
    case "IPAD":
      return PatchDebugData_Platform.IPAD;
    case 8:
    case "WEAROS":
      return PatchDebugData_Platform.WEAROS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PatchDebugData_Platform.UNRECOGNIZED;
  }
}

export function patchDebugData_PlatformToJSON(object: PatchDebugData_Platform): string {
  switch (object) {
    case PatchDebugData_Platform.ANDROID:
      return "ANDROID";
    case PatchDebugData_Platform.SMBA:
      return "SMBA";
    case PatchDebugData_Platform.IPHONE:
      return "IPHONE";
    case PatchDebugData_Platform.SMBI:
      return "SMBI";
    case PatchDebugData_Platform.WEB:
      return "WEB";
    case PatchDebugData_Platform.UWP:
      return "UWP";
    case PatchDebugData_Platform.DARWIN:
      return "DARWIN";
    case PatchDebugData_Platform.IPAD:
      return "IPAD";
    case PatchDebugData_Platform.WEAROS:
      return "WEAROS";
    case PatchDebugData_Platform.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PaymentBackground {
  id?: string | undefined;
  fileLength?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
  mimetype?: string | undefined;
  placeholderArgb?: number | undefined;
  textArgb?: number | undefined;
  subtextArgb?: number | undefined;
  mediaData?: PaymentBackground_MediaData | undefined;
  type?: PaymentBackground_Type | undefined;
}

export enum PaymentBackground_Type {
  UNKNOWN = 0,
  DEFAULT = 1,
  UNRECOGNIZED = -1,
}

export function paymentBackground_TypeFromJSON(object: any): PaymentBackground_Type {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return PaymentBackground_Type.UNKNOWN;
    case 1:
    case "DEFAULT":
      return PaymentBackground_Type.DEFAULT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PaymentBackground_Type.UNRECOGNIZED;
  }
}

export function paymentBackground_TypeToJSON(object: PaymentBackground_Type): string {
  switch (object) {
    case PaymentBackground_Type.UNKNOWN:
      return "UNKNOWN";
    case PaymentBackground_Type.DEFAULT:
      return "DEFAULT";
    case PaymentBackground_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PaymentBackground_MediaData {
  mediaKey?: Uint8Array | undefined;
  mediaKeyTimestamp?: number | undefined;
  fileSha256?: Uint8Array | undefined;
  fileEncSha256?: Uint8Array | undefined;
  directPath?: string | undefined;
}

export interface PaymentInfo {
  currencyDeprecated?: PaymentInfo_Currency | undefined;
  amount1000?: number | undefined;
  receiverJid?: string | undefined;
  status?: PaymentInfo_Status | undefined;
  transactionTimestamp?: number | undefined;
  requestMessageKey?: MessageKey | undefined;
  expiryTimestamp?: number | undefined;
  futureproofed?: boolean | undefined;
  currency?: string | undefined;
  txnStatus?: PaymentInfo_TxnStatus | undefined;
  useNoviFiatFormat?: boolean | undefined;
  primaryAmount?: Money | undefined;
  exchangeAmount?: Money | undefined;
}

export enum PaymentInfo_Currency {
  UNKNOWN_CURRENCY = 0,
  INR = 1,
  UNRECOGNIZED = -1,
}

export function paymentInfo_CurrencyFromJSON(object: any): PaymentInfo_Currency {
  switch (object) {
    case 0:
    case "UNKNOWN_CURRENCY":
      return PaymentInfo_Currency.UNKNOWN_CURRENCY;
    case 1:
    case "INR":
      return PaymentInfo_Currency.INR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PaymentInfo_Currency.UNRECOGNIZED;
  }
}

export function paymentInfo_CurrencyToJSON(object: PaymentInfo_Currency): string {
  switch (object) {
    case PaymentInfo_Currency.UNKNOWN_CURRENCY:
      return "UNKNOWN_CURRENCY";
    case PaymentInfo_Currency.INR:
      return "INR";
    case PaymentInfo_Currency.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PaymentInfo_Status {
  UNKNOWN_STATUS = 0,
  PROCESSING = 1,
  SENT = 2,
  NEED_TO_ACCEPT = 3,
  COMPLETE = 4,
  COULD_NOT_COMPLETE = 5,
  REFUNDED = 6,
  EXPIRED = 7,
  REJECTED = 8,
  CANCELLED = 9,
  WAITING_FOR_PAYER = 10,
  WAITING = 11,
  UNRECOGNIZED = -1,
}

export function paymentInfo_StatusFromJSON(object: any): PaymentInfo_Status {
  switch (object) {
    case 0:
    case "UNKNOWN_STATUS":
      return PaymentInfo_Status.UNKNOWN_STATUS;
    case 1:
    case "PROCESSING":
      return PaymentInfo_Status.PROCESSING;
    case 2:
    case "SENT":
      return PaymentInfo_Status.SENT;
    case 3:
    case "NEED_TO_ACCEPT":
      return PaymentInfo_Status.NEED_TO_ACCEPT;
    case 4:
    case "COMPLETE":
      return PaymentInfo_Status.COMPLETE;
    case 5:
    case "COULD_NOT_COMPLETE":
      return PaymentInfo_Status.COULD_NOT_COMPLETE;
    case 6:
    case "REFUNDED":
      return PaymentInfo_Status.REFUNDED;
    case 7:
    case "EXPIRED":
      return PaymentInfo_Status.EXPIRED;
    case 8:
    case "REJECTED":
      return PaymentInfo_Status.REJECTED;
    case 9:
    case "CANCELLED":
      return PaymentInfo_Status.CANCELLED;
    case 10:
    case "WAITING_FOR_PAYER":
      return PaymentInfo_Status.WAITING_FOR_PAYER;
    case 11:
    case "WAITING":
      return PaymentInfo_Status.WAITING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PaymentInfo_Status.UNRECOGNIZED;
  }
}

export function paymentInfo_StatusToJSON(object: PaymentInfo_Status): string {
  switch (object) {
    case PaymentInfo_Status.UNKNOWN_STATUS:
      return "UNKNOWN_STATUS";
    case PaymentInfo_Status.PROCESSING:
      return "PROCESSING";
    case PaymentInfo_Status.SENT:
      return "SENT";
    case PaymentInfo_Status.NEED_TO_ACCEPT:
      return "NEED_TO_ACCEPT";
    case PaymentInfo_Status.COMPLETE:
      return "COMPLETE";
    case PaymentInfo_Status.COULD_NOT_COMPLETE:
      return "COULD_NOT_COMPLETE";
    case PaymentInfo_Status.REFUNDED:
      return "REFUNDED";
    case PaymentInfo_Status.EXPIRED:
      return "EXPIRED";
    case PaymentInfo_Status.REJECTED:
      return "REJECTED";
    case PaymentInfo_Status.CANCELLED:
      return "CANCELLED";
    case PaymentInfo_Status.WAITING_FOR_PAYER:
      return "WAITING_FOR_PAYER";
    case PaymentInfo_Status.WAITING:
      return "WAITING";
    case PaymentInfo_Status.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PaymentInfo_TxnStatus {
  UNKNOWN = 0,
  PENDING_SETUP = 1,
  PENDING_RECEIVER_SETUP = 2,
  INIT = 3,
  SUCCESS = 4,
  COMPLETED = 5,
  FAILED = 6,
  FAILED_RISK = 7,
  FAILED_PROCESSING = 8,
  FAILED_RECEIVER_PROCESSING = 9,
  FAILED_DA = 10,
  FAILED_DA_FINAL = 11,
  REFUNDED_TXN = 12,
  REFUND_FAILED = 13,
  REFUND_FAILED_PROCESSING = 14,
  REFUND_FAILED_DA = 15,
  EXPIRED_TXN = 16,
  AUTH_CANCELED = 17,
  AUTH_CANCEL_FAILED_PROCESSING = 18,
  AUTH_CANCEL_FAILED = 19,
  COLLECT_INIT = 20,
  COLLECT_SUCCESS = 21,
  COLLECT_FAILED = 22,
  COLLECT_FAILED_RISK = 23,
  COLLECT_REJECTED = 24,
  COLLECT_EXPIRED = 25,
  COLLECT_CANCELED = 26,
  COLLECT_CANCELLING = 27,
  IN_REVIEW = 28,
  REVERSAL_SUCCESS = 29,
  REVERSAL_PENDING = 30,
  REFUND_PENDING = 31,
  UNRECOGNIZED = -1,
}

export function paymentInfo_TxnStatusFromJSON(object: any): PaymentInfo_TxnStatus {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return PaymentInfo_TxnStatus.UNKNOWN;
    case 1:
    case "PENDING_SETUP":
      return PaymentInfo_TxnStatus.PENDING_SETUP;
    case 2:
    case "PENDING_RECEIVER_SETUP":
      return PaymentInfo_TxnStatus.PENDING_RECEIVER_SETUP;
    case 3:
    case "INIT":
      return PaymentInfo_TxnStatus.INIT;
    case 4:
    case "SUCCESS":
      return PaymentInfo_TxnStatus.SUCCESS;
    case 5:
    case "COMPLETED":
      return PaymentInfo_TxnStatus.COMPLETED;
    case 6:
    case "FAILED":
      return PaymentInfo_TxnStatus.FAILED;
    case 7:
    case "FAILED_RISK":
      return PaymentInfo_TxnStatus.FAILED_RISK;
    case 8:
    case "FAILED_PROCESSING":
      return PaymentInfo_TxnStatus.FAILED_PROCESSING;
    case 9:
    case "FAILED_RECEIVER_PROCESSING":
      return PaymentInfo_TxnStatus.FAILED_RECEIVER_PROCESSING;
    case 10:
    case "FAILED_DA":
      return PaymentInfo_TxnStatus.FAILED_DA;
    case 11:
    case "FAILED_DA_FINAL":
      return PaymentInfo_TxnStatus.FAILED_DA_FINAL;
    case 12:
    case "REFUNDED_TXN":
      return PaymentInfo_TxnStatus.REFUNDED_TXN;
    case 13:
    case "REFUND_FAILED":
      return PaymentInfo_TxnStatus.REFUND_FAILED;
    case 14:
    case "REFUND_FAILED_PROCESSING":
      return PaymentInfo_TxnStatus.REFUND_FAILED_PROCESSING;
    case 15:
    case "REFUND_FAILED_DA":
      return PaymentInfo_TxnStatus.REFUND_FAILED_DA;
    case 16:
    case "EXPIRED_TXN":
      return PaymentInfo_TxnStatus.EXPIRED_TXN;
    case 17:
    case "AUTH_CANCELED":
      return PaymentInfo_TxnStatus.AUTH_CANCELED;
    case 18:
    case "AUTH_CANCEL_FAILED_PROCESSING":
      return PaymentInfo_TxnStatus.AUTH_CANCEL_FAILED_PROCESSING;
    case 19:
    case "AUTH_CANCEL_FAILED":
      return PaymentInfo_TxnStatus.AUTH_CANCEL_FAILED;
    case 20:
    case "COLLECT_INIT":
      return PaymentInfo_TxnStatus.COLLECT_INIT;
    case 21:
    case "COLLECT_SUCCESS":
      return PaymentInfo_TxnStatus.COLLECT_SUCCESS;
    case 22:
    case "COLLECT_FAILED":
      return PaymentInfo_TxnStatus.COLLECT_FAILED;
    case 23:
    case "COLLECT_FAILED_RISK":
      return PaymentInfo_TxnStatus.COLLECT_FAILED_RISK;
    case 24:
    case "COLLECT_REJECTED":
      return PaymentInfo_TxnStatus.COLLECT_REJECTED;
    case 25:
    case "COLLECT_EXPIRED":
      return PaymentInfo_TxnStatus.COLLECT_EXPIRED;
    case 26:
    case "COLLECT_CANCELED":
      return PaymentInfo_TxnStatus.COLLECT_CANCELED;
    case 27:
    case "COLLECT_CANCELLING":
      return PaymentInfo_TxnStatus.COLLECT_CANCELLING;
    case 28:
    case "IN_REVIEW":
      return PaymentInfo_TxnStatus.IN_REVIEW;
    case 29:
    case "REVERSAL_SUCCESS":
      return PaymentInfo_TxnStatus.REVERSAL_SUCCESS;
    case 30:
    case "REVERSAL_PENDING":
      return PaymentInfo_TxnStatus.REVERSAL_PENDING;
    case 31:
    case "REFUND_PENDING":
      return PaymentInfo_TxnStatus.REFUND_PENDING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PaymentInfo_TxnStatus.UNRECOGNIZED;
  }
}

export function paymentInfo_TxnStatusToJSON(object: PaymentInfo_TxnStatus): string {
  switch (object) {
    case PaymentInfo_TxnStatus.UNKNOWN:
      return "UNKNOWN";
    case PaymentInfo_TxnStatus.PENDING_SETUP:
      return "PENDING_SETUP";
    case PaymentInfo_TxnStatus.PENDING_RECEIVER_SETUP:
      return "PENDING_RECEIVER_SETUP";
    case PaymentInfo_TxnStatus.INIT:
      return "INIT";
    case PaymentInfo_TxnStatus.SUCCESS:
      return "SUCCESS";
    case PaymentInfo_TxnStatus.COMPLETED:
      return "COMPLETED";
    case PaymentInfo_TxnStatus.FAILED:
      return "FAILED";
    case PaymentInfo_TxnStatus.FAILED_RISK:
      return "FAILED_RISK";
    case PaymentInfo_TxnStatus.FAILED_PROCESSING:
      return "FAILED_PROCESSING";
    case PaymentInfo_TxnStatus.FAILED_RECEIVER_PROCESSING:
      return "FAILED_RECEIVER_PROCESSING";
    case PaymentInfo_TxnStatus.FAILED_DA:
      return "FAILED_DA";
    case PaymentInfo_TxnStatus.FAILED_DA_FINAL:
      return "FAILED_DA_FINAL";
    case PaymentInfo_TxnStatus.REFUNDED_TXN:
      return "REFUNDED_TXN";
    case PaymentInfo_TxnStatus.REFUND_FAILED:
      return "REFUND_FAILED";
    case PaymentInfo_TxnStatus.REFUND_FAILED_PROCESSING:
      return "REFUND_FAILED_PROCESSING";
    case PaymentInfo_TxnStatus.REFUND_FAILED_DA:
      return "REFUND_FAILED_DA";
    case PaymentInfo_TxnStatus.EXPIRED_TXN:
      return "EXPIRED_TXN";
    case PaymentInfo_TxnStatus.AUTH_CANCELED:
      return "AUTH_CANCELED";
    case PaymentInfo_TxnStatus.AUTH_CANCEL_FAILED_PROCESSING:
      return "AUTH_CANCEL_FAILED_PROCESSING";
    case PaymentInfo_TxnStatus.AUTH_CANCEL_FAILED:
      return "AUTH_CANCEL_FAILED";
    case PaymentInfo_TxnStatus.COLLECT_INIT:
      return "COLLECT_INIT";
    case PaymentInfo_TxnStatus.COLLECT_SUCCESS:
      return "COLLECT_SUCCESS";
    case PaymentInfo_TxnStatus.COLLECT_FAILED:
      return "COLLECT_FAILED";
    case PaymentInfo_TxnStatus.COLLECT_FAILED_RISK:
      return "COLLECT_FAILED_RISK";
    case PaymentInfo_TxnStatus.COLLECT_REJECTED:
      return "COLLECT_REJECTED";
    case PaymentInfo_TxnStatus.COLLECT_EXPIRED:
      return "COLLECT_EXPIRED";
    case PaymentInfo_TxnStatus.COLLECT_CANCELED:
      return "COLLECT_CANCELED";
    case PaymentInfo_TxnStatus.COLLECT_CANCELLING:
      return "COLLECT_CANCELLING";
    case PaymentInfo_TxnStatus.IN_REVIEW:
      return "IN_REVIEW";
    case PaymentInfo_TxnStatus.REVERSAL_SUCCESS:
      return "REVERSAL_SUCCESS";
    case PaymentInfo_TxnStatus.REVERSAL_PENDING:
      return "REVERSAL_PENDING";
    case PaymentInfo_TxnStatus.REFUND_PENDING:
      return "REFUND_PENDING";
    case PaymentInfo_TxnStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PhoneNumberToLIDMapping {
  pnJid?: string | undefined;
  lidJid?: string | undefined;
}

export interface PhotoChange {
  oldPhoto?: Uint8Array | undefined;
  newPhoto?: Uint8Array | undefined;
  newPhotoId?: number | undefined;
}

export interface PinInChat {
  type?: PinInChat_Type | undefined;
  key?: MessageKey | undefined;
  senderTimestampMs?: number | undefined;
  serverTimestampMs?: number | undefined;
  messageAddOnContextInfo?: MessageAddOnContextInfo | undefined;
}

export enum PinInChat_Type {
  UNKNOWN_TYPE = 0,
  PIN_FOR_ALL = 1,
  UNPIN_FOR_ALL = 2,
  UNRECOGNIZED = -1,
}

export function pinInChat_TypeFromJSON(object: any): PinInChat_Type {
  switch (object) {
    case 0:
    case "UNKNOWN_TYPE":
      return PinInChat_Type.UNKNOWN_TYPE;
    case 1:
    case "PIN_FOR_ALL":
      return PinInChat_Type.PIN_FOR_ALL;
    case 2:
    case "UNPIN_FOR_ALL":
      return PinInChat_Type.UNPIN_FOR_ALL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PinInChat_Type.UNRECOGNIZED;
  }
}

export function pinInChat_TypeToJSON(object: PinInChat_Type): string {
  switch (object) {
    case PinInChat_Type.UNKNOWN_TYPE:
      return "UNKNOWN_TYPE";
    case PinInChat_Type.PIN_FOR_ALL:
      return "PIN_FOR_ALL";
    case PinInChat_Type.UNPIN_FOR_ALL:
      return "UNPIN_FOR_ALL";
    case PinInChat_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Point {
  xDeprecated?: number | undefined;
  yDeprecated?: number | undefined;
  x?: number | undefined;
  y?: number | undefined;
}

export interface PollAdditionalMetadata {
  pollInvalidated?: boolean | undefined;
}

export interface PollEncValue {
  encPayload?: Uint8Array | undefined;
  encIv?: Uint8Array | undefined;
}

export interface PollUpdate {
  pollUpdateMessageKey?: MessageKey | undefined;
  vote?: Message_PollVoteMessage | undefined;
  senderTimestampMs?: number | undefined;
  serverTimestampMs?: number | undefined;
  unread?: boolean | undefined;
}

export interface PreKeyRecordStructure {
  id?: number | undefined;
  publicKey?: Uint8Array | undefined;
  privateKey?: Uint8Array | undefined;
}

export interface PreKeySignalMessage {
  registrationId?: number | undefined;
  preKeyId?: number | undefined;
  signedPreKeyId?: number | undefined;
  baseKey?: Uint8Array | undefined;
  identityKey?: Uint8Array | undefined;
  message?: Uint8Array | undefined;
}

export interface PremiumMessageInfo {
  serverCampaignId?: string | undefined;
}

export interface PrimaryEphemeralIdentity {
  publicKey?: Uint8Array | undefined;
  nonce?: Uint8Array | undefined;
}

export interface ProcessedVideo {
  directPath?: string | undefined;
  fileSha256?: Uint8Array | undefined;
  height?: number | undefined;
  width?: number | undefined;
  fileLength?: number | undefined;
  bitrate?: number | undefined;
  quality?: ProcessedVideo_VideoQuality | undefined;
  capabilities: string[];
}

export enum ProcessedVideo_VideoQuality {
  UNDEFINED = 0,
  LOW = 1,
  MID = 2,
  HIGH = 3,
  UNRECOGNIZED = -1,
}

export function processedVideo_VideoQualityFromJSON(object: any): ProcessedVideo_VideoQuality {
  switch (object) {
    case 0:
    case "UNDEFINED":
      return ProcessedVideo_VideoQuality.UNDEFINED;
    case 1:
    case "LOW":
      return ProcessedVideo_VideoQuality.LOW;
    case 2:
    case "MID":
      return ProcessedVideo_VideoQuality.MID;
    case 3:
    case "HIGH":
      return ProcessedVideo_VideoQuality.HIGH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ProcessedVideo_VideoQuality.UNRECOGNIZED;
  }
}

export function processedVideo_VideoQualityToJSON(object: ProcessedVideo_VideoQuality): string {
  switch (object) {
    case ProcessedVideo_VideoQuality.UNDEFINED:
      return "UNDEFINED";
    case ProcessedVideo_VideoQuality.LOW:
      return "LOW";
    case ProcessedVideo_VideoQuality.MID:
      return "MID";
    case ProcessedVideo_VideoQuality.HIGH:
      return "HIGH";
    case ProcessedVideo_VideoQuality.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ProloguePayload {
  companionEphemeralIdentity?: Uint8Array | undefined;
  commitment?: CompanionCommitment | undefined;
}

export interface Pushname {
  id?: string | undefined;
  pushname?: string | undefined;
}

export interface Reaction {
  key?: MessageKey | undefined;
  text?: string | undefined;
  groupingKey?: string | undefined;
  senderTimestampMs?: number | undefined;
  unread?: boolean | undefined;
}

export interface RecentEmojiWeight {
  emoji?: string | undefined;
  weight?: number | undefined;
}

export interface RecordStructure {
  currentSession?: SessionStructure | undefined;
  previousSessions: SessionStructure[];
}

export interface Reportable {
  minVersion?: number | undefined;
  maxVersion?: number | undefined;
  notReportableMinVersion?: number | undefined;
  never?: boolean | undefined;
}

export interface ReportingTokenInfo {
  reportingTag?: Uint8Array | undefined;
}

export interface SenderKeyDistributionMessage {
  id?: number | undefined;
  iteration?: number | undefined;
  chainKey?: Uint8Array | undefined;
  signingKey?: Uint8Array | undefined;
}

export interface SenderKeyMessage {
  id?: number | undefined;
  iteration?: number | undefined;
  ciphertext?: Uint8Array | undefined;
}

export interface SenderKeyRecordStructure {
  senderKeyStates: SenderKeyStateStructure[];
}

export interface SenderKeyStateStructure {
  senderKeyId?: number | undefined;
  senderChainKey?: SenderKeyStateStructure_SenderChainKey | undefined;
  senderSigningKey?: SenderKeyStateStructure_SenderSigningKey | undefined;
  senderMessageKeys: SenderKeyStateStructure_SenderMessageKey[];
}

export interface SenderKeyStateStructure_SenderChainKey {
  iteration?: number | undefined;
  seed?: Uint8Array | undefined;
}

export interface SenderKeyStateStructure_SenderMessageKey {
  iteration?: number | undefined;
  seed?: Uint8Array | undefined;
}

export interface SenderKeyStateStructure_SenderSigningKey {
  public?: Uint8Array | undefined;
  private?: Uint8Array | undefined;
}

export interface ServerErrorReceipt {
  stanzaId?: string | undefined;
}

export interface SessionStructure {
  sessionVersion?: number | undefined;
  localIdentityPublic?: Uint8Array | undefined;
  remoteIdentityPublic?: Uint8Array | undefined;
  rootKey?: Uint8Array | undefined;
  previousCounter?: number | undefined;
  senderChain?: SessionStructure_Chain | undefined;
  receiverChains: SessionStructure_Chain[];
  pendingKeyExchange?: SessionStructure_PendingKeyExchange | undefined;
  pendingPreKey?: SessionStructure_PendingPreKey | undefined;
  remoteRegistrationId?: number | undefined;
  localRegistrationId?: number | undefined;
  needsRefresh?: boolean | undefined;
  aliceBaseKey?: Uint8Array | undefined;
}

export interface SessionStructure_Chain {
  senderRatchetKey?: Uint8Array | undefined;
  senderRatchetKeyPrivate?: Uint8Array | undefined;
  chainKey?: SessionStructure_Chain_ChainKey | undefined;
  messageKeys: SessionStructure_Chain_MessageKey[];
}

export interface SessionStructure_Chain_ChainKey {
  index?: number | undefined;
  key?: Uint8Array | undefined;
}

export interface SessionStructure_Chain_MessageKey {
  index?: number | undefined;
  cipherKey?: Uint8Array | undefined;
  macKey?: Uint8Array | undefined;
  iv?: Uint8Array | undefined;
}

export interface SessionStructure_PendingKeyExchange {
  sequence?: number | undefined;
  localBaseKey?: Uint8Array | undefined;
  localBaseKeyPrivate?: Uint8Array | undefined;
  localRatchetKey?: Uint8Array | undefined;
  localRatchetKeyPrivate?: Uint8Array | undefined;
  localIdentityKey?: Uint8Array | undefined;
  localIdentityKeyPrivate?: Uint8Array | undefined;
}

export interface SessionStructure_PendingPreKey {
  preKeyId?: number | undefined;
  signedPreKeyId?: number | undefined;
  baseKey?: Uint8Array | undefined;
}

export interface SignalMessage {
  ratchetKey?: Uint8Array | undefined;
  counter?: number | undefined;
  previousCounter?: number | undefined;
  ciphertext?: Uint8Array | undefined;
}

export interface SignedPreKeyRecordStructure {
  id?: number | undefined;
  publicKey?: Uint8Array | undefined;
  privateKey?: Uint8Array | undefined;
  signature?: Uint8Array | undefined;
  timestamp?: number | undefined;
}

export interface StatusMentionMessage {
  quotedStatus?: Message | undefined;
}

export interface StatusPSA {
  campaignId: number;
  campaignExpirationTimestamp?: number | undefined;
}

export interface StickerMetadata {
  url?: string | undefined;
  fileSha256?: Uint8Array | undefined;
  fileEncSha256?: Uint8Array | undefined;
  mediaKey?: Uint8Array | undefined;
  mimetype?: string | undefined;
  height?: number | undefined;
  width?: number | undefined;
  directPath?: string | undefined;
  fileLength?: number | undefined;
  weight?: number | undefined;
  lastStickerSentTs?: number | undefined;
  isLottie?: boolean | undefined;
}

export interface SyncActionData {
  index?: Uint8Array | undefined;
  value?: SyncActionValue | undefined;
  padding?: Uint8Array | undefined;
  version?: number | undefined;
}

export interface SyncActionValue {
  timestamp?: number | undefined;
  starAction?: SyncActionValue_StarAction | undefined;
  contactAction?: SyncActionValue_ContactAction | undefined;
  muteAction?: SyncActionValue_MuteAction | undefined;
  pinAction?: SyncActionValue_PinAction | undefined;
  securityNotificationSetting?: SyncActionValue_SecurityNotificationSetting | undefined;
  pushNameSetting?: SyncActionValue_PushNameSetting | undefined;
  quickReplyAction?: SyncActionValue_QuickReplyAction | undefined;
  recentEmojiWeightsAction?: SyncActionValue_RecentEmojiWeightsAction | undefined;
  labelEditAction?: SyncActionValue_LabelEditAction | undefined;
  labelAssociationAction?: SyncActionValue_LabelAssociationAction | undefined;
  localeSetting?: SyncActionValue_LocaleSetting | undefined;
  archiveChatAction?: SyncActionValue_ArchiveChatAction | undefined;
  deleteMessageForMeAction?: SyncActionValue_DeleteMessageForMeAction | undefined;
  keyExpiration?: SyncActionValue_KeyExpiration | undefined;
  markChatAsReadAction?: SyncActionValue_MarkChatAsReadAction | undefined;
  clearChatAction?: SyncActionValue_ClearChatAction | undefined;
  deleteChatAction?: SyncActionValue_DeleteChatAction | undefined;
  unarchiveChatsSetting?: SyncActionValue_UnarchiveChatsSetting | undefined;
  primaryFeature?: SyncActionValue_PrimaryFeature | undefined;
  androidUnsupportedActions?: SyncActionValue_AndroidUnsupportedActions | undefined;
  agentAction?: SyncActionValue_AgentAction | undefined;
  subscriptionAction?: SyncActionValue_SubscriptionAction | undefined;
  userStatusMuteAction?: SyncActionValue_UserStatusMuteAction | undefined;
  timeFormatAction?: SyncActionValue_TimeFormatAction | undefined;
  nuxAction?: SyncActionValue_NuxAction | undefined;
  primaryVersionAction?: SyncActionValue_PrimaryVersionAction | undefined;
  stickerAction?: SyncActionValue_StickerAction | undefined;
  removeRecentStickerAction?: SyncActionValue_RemoveRecentStickerAction | undefined;
  chatAssignment?: SyncActionValue_ChatAssignmentAction | undefined;
  chatAssignmentOpenedStatus?: SyncActionValue_ChatAssignmentOpenedStatusAction | undefined;
  pnForLidChatAction?: SyncActionValue_PnForLidChatAction | undefined;
  marketingMessageAction?: SyncActionValue_MarketingMessageAction | undefined;
  marketingMessageBroadcastAction?: SyncActionValue_MarketingMessageBroadcastAction | undefined;
  externalWebBetaAction?: SyncActionValue_ExternalWebBetaAction | undefined;
  privacySettingRelayAllCalls?: SyncActionValue_PrivacySettingRelayAllCalls | undefined;
  callLogAction?: SyncActionValue_CallLogAction | undefined;
  statusPrivacy?: SyncActionValue_StatusPrivacyAction | undefined;
  botWelcomeRequestAction?: SyncActionValue_BotWelcomeRequestAction | undefined;
  deleteIndividualCallLog?: SyncActionValue_DeleteIndividualCallLogAction | undefined;
  labelReorderingAction?: SyncActionValue_LabelReorderingAction | undefined;
  paymentInfoAction?: SyncActionValue_PaymentInfoAction | undefined;
  customPaymentMethodsAction?: SyncActionValue_CustomPaymentMethodsAction | undefined;
  lockChatAction?: SyncActionValue_LockChatAction | undefined;
  chatLockSettings?: ChatLockSettings | undefined;
  wamoUserIdentifierAction?: SyncActionValue_WamoUserIdentifierAction | undefined;
  privacySettingDisableLinkPreviewsAction?: SyncActionValue_PrivacySettingDisableLinkPreviewsAction | undefined;
  deviceCapabilities?: DeviceCapabilities | undefined;
  noteEditAction?: SyncActionValue_NoteEditAction | undefined;
  favoritesAction?: SyncActionValue_FavoritesAction | undefined;
  merchantPaymentPartnerAction?: SyncActionValue_MerchantPaymentPartnerAction | undefined;
  waffleAccountLinkStateAction?: SyncActionValue_WaffleAccountLinkStateAction | undefined;
  usernameChatStartMode?: SyncActionValue_UsernameChatStartModeAction | undefined;
  notificationActivitySettingAction?: SyncActionValue_NotificationActivitySettingAction | undefined;
  lidContactAction?: SyncActionValue_LidContactAction | undefined;
  ctwaPerCustomerDataSharingAction?: SyncActionValue_CtwaPerCustomerDataSharingAction | undefined;
  paymentTosAction?: SyncActionValue_PaymentTosAction | undefined;
}

export interface SyncActionValue_AgentAction {
  name?: string | undefined;
  deviceID?: number | undefined;
  isDeleted?: boolean | undefined;
}

export interface SyncActionValue_AndroidUnsupportedActions {
  allowed?: boolean | undefined;
}

export interface SyncActionValue_ArchiveChatAction {
  archived?: boolean | undefined;
  messageRange?: SyncActionValue_SyncActionMessageRange | undefined;
}

export interface SyncActionValue_BotWelcomeRequestAction {
  isSent?: boolean | undefined;
}

export interface SyncActionValue_CallLogAction {
  callLogRecord?: CallLogRecord | undefined;
}

export interface SyncActionValue_ChatAssignmentAction {
  deviceAgentID?: string | undefined;
}

export interface SyncActionValue_ChatAssignmentOpenedStatusAction {
  chatOpened?: boolean | undefined;
}

export interface SyncActionValue_ClearChatAction {
  messageRange?: SyncActionValue_SyncActionMessageRange | undefined;
}

export interface SyncActionValue_ContactAction {
  fullName?: string | undefined;
  firstName?: string | undefined;
  lidJid?: string | undefined;
  saveOnPrimaryAddressbook?: boolean | undefined;
  pnJid?: string | undefined;
  username?: string | undefined;
}

export interface SyncActionValue_CtwaPerCustomerDataSharingAction {
  isCtwaPerCustomerDataSharingEnabled?: boolean | undefined;
}

export interface SyncActionValue_CustomPaymentMethod {
  credentialId: string;
  country: string;
  type: string;
  metadata: SyncActionValue_CustomPaymentMethodMetadata[];
}

export interface SyncActionValue_CustomPaymentMethodMetadata {
  key: string;
  value: string;
}

export interface SyncActionValue_CustomPaymentMethodsAction {
  customPaymentMethods: SyncActionValue_CustomPaymentMethod[];
}

export interface SyncActionValue_DeleteChatAction {
  messageRange?: SyncActionValue_SyncActionMessageRange | undefined;
}

export interface SyncActionValue_DeleteIndividualCallLogAction {
  peerJid?: string | undefined;
  isIncoming?: boolean | undefined;
}

export interface SyncActionValue_DeleteMessageForMeAction {
  deleteMedia?: boolean | undefined;
  messageTimestamp?: number | undefined;
}

export interface SyncActionValue_ExternalWebBetaAction {
  isOptIn?: boolean | undefined;
}

export interface SyncActionValue_FavoritesAction {
  favorites: SyncActionValue_FavoritesAction_Favorite[];
}

export interface SyncActionValue_FavoritesAction_Favorite {
  id?: string | undefined;
}

export interface SyncActionValue_KeyExpiration {
  expiredKeyEpoch?: number | undefined;
}

export interface SyncActionValue_LabelAssociationAction {
  labeled?: boolean | undefined;
}

export interface SyncActionValue_LabelEditAction {
  name?: string | undefined;
  color?: number | undefined;
  predefinedId?: number | undefined;
  deleted?: boolean | undefined;
  orderIndex?: number | undefined;
  isActive?: boolean | undefined;
  type?: SyncActionValue_LabelEditAction_ListType | undefined;
  isImmutable?: boolean | undefined;
}

export enum SyncActionValue_LabelEditAction_ListType {
  NONE = 0,
  UNREAD = 1,
  GROUPS = 2,
  FAVORITES = 3,
  PREDEFINED = 4,
  CUSTOM = 5,
  COMMUNITY = 6,
  SERVER_ASSIGNED = 7,
  UNRECOGNIZED = -1,
}

export function syncActionValue_LabelEditAction_ListTypeFromJSON(
  object: any,
): SyncActionValue_LabelEditAction_ListType {
  switch (object) {
    case 0:
    case "NONE":
      return SyncActionValue_LabelEditAction_ListType.NONE;
    case 1:
    case "UNREAD":
      return SyncActionValue_LabelEditAction_ListType.UNREAD;
    case 2:
    case "GROUPS":
      return SyncActionValue_LabelEditAction_ListType.GROUPS;
    case 3:
    case "FAVORITES":
      return SyncActionValue_LabelEditAction_ListType.FAVORITES;
    case 4:
    case "PREDEFINED":
      return SyncActionValue_LabelEditAction_ListType.PREDEFINED;
    case 5:
    case "CUSTOM":
      return SyncActionValue_LabelEditAction_ListType.CUSTOM;
    case 6:
    case "COMMUNITY":
      return SyncActionValue_LabelEditAction_ListType.COMMUNITY;
    case 7:
    case "SERVER_ASSIGNED":
      return SyncActionValue_LabelEditAction_ListType.SERVER_ASSIGNED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SyncActionValue_LabelEditAction_ListType.UNRECOGNIZED;
  }
}

export function syncActionValue_LabelEditAction_ListTypeToJSON(
  object: SyncActionValue_LabelEditAction_ListType,
): string {
  switch (object) {
    case SyncActionValue_LabelEditAction_ListType.NONE:
      return "NONE";
    case SyncActionValue_LabelEditAction_ListType.UNREAD:
      return "UNREAD";
    case SyncActionValue_LabelEditAction_ListType.GROUPS:
      return "GROUPS";
    case SyncActionValue_LabelEditAction_ListType.FAVORITES:
      return "FAVORITES";
    case SyncActionValue_LabelEditAction_ListType.PREDEFINED:
      return "PREDEFINED";
    case SyncActionValue_LabelEditAction_ListType.CUSTOM:
      return "CUSTOM";
    case SyncActionValue_LabelEditAction_ListType.COMMUNITY:
      return "COMMUNITY";
    case SyncActionValue_LabelEditAction_ListType.SERVER_ASSIGNED:
      return "SERVER_ASSIGNED";
    case SyncActionValue_LabelEditAction_ListType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SyncActionValue_LabelReorderingAction {
  sortedLabelIds: number[];
}

export interface SyncActionValue_LidContactAction {
  fullName?: string | undefined;
  firstName?: string | undefined;
  username?: string | undefined;
  saveOnPrimaryAddressbook?: boolean | undefined;
}

export interface SyncActionValue_LocaleSetting {
  locale?: string | undefined;
}

export interface SyncActionValue_LockChatAction {
  locked?: boolean | undefined;
}

export interface SyncActionValue_MarkChatAsReadAction {
  read?: boolean | undefined;
  messageRange?: SyncActionValue_SyncActionMessageRange | undefined;
}

export interface SyncActionValue_MarketingMessageAction {
  name?: string | undefined;
  message?: string | undefined;
  type?: SyncActionValue_MarketingMessageAction_MarketingMessagePrototypeType | undefined;
  createdAt?: number | undefined;
  lastSentAt?: number | undefined;
  isDeleted?: boolean | undefined;
  mediaId?: string | undefined;
}

export enum SyncActionValue_MarketingMessageAction_MarketingMessagePrototypeType {
  PERSONALIZED = 0,
  UNRECOGNIZED = -1,
}

export function syncActionValue_MarketingMessageAction_MarketingMessagePrototypeTypeFromJSON(
  object: any,
): SyncActionValue_MarketingMessageAction_MarketingMessagePrototypeType {
  switch (object) {
    case 0:
    case "PERSONALIZED":
      return SyncActionValue_MarketingMessageAction_MarketingMessagePrototypeType.PERSONALIZED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SyncActionValue_MarketingMessageAction_MarketingMessagePrototypeType.UNRECOGNIZED;
  }
}

export function syncActionValue_MarketingMessageAction_MarketingMessagePrototypeTypeToJSON(
  object: SyncActionValue_MarketingMessageAction_MarketingMessagePrototypeType,
): string {
  switch (object) {
    case SyncActionValue_MarketingMessageAction_MarketingMessagePrototypeType.PERSONALIZED:
      return "PERSONALIZED";
    case SyncActionValue_MarketingMessageAction_MarketingMessagePrototypeType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SyncActionValue_MarketingMessageBroadcastAction {
  repliedCount?: number | undefined;
}

export interface SyncActionValue_MerchantPaymentPartnerAction {
  status: SyncActionValue_MerchantPaymentPartnerAction_Status;
  country: string;
  gatewayName?: string | undefined;
  credentialId?: string | undefined;
}

export enum SyncActionValue_MerchantPaymentPartnerAction_Status {
  ACTIVE = 0,
  INACTIVE = 1,
  UNRECOGNIZED = -1,
}

export function syncActionValue_MerchantPaymentPartnerAction_StatusFromJSON(
  object: any,
): SyncActionValue_MerchantPaymentPartnerAction_Status {
  switch (object) {
    case 0:
    case "ACTIVE":
      return SyncActionValue_MerchantPaymentPartnerAction_Status.ACTIVE;
    case 1:
    case "INACTIVE":
      return SyncActionValue_MerchantPaymentPartnerAction_Status.INACTIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SyncActionValue_MerchantPaymentPartnerAction_Status.UNRECOGNIZED;
  }
}

export function syncActionValue_MerchantPaymentPartnerAction_StatusToJSON(
  object: SyncActionValue_MerchantPaymentPartnerAction_Status,
): string {
  switch (object) {
    case SyncActionValue_MerchantPaymentPartnerAction_Status.ACTIVE:
      return "ACTIVE";
    case SyncActionValue_MerchantPaymentPartnerAction_Status.INACTIVE:
      return "INACTIVE";
    case SyncActionValue_MerchantPaymentPartnerAction_Status.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SyncActionValue_MuteAction {
  muted?: boolean | undefined;
  muteEndTimestamp?: number | undefined;
  autoMuted?: boolean | undefined;
}

export interface SyncActionValue_NoteEditAction {
  type?: SyncActionValue_NoteEditAction_NoteType | undefined;
  chatJid?: string | undefined;
  createdAt?: number | undefined;
  deleted?: boolean | undefined;
  unstructuredContent?: string | undefined;
}

export enum SyncActionValue_NoteEditAction_NoteType {
  UNKNOWN = 0,
  UNSTRUCTURED = 1,
  STRUCTURED = 2,
  UNRECOGNIZED = -1,
}

export function syncActionValue_NoteEditAction_NoteTypeFromJSON(object: any): SyncActionValue_NoteEditAction_NoteType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return SyncActionValue_NoteEditAction_NoteType.UNKNOWN;
    case 1:
    case "UNSTRUCTURED":
      return SyncActionValue_NoteEditAction_NoteType.UNSTRUCTURED;
    case 2:
    case "STRUCTURED":
      return SyncActionValue_NoteEditAction_NoteType.STRUCTURED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SyncActionValue_NoteEditAction_NoteType.UNRECOGNIZED;
  }
}

export function syncActionValue_NoteEditAction_NoteTypeToJSON(object: SyncActionValue_NoteEditAction_NoteType): string {
  switch (object) {
    case SyncActionValue_NoteEditAction_NoteType.UNKNOWN:
      return "UNKNOWN";
    case SyncActionValue_NoteEditAction_NoteType.UNSTRUCTURED:
      return "UNSTRUCTURED";
    case SyncActionValue_NoteEditAction_NoteType.STRUCTURED:
      return "STRUCTURED";
    case SyncActionValue_NoteEditAction_NoteType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SyncActionValue_NotificationActivitySettingAction {
  notificationActivitySetting?:
    | SyncActionValue_NotificationActivitySettingAction_NotificationActivitySetting
    | undefined;
}

export enum SyncActionValue_NotificationActivitySettingAction_NotificationActivitySetting {
  DEFAULT_ALL_MESSAGES = 0,
  ALL_MESSAGES = 1,
  HIGHLIGHTS = 2,
  DEFAULT_HIGHLIGHTS = 3,
  UNRECOGNIZED = -1,
}

export function syncActionValue_NotificationActivitySettingAction_NotificationActivitySettingFromJSON(
  object: any,
): SyncActionValue_NotificationActivitySettingAction_NotificationActivitySetting {
  switch (object) {
    case 0:
    case "DEFAULT_ALL_MESSAGES":
      return SyncActionValue_NotificationActivitySettingAction_NotificationActivitySetting.DEFAULT_ALL_MESSAGES;
    case 1:
    case "ALL_MESSAGES":
      return SyncActionValue_NotificationActivitySettingAction_NotificationActivitySetting.ALL_MESSAGES;
    case 2:
    case "HIGHLIGHTS":
      return SyncActionValue_NotificationActivitySettingAction_NotificationActivitySetting.HIGHLIGHTS;
    case 3:
    case "DEFAULT_HIGHLIGHTS":
      return SyncActionValue_NotificationActivitySettingAction_NotificationActivitySetting.DEFAULT_HIGHLIGHTS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SyncActionValue_NotificationActivitySettingAction_NotificationActivitySetting.UNRECOGNIZED;
  }
}

export function syncActionValue_NotificationActivitySettingAction_NotificationActivitySettingToJSON(
  object: SyncActionValue_NotificationActivitySettingAction_NotificationActivitySetting,
): string {
  switch (object) {
    case SyncActionValue_NotificationActivitySettingAction_NotificationActivitySetting.DEFAULT_ALL_MESSAGES:
      return "DEFAULT_ALL_MESSAGES";
    case SyncActionValue_NotificationActivitySettingAction_NotificationActivitySetting.ALL_MESSAGES:
      return "ALL_MESSAGES";
    case SyncActionValue_NotificationActivitySettingAction_NotificationActivitySetting.HIGHLIGHTS:
      return "HIGHLIGHTS";
    case SyncActionValue_NotificationActivitySettingAction_NotificationActivitySetting.DEFAULT_HIGHLIGHTS:
      return "DEFAULT_HIGHLIGHTS";
    case SyncActionValue_NotificationActivitySettingAction_NotificationActivitySetting.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SyncActionValue_NuxAction {
  acknowledged?: boolean | undefined;
}

export interface SyncActionValue_PaymentInfoAction {
  cpi?: string | undefined;
}

export interface SyncActionValue_PaymentTosAction {
  paymentNotice: SyncActionValue_PaymentTosAction_PaymentNotice;
  accepted: boolean;
}

export enum SyncActionValue_PaymentTosAction_PaymentNotice {
  BR_PAY_PRIVACY_POLICY = 0,
  UNRECOGNIZED = -1,
}

export function syncActionValue_PaymentTosAction_PaymentNoticeFromJSON(
  object: any,
): SyncActionValue_PaymentTosAction_PaymentNotice {
  switch (object) {
    case 0:
    case "BR_PAY_PRIVACY_POLICY":
      return SyncActionValue_PaymentTosAction_PaymentNotice.BR_PAY_PRIVACY_POLICY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SyncActionValue_PaymentTosAction_PaymentNotice.UNRECOGNIZED;
  }
}

export function syncActionValue_PaymentTosAction_PaymentNoticeToJSON(
  object: SyncActionValue_PaymentTosAction_PaymentNotice,
): string {
  switch (object) {
    case SyncActionValue_PaymentTosAction_PaymentNotice.BR_PAY_PRIVACY_POLICY:
      return "BR_PAY_PRIVACY_POLICY";
    case SyncActionValue_PaymentTosAction_PaymentNotice.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SyncActionValue_PinAction {
  pinned?: boolean | undefined;
}

export interface SyncActionValue_PnForLidChatAction {
  pnJid?: string | undefined;
}

export interface SyncActionValue_PrimaryFeature {
  flags: string[];
}

export interface SyncActionValue_PrimaryVersionAction {
  version?: string | undefined;
}

export interface SyncActionValue_PrivacySettingDisableLinkPreviewsAction {
  isPreviewsDisabled?: boolean | undefined;
}

export interface SyncActionValue_PrivacySettingRelayAllCalls {
  isEnabled?: boolean | undefined;
}

export interface SyncActionValue_PushNameSetting {
  name?: string | undefined;
}

export interface SyncActionValue_QuickReplyAction {
  shortcut?: string | undefined;
  message?: string | undefined;
  keywords: string[];
  count?: number | undefined;
  deleted?: boolean | undefined;
}

export interface SyncActionValue_RecentEmojiWeightsAction {
  weights: RecentEmojiWeight[];
}

export interface SyncActionValue_RemoveRecentStickerAction {
  lastStickerSentTs?: number | undefined;
}

export interface SyncActionValue_SecurityNotificationSetting {
  showNotification?: boolean | undefined;
}

export interface SyncActionValue_StarAction {
  starred?: boolean | undefined;
}

export interface SyncActionValue_StatusPrivacyAction {
  mode?: SyncActionValue_StatusPrivacyAction_StatusDistributionMode | undefined;
  userJid: string[];
}

export enum SyncActionValue_StatusPrivacyAction_StatusDistributionMode {
  ALLOW_LIST = 0,
  DENY_LIST = 1,
  CONTACTS = 2,
  UNRECOGNIZED = -1,
}

export function syncActionValue_StatusPrivacyAction_StatusDistributionModeFromJSON(
  object: any,
): SyncActionValue_StatusPrivacyAction_StatusDistributionMode {
  switch (object) {
    case 0:
    case "ALLOW_LIST":
      return SyncActionValue_StatusPrivacyAction_StatusDistributionMode.ALLOW_LIST;
    case 1:
    case "DENY_LIST":
      return SyncActionValue_StatusPrivacyAction_StatusDistributionMode.DENY_LIST;
    case 2:
    case "CONTACTS":
      return SyncActionValue_StatusPrivacyAction_StatusDistributionMode.CONTACTS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SyncActionValue_StatusPrivacyAction_StatusDistributionMode.UNRECOGNIZED;
  }
}

export function syncActionValue_StatusPrivacyAction_StatusDistributionModeToJSON(
  object: SyncActionValue_StatusPrivacyAction_StatusDistributionMode,
): string {
  switch (object) {
    case SyncActionValue_StatusPrivacyAction_StatusDistributionMode.ALLOW_LIST:
      return "ALLOW_LIST";
    case SyncActionValue_StatusPrivacyAction_StatusDistributionMode.DENY_LIST:
      return "DENY_LIST";
    case SyncActionValue_StatusPrivacyAction_StatusDistributionMode.CONTACTS:
      return "CONTACTS";
    case SyncActionValue_StatusPrivacyAction_StatusDistributionMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SyncActionValue_StickerAction {
  url?: string | undefined;
  fileEncSha256?: Uint8Array | undefined;
  mediaKey?: Uint8Array | undefined;
  mimetype?: string | undefined;
  height?: number | undefined;
  width?: number | undefined;
  directPath?: string | undefined;
  fileLength?: number | undefined;
  isFavorite?: boolean | undefined;
  deviceIdHint?: number | undefined;
  isLottie?: boolean | undefined;
}

export interface SyncActionValue_SubscriptionAction {
  isDeactivated?: boolean | undefined;
  isAutoRenewing?: boolean | undefined;
  expirationDate?: number | undefined;
}

export interface SyncActionValue_SyncActionMessage {
  key?: MessageKey | undefined;
  timestamp?: number | undefined;
}

export interface SyncActionValue_SyncActionMessageRange {
  lastMessageTimestamp?: number | undefined;
  lastSystemMessageTimestamp?: number | undefined;
  messages: SyncActionValue_SyncActionMessage[];
}

export interface SyncActionValue_TimeFormatAction {
  isTwentyFourHourFormatEnabled?: boolean | undefined;
}

export interface SyncActionValue_UnarchiveChatsSetting {
  unarchiveChats?: boolean | undefined;
}

export interface SyncActionValue_UserStatusMuteAction {
  muted?: boolean | undefined;
}

export interface SyncActionValue_UsernameChatStartModeAction {
  chatStartMode?: SyncActionValue_UsernameChatStartModeAction_ChatStartMode | undefined;
}

export enum SyncActionValue_UsernameChatStartModeAction_ChatStartMode {
  UNKNOWN = 0,
  LID = 1,
  PN = 2,
  UNRECOGNIZED = -1,
}

export function syncActionValue_UsernameChatStartModeAction_ChatStartModeFromJSON(
  object: any,
): SyncActionValue_UsernameChatStartModeAction_ChatStartMode {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return SyncActionValue_UsernameChatStartModeAction_ChatStartMode.UNKNOWN;
    case 1:
    case "LID":
      return SyncActionValue_UsernameChatStartModeAction_ChatStartMode.LID;
    case 2:
    case "PN":
      return SyncActionValue_UsernameChatStartModeAction_ChatStartMode.PN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SyncActionValue_UsernameChatStartModeAction_ChatStartMode.UNRECOGNIZED;
  }
}

export function syncActionValue_UsernameChatStartModeAction_ChatStartModeToJSON(
  object: SyncActionValue_UsernameChatStartModeAction_ChatStartMode,
): string {
  switch (object) {
    case SyncActionValue_UsernameChatStartModeAction_ChatStartMode.UNKNOWN:
      return "UNKNOWN";
    case SyncActionValue_UsernameChatStartModeAction_ChatStartMode.LID:
      return "LID";
    case SyncActionValue_UsernameChatStartModeAction_ChatStartMode.PN:
      return "PN";
    case SyncActionValue_UsernameChatStartModeAction_ChatStartMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SyncActionValue_WaffleAccountLinkStateAction {
  linkState?: SyncActionValue_WaffleAccountLinkStateAction_AccountLinkState | undefined;
}

export enum SyncActionValue_WaffleAccountLinkStateAction_AccountLinkState {
  ACTIVE = 0,
  UNRECOGNIZED = -1,
}

export function syncActionValue_WaffleAccountLinkStateAction_AccountLinkStateFromJSON(
  object: any,
): SyncActionValue_WaffleAccountLinkStateAction_AccountLinkState {
  switch (object) {
    case 0:
    case "ACTIVE":
      return SyncActionValue_WaffleAccountLinkStateAction_AccountLinkState.ACTIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SyncActionValue_WaffleAccountLinkStateAction_AccountLinkState.UNRECOGNIZED;
  }
}

export function syncActionValue_WaffleAccountLinkStateAction_AccountLinkStateToJSON(
  object: SyncActionValue_WaffleAccountLinkStateAction_AccountLinkState,
): string {
  switch (object) {
    case SyncActionValue_WaffleAccountLinkStateAction_AccountLinkState.ACTIVE:
      return "ACTIVE";
    case SyncActionValue_WaffleAccountLinkStateAction_AccountLinkState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SyncActionValue_WamoUserIdentifierAction {
  identifier?: string | undefined;
}

export interface SyncdIndex {
  blob?: Uint8Array | undefined;
}

export interface SyncdMutation {
  operation?: SyncdMutation_SyncdOperation | undefined;
  record?: SyncdRecord | undefined;
}

export enum SyncdMutation_SyncdOperation {
  SET = 0,
  REMOVE = 1,
  UNRECOGNIZED = -1,
}

export function syncdMutation_SyncdOperationFromJSON(object: any): SyncdMutation_SyncdOperation {
  switch (object) {
    case 0:
    case "SET":
      return SyncdMutation_SyncdOperation.SET;
    case 1:
    case "REMOVE":
      return SyncdMutation_SyncdOperation.REMOVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SyncdMutation_SyncdOperation.UNRECOGNIZED;
  }
}

export function syncdMutation_SyncdOperationToJSON(object: SyncdMutation_SyncdOperation): string {
  switch (object) {
    case SyncdMutation_SyncdOperation.SET:
      return "SET";
    case SyncdMutation_SyncdOperation.REMOVE:
      return "REMOVE";
    case SyncdMutation_SyncdOperation.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SyncdMutations {
  mutations: SyncdMutation[];
}

export interface SyncdPatch {
  version?: SyncdVersion | undefined;
  mutations: SyncdMutation[];
  externalMutations?: ExternalBlobReference | undefined;
  snapshotMac?: Uint8Array | undefined;
  patchMac?: Uint8Array | undefined;
  keyId?: KeyId | undefined;
  exitCode?: ExitCode | undefined;
  deviceIndex?: number | undefined;
  clientDebugData?: Uint8Array | undefined;
}

export interface SyncdRecord {
  index?: SyncdIndex | undefined;
  value?: SyncdValue | undefined;
  keyId?: KeyId | undefined;
}

export interface SyncdSnapshot {
  version?: SyncdVersion | undefined;
  records: SyncdRecord[];
  mac?: Uint8Array | undefined;
  keyId?: KeyId | undefined;
}

export interface SyncdValue {
  blob?: Uint8Array | undefined;
}

export interface SyncdVersion {
  version?: number | undefined;
}

export interface TapLinkAction {
  title?: string | undefined;
  tapUrl?: string | undefined;
}

export interface TemplateButton {
  index?: number | undefined;
  quickReplyButton?: TemplateButton_QuickReplyButton | undefined;
  urlButton?: TemplateButton_URLButton | undefined;
  callButton?: TemplateButton_CallButton | undefined;
}

export interface TemplateButton_CallButton {
  displayText?: Message_HighlyStructuredMessage | undefined;
  phoneNumber?: Message_HighlyStructuredMessage | undefined;
}

export interface TemplateButton_QuickReplyButton {
  displayText?: Message_HighlyStructuredMessage | undefined;
  id?: string | undefined;
}

export interface TemplateButton_URLButton {
  displayText?: Message_HighlyStructuredMessage | undefined;
  url?: Message_HighlyStructuredMessage | undefined;
}

export interface UrlTrackingMap {
  urlTrackingMapElements: UrlTrackingMap_UrlTrackingMapElement[];
}

export interface UrlTrackingMap_UrlTrackingMapElement {
  originalUrl?: string | undefined;
  unconsentedUsersUrl?: string | undefined;
  consentedUsersUrl?: string | undefined;
  cardIndex?: number | undefined;
}

export interface UserPassword {
  encoding?: UserPassword_Encoding | undefined;
  transformer?: UserPassword_Transformer | undefined;
  transformerArg: UserPassword_TransformerArg[];
  transformedData?: Uint8Array | undefined;
}

export enum UserPassword_Encoding {
  UTF8 = 0,
  UTF8_BROKEN = 1,
  UNRECOGNIZED = -1,
}

export function userPassword_EncodingFromJSON(object: any): UserPassword_Encoding {
  switch (object) {
    case 0:
    case "UTF8":
      return UserPassword_Encoding.UTF8;
    case 1:
    case "UTF8_BROKEN":
      return UserPassword_Encoding.UTF8_BROKEN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UserPassword_Encoding.UNRECOGNIZED;
  }
}

export function userPassword_EncodingToJSON(object: UserPassword_Encoding): string {
  switch (object) {
    case UserPassword_Encoding.UTF8:
      return "UTF8";
    case UserPassword_Encoding.UTF8_BROKEN:
      return "UTF8_BROKEN";
    case UserPassword_Encoding.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum UserPassword_Transformer {
  NONE = 0,
  PBKDF2_HMAC_SHA512 = 1,
  PBKDF2_HMAC_SHA384 = 2,
  UNRECOGNIZED = -1,
}

export function userPassword_TransformerFromJSON(object: any): UserPassword_Transformer {
  switch (object) {
    case 0:
    case "NONE":
      return UserPassword_Transformer.NONE;
    case 1:
    case "PBKDF2_HMAC_SHA512":
      return UserPassword_Transformer.PBKDF2_HMAC_SHA512;
    case 2:
    case "PBKDF2_HMAC_SHA384":
      return UserPassword_Transformer.PBKDF2_HMAC_SHA384;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UserPassword_Transformer.UNRECOGNIZED;
  }
}

export function userPassword_TransformerToJSON(object: UserPassword_Transformer): string {
  switch (object) {
    case UserPassword_Transformer.NONE:
      return "NONE";
    case UserPassword_Transformer.PBKDF2_HMAC_SHA512:
      return "PBKDF2_HMAC_SHA512";
    case UserPassword_Transformer.PBKDF2_HMAC_SHA384:
      return "PBKDF2_HMAC_SHA384";
    case UserPassword_Transformer.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface UserPassword_TransformerArg {
  key?: string | undefined;
  value?: UserPassword_TransformerArg_Value | undefined;
}

export interface UserPassword_TransformerArg_Value {
  asBlob?: Uint8Array | undefined;
  asUnsignedInteger?: number | undefined;
}

export interface UserReceipt {
  userJid: string;
  receiptTimestamp?: number | undefined;
  readTimestamp?: number | undefined;
  playedTimestamp?: number | undefined;
  pendingDeviceJid: string[];
  deliveredDeviceJid: string[];
}

export interface VerifiedNameCertificate {
  details?: Uint8Array | undefined;
  signature?: Uint8Array | undefined;
  serverSignature?: Uint8Array | undefined;
}

export interface VerifiedNameCertificate_Details {
  serial?: number | undefined;
  issuer?: string | undefined;
  verifiedName?: string | undefined;
  localizedNames: LocalizedName[];
  issueTime?: number | undefined;
}

export interface WallpaperSettings {
  filename?: string | undefined;
  opacity?: number | undefined;
}

export interface WebFeatures {
  labelsDisplay?: WebFeatures_Flag | undefined;
  voipIndividualOutgoing?: WebFeatures_Flag | undefined;
  groupsV3?: WebFeatures_Flag | undefined;
  groupsV3Create?: WebFeatures_Flag | undefined;
  changeNumberV2?: WebFeatures_Flag | undefined;
  queryStatusV3Thumbnail?: WebFeatures_Flag | undefined;
  liveLocations?: WebFeatures_Flag | undefined;
  queryVname?: WebFeatures_Flag | undefined;
  voipIndividualIncoming?: WebFeatures_Flag | undefined;
  quickRepliesQuery?: WebFeatures_Flag | undefined;
  payments?: WebFeatures_Flag | undefined;
  stickerPackQuery?: WebFeatures_Flag | undefined;
  liveLocationsFinal?: WebFeatures_Flag | undefined;
  labelsEdit?: WebFeatures_Flag | undefined;
  mediaUpload?: WebFeatures_Flag | undefined;
  mediaUploadRichQuickReplies?: WebFeatures_Flag | undefined;
  vnameV2?: WebFeatures_Flag | undefined;
  videoPlaybackUrl?: WebFeatures_Flag | undefined;
  statusRanking?: WebFeatures_Flag | undefined;
  voipIndividualVideo?: WebFeatures_Flag | undefined;
  thirdPartyStickers?: WebFeatures_Flag | undefined;
  frequentlyForwardedSetting?: WebFeatures_Flag | undefined;
  groupsV4JoinPermission?: WebFeatures_Flag | undefined;
  recentStickers?: WebFeatures_Flag | undefined;
  catalog?: WebFeatures_Flag | undefined;
  starredStickers?: WebFeatures_Flag | undefined;
  voipGroupCall?: WebFeatures_Flag | undefined;
  templateMessage?: WebFeatures_Flag | undefined;
  templateMessageInteractivity?: WebFeatures_Flag | undefined;
  ephemeralMessages?: WebFeatures_Flag | undefined;
  e2ENotificationSync?: WebFeatures_Flag | undefined;
  recentStickersV2?: WebFeatures_Flag | undefined;
  recentStickersV3?: WebFeatures_Flag | undefined;
  userNotice?: WebFeatures_Flag | undefined;
  support?: WebFeatures_Flag | undefined;
  groupUiiCleanup?: WebFeatures_Flag | undefined;
  groupDogfoodingInternalOnly?: WebFeatures_Flag | undefined;
  settingsSync?: WebFeatures_Flag | undefined;
  archiveV2?: WebFeatures_Flag | undefined;
  ephemeralAllowGroupMembers?: WebFeatures_Flag | undefined;
  ephemeral24HDuration?: WebFeatures_Flag | undefined;
  mdForceUpgrade?: WebFeatures_Flag | undefined;
  disappearingMode?: WebFeatures_Flag | undefined;
  externalMdOptInAvailable?: WebFeatures_Flag | undefined;
  noDeleteMessageTimeLimit?: WebFeatures_Flag | undefined;
}

export enum WebFeatures_Flag {
  NOT_STARTED = 0,
  FORCE_UPGRADE = 1,
  DEVELOPMENT = 2,
  PRODUCTION = 3,
  UNRECOGNIZED = -1,
}

export function webFeatures_FlagFromJSON(object: any): WebFeatures_Flag {
  switch (object) {
    case 0:
    case "NOT_STARTED":
      return WebFeatures_Flag.NOT_STARTED;
    case 1:
    case "FORCE_UPGRADE":
      return WebFeatures_Flag.FORCE_UPGRADE;
    case 2:
    case "DEVELOPMENT":
      return WebFeatures_Flag.DEVELOPMENT;
    case 3:
    case "PRODUCTION":
      return WebFeatures_Flag.PRODUCTION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WebFeatures_Flag.UNRECOGNIZED;
  }
}

export function webFeatures_FlagToJSON(object: WebFeatures_Flag): string {
  switch (object) {
    case WebFeatures_Flag.NOT_STARTED:
      return "NOT_STARTED";
    case WebFeatures_Flag.FORCE_UPGRADE:
      return "FORCE_UPGRADE";
    case WebFeatures_Flag.DEVELOPMENT:
      return "DEVELOPMENT";
    case WebFeatures_Flag.PRODUCTION:
      return "PRODUCTION";
    case WebFeatures_Flag.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface WebMessageInfo {
  key: MessageKey | undefined;
  message?: Message | undefined;
  messageTimestamp?: number | undefined;
  status?: WebMessageInfo_Status | undefined;
  participant?: string | undefined;
  messageC2STimestamp?: number | undefined;
  ignore?: boolean | undefined;
  starred?: boolean | undefined;
  broadcast?: boolean | undefined;
  pushName?: string | undefined;
  mediaCiphertextSha256?: Uint8Array | undefined;
  multicast?: boolean | undefined;
  urlText?: boolean | undefined;
  urlNumber?: boolean | undefined;
  messageStubType?: WebMessageInfo_StubType | undefined;
  clearMedia?: boolean | undefined;
  messageStubParameters: string[];
  duration?: number | undefined;
  labels: string[];
  paymentInfo?: PaymentInfo | undefined;
  finalLiveLocation?: Message_LiveLocationMessage | undefined;
  quotedPaymentInfo?: PaymentInfo | undefined;
  ephemeralStartTimestamp?: number | undefined;
  ephemeralDuration?: number | undefined;
  ephemeralOffToOn?: boolean | undefined;
  ephemeralOutOfSync?: boolean | undefined;
  bizPrivacyStatus?: WebMessageInfo_BizPrivacyStatus | undefined;
  verifiedBizName?: string | undefined;
  mediaData?: MediaData | undefined;
  photoChange?: PhotoChange | undefined;
  userReceipt: UserReceipt[];
  reactions: Reaction[];
  quotedStickerData?: MediaData | undefined;
  futureproofData?: Uint8Array | undefined;
  statusPsa?: StatusPSA | undefined;
  pollUpdates: PollUpdate[];
  pollAdditionalMetadata?: PollAdditionalMetadata | undefined;
  agentId?: string | undefined;
  statusAlreadyViewed?: boolean | undefined;
  messageSecret?: Uint8Array | undefined;
  keepInChat?: KeepInChat | undefined;
  originalSelfAuthorUserJidString?: string | undefined;
  revokeMessageTimestamp?: number | undefined;
  pinInChat?: PinInChat | undefined;
  premiumMessageInfo?: PremiumMessageInfo | undefined;
  is1PBizBotMessage?: boolean | undefined;
  isGroupHistoryMessage?: boolean | undefined;
  botMessageInvokerJid?: string | undefined;
  commentMetadata?: CommentMetadata | undefined;
  eventResponses: EventResponse[];
  reportingTokenInfo?: ReportingTokenInfo | undefined;
  newsletterServerId?: number | undefined;
  eventAdditionalMetadata?: EventAdditionalMetadata | undefined;
  isMentionedInStatus?: boolean | undefined;
  statusMentions: string[];
  targetMessageId?: MessageKey | undefined;
  messageAddOns: MessageAddOn[];
  statusMentionMessageInfo?: StatusMentionMessage | undefined;
  isSupportAiMessage?: boolean | undefined;
  statusMentionSources: string[];
  supportAiCitations: Citation[];
  botTargetId?: string | undefined;
}

export enum WebMessageInfo_BizPrivacyStatus {
  E2EE = 0,
  FB = 2,
  BSP = 1,
  BSP_AND_FB = 3,
  UNRECOGNIZED = -1,
}

export function webMessageInfo_BizPrivacyStatusFromJSON(object: any): WebMessageInfo_BizPrivacyStatus {
  switch (object) {
    case 0:
    case "E2EE":
      return WebMessageInfo_BizPrivacyStatus.E2EE;
    case 2:
    case "FB":
      return WebMessageInfo_BizPrivacyStatus.FB;
    case 1:
    case "BSP":
      return WebMessageInfo_BizPrivacyStatus.BSP;
    case 3:
    case "BSP_AND_FB":
      return WebMessageInfo_BizPrivacyStatus.BSP_AND_FB;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WebMessageInfo_BizPrivacyStatus.UNRECOGNIZED;
  }
}

export function webMessageInfo_BizPrivacyStatusToJSON(object: WebMessageInfo_BizPrivacyStatus): string {
  switch (object) {
    case WebMessageInfo_BizPrivacyStatus.E2EE:
      return "E2EE";
    case WebMessageInfo_BizPrivacyStatus.FB:
      return "FB";
    case WebMessageInfo_BizPrivacyStatus.BSP:
      return "BSP";
    case WebMessageInfo_BizPrivacyStatus.BSP_AND_FB:
      return "BSP_AND_FB";
    case WebMessageInfo_BizPrivacyStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum WebMessageInfo_Status {
  ERROR = 0,
  PENDING = 1,
  SERVER_ACK = 2,
  DELIVERY_ACK = 3,
  READ = 4,
  PLAYED = 5,
  UNRECOGNIZED = -1,
}

export function webMessageInfo_StatusFromJSON(object: any): WebMessageInfo_Status {
  switch (object) {
    case 0:
    case "ERROR":
      return WebMessageInfo_Status.ERROR;
    case 1:
    case "PENDING":
      return WebMessageInfo_Status.PENDING;
    case 2:
    case "SERVER_ACK":
      return WebMessageInfo_Status.SERVER_ACK;
    case 3:
    case "DELIVERY_ACK":
      return WebMessageInfo_Status.DELIVERY_ACK;
    case 4:
    case "READ":
      return WebMessageInfo_Status.READ;
    case 5:
    case "PLAYED":
      return WebMessageInfo_Status.PLAYED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WebMessageInfo_Status.UNRECOGNIZED;
  }
}

export function webMessageInfo_StatusToJSON(object: WebMessageInfo_Status): string {
  switch (object) {
    case WebMessageInfo_Status.ERROR:
      return "ERROR";
    case WebMessageInfo_Status.PENDING:
      return "PENDING";
    case WebMessageInfo_Status.SERVER_ACK:
      return "SERVER_ACK";
    case WebMessageInfo_Status.DELIVERY_ACK:
      return "DELIVERY_ACK";
    case WebMessageInfo_Status.READ:
      return "READ";
    case WebMessageInfo_Status.PLAYED:
      return "PLAYED";
    case WebMessageInfo_Status.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum WebMessageInfo_StubType {
  UNKNOWN = 0,
  REVOKE = 1,
  CIPHERTEXT = 2,
  FUTUREPROOF = 3,
  NON_VERIFIED_TRANSITION = 4,
  UNVERIFIED_TRANSITION = 5,
  VERIFIED_TRANSITION = 6,
  VERIFIED_LOW_UNKNOWN = 7,
  VERIFIED_HIGH = 8,
  VERIFIED_INITIAL_UNKNOWN = 9,
  VERIFIED_INITIAL_LOW = 10,
  VERIFIED_INITIAL_HIGH = 11,
  VERIFIED_TRANSITION_ANY_TO_NONE = 12,
  VERIFIED_TRANSITION_ANY_TO_HIGH = 13,
  VERIFIED_TRANSITION_HIGH_TO_LOW = 14,
  VERIFIED_TRANSITION_HIGH_TO_UNKNOWN = 15,
  VERIFIED_TRANSITION_UNKNOWN_TO_LOW = 16,
  VERIFIED_TRANSITION_LOW_TO_UNKNOWN = 17,
  VERIFIED_TRANSITION_NONE_TO_LOW = 18,
  VERIFIED_TRANSITION_NONE_TO_UNKNOWN = 19,
  GROUP_CREATE = 20,
  GROUP_CHANGE_SUBJECT = 21,
  GROUP_CHANGE_ICON = 22,
  GROUP_CHANGE_INVITE_LINK = 23,
  GROUP_CHANGE_DESCRIPTION = 24,
  GROUP_CHANGE_RESTRICT = 25,
  GROUP_CHANGE_ANNOUNCE = 26,
  GROUP_PARTICIPANT_ADD = 27,
  GROUP_PARTICIPANT_REMOVE = 28,
  GROUP_PARTICIPANT_PROMOTE = 29,
  GROUP_PARTICIPANT_DEMOTE = 30,
  GROUP_PARTICIPANT_INVITE = 31,
  GROUP_PARTICIPANT_LEAVE = 32,
  GROUP_PARTICIPANT_CHANGE_NUMBER = 33,
  BROADCAST_CREATE = 34,
  BROADCAST_ADD = 35,
  BROADCAST_REMOVE = 36,
  GENERIC_NOTIFICATION = 37,
  E2E_IDENTITY_CHANGED = 38,
  E2E_ENCRYPTED = 39,
  CALL_MISSED_VOICE = 40,
  CALL_MISSED_VIDEO = 41,
  INDIVIDUAL_CHANGE_NUMBER = 42,
  GROUP_DELETE = 43,
  GROUP_ANNOUNCE_MODE_MESSAGE_BOUNCE = 44,
  CALL_MISSED_GROUP_VOICE = 45,
  CALL_MISSED_GROUP_VIDEO = 46,
  PAYMENT_CIPHERTEXT = 47,
  PAYMENT_FUTUREPROOF = 48,
  PAYMENT_TRANSACTION_STATUS_UPDATE_FAILED = 49,
  PAYMENT_TRANSACTION_STATUS_UPDATE_REFUNDED = 50,
  PAYMENT_TRANSACTION_STATUS_UPDATE_REFUND_FAILED = 51,
  PAYMENT_TRANSACTION_STATUS_RECEIVER_PENDING_SETUP = 52,
  PAYMENT_TRANSACTION_STATUS_RECEIVER_SUCCESS_AFTER_HICCUP = 53,
  PAYMENT_ACTION_ACCOUNT_SETUP_REMINDER = 54,
  PAYMENT_ACTION_SEND_PAYMENT_REMINDER = 55,
  PAYMENT_ACTION_SEND_PAYMENT_INVITATION = 56,
  PAYMENT_ACTION_REQUEST_DECLINED = 57,
  PAYMENT_ACTION_REQUEST_EXPIRED = 58,
  PAYMENT_ACTION_REQUEST_CANCELLED = 59,
  BIZ_VERIFIED_TRANSITION_TOP_TO_BOTTOM = 60,
  BIZ_VERIFIED_TRANSITION_BOTTOM_TO_TOP = 61,
  BIZ_INTRO_TOP = 62,
  BIZ_INTRO_BOTTOM = 63,
  BIZ_NAME_CHANGE = 64,
  BIZ_MOVE_TO_CONSUMER_APP = 65,
  BIZ_TWO_TIER_MIGRATION_TOP = 66,
  BIZ_TWO_TIER_MIGRATION_BOTTOM = 67,
  OVERSIZED = 68,
  GROUP_CHANGE_NO_FREQUENTLY_FORWARDED = 69,
  GROUP_V4_ADD_INVITE_SENT = 70,
  GROUP_PARTICIPANT_ADD_REQUEST_JOIN = 71,
  CHANGE_EPHEMERAL_SETTING = 72,
  E2E_DEVICE_CHANGED = 73,
  VIEWED_ONCE = 74,
  E2E_ENCRYPTED_NOW = 75,
  BLUE_MSG_BSP_FB_TO_BSP_PREMISE = 76,
  BLUE_MSG_BSP_FB_TO_SELF_FB = 77,
  BLUE_MSG_BSP_FB_TO_SELF_PREMISE = 78,
  BLUE_MSG_BSP_FB_UNVERIFIED = 79,
  BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED = 80,
  BLUE_MSG_BSP_FB_VERIFIED = 81,
  BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED = 82,
  BLUE_MSG_BSP_PREMISE_TO_SELF_PREMISE = 83,
  BLUE_MSG_BSP_PREMISE_UNVERIFIED = 84,
  BLUE_MSG_BSP_PREMISE_UNVERIFIED_TO_SELF_PREMISE_VERIFIED = 85,
  BLUE_MSG_BSP_PREMISE_VERIFIED = 86,
  BLUE_MSG_BSP_PREMISE_VERIFIED_TO_SELF_PREMISE_UNVERIFIED = 87,
  BLUE_MSG_CONSUMER_TO_BSP_FB_UNVERIFIED = 88,
  BLUE_MSG_CONSUMER_TO_BSP_PREMISE_UNVERIFIED = 89,
  BLUE_MSG_CONSUMER_TO_SELF_FB_UNVERIFIED = 90,
  BLUE_MSG_CONSUMER_TO_SELF_PREMISE_UNVERIFIED = 91,
  BLUE_MSG_SELF_FB_TO_BSP_PREMISE = 92,
  BLUE_MSG_SELF_FB_TO_SELF_PREMISE = 93,
  BLUE_MSG_SELF_FB_UNVERIFIED = 94,
  BLUE_MSG_SELF_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED = 95,
  BLUE_MSG_SELF_FB_VERIFIED = 96,
  BLUE_MSG_SELF_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED = 97,
  BLUE_MSG_SELF_PREMISE_TO_BSP_PREMISE = 98,
  BLUE_MSG_SELF_PREMISE_UNVERIFIED = 99,
  BLUE_MSG_SELF_PREMISE_VERIFIED = 100,
  BLUE_MSG_TO_BSP_FB = 101,
  BLUE_MSG_TO_CONSUMER = 102,
  BLUE_MSG_TO_SELF_FB = 103,
  BLUE_MSG_UNVERIFIED_TO_BSP_FB_VERIFIED = 104,
  BLUE_MSG_UNVERIFIED_TO_BSP_PREMISE_VERIFIED = 105,
  BLUE_MSG_UNVERIFIED_TO_SELF_FB_VERIFIED = 106,
  BLUE_MSG_UNVERIFIED_TO_VERIFIED = 107,
  BLUE_MSG_VERIFIED_TO_BSP_FB_UNVERIFIED = 108,
  BLUE_MSG_VERIFIED_TO_BSP_PREMISE_UNVERIFIED = 109,
  BLUE_MSG_VERIFIED_TO_SELF_FB_UNVERIFIED = 110,
  BLUE_MSG_VERIFIED_TO_UNVERIFIED = 111,
  BLUE_MSG_BSP_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED = 112,
  BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_FB_VERIFIED = 113,
  BLUE_MSG_BSP_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED = 114,
  BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_FB_UNVERIFIED = 115,
  BLUE_MSG_SELF_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED = 116,
  BLUE_MSG_SELF_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED = 117,
  E2E_IDENTITY_UNAVAILABLE = 118,
  GROUP_CREATING = 119,
  GROUP_CREATE_FAILED = 120,
  GROUP_BOUNCED = 121,
  BLOCK_CONTACT = 122,
  EPHEMERAL_SETTING_NOT_APPLIED = 123,
  SYNC_FAILED = 124,
  SYNCING = 125,
  BIZ_PRIVACY_MODE_INIT_FB = 126,
  BIZ_PRIVACY_MODE_INIT_BSP = 127,
  BIZ_PRIVACY_MODE_TO_FB = 128,
  BIZ_PRIVACY_MODE_TO_BSP = 129,
  DISAPPEARING_MODE = 130,
  E2E_DEVICE_FETCH_FAILED = 131,
  ADMIN_REVOKE = 132,
  GROUP_INVITE_LINK_GROWTH_LOCKED = 133,
  COMMUNITY_LINK_PARENT_GROUP = 134,
  COMMUNITY_LINK_SIBLING_GROUP = 135,
  COMMUNITY_LINK_SUB_GROUP = 136,
  COMMUNITY_UNLINK_PARENT_GROUP = 137,
  COMMUNITY_UNLINK_SIBLING_GROUP = 138,
  COMMUNITY_UNLINK_SUB_GROUP = 139,
  GROUP_PARTICIPANT_ACCEPT = 140,
  GROUP_PARTICIPANT_LINKED_GROUP_JOIN = 141,
  COMMUNITY_CREATE = 142,
  EPHEMERAL_KEEP_IN_CHAT = 143,
  GROUP_MEMBERSHIP_JOIN_APPROVAL_REQUEST = 144,
  GROUP_MEMBERSHIP_JOIN_APPROVAL_MODE = 145,
  INTEGRITY_UNLINK_PARENT_GROUP = 146,
  COMMUNITY_PARTICIPANT_PROMOTE = 147,
  COMMUNITY_PARTICIPANT_DEMOTE = 148,
  COMMUNITY_PARENT_GROUP_DELETED = 149,
  COMMUNITY_LINK_PARENT_GROUP_MEMBERSHIP_APPROVAL = 150,
  GROUP_PARTICIPANT_JOINED_GROUP_AND_PARENT_GROUP = 151,
  MASKED_THREAD_CREATED = 152,
  MASKED_THREAD_UNMASKED = 153,
  BIZ_CHAT_ASSIGNMENT = 154,
  CHAT_PSA = 155,
  CHAT_POLL_CREATION_MESSAGE = 156,
  CAG_MASKED_THREAD_CREATED = 157,
  COMMUNITY_PARENT_GROUP_SUBJECT_CHANGED = 158,
  CAG_INVITE_AUTO_ADD = 159,
  BIZ_CHAT_ASSIGNMENT_UNASSIGN = 160,
  CAG_INVITE_AUTO_JOINED = 161,
  SCHEDULED_CALL_START_MESSAGE = 162,
  COMMUNITY_INVITE_RICH = 163,
  COMMUNITY_INVITE_AUTO_ADD_RICH = 164,
  SUB_GROUP_INVITE_RICH = 165,
  SUB_GROUP_PARTICIPANT_ADD_RICH = 166,
  COMMUNITY_LINK_PARENT_GROUP_RICH = 167,
  COMMUNITY_PARTICIPANT_ADD_RICH = 168,
  SILENCED_UNKNOWN_CALLER_AUDIO = 169,
  SILENCED_UNKNOWN_CALLER_VIDEO = 170,
  GROUP_MEMBER_ADD_MODE = 171,
  GROUP_MEMBERSHIP_JOIN_APPROVAL_REQUEST_NON_ADMIN_ADD = 172,
  COMMUNITY_CHANGE_DESCRIPTION = 173,
  SENDER_INVITE = 174,
  RECEIVER_INVITE = 175,
  COMMUNITY_ALLOW_MEMBER_ADDED_GROUPS = 176,
  PINNED_MESSAGE_IN_CHAT = 177,
  PAYMENT_INVITE_SETUP_INVITER = 178,
  PAYMENT_INVITE_SETUP_INVITEE_RECEIVE_ONLY = 179,
  PAYMENT_INVITE_SETUP_INVITEE_SEND_AND_RECEIVE = 180,
  LINKED_GROUP_CALL_START = 181,
  REPORT_TO_ADMIN_ENABLED_STATUS = 182,
  EMPTY_SUBGROUP_CREATE = 183,
  SCHEDULED_CALL_CANCEL = 184,
  SUBGROUP_ADMIN_TRIGGERED_AUTO_ADD_RICH = 185,
  GROUP_CHANGE_RECENT_HISTORY_SHARING = 186,
  PAID_MESSAGE_SERVER_CAMPAIGN_ID = 187,
  GENERAL_CHAT_CREATE = 188,
  GENERAL_CHAT_ADD = 189,
  GENERAL_CHAT_AUTO_ADD_DISABLED = 190,
  SUGGESTED_SUBGROUP_ANNOUNCE = 191,
  BIZ_BOT_1P_MESSAGING_ENABLED = 192,
  CHANGE_USERNAME = 193,
  BIZ_COEX_PRIVACY_INIT_SELF = 194,
  BIZ_COEX_PRIVACY_TRANSITION_SELF = 195,
  SUPPORT_AI_EDUCATION = 196,
  BIZ_BOT_3P_MESSAGING_ENABLED = 197,
  REMINDER_SETUP_MESSAGE = 198,
  REMINDER_SENT_MESSAGE = 199,
  REMINDER_CANCEL_MESSAGE = 200,
  BIZ_COEX_PRIVACY_INIT = 201,
  BIZ_COEX_PRIVACY_TRANSITION = 202,
  GROUP_DEACTIVATED = 203,
  COMMUNITY_DEACTIVATE_SIBLING_GROUP = 204,
  EVENT_UPDATED = 205,
  EVENT_CANCELED = 206,
  COMMUNITY_OWNER_UPDATED = 207,
  COMMUNITY_SUB_GROUP_VISIBILITY_HIDDEN = 208,
  CAPI_GROUP_NE2EE_SYSTEM_MESSAGE = 209,
  STATUS_MENTION = 210,
  USER_CONTROLS_SYSTEM_MESSAGE = 211,
  SUPPORT_SYSTEM_MESSAGE = 212,
  CHANGE_LID = 213,
  BIZ_CUSTOMER_3PD_DATA_SHARING_OPT_IN_MESSAGE = 214,
  BIZ_CUSTOMER_3PD_DATA_SHARING_OPT_OUT_MESSAGE = 215,
  CHANGE_LIMIT_SHARING = 216,
  GROUP_MEMBER_LINK_MODE = 217,
  BIZ_AUTOMATICALLY_LABELED_CHAT_SYSTEM_MESSAGE = 218,
  UNRECOGNIZED = -1,
}

export function webMessageInfo_StubTypeFromJSON(object: any): WebMessageInfo_StubType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return WebMessageInfo_StubType.UNKNOWN;
    case 1:
    case "REVOKE":
      return WebMessageInfo_StubType.REVOKE;
    case 2:
    case "CIPHERTEXT":
      return WebMessageInfo_StubType.CIPHERTEXT;
    case 3:
    case "FUTUREPROOF":
      return WebMessageInfo_StubType.FUTUREPROOF;
    case 4:
    case "NON_VERIFIED_TRANSITION":
      return WebMessageInfo_StubType.NON_VERIFIED_TRANSITION;
    case 5:
    case "UNVERIFIED_TRANSITION":
      return WebMessageInfo_StubType.UNVERIFIED_TRANSITION;
    case 6:
    case "VERIFIED_TRANSITION":
      return WebMessageInfo_StubType.VERIFIED_TRANSITION;
    case 7:
    case "VERIFIED_LOW_UNKNOWN":
      return WebMessageInfo_StubType.VERIFIED_LOW_UNKNOWN;
    case 8:
    case "VERIFIED_HIGH":
      return WebMessageInfo_StubType.VERIFIED_HIGH;
    case 9:
    case "VERIFIED_INITIAL_UNKNOWN":
      return WebMessageInfo_StubType.VERIFIED_INITIAL_UNKNOWN;
    case 10:
    case "VERIFIED_INITIAL_LOW":
      return WebMessageInfo_StubType.VERIFIED_INITIAL_LOW;
    case 11:
    case "VERIFIED_INITIAL_HIGH":
      return WebMessageInfo_StubType.VERIFIED_INITIAL_HIGH;
    case 12:
    case "VERIFIED_TRANSITION_ANY_TO_NONE":
      return WebMessageInfo_StubType.VERIFIED_TRANSITION_ANY_TO_NONE;
    case 13:
    case "VERIFIED_TRANSITION_ANY_TO_HIGH":
      return WebMessageInfo_StubType.VERIFIED_TRANSITION_ANY_TO_HIGH;
    case 14:
    case "VERIFIED_TRANSITION_HIGH_TO_LOW":
      return WebMessageInfo_StubType.VERIFIED_TRANSITION_HIGH_TO_LOW;
    case 15:
    case "VERIFIED_TRANSITION_HIGH_TO_UNKNOWN":
      return WebMessageInfo_StubType.VERIFIED_TRANSITION_HIGH_TO_UNKNOWN;
    case 16:
    case "VERIFIED_TRANSITION_UNKNOWN_TO_LOW":
      return WebMessageInfo_StubType.VERIFIED_TRANSITION_UNKNOWN_TO_LOW;
    case 17:
    case "VERIFIED_TRANSITION_LOW_TO_UNKNOWN":
      return WebMessageInfo_StubType.VERIFIED_TRANSITION_LOW_TO_UNKNOWN;
    case 18:
    case "VERIFIED_TRANSITION_NONE_TO_LOW":
      return WebMessageInfo_StubType.VERIFIED_TRANSITION_NONE_TO_LOW;
    case 19:
    case "VERIFIED_TRANSITION_NONE_TO_UNKNOWN":
      return WebMessageInfo_StubType.VERIFIED_TRANSITION_NONE_TO_UNKNOWN;
    case 20:
    case "GROUP_CREATE":
      return WebMessageInfo_StubType.GROUP_CREATE;
    case 21:
    case "GROUP_CHANGE_SUBJECT":
      return WebMessageInfo_StubType.GROUP_CHANGE_SUBJECT;
    case 22:
    case "GROUP_CHANGE_ICON":
      return WebMessageInfo_StubType.GROUP_CHANGE_ICON;
    case 23:
    case "GROUP_CHANGE_INVITE_LINK":
      return WebMessageInfo_StubType.GROUP_CHANGE_INVITE_LINK;
    case 24:
    case "GROUP_CHANGE_DESCRIPTION":
      return WebMessageInfo_StubType.GROUP_CHANGE_DESCRIPTION;
    case 25:
    case "GROUP_CHANGE_RESTRICT":
      return WebMessageInfo_StubType.GROUP_CHANGE_RESTRICT;
    case 26:
    case "GROUP_CHANGE_ANNOUNCE":
      return WebMessageInfo_StubType.GROUP_CHANGE_ANNOUNCE;
    case 27:
    case "GROUP_PARTICIPANT_ADD":
      return WebMessageInfo_StubType.GROUP_PARTICIPANT_ADD;
    case 28:
    case "GROUP_PARTICIPANT_REMOVE":
      return WebMessageInfo_StubType.GROUP_PARTICIPANT_REMOVE;
    case 29:
    case "GROUP_PARTICIPANT_PROMOTE":
      return WebMessageInfo_StubType.GROUP_PARTICIPANT_PROMOTE;
    case 30:
    case "GROUP_PARTICIPANT_DEMOTE":
      return WebMessageInfo_StubType.GROUP_PARTICIPANT_DEMOTE;
    case 31:
    case "GROUP_PARTICIPANT_INVITE":
      return WebMessageInfo_StubType.GROUP_PARTICIPANT_INVITE;
    case 32:
    case "GROUP_PARTICIPANT_LEAVE":
      return WebMessageInfo_StubType.GROUP_PARTICIPANT_LEAVE;
    case 33:
    case "GROUP_PARTICIPANT_CHANGE_NUMBER":
      return WebMessageInfo_StubType.GROUP_PARTICIPANT_CHANGE_NUMBER;
    case 34:
    case "BROADCAST_CREATE":
      return WebMessageInfo_StubType.BROADCAST_CREATE;
    case 35:
    case "BROADCAST_ADD":
      return WebMessageInfo_StubType.BROADCAST_ADD;
    case 36:
    case "BROADCAST_REMOVE":
      return WebMessageInfo_StubType.BROADCAST_REMOVE;
    case 37:
    case "GENERIC_NOTIFICATION":
      return WebMessageInfo_StubType.GENERIC_NOTIFICATION;
    case 38:
    case "E2E_IDENTITY_CHANGED":
      return WebMessageInfo_StubType.E2E_IDENTITY_CHANGED;
    case 39:
    case "E2E_ENCRYPTED":
      return WebMessageInfo_StubType.E2E_ENCRYPTED;
    case 40:
    case "CALL_MISSED_VOICE":
      return WebMessageInfo_StubType.CALL_MISSED_VOICE;
    case 41:
    case "CALL_MISSED_VIDEO":
      return WebMessageInfo_StubType.CALL_MISSED_VIDEO;
    case 42:
    case "INDIVIDUAL_CHANGE_NUMBER":
      return WebMessageInfo_StubType.INDIVIDUAL_CHANGE_NUMBER;
    case 43:
    case "GROUP_DELETE":
      return WebMessageInfo_StubType.GROUP_DELETE;
    case 44:
    case "GROUP_ANNOUNCE_MODE_MESSAGE_BOUNCE":
      return WebMessageInfo_StubType.GROUP_ANNOUNCE_MODE_MESSAGE_BOUNCE;
    case 45:
    case "CALL_MISSED_GROUP_VOICE":
      return WebMessageInfo_StubType.CALL_MISSED_GROUP_VOICE;
    case 46:
    case "CALL_MISSED_GROUP_VIDEO":
      return WebMessageInfo_StubType.CALL_MISSED_GROUP_VIDEO;
    case 47:
    case "PAYMENT_CIPHERTEXT":
      return WebMessageInfo_StubType.PAYMENT_CIPHERTEXT;
    case 48:
    case "PAYMENT_FUTUREPROOF":
      return WebMessageInfo_StubType.PAYMENT_FUTUREPROOF;
    case 49:
    case "PAYMENT_TRANSACTION_STATUS_UPDATE_FAILED":
      return WebMessageInfo_StubType.PAYMENT_TRANSACTION_STATUS_UPDATE_FAILED;
    case 50:
    case "PAYMENT_TRANSACTION_STATUS_UPDATE_REFUNDED":
      return WebMessageInfo_StubType.PAYMENT_TRANSACTION_STATUS_UPDATE_REFUNDED;
    case 51:
    case "PAYMENT_TRANSACTION_STATUS_UPDATE_REFUND_FAILED":
      return WebMessageInfo_StubType.PAYMENT_TRANSACTION_STATUS_UPDATE_REFUND_FAILED;
    case 52:
    case "PAYMENT_TRANSACTION_STATUS_RECEIVER_PENDING_SETUP":
      return WebMessageInfo_StubType.PAYMENT_TRANSACTION_STATUS_RECEIVER_PENDING_SETUP;
    case 53:
    case "PAYMENT_TRANSACTION_STATUS_RECEIVER_SUCCESS_AFTER_HICCUP":
      return WebMessageInfo_StubType.PAYMENT_TRANSACTION_STATUS_RECEIVER_SUCCESS_AFTER_HICCUP;
    case 54:
    case "PAYMENT_ACTION_ACCOUNT_SETUP_REMINDER":
      return WebMessageInfo_StubType.PAYMENT_ACTION_ACCOUNT_SETUP_REMINDER;
    case 55:
    case "PAYMENT_ACTION_SEND_PAYMENT_REMINDER":
      return WebMessageInfo_StubType.PAYMENT_ACTION_SEND_PAYMENT_REMINDER;
    case 56:
    case "PAYMENT_ACTION_SEND_PAYMENT_INVITATION":
      return WebMessageInfo_StubType.PAYMENT_ACTION_SEND_PAYMENT_INVITATION;
    case 57:
    case "PAYMENT_ACTION_REQUEST_DECLINED":
      return WebMessageInfo_StubType.PAYMENT_ACTION_REQUEST_DECLINED;
    case 58:
    case "PAYMENT_ACTION_REQUEST_EXPIRED":
      return WebMessageInfo_StubType.PAYMENT_ACTION_REQUEST_EXPIRED;
    case 59:
    case "PAYMENT_ACTION_REQUEST_CANCELLED":
      return WebMessageInfo_StubType.PAYMENT_ACTION_REQUEST_CANCELLED;
    case 60:
    case "BIZ_VERIFIED_TRANSITION_TOP_TO_BOTTOM":
      return WebMessageInfo_StubType.BIZ_VERIFIED_TRANSITION_TOP_TO_BOTTOM;
    case 61:
    case "BIZ_VERIFIED_TRANSITION_BOTTOM_TO_TOP":
      return WebMessageInfo_StubType.BIZ_VERIFIED_TRANSITION_BOTTOM_TO_TOP;
    case 62:
    case "BIZ_INTRO_TOP":
      return WebMessageInfo_StubType.BIZ_INTRO_TOP;
    case 63:
    case "BIZ_INTRO_BOTTOM":
      return WebMessageInfo_StubType.BIZ_INTRO_BOTTOM;
    case 64:
    case "BIZ_NAME_CHANGE":
      return WebMessageInfo_StubType.BIZ_NAME_CHANGE;
    case 65:
    case "BIZ_MOVE_TO_CONSUMER_APP":
      return WebMessageInfo_StubType.BIZ_MOVE_TO_CONSUMER_APP;
    case 66:
    case "BIZ_TWO_TIER_MIGRATION_TOP":
      return WebMessageInfo_StubType.BIZ_TWO_TIER_MIGRATION_TOP;
    case 67:
    case "BIZ_TWO_TIER_MIGRATION_BOTTOM":
      return WebMessageInfo_StubType.BIZ_TWO_TIER_MIGRATION_BOTTOM;
    case 68:
    case "OVERSIZED":
      return WebMessageInfo_StubType.OVERSIZED;
    case 69:
    case "GROUP_CHANGE_NO_FREQUENTLY_FORWARDED":
      return WebMessageInfo_StubType.GROUP_CHANGE_NO_FREQUENTLY_FORWARDED;
    case 70:
    case "GROUP_V4_ADD_INVITE_SENT":
      return WebMessageInfo_StubType.GROUP_V4_ADD_INVITE_SENT;
    case 71:
    case "GROUP_PARTICIPANT_ADD_REQUEST_JOIN":
      return WebMessageInfo_StubType.GROUP_PARTICIPANT_ADD_REQUEST_JOIN;
    case 72:
    case "CHANGE_EPHEMERAL_SETTING":
      return WebMessageInfo_StubType.CHANGE_EPHEMERAL_SETTING;
    case 73:
    case "E2E_DEVICE_CHANGED":
      return WebMessageInfo_StubType.E2E_DEVICE_CHANGED;
    case 74:
    case "VIEWED_ONCE":
      return WebMessageInfo_StubType.VIEWED_ONCE;
    case 75:
    case "E2E_ENCRYPTED_NOW":
      return WebMessageInfo_StubType.E2E_ENCRYPTED_NOW;
    case 76:
    case "BLUE_MSG_BSP_FB_TO_BSP_PREMISE":
      return WebMessageInfo_StubType.BLUE_MSG_BSP_FB_TO_BSP_PREMISE;
    case 77:
    case "BLUE_MSG_BSP_FB_TO_SELF_FB":
      return WebMessageInfo_StubType.BLUE_MSG_BSP_FB_TO_SELF_FB;
    case 78:
    case "BLUE_MSG_BSP_FB_TO_SELF_PREMISE":
      return WebMessageInfo_StubType.BLUE_MSG_BSP_FB_TO_SELF_PREMISE;
    case 79:
    case "BLUE_MSG_BSP_FB_UNVERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_BSP_FB_UNVERIFIED;
    case 80:
    case "BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED;
    case 81:
    case "BLUE_MSG_BSP_FB_VERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_BSP_FB_VERIFIED;
    case 82:
    case "BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED;
    case 83:
    case "BLUE_MSG_BSP_PREMISE_TO_SELF_PREMISE":
      return WebMessageInfo_StubType.BLUE_MSG_BSP_PREMISE_TO_SELF_PREMISE;
    case 84:
    case "BLUE_MSG_BSP_PREMISE_UNVERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_BSP_PREMISE_UNVERIFIED;
    case 85:
    case "BLUE_MSG_BSP_PREMISE_UNVERIFIED_TO_SELF_PREMISE_VERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_BSP_PREMISE_UNVERIFIED_TO_SELF_PREMISE_VERIFIED;
    case 86:
    case "BLUE_MSG_BSP_PREMISE_VERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_BSP_PREMISE_VERIFIED;
    case 87:
    case "BLUE_MSG_BSP_PREMISE_VERIFIED_TO_SELF_PREMISE_UNVERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_BSP_PREMISE_VERIFIED_TO_SELF_PREMISE_UNVERIFIED;
    case 88:
    case "BLUE_MSG_CONSUMER_TO_BSP_FB_UNVERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_CONSUMER_TO_BSP_FB_UNVERIFIED;
    case 89:
    case "BLUE_MSG_CONSUMER_TO_BSP_PREMISE_UNVERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_CONSUMER_TO_BSP_PREMISE_UNVERIFIED;
    case 90:
    case "BLUE_MSG_CONSUMER_TO_SELF_FB_UNVERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_CONSUMER_TO_SELF_FB_UNVERIFIED;
    case 91:
    case "BLUE_MSG_CONSUMER_TO_SELF_PREMISE_UNVERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_CONSUMER_TO_SELF_PREMISE_UNVERIFIED;
    case 92:
    case "BLUE_MSG_SELF_FB_TO_BSP_PREMISE":
      return WebMessageInfo_StubType.BLUE_MSG_SELF_FB_TO_BSP_PREMISE;
    case 93:
    case "BLUE_MSG_SELF_FB_TO_SELF_PREMISE":
      return WebMessageInfo_StubType.BLUE_MSG_SELF_FB_TO_SELF_PREMISE;
    case 94:
    case "BLUE_MSG_SELF_FB_UNVERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_SELF_FB_UNVERIFIED;
    case 95:
    case "BLUE_MSG_SELF_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_SELF_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED;
    case 96:
    case "BLUE_MSG_SELF_FB_VERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_SELF_FB_VERIFIED;
    case 97:
    case "BLUE_MSG_SELF_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_SELF_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED;
    case 98:
    case "BLUE_MSG_SELF_PREMISE_TO_BSP_PREMISE":
      return WebMessageInfo_StubType.BLUE_MSG_SELF_PREMISE_TO_BSP_PREMISE;
    case 99:
    case "BLUE_MSG_SELF_PREMISE_UNVERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_SELF_PREMISE_UNVERIFIED;
    case 100:
    case "BLUE_MSG_SELF_PREMISE_VERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_SELF_PREMISE_VERIFIED;
    case 101:
    case "BLUE_MSG_TO_BSP_FB":
      return WebMessageInfo_StubType.BLUE_MSG_TO_BSP_FB;
    case 102:
    case "BLUE_MSG_TO_CONSUMER":
      return WebMessageInfo_StubType.BLUE_MSG_TO_CONSUMER;
    case 103:
    case "BLUE_MSG_TO_SELF_FB":
      return WebMessageInfo_StubType.BLUE_MSG_TO_SELF_FB;
    case 104:
    case "BLUE_MSG_UNVERIFIED_TO_BSP_FB_VERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_UNVERIFIED_TO_BSP_FB_VERIFIED;
    case 105:
    case "BLUE_MSG_UNVERIFIED_TO_BSP_PREMISE_VERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_UNVERIFIED_TO_BSP_PREMISE_VERIFIED;
    case 106:
    case "BLUE_MSG_UNVERIFIED_TO_SELF_FB_VERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_UNVERIFIED_TO_SELF_FB_VERIFIED;
    case 107:
    case "BLUE_MSG_UNVERIFIED_TO_VERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_UNVERIFIED_TO_VERIFIED;
    case 108:
    case "BLUE_MSG_VERIFIED_TO_BSP_FB_UNVERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_VERIFIED_TO_BSP_FB_UNVERIFIED;
    case 109:
    case "BLUE_MSG_VERIFIED_TO_BSP_PREMISE_UNVERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_VERIFIED_TO_BSP_PREMISE_UNVERIFIED;
    case 110:
    case "BLUE_MSG_VERIFIED_TO_SELF_FB_UNVERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_VERIFIED_TO_SELF_FB_UNVERIFIED;
    case 111:
    case "BLUE_MSG_VERIFIED_TO_UNVERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_VERIFIED_TO_UNVERIFIED;
    case 112:
    case "BLUE_MSG_BSP_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_BSP_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED;
    case 113:
    case "BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_FB_VERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_FB_VERIFIED;
    case 114:
    case "BLUE_MSG_BSP_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_BSP_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED;
    case 115:
    case "BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_FB_UNVERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_FB_UNVERIFIED;
    case 116:
    case "BLUE_MSG_SELF_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_SELF_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED;
    case 117:
    case "BLUE_MSG_SELF_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED":
      return WebMessageInfo_StubType.BLUE_MSG_SELF_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED;
    case 118:
    case "E2E_IDENTITY_UNAVAILABLE":
      return WebMessageInfo_StubType.E2E_IDENTITY_UNAVAILABLE;
    case 119:
    case "GROUP_CREATING":
      return WebMessageInfo_StubType.GROUP_CREATING;
    case 120:
    case "GROUP_CREATE_FAILED":
      return WebMessageInfo_StubType.GROUP_CREATE_FAILED;
    case 121:
    case "GROUP_BOUNCED":
      return WebMessageInfo_StubType.GROUP_BOUNCED;
    case 122:
    case "BLOCK_CONTACT":
      return WebMessageInfo_StubType.BLOCK_CONTACT;
    case 123:
    case "EPHEMERAL_SETTING_NOT_APPLIED":
      return WebMessageInfo_StubType.EPHEMERAL_SETTING_NOT_APPLIED;
    case 124:
    case "SYNC_FAILED":
      return WebMessageInfo_StubType.SYNC_FAILED;
    case 125:
    case "SYNCING":
      return WebMessageInfo_StubType.SYNCING;
    case 126:
    case "BIZ_PRIVACY_MODE_INIT_FB":
      return WebMessageInfo_StubType.BIZ_PRIVACY_MODE_INIT_FB;
    case 127:
    case "BIZ_PRIVACY_MODE_INIT_BSP":
      return WebMessageInfo_StubType.BIZ_PRIVACY_MODE_INIT_BSP;
    case 128:
    case "BIZ_PRIVACY_MODE_TO_FB":
      return WebMessageInfo_StubType.BIZ_PRIVACY_MODE_TO_FB;
    case 129:
    case "BIZ_PRIVACY_MODE_TO_BSP":
      return WebMessageInfo_StubType.BIZ_PRIVACY_MODE_TO_BSP;
    case 130:
    case "DISAPPEARING_MODE":
      return WebMessageInfo_StubType.DISAPPEARING_MODE;
    case 131:
    case "E2E_DEVICE_FETCH_FAILED":
      return WebMessageInfo_StubType.E2E_DEVICE_FETCH_FAILED;
    case 132:
    case "ADMIN_REVOKE":
      return WebMessageInfo_StubType.ADMIN_REVOKE;
    case 133:
    case "GROUP_INVITE_LINK_GROWTH_LOCKED":
      return WebMessageInfo_StubType.GROUP_INVITE_LINK_GROWTH_LOCKED;
    case 134:
    case "COMMUNITY_LINK_PARENT_GROUP":
      return WebMessageInfo_StubType.COMMUNITY_LINK_PARENT_GROUP;
    case 135:
    case "COMMUNITY_LINK_SIBLING_GROUP":
      return WebMessageInfo_StubType.COMMUNITY_LINK_SIBLING_GROUP;
    case 136:
    case "COMMUNITY_LINK_SUB_GROUP":
      return WebMessageInfo_StubType.COMMUNITY_LINK_SUB_GROUP;
    case 137:
    case "COMMUNITY_UNLINK_PARENT_GROUP":
      return WebMessageInfo_StubType.COMMUNITY_UNLINK_PARENT_GROUP;
    case 138:
    case "COMMUNITY_UNLINK_SIBLING_GROUP":
      return WebMessageInfo_StubType.COMMUNITY_UNLINK_SIBLING_GROUP;
    case 139:
    case "COMMUNITY_UNLINK_SUB_GROUP":
      return WebMessageInfo_StubType.COMMUNITY_UNLINK_SUB_GROUP;
    case 140:
    case "GROUP_PARTICIPANT_ACCEPT":
      return WebMessageInfo_StubType.GROUP_PARTICIPANT_ACCEPT;
    case 141:
    case "GROUP_PARTICIPANT_LINKED_GROUP_JOIN":
      return WebMessageInfo_StubType.GROUP_PARTICIPANT_LINKED_GROUP_JOIN;
    case 142:
    case "COMMUNITY_CREATE":
      return WebMessageInfo_StubType.COMMUNITY_CREATE;
    case 143:
    case "EPHEMERAL_KEEP_IN_CHAT":
      return WebMessageInfo_StubType.EPHEMERAL_KEEP_IN_CHAT;
    case 144:
    case "GROUP_MEMBERSHIP_JOIN_APPROVAL_REQUEST":
      return WebMessageInfo_StubType.GROUP_MEMBERSHIP_JOIN_APPROVAL_REQUEST;
    case 145:
    case "GROUP_MEMBERSHIP_JOIN_APPROVAL_MODE":
      return WebMessageInfo_StubType.GROUP_MEMBERSHIP_JOIN_APPROVAL_MODE;
    case 146:
    case "INTEGRITY_UNLINK_PARENT_GROUP":
      return WebMessageInfo_StubType.INTEGRITY_UNLINK_PARENT_GROUP;
    case 147:
    case "COMMUNITY_PARTICIPANT_PROMOTE":
      return WebMessageInfo_StubType.COMMUNITY_PARTICIPANT_PROMOTE;
    case 148:
    case "COMMUNITY_PARTICIPANT_DEMOTE":
      return WebMessageInfo_StubType.COMMUNITY_PARTICIPANT_DEMOTE;
    case 149:
    case "COMMUNITY_PARENT_GROUP_DELETED":
      return WebMessageInfo_StubType.COMMUNITY_PARENT_GROUP_DELETED;
    case 150:
    case "COMMUNITY_LINK_PARENT_GROUP_MEMBERSHIP_APPROVAL":
      return WebMessageInfo_StubType.COMMUNITY_LINK_PARENT_GROUP_MEMBERSHIP_APPROVAL;
    case 151:
    case "GROUP_PARTICIPANT_JOINED_GROUP_AND_PARENT_GROUP":
      return WebMessageInfo_StubType.GROUP_PARTICIPANT_JOINED_GROUP_AND_PARENT_GROUP;
    case 152:
    case "MASKED_THREAD_CREATED":
      return WebMessageInfo_StubType.MASKED_THREAD_CREATED;
    case 153:
    case "MASKED_THREAD_UNMASKED":
      return WebMessageInfo_StubType.MASKED_THREAD_UNMASKED;
    case 154:
    case "BIZ_CHAT_ASSIGNMENT":
      return WebMessageInfo_StubType.BIZ_CHAT_ASSIGNMENT;
    case 155:
    case "CHAT_PSA":
      return WebMessageInfo_StubType.CHAT_PSA;
    case 156:
    case "CHAT_POLL_CREATION_MESSAGE":
      return WebMessageInfo_StubType.CHAT_POLL_CREATION_MESSAGE;
    case 157:
    case "CAG_MASKED_THREAD_CREATED":
      return WebMessageInfo_StubType.CAG_MASKED_THREAD_CREATED;
    case 158:
    case "COMMUNITY_PARENT_GROUP_SUBJECT_CHANGED":
      return WebMessageInfo_StubType.COMMUNITY_PARENT_GROUP_SUBJECT_CHANGED;
    case 159:
    case "CAG_INVITE_AUTO_ADD":
      return WebMessageInfo_StubType.CAG_INVITE_AUTO_ADD;
    case 160:
    case "BIZ_CHAT_ASSIGNMENT_UNASSIGN":
      return WebMessageInfo_StubType.BIZ_CHAT_ASSIGNMENT_UNASSIGN;
    case 161:
    case "CAG_INVITE_AUTO_JOINED":
      return WebMessageInfo_StubType.CAG_INVITE_AUTO_JOINED;
    case 162:
    case "SCHEDULED_CALL_START_MESSAGE":
      return WebMessageInfo_StubType.SCHEDULED_CALL_START_MESSAGE;
    case 163:
    case "COMMUNITY_INVITE_RICH":
      return WebMessageInfo_StubType.COMMUNITY_INVITE_RICH;
    case 164:
    case "COMMUNITY_INVITE_AUTO_ADD_RICH":
      return WebMessageInfo_StubType.COMMUNITY_INVITE_AUTO_ADD_RICH;
    case 165:
    case "SUB_GROUP_INVITE_RICH":
      return WebMessageInfo_StubType.SUB_GROUP_INVITE_RICH;
    case 166:
    case "SUB_GROUP_PARTICIPANT_ADD_RICH":
      return WebMessageInfo_StubType.SUB_GROUP_PARTICIPANT_ADD_RICH;
    case 167:
    case "COMMUNITY_LINK_PARENT_GROUP_RICH":
      return WebMessageInfo_StubType.COMMUNITY_LINK_PARENT_GROUP_RICH;
    case 168:
    case "COMMUNITY_PARTICIPANT_ADD_RICH":
      return WebMessageInfo_StubType.COMMUNITY_PARTICIPANT_ADD_RICH;
    case 169:
    case "SILENCED_UNKNOWN_CALLER_AUDIO":
      return WebMessageInfo_StubType.SILENCED_UNKNOWN_CALLER_AUDIO;
    case 170:
    case "SILENCED_UNKNOWN_CALLER_VIDEO":
      return WebMessageInfo_StubType.SILENCED_UNKNOWN_CALLER_VIDEO;
    case 171:
    case "GROUP_MEMBER_ADD_MODE":
      return WebMessageInfo_StubType.GROUP_MEMBER_ADD_MODE;
    case 172:
    case "GROUP_MEMBERSHIP_JOIN_APPROVAL_REQUEST_NON_ADMIN_ADD":
      return WebMessageInfo_StubType.GROUP_MEMBERSHIP_JOIN_APPROVAL_REQUEST_NON_ADMIN_ADD;
    case 173:
    case "COMMUNITY_CHANGE_DESCRIPTION":
      return WebMessageInfo_StubType.COMMUNITY_CHANGE_DESCRIPTION;
    case 174:
    case "SENDER_INVITE":
      return WebMessageInfo_StubType.SENDER_INVITE;
    case 175:
    case "RECEIVER_INVITE":
      return WebMessageInfo_StubType.RECEIVER_INVITE;
    case 176:
    case "COMMUNITY_ALLOW_MEMBER_ADDED_GROUPS":
      return WebMessageInfo_StubType.COMMUNITY_ALLOW_MEMBER_ADDED_GROUPS;
    case 177:
    case "PINNED_MESSAGE_IN_CHAT":
      return WebMessageInfo_StubType.PINNED_MESSAGE_IN_CHAT;
    case 178:
    case "PAYMENT_INVITE_SETUP_INVITER":
      return WebMessageInfo_StubType.PAYMENT_INVITE_SETUP_INVITER;
    case 179:
    case "PAYMENT_INVITE_SETUP_INVITEE_RECEIVE_ONLY":
      return WebMessageInfo_StubType.PAYMENT_INVITE_SETUP_INVITEE_RECEIVE_ONLY;
    case 180:
    case "PAYMENT_INVITE_SETUP_INVITEE_SEND_AND_RECEIVE":
      return WebMessageInfo_StubType.PAYMENT_INVITE_SETUP_INVITEE_SEND_AND_RECEIVE;
    case 181:
    case "LINKED_GROUP_CALL_START":
      return WebMessageInfo_StubType.LINKED_GROUP_CALL_START;
    case 182:
    case "REPORT_TO_ADMIN_ENABLED_STATUS":
      return WebMessageInfo_StubType.REPORT_TO_ADMIN_ENABLED_STATUS;
    case 183:
    case "EMPTY_SUBGROUP_CREATE":
      return WebMessageInfo_StubType.EMPTY_SUBGROUP_CREATE;
    case 184:
    case "SCHEDULED_CALL_CANCEL":
      return WebMessageInfo_StubType.SCHEDULED_CALL_CANCEL;
    case 185:
    case "SUBGROUP_ADMIN_TRIGGERED_AUTO_ADD_RICH":
      return WebMessageInfo_StubType.SUBGROUP_ADMIN_TRIGGERED_AUTO_ADD_RICH;
    case 186:
    case "GROUP_CHANGE_RECENT_HISTORY_SHARING":
      return WebMessageInfo_StubType.GROUP_CHANGE_RECENT_HISTORY_SHARING;
    case 187:
    case "PAID_MESSAGE_SERVER_CAMPAIGN_ID":
      return WebMessageInfo_StubType.PAID_MESSAGE_SERVER_CAMPAIGN_ID;
    case 188:
    case "GENERAL_CHAT_CREATE":
      return WebMessageInfo_StubType.GENERAL_CHAT_CREATE;
    case 189:
    case "GENERAL_CHAT_ADD":
      return WebMessageInfo_StubType.GENERAL_CHAT_ADD;
    case 190:
    case "GENERAL_CHAT_AUTO_ADD_DISABLED":
      return WebMessageInfo_StubType.GENERAL_CHAT_AUTO_ADD_DISABLED;
    case 191:
    case "SUGGESTED_SUBGROUP_ANNOUNCE":
      return WebMessageInfo_StubType.SUGGESTED_SUBGROUP_ANNOUNCE;
    case 192:
    case "BIZ_BOT_1P_MESSAGING_ENABLED":
      return WebMessageInfo_StubType.BIZ_BOT_1P_MESSAGING_ENABLED;
    case 193:
    case "CHANGE_USERNAME":
      return WebMessageInfo_StubType.CHANGE_USERNAME;
    case 194:
    case "BIZ_COEX_PRIVACY_INIT_SELF":
      return WebMessageInfo_StubType.BIZ_COEX_PRIVACY_INIT_SELF;
    case 195:
    case "BIZ_COEX_PRIVACY_TRANSITION_SELF":
      return WebMessageInfo_StubType.BIZ_COEX_PRIVACY_TRANSITION_SELF;
    case 196:
    case "SUPPORT_AI_EDUCATION":
      return WebMessageInfo_StubType.SUPPORT_AI_EDUCATION;
    case 197:
    case "BIZ_BOT_3P_MESSAGING_ENABLED":
      return WebMessageInfo_StubType.BIZ_BOT_3P_MESSAGING_ENABLED;
    case 198:
    case "REMINDER_SETUP_MESSAGE":
      return WebMessageInfo_StubType.REMINDER_SETUP_MESSAGE;
    case 199:
    case "REMINDER_SENT_MESSAGE":
      return WebMessageInfo_StubType.REMINDER_SENT_MESSAGE;
    case 200:
    case "REMINDER_CANCEL_MESSAGE":
      return WebMessageInfo_StubType.REMINDER_CANCEL_MESSAGE;
    case 201:
    case "BIZ_COEX_PRIVACY_INIT":
      return WebMessageInfo_StubType.BIZ_COEX_PRIVACY_INIT;
    case 202:
    case "BIZ_COEX_PRIVACY_TRANSITION":
      return WebMessageInfo_StubType.BIZ_COEX_PRIVACY_TRANSITION;
    case 203:
    case "GROUP_DEACTIVATED":
      return WebMessageInfo_StubType.GROUP_DEACTIVATED;
    case 204:
    case "COMMUNITY_DEACTIVATE_SIBLING_GROUP":
      return WebMessageInfo_StubType.COMMUNITY_DEACTIVATE_SIBLING_GROUP;
    case 205:
    case "EVENT_UPDATED":
      return WebMessageInfo_StubType.EVENT_UPDATED;
    case 206:
    case "EVENT_CANCELED":
      return WebMessageInfo_StubType.EVENT_CANCELED;
    case 207:
    case "COMMUNITY_OWNER_UPDATED":
      return WebMessageInfo_StubType.COMMUNITY_OWNER_UPDATED;
    case 208:
    case "COMMUNITY_SUB_GROUP_VISIBILITY_HIDDEN":
      return WebMessageInfo_StubType.COMMUNITY_SUB_GROUP_VISIBILITY_HIDDEN;
    case 209:
    case "CAPI_GROUP_NE2EE_SYSTEM_MESSAGE":
      return WebMessageInfo_StubType.CAPI_GROUP_NE2EE_SYSTEM_MESSAGE;
    case 210:
    case "STATUS_MENTION":
      return WebMessageInfo_StubType.STATUS_MENTION;
    case 211:
    case "USER_CONTROLS_SYSTEM_MESSAGE":
      return WebMessageInfo_StubType.USER_CONTROLS_SYSTEM_MESSAGE;
    case 212:
    case "SUPPORT_SYSTEM_MESSAGE":
      return WebMessageInfo_StubType.SUPPORT_SYSTEM_MESSAGE;
    case 213:
    case "CHANGE_LID":
      return WebMessageInfo_StubType.CHANGE_LID;
    case 214:
    case "BIZ_CUSTOMER_3PD_DATA_SHARING_OPT_IN_MESSAGE":
      return WebMessageInfo_StubType.BIZ_CUSTOMER_3PD_DATA_SHARING_OPT_IN_MESSAGE;
    case 215:
    case "BIZ_CUSTOMER_3PD_DATA_SHARING_OPT_OUT_MESSAGE":
      return WebMessageInfo_StubType.BIZ_CUSTOMER_3PD_DATA_SHARING_OPT_OUT_MESSAGE;
    case 216:
    case "CHANGE_LIMIT_SHARING":
      return WebMessageInfo_StubType.CHANGE_LIMIT_SHARING;
    case 217:
    case "GROUP_MEMBER_LINK_MODE":
      return WebMessageInfo_StubType.GROUP_MEMBER_LINK_MODE;
    case 218:
    case "BIZ_AUTOMATICALLY_LABELED_CHAT_SYSTEM_MESSAGE":
      return WebMessageInfo_StubType.BIZ_AUTOMATICALLY_LABELED_CHAT_SYSTEM_MESSAGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WebMessageInfo_StubType.UNRECOGNIZED;
  }
}

export function webMessageInfo_StubTypeToJSON(object: WebMessageInfo_StubType): string {
  switch (object) {
    case WebMessageInfo_StubType.UNKNOWN:
      return "UNKNOWN";
    case WebMessageInfo_StubType.REVOKE:
      return "REVOKE";
    case WebMessageInfo_StubType.CIPHERTEXT:
      return "CIPHERTEXT";
    case WebMessageInfo_StubType.FUTUREPROOF:
      return "FUTUREPROOF";
    case WebMessageInfo_StubType.NON_VERIFIED_TRANSITION:
      return "NON_VERIFIED_TRANSITION";
    case WebMessageInfo_StubType.UNVERIFIED_TRANSITION:
      return "UNVERIFIED_TRANSITION";
    case WebMessageInfo_StubType.VERIFIED_TRANSITION:
      return "VERIFIED_TRANSITION";
    case WebMessageInfo_StubType.VERIFIED_LOW_UNKNOWN:
      return "VERIFIED_LOW_UNKNOWN";
    case WebMessageInfo_StubType.VERIFIED_HIGH:
      return "VERIFIED_HIGH";
    case WebMessageInfo_StubType.VERIFIED_INITIAL_UNKNOWN:
      return "VERIFIED_INITIAL_UNKNOWN";
    case WebMessageInfo_StubType.VERIFIED_INITIAL_LOW:
      return "VERIFIED_INITIAL_LOW";
    case WebMessageInfo_StubType.VERIFIED_INITIAL_HIGH:
      return "VERIFIED_INITIAL_HIGH";
    case WebMessageInfo_StubType.VERIFIED_TRANSITION_ANY_TO_NONE:
      return "VERIFIED_TRANSITION_ANY_TO_NONE";
    case WebMessageInfo_StubType.VERIFIED_TRANSITION_ANY_TO_HIGH:
      return "VERIFIED_TRANSITION_ANY_TO_HIGH";
    case WebMessageInfo_StubType.VERIFIED_TRANSITION_HIGH_TO_LOW:
      return "VERIFIED_TRANSITION_HIGH_TO_LOW";
    case WebMessageInfo_StubType.VERIFIED_TRANSITION_HIGH_TO_UNKNOWN:
      return "VERIFIED_TRANSITION_HIGH_TO_UNKNOWN";
    case WebMessageInfo_StubType.VERIFIED_TRANSITION_UNKNOWN_TO_LOW:
      return "VERIFIED_TRANSITION_UNKNOWN_TO_LOW";
    case WebMessageInfo_StubType.VERIFIED_TRANSITION_LOW_TO_UNKNOWN:
      return "VERIFIED_TRANSITION_LOW_TO_UNKNOWN";
    case WebMessageInfo_StubType.VERIFIED_TRANSITION_NONE_TO_LOW:
      return "VERIFIED_TRANSITION_NONE_TO_LOW";
    case WebMessageInfo_StubType.VERIFIED_TRANSITION_NONE_TO_UNKNOWN:
      return "VERIFIED_TRANSITION_NONE_TO_UNKNOWN";
    case WebMessageInfo_StubType.GROUP_CREATE:
      return "GROUP_CREATE";
    case WebMessageInfo_StubType.GROUP_CHANGE_SUBJECT:
      return "GROUP_CHANGE_SUBJECT";
    case WebMessageInfo_StubType.GROUP_CHANGE_ICON:
      return "GROUP_CHANGE_ICON";
    case WebMessageInfo_StubType.GROUP_CHANGE_INVITE_LINK:
      return "GROUP_CHANGE_INVITE_LINK";
    case WebMessageInfo_StubType.GROUP_CHANGE_DESCRIPTION:
      return "GROUP_CHANGE_DESCRIPTION";
    case WebMessageInfo_StubType.GROUP_CHANGE_RESTRICT:
      return "GROUP_CHANGE_RESTRICT";
    case WebMessageInfo_StubType.GROUP_CHANGE_ANNOUNCE:
      return "GROUP_CHANGE_ANNOUNCE";
    case WebMessageInfo_StubType.GROUP_PARTICIPANT_ADD:
      return "GROUP_PARTICIPANT_ADD";
    case WebMessageInfo_StubType.GROUP_PARTICIPANT_REMOVE:
      return "GROUP_PARTICIPANT_REMOVE";
    case WebMessageInfo_StubType.GROUP_PARTICIPANT_PROMOTE:
      return "GROUP_PARTICIPANT_PROMOTE";
    case WebMessageInfo_StubType.GROUP_PARTICIPANT_DEMOTE:
      return "GROUP_PARTICIPANT_DEMOTE";
    case WebMessageInfo_StubType.GROUP_PARTICIPANT_INVITE:
      return "GROUP_PARTICIPANT_INVITE";
    case WebMessageInfo_StubType.GROUP_PARTICIPANT_LEAVE:
      return "GROUP_PARTICIPANT_LEAVE";
    case WebMessageInfo_StubType.GROUP_PARTICIPANT_CHANGE_NUMBER:
      return "GROUP_PARTICIPANT_CHANGE_NUMBER";
    case WebMessageInfo_StubType.BROADCAST_CREATE:
      return "BROADCAST_CREATE";
    case WebMessageInfo_StubType.BROADCAST_ADD:
      return "BROADCAST_ADD";
    case WebMessageInfo_StubType.BROADCAST_REMOVE:
      return "BROADCAST_REMOVE";
    case WebMessageInfo_StubType.GENERIC_NOTIFICATION:
      return "GENERIC_NOTIFICATION";
    case WebMessageInfo_StubType.E2E_IDENTITY_CHANGED:
      return "E2E_IDENTITY_CHANGED";
    case WebMessageInfo_StubType.E2E_ENCRYPTED:
      return "E2E_ENCRYPTED";
    case WebMessageInfo_StubType.CALL_MISSED_VOICE:
      return "CALL_MISSED_VOICE";
    case WebMessageInfo_StubType.CALL_MISSED_VIDEO:
      return "CALL_MISSED_VIDEO";
    case WebMessageInfo_StubType.INDIVIDUAL_CHANGE_NUMBER:
      return "INDIVIDUAL_CHANGE_NUMBER";
    case WebMessageInfo_StubType.GROUP_DELETE:
      return "GROUP_DELETE";
    case WebMessageInfo_StubType.GROUP_ANNOUNCE_MODE_MESSAGE_BOUNCE:
      return "GROUP_ANNOUNCE_MODE_MESSAGE_BOUNCE";
    case WebMessageInfo_StubType.CALL_MISSED_GROUP_VOICE:
      return "CALL_MISSED_GROUP_VOICE";
    case WebMessageInfo_StubType.CALL_MISSED_GROUP_VIDEO:
      return "CALL_MISSED_GROUP_VIDEO";
    case WebMessageInfo_StubType.PAYMENT_CIPHERTEXT:
      return "PAYMENT_CIPHERTEXT";
    case WebMessageInfo_StubType.PAYMENT_FUTUREPROOF:
      return "PAYMENT_FUTUREPROOF";
    case WebMessageInfo_StubType.PAYMENT_TRANSACTION_STATUS_UPDATE_FAILED:
      return "PAYMENT_TRANSACTION_STATUS_UPDATE_FAILED";
    case WebMessageInfo_StubType.PAYMENT_TRANSACTION_STATUS_UPDATE_REFUNDED:
      return "PAYMENT_TRANSACTION_STATUS_UPDATE_REFUNDED";
    case WebMessageInfo_StubType.PAYMENT_TRANSACTION_STATUS_UPDATE_REFUND_FAILED:
      return "PAYMENT_TRANSACTION_STATUS_UPDATE_REFUND_FAILED";
    case WebMessageInfo_StubType.PAYMENT_TRANSACTION_STATUS_RECEIVER_PENDING_SETUP:
      return "PAYMENT_TRANSACTION_STATUS_RECEIVER_PENDING_SETUP";
    case WebMessageInfo_StubType.PAYMENT_TRANSACTION_STATUS_RECEIVER_SUCCESS_AFTER_HICCUP:
      return "PAYMENT_TRANSACTION_STATUS_RECEIVER_SUCCESS_AFTER_HICCUP";
    case WebMessageInfo_StubType.PAYMENT_ACTION_ACCOUNT_SETUP_REMINDER:
      return "PAYMENT_ACTION_ACCOUNT_SETUP_REMINDER";
    case WebMessageInfo_StubType.PAYMENT_ACTION_SEND_PAYMENT_REMINDER:
      return "PAYMENT_ACTION_SEND_PAYMENT_REMINDER";
    case WebMessageInfo_StubType.PAYMENT_ACTION_SEND_PAYMENT_INVITATION:
      return "PAYMENT_ACTION_SEND_PAYMENT_INVITATION";
    case WebMessageInfo_StubType.PAYMENT_ACTION_REQUEST_DECLINED:
      return "PAYMENT_ACTION_REQUEST_DECLINED";
    case WebMessageInfo_StubType.PAYMENT_ACTION_REQUEST_EXPIRED:
      return "PAYMENT_ACTION_REQUEST_EXPIRED";
    case WebMessageInfo_StubType.PAYMENT_ACTION_REQUEST_CANCELLED:
      return "PAYMENT_ACTION_REQUEST_CANCELLED";
    case WebMessageInfo_StubType.BIZ_VERIFIED_TRANSITION_TOP_TO_BOTTOM:
      return "BIZ_VERIFIED_TRANSITION_TOP_TO_BOTTOM";
    case WebMessageInfo_StubType.BIZ_VERIFIED_TRANSITION_BOTTOM_TO_TOP:
      return "BIZ_VERIFIED_TRANSITION_BOTTOM_TO_TOP";
    case WebMessageInfo_StubType.BIZ_INTRO_TOP:
      return "BIZ_INTRO_TOP";
    case WebMessageInfo_StubType.BIZ_INTRO_BOTTOM:
      return "BIZ_INTRO_BOTTOM";
    case WebMessageInfo_StubType.BIZ_NAME_CHANGE:
      return "BIZ_NAME_CHANGE";
    case WebMessageInfo_StubType.BIZ_MOVE_TO_CONSUMER_APP:
      return "BIZ_MOVE_TO_CONSUMER_APP";
    case WebMessageInfo_StubType.BIZ_TWO_TIER_MIGRATION_TOP:
      return "BIZ_TWO_TIER_MIGRATION_TOP";
    case WebMessageInfo_StubType.BIZ_TWO_TIER_MIGRATION_BOTTOM:
      return "BIZ_TWO_TIER_MIGRATION_BOTTOM";
    case WebMessageInfo_StubType.OVERSIZED:
      return "OVERSIZED";
    case WebMessageInfo_StubType.GROUP_CHANGE_NO_FREQUENTLY_FORWARDED:
      return "GROUP_CHANGE_NO_FREQUENTLY_FORWARDED";
    case WebMessageInfo_StubType.GROUP_V4_ADD_INVITE_SENT:
      return "GROUP_V4_ADD_INVITE_SENT";
    case WebMessageInfo_StubType.GROUP_PARTICIPANT_ADD_REQUEST_JOIN:
      return "GROUP_PARTICIPANT_ADD_REQUEST_JOIN";
    case WebMessageInfo_StubType.CHANGE_EPHEMERAL_SETTING:
      return "CHANGE_EPHEMERAL_SETTING";
    case WebMessageInfo_StubType.E2E_DEVICE_CHANGED:
      return "E2E_DEVICE_CHANGED";
    case WebMessageInfo_StubType.VIEWED_ONCE:
      return "VIEWED_ONCE";
    case WebMessageInfo_StubType.E2E_ENCRYPTED_NOW:
      return "E2E_ENCRYPTED_NOW";
    case WebMessageInfo_StubType.BLUE_MSG_BSP_FB_TO_BSP_PREMISE:
      return "BLUE_MSG_BSP_FB_TO_BSP_PREMISE";
    case WebMessageInfo_StubType.BLUE_MSG_BSP_FB_TO_SELF_FB:
      return "BLUE_MSG_BSP_FB_TO_SELF_FB";
    case WebMessageInfo_StubType.BLUE_MSG_BSP_FB_TO_SELF_PREMISE:
      return "BLUE_MSG_BSP_FB_TO_SELF_PREMISE";
    case WebMessageInfo_StubType.BLUE_MSG_BSP_FB_UNVERIFIED:
      return "BLUE_MSG_BSP_FB_UNVERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED:
      return "BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_BSP_FB_VERIFIED:
      return "BLUE_MSG_BSP_FB_VERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED:
      return "BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_BSP_PREMISE_TO_SELF_PREMISE:
      return "BLUE_MSG_BSP_PREMISE_TO_SELF_PREMISE";
    case WebMessageInfo_StubType.BLUE_MSG_BSP_PREMISE_UNVERIFIED:
      return "BLUE_MSG_BSP_PREMISE_UNVERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_BSP_PREMISE_UNVERIFIED_TO_SELF_PREMISE_VERIFIED:
      return "BLUE_MSG_BSP_PREMISE_UNVERIFIED_TO_SELF_PREMISE_VERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_BSP_PREMISE_VERIFIED:
      return "BLUE_MSG_BSP_PREMISE_VERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_BSP_PREMISE_VERIFIED_TO_SELF_PREMISE_UNVERIFIED:
      return "BLUE_MSG_BSP_PREMISE_VERIFIED_TO_SELF_PREMISE_UNVERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_CONSUMER_TO_BSP_FB_UNVERIFIED:
      return "BLUE_MSG_CONSUMER_TO_BSP_FB_UNVERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_CONSUMER_TO_BSP_PREMISE_UNVERIFIED:
      return "BLUE_MSG_CONSUMER_TO_BSP_PREMISE_UNVERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_CONSUMER_TO_SELF_FB_UNVERIFIED:
      return "BLUE_MSG_CONSUMER_TO_SELF_FB_UNVERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_CONSUMER_TO_SELF_PREMISE_UNVERIFIED:
      return "BLUE_MSG_CONSUMER_TO_SELF_PREMISE_UNVERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_SELF_FB_TO_BSP_PREMISE:
      return "BLUE_MSG_SELF_FB_TO_BSP_PREMISE";
    case WebMessageInfo_StubType.BLUE_MSG_SELF_FB_TO_SELF_PREMISE:
      return "BLUE_MSG_SELF_FB_TO_SELF_PREMISE";
    case WebMessageInfo_StubType.BLUE_MSG_SELF_FB_UNVERIFIED:
      return "BLUE_MSG_SELF_FB_UNVERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_SELF_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED:
      return "BLUE_MSG_SELF_FB_UNVERIFIED_TO_SELF_PREMISE_VERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_SELF_FB_VERIFIED:
      return "BLUE_MSG_SELF_FB_VERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_SELF_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED:
      return "BLUE_MSG_SELF_FB_VERIFIED_TO_SELF_PREMISE_UNVERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_SELF_PREMISE_TO_BSP_PREMISE:
      return "BLUE_MSG_SELF_PREMISE_TO_BSP_PREMISE";
    case WebMessageInfo_StubType.BLUE_MSG_SELF_PREMISE_UNVERIFIED:
      return "BLUE_MSG_SELF_PREMISE_UNVERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_SELF_PREMISE_VERIFIED:
      return "BLUE_MSG_SELF_PREMISE_VERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_TO_BSP_FB:
      return "BLUE_MSG_TO_BSP_FB";
    case WebMessageInfo_StubType.BLUE_MSG_TO_CONSUMER:
      return "BLUE_MSG_TO_CONSUMER";
    case WebMessageInfo_StubType.BLUE_MSG_TO_SELF_FB:
      return "BLUE_MSG_TO_SELF_FB";
    case WebMessageInfo_StubType.BLUE_MSG_UNVERIFIED_TO_BSP_FB_VERIFIED:
      return "BLUE_MSG_UNVERIFIED_TO_BSP_FB_VERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_UNVERIFIED_TO_BSP_PREMISE_VERIFIED:
      return "BLUE_MSG_UNVERIFIED_TO_BSP_PREMISE_VERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_UNVERIFIED_TO_SELF_FB_VERIFIED:
      return "BLUE_MSG_UNVERIFIED_TO_SELF_FB_VERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_UNVERIFIED_TO_VERIFIED:
      return "BLUE_MSG_UNVERIFIED_TO_VERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_VERIFIED_TO_BSP_FB_UNVERIFIED:
      return "BLUE_MSG_VERIFIED_TO_BSP_FB_UNVERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_VERIFIED_TO_BSP_PREMISE_UNVERIFIED:
      return "BLUE_MSG_VERIFIED_TO_BSP_PREMISE_UNVERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_VERIFIED_TO_SELF_FB_UNVERIFIED:
      return "BLUE_MSG_VERIFIED_TO_SELF_FB_UNVERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_VERIFIED_TO_UNVERIFIED:
      return "BLUE_MSG_VERIFIED_TO_UNVERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_BSP_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED:
      return "BLUE_MSG_BSP_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_FB_VERIFIED:
      return "BLUE_MSG_BSP_FB_UNVERIFIED_TO_SELF_FB_VERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_BSP_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED:
      return "BLUE_MSG_BSP_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_FB_UNVERIFIED:
      return "BLUE_MSG_BSP_FB_VERIFIED_TO_SELF_FB_UNVERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_SELF_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED:
      return "BLUE_MSG_SELF_FB_UNVERIFIED_TO_BSP_PREMISE_VERIFIED";
    case WebMessageInfo_StubType.BLUE_MSG_SELF_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED:
      return "BLUE_MSG_SELF_FB_VERIFIED_TO_BSP_PREMISE_UNVERIFIED";
    case WebMessageInfo_StubType.E2E_IDENTITY_UNAVAILABLE:
      return "E2E_IDENTITY_UNAVAILABLE";
    case WebMessageInfo_StubType.GROUP_CREATING:
      return "GROUP_CREATING";
    case WebMessageInfo_StubType.GROUP_CREATE_FAILED:
      return "GROUP_CREATE_FAILED";
    case WebMessageInfo_StubType.GROUP_BOUNCED:
      return "GROUP_BOUNCED";
    case WebMessageInfo_StubType.BLOCK_CONTACT:
      return "BLOCK_CONTACT";
    case WebMessageInfo_StubType.EPHEMERAL_SETTING_NOT_APPLIED:
      return "EPHEMERAL_SETTING_NOT_APPLIED";
    case WebMessageInfo_StubType.SYNC_FAILED:
      return "SYNC_FAILED";
    case WebMessageInfo_StubType.SYNCING:
      return "SYNCING";
    case WebMessageInfo_StubType.BIZ_PRIVACY_MODE_INIT_FB:
      return "BIZ_PRIVACY_MODE_INIT_FB";
    case WebMessageInfo_StubType.BIZ_PRIVACY_MODE_INIT_BSP:
      return "BIZ_PRIVACY_MODE_INIT_BSP";
    case WebMessageInfo_StubType.BIZ_PRIVACY_MODE_TO_FB:
      return "BIZ_PRIVACY_MODE_TO_FB";
    case WebMessageInfo_StubType.BIZ_PRIVACY_MODE_TO_BSP:
      return "BIZ_PRIVACY_MODE_TO_BSP";
    case WebMessageInfo_StubType.DISAPPEARING_MODE:
      return "DISAPPEARING_MODE";
    case WebMessageInfo_StubType.E2E_DEVICE_FETCH_FAILED:
      return "E2E_DEVICE_FETCH_FAILED";
    case WebMessageInfo_StubType.ADMIN_REVOKE:
      return "ADMIN_REVOKE";
    case WebMessageInfo_StubType.GROUP_INVITE_LINK_GROWTH_LOCKED:
      return "GROUP_INVITE_LINK_GROWTH_LOCKED";
    case WebMessageInfo_StubType.COMMUNITY_LINK_PARENT_GROUP:
      return "COMMUNITY_LINK_PARENT_GROUP";
    case WebMessageInfo_StubType.COMMUNITY_LINK_SIBLING_GROUP:
      return "COMMUNITY_LINK_SIBLING_GROUP";
    case WebMessageInfo_StubType.COMMUNITY_LINK_SUB_GROUP:
      return "COMMUNITY_LINK_SUB_GROUP";
    case WebMessageInfo_StubType.COMMUNITY_UNLINK_PARENT_GROUP:
      return "COMMUNITY_UNLINK_PARENT_GROUP";
    case WebMessageInfo_StubType.COMMUNITY_UNLINK_SIBLING_GROUP:
      return "COMMUNITY_UNLINK_SIBLING_GROUP";
    case WebMessageInfo_StubType.COMMUNITY_UNLINK_SUB_GROUP:
      return "COMMUNITY_UNLINK_SUB_GROUP";
    case WebMessageInfo_StubType.GROUP_PARTICIPANT_ACCEPT:
      return "GROUP_PARTICIPANT_ACCEPT";
    case WebMessageInfo_StubType.GROUP_PARTICIPANT_LINKED_GROUP_JOIN:
      return "GROUP_PARTICIPANT_LINKED_GROUP_JOIN";
    case WebMessageInfo_StubType.COMMUNITY_CREATE:
      return "COMMUNITY_CREATE";
    case WebMessageInfo_StubType.EPHEMERAL_KEEP_IN_CHAT:
      return "EPHEMERAL_KEEP_IN_CHAT";
    case WebMessageInfo_StubType.GROUP_MEMBERSHIP_JOIN_APPROVAL_REQUEST:
      return "GROUP_MEMBERSHIP_JOIN_APPROVAL_REQUEST";
    case WebMessageInfo_StubType.GROUP_MEMBERSHIP_JOIN_APPROVAL_MODE:
      return "GROUP_MEMBERSHIP_JOIN_APPROVAL_MODE";
    case WebMessageInfo_StubType.INTEGRITY_UNLINK_PARENT_GROUP:
      return "INTEGRITY_UNLINK_PARENT_GROUP";
    case WebMessageInfo_StubType.COMMUNITY_PARTICIPANT_PROMOTE:
      return "COMMUNITY_PARTICIPANT_PROMOTE";
    case WebMessageInfo_StubType.COMMUNITY_PARTICIPANT_DEMOTE:
      return "COMMUNITY_PARTICIPANT_DEMOTE";
    case WebMessageInfo_StubType.COMMUNITY_PARENT_GROUP_DELETED:
      return "COMMUNITY_PARENT_GROUP_DELETED";
    case WebMessageInfo_StubType.COMMUNITY_LINK_PARENT_GROUP_MEMBERSHIP_APPROVAL:
      return "COMMUNITY_LINK_PARENT_GROUP_MEMBERSHIP_APPROVAL";
    case WebMessageInfo_StubType.GROUP_PARTICIPANT_JOINED_GROUP_AND_PARENT_GROUP:
      return "GROUP_PARTICIPANT_JOINED_GROUP_AND_PARENT_GROUP";
    case WebMessageInfo_StubType.MASKED_THREAD_CREATED:
      return "MASKED_THREAD_CREATED";
    case WebMessageInfo_StubType.MASKED_THREAD_UNMASKED:
      return "MASKED_THREAD_UNMASKED";
    case WebMessageInfo_StubType.BIZ_CHAT_ASSIGNMENT:
      return "BIZ_CHAT_ASSIGNMENT";
    case WebMessageInfo_StubType.CHAT_PSA:
      return "CHAT_PSA";
    case WebMessageInfo_StubType.CHAT_POLL_CREATION_MESSAGE:
      return "CHAT_POLL_CREATION_MESSAGE";
    case WebMessageInfo_StubType.CAG_MASKED_THREAD_CREATED:
      return "CAG_MASKED_THREAD_CREATED";
    case WebMessageInfo_StubType.COMMUNITY_PARENT_GROUP_SUBJECT_CHANGED:
      return "COMMUNITY_PARENT_GROUP_SUBJECT_CHANGED";
    case WebMessageInfo_StubType.CAG_INVITE_AUTO_ADD:
      return "CAG_INVITE_AUTO_ADD";
    case WebMessageInfo_StubType.BIZ_CHAT_ASSIGNMENT_UNASSIGN:
      return "BIZ_CHAT_ASSIGNMENT_UNASSIGN";
    case WebMessageInfo_StubType.CAG_INVITE_AUTO_JOINED:
      return "CAG_INVITE_AUTO_JOINED";
    case WebMessageInfo_StubType.SCHEDULED_CALL_START_MESSAGE:
      return "SCHEDULED_CALL_START_MESSAGE";
    case WebMessageInfo_StubType.COMMUNITY_INVITE_RICH:
      return "COMMUNITY_INVITE_RICH";
    case WebMessageInfo_StubType.COMMUNITY_INVITE_AUTO_ADD_RICH:
      return "COMMUNITY_INVITE_AUTO_ADD_RICH";
    case WebMessageInfo_StubType.SUB_GROUP_INVITE_RICH:
      return "SUB_GROUP_INVITE_RICH";
    case WebMessageInfo_StubType.SUB_GROUP_PARTICIPANT_ADD_RICH:
      return "SUB_GROUP_PARTICIPANT_ADD_RICH";
    case WebMessageInfo_StubType.COMMUNITY_LINK_PARENT_GROUP_RICH:
      return "COMMUNITY_LINK_PARENT_GROUP_RICH";
    case WebMessageInfo_StubType.COMMUNITY_PARTICIPANT_ADD_RICH:
      return "COMMUNITY_PARTICIPANT_ADD_RICH";
    case WebMessageInfo_StubType.SILENCED_UNKNOWN_CALLER_AUDIO:
      return "SILENCED_UNKNOWN_CALLER_AUDIO";
    case WebMessageInfo_StubType.SILENCED_UNKNOWN_CALLER_VIDEO:
      return "SILENCED_UNKNOWN_CALLER_VIDEO";
    case WebMessageInfo_StubType.GROUP_MEMBER_ADD_MODE:
      return "GROUP_MEMBER_ADD_MODE";
    case WebMessageInfo_StubType.GROUP_MEMBERSHIP_JOIN_APPROVAL_REQUEST_NON_ADMIN_ADD:
      return "GROUP_MEMBERSHIP_JOIN_APPROVAL_REQUEST_NON_ADMIN_ADD";
    case WebMessageInfo_StubType.COMMUNITY_CHANGE_DESCRIPTION:
      return "COMMUNITY_CHANGE_DESCRIPTION";
    case WebMessageInfo_StubType.SENDER_INVITE:
      return "SENDER_INVITE";
    case WebMessageInfo_StubType.RECEIVER_INVITE:
      return "RECEIVER_INVITE";
    case WebMessageInfo_StubType.COMMUNITY_ALLOW_MEMBER_ADDED_GROUPS:
      return "COMMUNITY_ALLOW_MEMBER_ADDED_GROUPS";
    case WebMessageInfo_StubType.PINNED_MESSAGE_IN_CHAT:
      return "PINNED_MESSAGE_IN_CHAT";
    case WebMessageInfo_StubType.PAYMENT_INVITE_SETUP_INVITER:
      return "PAYMENT_INVITE_SETUP_INVITER";
    case WebMessageInfo_StubType.PAYMENT_INVITE_SETUP_INVITEE_RECEIVE_ONLY:
      return "PAYMENT_INVITE_SETUP_INVITEE_RECEIVE_ONLY";
    case WebMessageInfo_StubType.PAYMENT_INVITE_SETUP_INVITEE_SEND_AND_RECEIVE:
      return "PAYMENT_INVITE_SETUP_INVITEE_SEND_AND_RECEIVE";
    case WebMessageInfo_StubType.LINKED_GROUP_CALL_START:
      return "LINKED_GROUP_CALL_START";
    case WebMessageInfo_StubType.REPORT_TO_ADMIN_ENABLED_STATUS:
      return "REPORT_TO_ADMIN_ENABLED_STATUS";
    case WebMessageInfo_StubType.EMPTY_SUBGROUP_CREATE:
      return "EMPTY_SUBGROUP_CREATE";
    case WebMessageInfo_StubType.SCHEDULED_CALL_CANCEL:
      return "SCHEDULED_CALL_CANCEL";
    case WebMessageInfo_StubType.SUBGROUP_ADMIN_TRIGGERED_AUTO_ADD_RICH:
      return "SUBGROUP_ADMIN_TRIGGERED_AUTO_ADD_RICH";
    case WebMessageInfo_StubType.GROUP_CHANGE_RECENT_HISTORY_SHARING:
      return "GROUP_CHANGE_RECENT_HISTORY_SHARING";
    case WebMessageInfo_StubType.PAID_MESSAGE_SERVER_CAMPAIGN_ID:
      return "PAID_MESSAGE_SERVER_CAMPAIGN_ID";
    case WebMessageInfo_StubType.GENERAL_CHAT_CREATE:
      return "GENERAL_CHAT_CREATE";
    case WebMessageInfo_StubType.GENERAL_CHAT_ADD:
      return "GENERAL_CHAT_ADD";
    case WebMessageInfo_StubType.GENERAL_CHAT_AUTO_ADD_DISABLED:
      return "GENERAL_CHAT_AUTO_ADD_DISABLED";
    case WebMessageInfo_StubType.SUGGESTED_SUBGROUP_ANNOUNCE:
      return "SUGGESTED_SUBGROUP_ANNOUNCE";
    case WebMessageInfo_StubType.BIZ_BOT_1P_MESSAGING_ENABLED:
      return "BIZ_BOT_1P_MESSAGING_ENABLED";
    case WebMessageInfo_StubType.CHANGE_USERNAME:
      return "CHANGE_USERNAME";
    case WebMessageInfo_StubType.BIZ_COEX_PRIVACY_INIT_SELF:
      return "BIZ_COEX_PRIVACY_INIT_SELF";
    case WebMessageInfo_StubType.BIZ_COEX_PRIVACY_TRANSITION_SELF:
      return "BIZ_COEX_PRIVACY_TRANSITION_SELF";
    case WebMessageInfo_StubType.SUPPORT_AI_EDUCATION:
      return "SUPPORT_AI_EDUCATION";
    case WebMessageInfo_StubType.BIZ_BOT_3P_MESSAGING_ENABLED:
      return "BIZ_BOT_3P_MESSAGING_ENABLED";
    case WebMessageInfo_StubType.REMINDER_SETUP_MESSAGE:
      return "REMINDER_SETUP_MESSAGE";
    case WebMessageInfo_StubType.REMINDER_SENT_MESSAGE:
      return "REMINDER_SENT_MESSAGE";
    case WebMessageInfo_StubType.REMINDER_CANCEL_MESSAGE:
      return "REMINDER_CANCEL_MESSAGE";
    case WebMessageInfo_StubType.BIZ_COEX_PRIVACY_INIT:
      return "BIZ_COEX_PRIVACY_INIT";
    case WebMessageInfo_StubType.BIZ_COEX_PRIVACY_TRANSITION:
      return "BIZ_COEX_PRIVACY_TRANSITION";
    case WebMessageInfo_StubType.GROUP_DEACTIVATED:
      return "GROUP_DEACTIVATED";
    case WebMessageInfo_StubType.COMMUNITY_DEACTIVATE_SIBLING_GROUP:
      return "COMMUNITY_DEACTIVATE_SIBLING_GROUP";
    case WebMessageInfo_StubType.EVENT_UPDATED:
      return "EVENT_UPDATED";
    case WebMessageInfo_StubType.EVENT_CANCELED:
      return "EVENT_CANCELED";
    case WebMessageInfo_StubType.COMMUNITY_OWNER_UPDATED:
      return "COMMUNITY_OWNER_UPDATED";
    case WebMessageInfo_StubType.COMMUNITY_SUB_GROUP_VISIBILITY_HIDDEN:
      return "COMMUNITY_SUB_GROUP_VISIBILITY_HIDDEN";
    case WebMessageInfo_StubType.CAPI_GROUP_NE2EE_SYSTEM_MESSAGE:
      return "CAPI_GROUP_NE2EE_SYSTEM_MESSAGE";
    case WebMessageInfo_StubType.STATUS_MENTION:
      return "STATUS_MENTION";
    case WebMessageInfo_StubType.USER_CONTROLS_SYSTEM_MESSAGE:
      return "USER_CONTROLS_SYSTEM_MESSAGE";
    case WebMessageInfo_StubType.SUPPORT_SYSTEM_MESSAGE:
      return "SUPPORT_SYSTEM_MESSAGE";
    case WebMessageInfo_StubType.CHANGE_LID:
      return "CHANGE_LID";
    case WebMessageInfo_StubType.BIZ_CUSTOMER_3PD_DATA_SHARING_OPT_IN_MESSAGE:
      return "BIZ_CUSTOMER_3PD_DATA_SHARING_OPT_IN_MESSAGE";
    case WebMessageInfo_StubType.BIZ_CUSTOMER_3PD_DATA_SHARING_OPT_OUT_MESSAGE:
      return "BIZ_CUSTOMER_3PD_DATA_SHARING_OPT_OUT_MESSAGE";
    case WebMessageInfo_StubType.CHANGE_LIMIT_SHARING:
      return "CHANGE_LIMIT_SHARING";
    case WebMessageInfo_StubType.GROUP_MEMBER_LINK_MODE:
      return "GROUP_MEMBER_LINK_MODE";
    case WebMessageInfo_StubType.BIZ_AUTOMATICALLY_LABELED_CHAT_SYSTEM_MESSAGE:
      return "BIZ_AUTOMATICALLY_LABELED_CHAT_SYSTEM_MESSAGE";
    case WebMessageInfo_StubType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface WebNotificationsInfo {
  timestamp?: number | undefined;
  unreadChats?: number | undefined;
  notifyMessageCount?: number | undefined;
  notifyMessages: WebMessageInfo[];
}

function createBaseADVDeviceIdentity(): ADVDeviceIdentity {
  return { rawId: undefined, timestamp: undefined, keyIndex: undefined, accountType: undefined, deviceType: undefined };
}

export const ADVDeviceIdentity: MessageFns<ADVDeviceIdentity> = {
  encode(message: ADVDeviceIdentity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rawId !== undefined) {
      writer.uint32(8).uint32(message.rawId);
    }
    if (message.timestamp !== undefined) {
      writer.uint32(16).uint64(message.timestamp);
    }
    if (message.keyIndex !== undefined) {
      writer.uint32(24).uint32(message.keyIndex);
    }
    if (message.accountType !== undefined) {
      writer.uint32(32).int32(message.accountType);
    }
    if (message.deviceType !== undefined) {
      writer.uint32(40).int32(message.deviceType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ADVDeviceIdentity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseADVDeviceIdentity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.rawId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.timestamp = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.keyIndex = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.accountType = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.deviceType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ADVDeviceIdentity {
    return {
      rawId: isSet(object.rawId) ? globalThis.Number(object.rawId) : undefined,
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : undefined,
      keyIndex: isSet(object.keyIndex) ? globalThis.Number(object.keyIndex) : undefined,
      accountType: isSet(object.accountType) ? aDVEncryptionTypeFromJSON(object.accountType) : undefined,
      deviceType: isSet(object.deviceType) ? aDVEncryptionTypeFromJSON(object.deviceType) : undefined,
    };
  },

  toJSON(message: ADVDeviceIdentity): unknown {
    const obj: any = {};
    if (message.rawId !== undefined) {
      obj.rawId = Math.round(message.rawId);
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.keyIndex !== undefined) {
      obj.keyIndex = Math.round(message.keyIndex);
    }
    if (message.accountType !== undefined) {
      obj.accountType = aDVEncryptionTypeToJSON(message.accountType);
    }
    if (message.deviceType !== undefined) {
      obj.deviceType = aDVEncryptionTypeToJSON(message.deviceType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ADVDeviceIdentity>, I>>(base?: I): ADVDeviceIdentity {
    return ADVDeviceIdentity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ADVDeviceIdentity>, I>>(object: I): ADVDeviceIdentity {
    const message = createBaseADVDeviceIdentity();
    message.rawId = object.rawId ?? undefined;
    message.timestamp = object.timestamp ?? undefined;
    message.keyIndex = object.keyIndex ?? undefined;
    message.accountType = object.accountType ?? undefined;
    message.deviceType = object.deviceType ?? undefined;
    return message;
  },
};

function createBaseADVKeyIndexList(): ADVKeyIndexList {
  return { rawId: undefined, timestamp: undefined, currentIndex: undefined, validIndexes: [], accountType: undefined };
}

export const ADVKeyIndexList: MessageFns<ADVKeyIndexList> = {
  encode(message: ADVKeyIndexList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rawId !== undefined) {
      writer.uint32(8).uint32(message.rawId);
    }
    if (message.timestamp !== undefined) {
      writer.uint32(16).uint64(message.timestamp);
    }
    if (message.currentIndex !== undefined) {
      writer.uint32(24).uint32(message.currentIndex);
    }
    writer.uint32(34).fork();
    for (const v of message.validIndexes) {
      writer.uint32(v);
    }
    writer.join();
    if (message.accountType !== undefined) {
      writer.uint32(40).int32(message.accountType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ADVKeyIndexList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseADVKeyIndexList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.rawId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.timestamp = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.currentIndex = reader.uint32();
          continue;
        }
        case 4: {
          if (tag === 32) {
            message.validIndexes.push(reader.uint32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.validIndexes.push(reader.uint32());
            }

            continue;
          }

          break;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.accountType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ADVKeyIndexList {
    return {
      rawId: isSet(object.rawId) ? globalThis.Number(object.rawId) : undefined,
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : undefined,
      currentIndex: isSet(object.currentIndex) ? globalThis.Number(object.currentIndex) : undefined,
      validIndexes: globalThis.Array.isArray(object?.validIndexes)
        ? object.validIndexes.map((e: any) => globalThis.Number(e))
        : [],
      accountType: isSet(object.accountType) ? aDVEncryptionTypeFromJSON(object.accountType) : undefined,
    };
  },

  toJSON(message: ADVKeyIndexList): unknown {
    const obj: any = {};
    if (message.rawId !== undefined) {
      obj.rawId = Math.round(message.rawId);
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.currentIndex !== undefined) {
      obj.currentIndex = Math.round(message.currentIndex);
    }
    if (message.validIndexes?.length) {
      obj.validIndexes = message.validIndexes.map((e) => Math.round(e));
    }
    if (message.accountType !== undefined) {
      obj.accountType = aDVEncryptionTypeToJSON(message.accountType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ADVKeyIndexList>, I>>(base?: I): ADVKeyIndexList {
    return ADVKeyIndexList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ADVKeyIndexList>, I>>(object: I): ADVKeyIndexList {
    const message = createBaseADVKeyIndexList();
    message.rawId = object.rawId ?? undefined;
    message.timestamp = object.timestamp ?? undefined;
    message.currentIndex = object.currentIndex ?? undefined;
    message.validIndexes = object.validIndexes?.map((e) => e) || [];
    message.accountType = object.accountType ?? undefined;
    return message;
  },
};

function createBaseADVSignedDeviceIdentity(): ADVSignedDeviceIdentity {
  return {
    details: undefined,
    accountSignatureKey: undefined,
    accountSignature: undefined,
    deviceSignature: undefined,
  };
}

export const ADVSignedDeviceIdentity: MessageFns<ADVSignedDeviceIdentity> = {
  encode(message: ADVSignedDeviceIdentity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      writer.uint32(10).bytes(message.details);
    }
    if (message.accountSignatureKey !== undefined) {
      writer.uint32(18).bytes(message.accountSignatureKey);
    }
    if (message.accountSignature !== undefined) {
      writer.uint32(26).bytes(message.accountSignature);
    }
    if (message.deviceSignature !== undefined) {
      writer.uint32(34).bytes(message.deviceSignature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ADVSignedDeviceIdentity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseADVSignedDeviceIdentity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.details = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.accountSignatureKey = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.accountSignature = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.deviceSignature = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ADVSignedDeviceIdentity {
    return {
      details: isSet(object.details) ? bytesFromBase64(object.details) : undefined,
      accountSignatureKey: isSet(object.accountSignatureKey) ? bytesFromBase64(object.accountSignatureKey) : undefined,
      accountSignature: isSet(object.accountSignature) ? bytesFromBase64(object.accountSignature) : undefined,
      deviceSignature: isSet(object.deviceSignature) ? bytesFromBase64(object.deviceSignature) : undefined,
    };
  },

  toJSON(message: ADVSignedDeviceIdentity): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = base64FromBytes(message.details);
    }
    if (message.accountSignatureKey !== undefined) {
      obj.accountSignatureKey = base64FromBytes(message.accountSignatureKey);
    }
    if (message.accountSignature !== undefined) {
      obj.accountSignature = base64FromBytes(message.accountSignature);
    }
    if (message.deviceSignature !== undefined) {
      obj.deviceSignature = base64FromBytes(message.deviceSignature);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ADVSignedDeviceIdentity>, I>>(base?: I): ADVSignedDeviceIdentity {
    return ADVSignedDeviceIdentity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ADVSignedDeviceIdentity>, I>>(object: I): ADVSignedDeviceIdentity {
    const message = createBaseADVSignedDeviceIdentity();
    message.details = object.details ?? undefined;
    message.accountSignatureKey = object.accountSignatureKey ?? undefined;
    message.accountSignature = object.accountSignature ?? undefined;
    message.deviceSignature = object.deviceSignature ?? undefined;
    return message;
  },
};

function createBaseADVSignedDeviceIdentityHMAC(): ADVSignedDeviceIdentityHMAC {
  return { details: undefined, hmac: undefined, accountType: undefined };
}

export const ADVSignedDeviceIdentityHMAC: MessageFns<ADVSignedDeviceIdentityHMAC> = {
  encode(message: ADVSignedDeviceIdentityHMAC, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      writer.uint32(10).bytes(message.details);
    }
    if (message.hmac !== undefined) {
      writer.uint32(18).bytes(message.hmac);
    }
    if (message.accountType !== undefined) {
      writer.uint32(24).int32(message.accountType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ADVSignedDeviceIdentityHMAC {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseADVSignedDeviceIdentityHMAC();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.details = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.hmac = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.accountType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ADVSignedDeviceIdentityHMAC {
    return {
      details: isSet(object.details) ? bytesFromBase64(object.details) : undefined,
      hmac: isSet(object.hmac) ? bytesFromBase64(object.hmac) : undefined,
      accountType: isSet(object.accountType) ? aDVEncryptionTypeFromJSON(object.accountType) : undefined,
    };
  },

  toJSON(message: ADVSignedDeviceIdentityHMAC): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = base64FromBytes(message.details);
    }
    if (message.hmac !== undefined) {
      obj.hmac = base64FromBytes(message.hmac);
    }
    if (message.accountType !== undefined) {
      obj.accountType = aDVEncryptionTypeToJSON(message.accountType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ADVSignedDeviceIdentityHMAC>, I>>(base?: I): ADVSignedDeviceIdentityHMAC {
    return ADVSignedDeviceIdentityHMAC.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ADVSignedDeviceIdentityHMAC>, I>>(object: I): ADVSignedDeviceIdentityHMAC {
    const message = createBaseADVSignedDeviceIdentityHMAC();
    message.details = object.details ?? undefined;
    message.hmac = object.hmac ?? undefined;
    message.accountType = object.accountType ?? undefined;
    return message;
  },
};

function createBaseADVSignedKeyIndexList(): ADVSignedKeyIndexList {
  return { details: undefined, accountSignature: undefined, accountSignatureKey: undefined };
}

export const ADVSignedKeyIndexList: MessageFns<ADVSignedKeyIndexList> = {
  encode(message: ADVSignedKeyIndexList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      writer.uint32(10).bytes(message.details);
    }
    if (message.accountSignature !== undefined) {
      writer.uint32(18).bytes(message.accountSignature);
    }
    if (message.accountSignatureKey !== undefined) {
      writer.uint32(26).bytes(message.accountSignatureKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ADVSignedKeyIndexList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseADVSignedKeyIndexList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.details = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.accountSignature = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.accountSignatureKey = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ADVSignedKeyIndexList {
    return {
      details: isSet(object.details) ? bytesFromBase64(object.details) : undefined,
      accountSignature: isSet(object.accountSignature) ? bytesFromBase64(object.accountSignature) : undefined,
      accountSignatureKey: isSet(object.accountSignatureKey) ? bytesFromBase64(object.accountSignatureKey) : undefined,
    };
  },

  toJSON(message: ADVSignedKeyIndexList): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = base64FromBytes(message.details);
    }
    if (message.accountSignature !== undefined) {
      obj.accountSignature = base64FromBytes(message.accountSignature);
    }
    if (message.accountSignatureKey !== undefined) {
      obj.accountSignatureKey = base64FromBytes(message.accountSignatureKey);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ADVSignedKeyIndexList>, I>>(base?: I): ADVSignedKeyIndexList {
    return ADVSignedKeyIndexList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ADVSignedKeyIndexList>, I>>(object: I): ADVSignedKeyIndexList {
    const message = createBaseADVSignedKeyIndexList();
    message.details = object.details ?? undefined;
    message.accountSignature = object.accountSignature ?? undefined;
    message.accountSignatureKey = object.accountSignatureKey ?? undefined;
    return message;
  },
};

function createBaseAIQueryFanout(): AIQueryFanout {
  return { messageKey: undefined, message: undefined, timestamp: undefined };
}

export const AIQueryFanout: MessageFns<AIQueryFanout> = {
  encode(message: AIQueryFanout, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.messageKey !== undefined) {
      MessageKey.encode(message.messageKey, writer.uint32(10).fork()).join();
    }
    if (message.message !== undefined) {
      Message.encode(message.message, writer.uint32(18).fork()).join();
    }
    if (message.timestamp !== undefined) {
      writer.uint32(24).int64(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AIQueryFanout {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAIQueryFanout();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.messageKey = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = Message.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AIQueryFanout {
    return {
      messageKey: isSet(object.messageKey) ? MessageKey.fromJSON(object.messageKey) : undefined,
      message: isSet(object.message) ? Message.fromJSON(object.message) : undefined,
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : undefined,
    };
  },

  toJSON(message: AIQueryFanout): unknown {
    const obj: any = {};
    if (message.messageKey !== undefined) {
      obj.messageKey = MessageKey.toJSON(message.messageKey);
    }
    if (message.message !== undefined) {
      obj.message = Message.toJSON(message.message);
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = Math.round(message.timestamp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AIQueryFanout>, I>>(base?: I): AIQueryFanout {
    return AIQueryFanout.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AIQueryFanout>, I>>(object: I): AIQueryFanout {
    const message = createBaseAIQueryFanout();
    message.messageKey = (object.messageKey !== undefined && object.messageKey !== null)
      ? MessageKey.fromPartial(object.messageKey)
      : undefined;
    message.message = (object.message !== undefined && object.message !== null)
      ? Message.fromPartial(object.message)
      : undefined;
    message.timestamp = object.timestamp ?? undefined;
    return message;
  },
};

function createBaseAIRichResponseMessage(): AIRichResponseMessage {
  return { messageType: undefined, submessages: [], unifiedResponse: undefined };
}

export const AIRichResponseMessage: MessageFns<AIRichResponseMessage> = {
  encode(message: AIRichResponseMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.messageType !== undefined) {
      writer.uint32(8).int32(message.messageType);
    }
    for (const v of message.submessages) {
      AIRichResponseMessage_AIRichResponseSubMessage.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.unifiedResponse !== undefined) {
      AIRichResponseMessage_AIRichResponseUnifiedResponse.encode(message.unifiedResponse, writer.uint32(26).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AIRichResponseMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAIRichResponseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.messageType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.submessages.push(AIRichResponseMessage_AIRichResponseSubMessage.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.unifiedResponse = AIRichResponseMessage_AIRichResponseUnifiedResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AIRichResponseMessage {
    return {
      messageType: isSet(object.messageType)
        ? aIRichResponseMessage_AIRichResponseMessageTypeFromJSON(object.messageType)
        : undefined,
      submessages: globalThis.Array.isArray(object?.submessages)
        ? object.submessages.map((e: any) => AIRichResponseMessage_AIRichResponseSubMessage.fromJSON(e))
        : [],
      unifiedResponse: isSet(object.unifiedResponse)
        ? AIRichResponseMessage_AIRichResponseUnifiedResponse.fromJSON(object.unifiedResponse)
        : undefined,
    };
  },

  toJSON(message: AIRichResponseMessage): unknown {
    const obj: any = {};
    if (message.messageType !== undefined) {
      obj.messageType = aIRichResponseMessage_AIRichResponseMessageTypeToJSON(message.messageType);
    }
    if (message.submessages?.length) {
      obj.submessages = message.submessages.map((e) => AIRichResponseMessage_AIRichResponseSubMessage.toJSON(e));
    }
    if (message.unifiedResponse !== undefined) {
      obj.unifiedResponse = AIRichResponseMessage_AIRichResponseUnifiedResponse.toJSON(message.unifiedResponse);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AIRichResponseMessage>, I>>(base?: I): AIRichResponseMessage {
    return AIRichResponseMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AIRichResponseMessage>, I>>(object: I): AIRichResponseMessage {
    const message = createBaseAIRichResponseMessage();
    message.messageType = object.messageType ?? undefined;
    message.submessages =
      object.submessages?.map((e) => AIRichResponseMessage_AIRichResponseSubMessage.fromPartial(e)) || [];
    message.unifiedResponse = (object.unifiedResponse !== undefined && object.unifiedResponse !== null)
      ? AIRichResponseMessage_AIRichResponseUnifiedResponse.fromPartial(object.unifiedResponse)
      : undefined;
    return message;
  },
};

function createBaseAIRichResponseMessage_AIRichResponseCodeMetadata(): AIRichResponseMessage_AIRichResponseCodeMetadata {
  return { codeLanguage: undefined, codeBlocks: [] };
}

export const AIRichResponseMessage_AIRichResponseCodeMetadata: MessageFns<
  AIRichResponseMessage_AIRichResponseCodeMetadata
> = {
  encode(
    message: AIRichResponseMessage_AIRichResponseCodeMetadata,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.codeLanguage !== undefined) {
      writer.uint32(10).string(message.codeLanguage);
    }
    for (const v of message.codeBlocks) {
      AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeBlock.encode(v!, writer.uint32(18).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AIRichResponseMessage_AIRichResponseCodeMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAIRichResponseMessage_AIRichResponseCodeMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.codeLanguage = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.codeBlocks.push(
            AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeBlock.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AIRichResponseMessage_AIRichResponseCodeMetadata {
    return {
      codeLanguage: isSet(object.codeLanguage) ? globalThis.String(object.codeLanguage) : undefined,
      codeBlocks: globalThis.Array.isArray(object?.codeBlocks)
        ? object.codeBlocks.map((e: any) =>
          AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeBlock.fromJSON(e)
        )
        : [],
    };
  },

  toJSON(message: AIRichResponseMessage_AIRichResponseCodeMetadata): unknown {
    const obj: any = {};
    if (message.codeLanguage !== undefined) {
      obj.codeLanguage = message.codeLanguage;
    }
    if (message.codeBlocks?.length) {
      obj.codeBlocks = message.codeBlocks.map((e) =>
        AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeBlock.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseCodeMetadata>, I>>(
    base?: I,
  ): AIRichResponseMessage_AIRichResponseCodeMetadata {
    return AIRichResponseMessage_AIRichResponseCodeMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseCodeMetadata>, I>>(
    object: I,
  ): AIRichResponseMessage_AIRichResponseCodeMetadata {
    const message = createBaseAIRichResponseMessage_AIRichResponseCodeMetadata();
    message.codeLanguage = object.codeLanguage ?? undefined;
    message.codeBlocks =
      object.codeBlocks?.map((e) =>
        AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeBlock.fromPartial(e)
      ) || [];
    return message;
  },
};

function createBaseAIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeBlock(): AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeBlock {
  return { highlightType: undefined, codeContent: undefined };
}

export const AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeBlock: MessageFns<
  AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeBlock
> = {
  encode(
    message: AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeBlock,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.highlightType !== undefined) {
      writer.uint32(8).int32(message.highlightType);
    }
    if (message.codeContent !== undefined) {
      writer.uint32(18).string(message.codeContent);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeBlock {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeBlock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.highlightType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.codeContent = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeBlock {
    return {
      highlightType: isSet(object.highlightType)
        ? aIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeHighlightTypeFromJSON(object.highlightType)
        : undefined,
      codeContent: isSet(object.codeContent) ? globalThis.String(object.codeContent) : undefined,
    };
  },

  toJSON(message: AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeBlock): unknown {
    const obj: any = {};
    if (message.highlightType !== undefined) {
      obj.highlightType = aIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeHighlightTypeToJSON(
        message.highlightType,
      );
    }
    if (message.codeContent !== undefined) {
      obj.codeContent = message.codeContent;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeBlock>, I>>(
    base?: I,
  ): AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeBlock {
    return AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeBlock.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeBlock>, I>,
  >(object: I): AIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeBlock {
    const message = createBaseAIRichResponseMessage_AIRichResponseCodeMetadata_AIRichResponseCodeBlock();
    message.highlightType = object.highlightType ?? undefined;
    message.codeContent = object.codeContent ?? undefined;
    return message;
  },
};

function createBaseAIRichResponseMessage_AIRichResponseContentItemsMetadata(): AIRichResponseMessage_AIRichResponseContentItemsMetadata {
  return { itemsMetadata: [], contentType: undefined };
}

export const AIRichResponseMessage_AIRichResponseContentItemsMetadata: MessageFns<
  AIRichResponseMessage_AIRichResponseContentItemsMetadata
> = {
  encode(
    message: AIRichResponseMessage_AIRichResponseContentItemsMetadata,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.itemsMetadata) {
      AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseContentItemMetadata.encode(
        v!,
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.contentType !== undefined) {
      writer.uint32(16).int32(message.contentType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AIRichResponseMessage_AIRichResponseContentItemsMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAIRichResponseMessage_AIRichResponseContentItemsMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.itemsMetadata.push(
            AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseContentItemMetadata.decode(
              reader,
              reader.uint32(),
            ),
          );
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.contentType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AIRichResponseMessage_AIRichResponseContentItemsMetadata {
    return {
      itemsMetadata: globalThis.Array.isArray(object?.itemsMetadata)
        ? object.itemsMetadata.map((e: any) =>
          AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseContentItemMetadata.fromJSON(e)
        )
        : [],
      contentType: isSet(object.contentType)
        ? aIRichResponseMessage_AIRichResponseContentItemsMetadata_ContentTypeFromJSON(object.contentType)
        : undefined,
    };
  },

  toJSON(message: AIRichResponseMessage_AIRichResponseContentItemsMetadata): unknown {
    const obj: any = {};
    if (message.itemsMetadata?.length) {
      obj.itemsMetadata = message.itemsMetadata.map((e) =>
        AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseContentItemMetadata.toJSON(e)
      );
    }
    if (message.contentType !== undefined) {
      obj.contentType = aIRichResponseMessage_AIRichResponseContentItemsMetadata_ContentTypeToJSON(message.contentType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseContentItemsMetadata>, I>>(
    base?: I,
  ): AIRichResponseMessage_AIRichResponseContentItemsMetadata {
    return AIRichResponseMessage_AIRichResponseContentItemsMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseContentItemsMetadata>, I>>(
    object: I,
  ): AIRichResponseMessage_AIRichResponseContentItemsMetadata {
    const message = createBaseAIRichResponseMessage_AIRichResponseContentItemsMetadata();
    message.itemsMetadata =
      object.itemsMetadata?.map((e) =>
        AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseContentItemMetadata.fromPartial(e)
      ) || [];
    message.contentType = object.contentType ?? undefined;
    return message;
  },
};

function createBaseAIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseContentItemMetadata(): AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseContentItemMetadata {
  return { reelItem: undefined };
}

export const AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseContentItemMetadata: MessageFns<
  AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseContentItemMetadata
> = {
  encode(
    message: AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseContentItemMetadata,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.reelItem !== undefined) {
      AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseReelItem.encode(
        message.reelItem,
        writer.uint32(10).fork(),
      ).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseContentItemMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message =
      createBaseAIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseContentItemMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.reelItem = AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseReelItem.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseContentItemMetadata {
    return {
      reelItem: isSet(object.reelItem)
        ? AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseReelItem.fromJSON(object.reelItem)
        : undefined,
    };
  },

  toJSON(message: AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseContentItemMetadata): unknown {
    const obj: any = {};
    if (message.reelItem !== undefined) {
      obj.reelItem = AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseReelItem.toJSON(
        message.reelItem,
      );
    }
    return obj;
  },

  create<
    I extends Exact<
      DeepPartial<AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseContentItemMetadata>,
      I
    >,
  >(base?: I): AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseContentItemMetadata {
    return AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseContentItemMetadata.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<
      DeepPartial<AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseContentItemMetadata>,
      I
    >,
  >(object: I): AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseContentItemMetadata {
    const message =
      createBaseAIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseContentItemMetadata();
    message.reelItem = (object.reelItem !== undefined && object.reelItem !== null)
      ? AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseReelItem.fromPartial(object.reelItem)
      : undefined;
    return message;
  },
};

function createBaseAIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseReelItem(): AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseReelItem {
  return { title: undefined, profileIconUrl: undefined, thumbnailUrl: undefined, videoUrl: undefined };
}

export const AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseReelItem: MessageFns<
  AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseReelItem
> = {
  encode(
    message: AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseReelItem,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.title !== undefined) {
      writer.uint32(10).string(message.title);
    }
    if (message.profileIconUrl !== undefined) {
      writer.uint32(18).string(message.profileIconUrl);
    }
    if (message.thumbnailUrl !== undefined) {
      writer.uint32(26).string(message.thumbnailUrl);
    }
    if (message.videoUrl !== undefined) {
      writer.uint32(34).string(message.videoUrl);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseReelItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseReelItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.profileIconUrl = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.thumbnailUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.videoUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseReelItem {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      profileIconUrl: isSet(object.profileIconUrl) ? globalThis.String(object.profileIconUrl) : undefined,
      thumbnailUrl: isSet(object.thumbnailUrl) ? globalThis.String(object.thumbnailUrl) : undefined,
      videoUrl: isSet(object.videoUrl) ? globalThis.String(object.videoUrl) : undefined,
    };
  },

  toJSON(message: AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseReelItem): unknown {
    const obj: any = {};
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.profileIconUrl !== undefined) {
      obj.profileIconUrl = message.profileIconUrl;
    }
    if (message.thumbnailUrl !== undefined) {
      obj.thumbnailUrl = message.thumbnailUrl;
    }
    if (message.videoUrl !== undefined) {
      obj.videoUrl = message.videoUrl;
    }
    return obj;
  },

  create<
    I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseReelItem>, I>,
  >(base?: I): AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseReelItem {
    return AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseReelItem.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseReelItem>, I>,
  >(object: I): AIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseReelItem {
    const message = createBaseAIRichResponseMessage_AIRichResponseContentItemsMetadata_AIRichResponseReelItem();
    message.title = object.title ?? undefined;
    message.profileIconUrl = object.profileIconUrl ?? undefined;
    message.thumbnailUrl = object.thumbnailUrl ?? undefined;
    message.videoUrl = object.videoUrl ?? undefined;
    return message;
  },
};

function createBaseAIRichResponseMessage_AIRichResponseDynamicMetadata(): AIRichResponseMessage_AIRichResponseDynamicMetadata {
  return { type: undefined, version: undefined, url: undefined, loopCount: undefined };
}

export const AIRichResponseMessage_AIRichResponseDynamicMetadata: MessageFns<
  AIRichResponseMessage_AIRichResponseDynamicMetadata
> = {
  encode(
    message: AIRichResponseMessage_AIRichResponseDynamicMetadata,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.type !== undefined) {
      writer.uint32(8).int32(message.type);
    }
    if (message.version !== undefined) {
      writer.uint32(16).uint64(message.version);
    }
    if (message.url !== undefined) {
      writer.uint32(26).string(message.url);
    }
    if (message.loopCount !== undefined) {
      writer.uint32(32).uint32(message.loopCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AIRichResponseMessage_AIRichResponseDynamicMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAIRichResponseMessage_AIRichResponseDynamicMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.version = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.loopCount = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AIRichResponseMessage_AIRichResponseDynamicMetadata {
    return {
      type: isSet(object.type)
        ? aIRichResponseMessage_AIRichResponseDynamicMetadata_AIRichResponseDynamicMetadataTypeFromJSON(object.type)
        : undefined,
      version: isSet(object.version) ? globalThis.Number(object.version) : undefined,
      url: isSet(object.url) ? globalThis.String(object.url) : undefined,
      loopCount: isSet(object.loopCount) ? globalThis.Number(object.loopCount) : undefined,
    };
  },

  toJSON(message: AIRichResponseMessage_AIRichResponseDynamicMetadata): unknown {
    const obj: any = {};
    if (message.type !== undefined) {
      obj.type = aIRichResponseMessage_AIRichResponseDynamicMetadata_AIRichResponseDynamicMetadataTypeToJSON(
        message.type,
      );
    }
    if (message.version !== undefined) {
      obj.version = Math.round(message.version);
    }
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    if (message.loopCount !== undefined) {
      obj.loopCount = Math.round(message.loopCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseDynamicMetadata>, I>>(
    base?: I,
  ): AIRichResponseMessage_AIRichResponseDynamicMetadata {
    return AIRichResponseMessage_AIRichResponseDynamicMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseDynamicMetadata>, I>>(
    object: I,
  ): AIRichResponseMessage_AIRichResponseDynamicMetadata {
    const message = createBaseAIRichResponseMessage_AIRichResponseDynamicMetadata();
    message.type = object.type ?? undefined;
    message.version = object.version ?? undefined;
    message.url = object.url ?? undefined;
    message.loopCount = object.loopCount ?? undefined;
    return message;
  },
};

function createBaseAIRichResponseMessage_AIRichResponseGridImageMetadata(): AIRichResponseMessage_AIRichResponseGridImageMetadata {
  return { gridImageUrl: undefined, imageUrls: [] };
}

export const AIRichResponseMessage_AIRichResponseGridImageMetadata: MessageFns<
  AIRichResponseMessage_AIRichResponseGridImageMetadata
> = {
  encode(
    message: AIRichResponseMessage_AIRichResponseGridImageMetadata,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.gridImageUrl !== undefined) {
      AIRichResponseMessage_AIRichResponseImageURL.encode(message.gridImageUrl, writer.uint32(10).fork()).join();
    }
    for (const v of message.imageUrls) {
      AIRichResponseMessage_AIRichResponseImageURL.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AIRichResponseMessage_AIRichResponseGridImageMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAIRichResponseMessage_AIRichResponseGridImageMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gridImageUrl = AIRichResponseMessage_AIRichResponseImageURL.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.imageUrls.push(AIRichResponseMessage_AIRichResponseImageURL.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AIRichResponseMessage_AIRichResponseGridImageMetadata {
    return {
      gridImageUrl: isSet(object.gridImageUrl)
        ? AIRichResponseMessage_AIRichResponseImageURL.fromJSON(object.gridImageUrl)
        : undefined,
      imageUrls: globalThis.Array.isArray(object?.imageUrls)
        ? object.imageUrls.map((e: any) => AIRichResponseMessage_AIRichResponseImageURL.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AIRichResponseMessage_AIRichResponseGridImageMetadata): unknown {
    const obj: any = {};
    if (message.gridImageUrl !== undefined) {
      obj.gridImageUrl = AIRichResponseMessage_AIRichResponseImageURL.toJSON(message.gridImageUrl);
    }
    if (message.imageUrls?.length) {
      obj.imageUrls = message.imageUrls.map((e) => AIRichResponseMessage_AIRichResponseImageURL.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseGridImageMetadata>, I>>(
    base?: I,
  ): AIRichResponseMessage_AIRichResponseGridImageMetadata {
    return AIRichResponseMessage_AIRichResponseGridImageMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseGridImageMetadata>, I>>(
    object: I,
  ): AIRichResponseMessage_AIRichResponseGridImageMetadata {
    const message = createBaseAIRichResponseMessage_AIRichResponseGridImageMetadata();
    message.gridImageUrl = (object.gridImageUrl !== undefined && object.gridImageUrl !== null)
      ? AIRichResponseMessage_AIRichResponseImageURL.fromPartial(object.gridImageUrl)
      : undefined;
    message.imageUrls = object.imageUrls?.map((e) => AIRichResponseMessage_AIRichResponseImageURL.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAIRichResponseMessage_AIRichResponseImageURL(): AIRichResponseMessage_AIRichResponseImageURL {
  return { imagePreviewUrl: undefined, imageHighResUrl: undefined, sourceUrl: undefined };
}

export const AIRichResponseMessage_AIRichResponseImageURL: MessageFns<AIRichResponseMessage_AIRichResponseImageURL> = {
  encode(
    message: AIRichResponseMessage_AIRichResponseImageURL,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.imagePreviewUrl !== undefined) {
      writer.uint32(10).string(message.imagePreviewUrl);
    }
    if (message.imageHighResUrl !== undefined) {
      writer.uint32(18).string(message.imageHighResUrl);
    }
    if (message.sourceUrl !== undefined) {
      writer.uint32(26).string(message.sourceUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AIRichResponseMessage_AIRichResponseImageURL {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAIRichResponseMessage_AIRichResponseImageURL();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.imagePreviewUrl = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.imageHighResUrl = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sourceUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AIRichResponseMessage_AIRichResponseImageURL {
    return {
      imagePreviewUrl: isSet(object.imagePreviewUrl) ? globalThis.String(object.imagePreviewUrl) : undefined,
      imageHighResUrl: isSet(object.imageHighResUrl) ? globalThis.String(object.imageHighResUrl) : undefined,
      sourceUrl: isSet(object.sourceUrl) ? globalThis.String(object.sourceUrl) : undefined,
    };
  },

  toJSON(message: AIRichResponseMessage_AIRichResponseImageURL): unknown {
    const obj: any = {};
    if (message.imagePreviewUrl !== undefined) {
      obj.imagePreviewUrl = message.imagePreviewUrl;
    }
    if (message.imageHighResUrl !== undefined) {
      obj.imageHighResUrl = message.imageHighResUrl;
    }
    if (message.sourceUrl !== undefined) {
      obj.sourceUrl = message.sourceUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseImageURL>, I>>(
    base?: I,
  ): AIRichResponseMessage_AIRichResponseImageURL {
    return AIRichResponseMessage_AIRichResponseImageURL.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseImageURL>, I>>(
    object: I,
  ): AIRichResponseMessage_AIRichResponseImageURL {
    const message = createBaseAIRichResponseMessage_AIRichResponseImageURL();
    message.imagePreviewUrl = object.imagePreviewUrl ?? undefined;
    message.imageHighResUrl = object.imageHighResUrl ?? undefined;
    message.sourceUrl = object.sourceUrl ?? undefined;
    return message;
  },
};

function createBaseAIRichResponseMessage_AIRichResponseInlineImageMetadata(): AIRichResponseMessage_AIRichResponseInlineImageMetadata {
  return { imageUrl: undefined, imageText: undefined, alignment: undefined, tapLinkUrl: undefined };
}

export const AIRichResponseMessage_AIRichResponseInlineImageMetadata: MessageFns<
  AIRichResponseMessage_AIRichResponseInlineImageMetadata
> = {
  encode(
    message: AIRichResponseMessage_AIRichResponseInlineImageMetadata,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.imageUrl !== undefined) {
      AIRichResponseMessage_AIRichResponseImageURL.encode(message.imageUrl, writer.uint32(10).fork()).join();
    }
    if (message.imageText !== undefined) {
      writer.uint32(18).string(message.imageText);
    }
    if (message.alignment !== undefined) {
      writer.uint32(24).int32(message.alignment);
    }
    if (message.tapLinkUrl !== undefined) {
      writer.uint32(34).string(message.tapLinkUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AIRichResponseMessage_AIRichResponseInlineImageMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAIRichResponseMessage_AIRichResponseInlineImageMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.imageUrl = AIRichResponseMessage_AIRichResponseImageURL.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.imageText = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.alignment = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tapLinkUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AIRichResponseMessage_AIRichResponseInlineImageMetadata {
    return {
      imageUrl: isSet(object.imageUrl)
        ? AIRichResponseMessage_AIRichResponseImageURL.fromJSON(object.imageUrl)
        : undefined,
      imageText: isSet(object.imageText) ? globalThis.String(object.imageText) : undefined,
      alignment: isSet(object.alignment)
        ? aIRichResponseMessage_AIRichResponseInlineImageMetadata_AIRichResponseImageAlignmentFromJSON(object.alignment)
        : undefined,
      tapLinkUrl: isSet(object.tapLinkUrl) ? globalThis.String(object.tapLinkUrl) : undefined,
    };
  },

  toJSON(message: AIRichResponseMessage_AIRichResponseInlineImageMetadata): unknown {
    const obj: any = {};
    if (message.imageUrl !== undefined) {
      obj.imageUrl = AIRichResponseMessage_AIRichResponseImageURL.toJSON(message.imageUrl);
    }
    if (message.imageText !== undefined) {
      obj.imageText = message.imageText;
    }
    if (message.alignment !== undefined) {
      obj.alignment = aIRichResponseMessage_AIRichResponseInlineImageMetadata_AIRichResponseImageAlignmentToJSON(
        message.alignment,
      );
    }
    if (message.tapLinkUrl !== undefined) {
      obj.tapLinkUrl = message.tapLinkUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseInlineImageMetadata>, I>>(
    base?: I,
  ): AIRichResponseMessage_AIRichResponseInlineImageMetadata {
    return AIRichResponseMessage_AIRichResponseInlineImageMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseInlineImageMetadata>, I>>(
    object: I,
  ): AIRichResponseMessage_AIRichResponseInlineImageMetadata {
    const message = createBaseAIRichResponseMessage_AIRichResponseInlineImageMetadata();
    message.imageUrl = (object.imageUrl !== undefined && object.imageUrl !== null)
      ? AIRichResponseMessage_AIRichResponseImageURL.fromPartial(object.imageUrl)
      : undefined;
    message.imageText = object.imageText ?? undefined;
    message.alignment = object.alignment ?? undefined;
    message.tapLinkUrl = object.tapLinkUrl ?? undefined;
    return message;
  },
};

function createBaseAIRichResponseMessage_AIRichResponseLatexMetadata(): AIRichResponseMessage_AIRichResponseLatexMetadata {
  return { text: undefined, expressions: [] };
}

export const AIRichResponseMessage_AIRichResponseLatexMetadata: MessageFns<
  AIRichResponseMessage_AIRichResponseLatexMetadata
> = {
  encode(
    message: AIRichResponseMessage_AIRichResponseLatexMetadata,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.text !== undefined) {
      writer.uint32(10).string(message.text);
    }
    for (const v of message.expressions) {
      AIRichResponseMessage_AIRichResponseLatexMetadata_AIRichResponseLatexExpression.encode(
        v!,
        writer.uint32(18).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AIRichResponseMessage_AIRichResponseLatexMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAIRichResponseMessage_AIRichResponseLatexMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.expressions.push(
            AIRichResponseMessage_AIRichResponseLatexMetadata_AIRichResponseLatexExpression.decode(
              reader,
              reader.uint32(),
            ),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AIRichResponseMessage_AIRichResponseLatexMetadata {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : undefined,
      expressions: globalThis.Array.isArray(object?.expressions)
        ? object.expressions.map((e: any) =>
          AIRichResponseMessage_AIRichResponseLatexMetadata_AIRichResponseLatexExpression.fromJSON(e)
        )
        : [],
    };
  },

  toJSON(message: AIRichResponseMessage_AIRichResponseLatexMetadata): unknown {
    const obj: any = {};
    if (message.text !== undefined) {
      obj.text = message.text;
    }
    if (message.expressions?.length) {
      obj.expressions = message.expressions.map((e) =>
        AIRichResponseMessage_AIRichResponseLatexMetadata_AIRichResponseLatexExpression.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseLatexMetadata>, I>>(
    base?: I,
  ): AIRichResponseMessage_AIRichResponseLatexMetadata {
    return AIRichResponseMessage_AIRichResponseLatexMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseLatexMetadata>, I>>(
    object: I,
  ): AIRichResponseMessage_AIRichResponseLatexMetadata {
    const message = createBaseAIRichResponseMessage_AIRichResponseLatexMetadata();
    message.text = object.text ?? undefined;
    message.expressions =
      object.expressions?.map((e) =>
        AIRichResponseMessage_AIRichResponseLatexMetadata_AIRichResponseLatexExpression.fromPartial(e)
      ) || [];
    return message;
  },
};

function createBaseAIRichResponseMessage_AIRichResponseLatexMetadata_AIRichResponseLatexExpression(): AIRichResponseMessage_AIRichResponseLatexMetadata_AIRichResponseLatexExpression {
  return {
    latexExpression: undefined,
    url: undefined,
    width: undefined,
    height: undefined,
    fontHeight: undefined,
    imageTopPadding: undefined,
    imageLeadingPadding: undefined,
    imageBottomPadding: undefined,
    imageTrailingPadding: undefined,
  };
}

export const AIRichResponseMessage_AIRichResponseLatexMetadata_AIRichResponseLatexExpression: MessageFns<
  AIRichResponseMessage_AIRichResponseLatexMetadata_AIRichResponseLatexExpression
> = {
  encode(
    message: AIRichResponseMessage_AIRichResponseLatexMetadata_AIRichResponseLatexExpression,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.latexExpression !== undefined) {
      writer.uint32(10).string(message.latexExpression);
    }
    if (message.url !== undefined) {
      writer.uint32(18).string(message.url);
    }
    if (message.width !== undefined) {
      writer.uint32(25).double(message.width);
    }
    if (message.height !== undefined) {
      writer.uint32(33).double(message.height);
    }
    if (message.fontHeight !== undefined) {
      writer.uint32(41).double(message.fontHeight);
    }
    if (message.imageTopPadding !== undefined) {
      writer.uint32(49).double(message.imageTopPadding);
    }
    if (message.imageLeadingPadding !== undefined) {
      writer.uint32(57).double(message.imageLeadingPadding);
    }
    if (message.imageBottomPadding !== undefined) {
      writer.uint32(65).double(message.imageBottomPadding);
    }
    if (message.imageTrailingPadding !== undefined) {
      writer.uint32(73).double(message.imageTrailingPadding);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): AIRichResponseMessage_AIRichResponseLatexMetadata_AIRichResponseLatexExpression {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAIRichResponseMessage_AIRichResponseLatexMetadata_AIRichResponseLatexExpression();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.latexExpression = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.width = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.height = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.fontHeight = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 49) {
            break;
          }

          message.imageTopPadding = reader.double();
          continue;
        }
        case 7: {
          if (tag !== 57) {
            break;
          }

          message.imageLeadingPadding = reader.double();
          continue;
        }
        case 8: {
          if (tag !== 65) {
            break;
          }

          message.imageBottomPadding = reader.double();
          continue;
        }
        case 9: {
          if (tag !== 73) {
            break;
          }

          message.imageTrailingPadding = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AIRichResponseMessage_AIRichResponseLatexMetadata_AIRichResponseLatexExpression {
    return {
      latexExpression: isSet(object.latexExpression) ? globalThis.String(object.latexExpression) : undefined,
      url: isSet(object.url) ? globalThis.String(object.url) : undefined,
      width: isSet(object.width) ? globalThis.Number(object.width) : undefined,
      height: isSet(object.height) ? globalThis.Number(object.height) : undefined,
      fontHeight: isSet(object.fontHeight) ? globalThis.Number(object.fontHeight) : undefined,
      imageTopPadding: isSet(object.imageTopPadding) ? globalThis.Number(object.imageTopPadding) : undefined,
      imageLeadingPadding: isSet(object.imageLeadingPadding)
        ? globalThis.Number(object.imageLeadingPadding)
        : undefined,
      imageBottomPadding: isSet(object.imageBottomPadding) ? globalThis.Number(object.imageBottomPadding) : undefined,
      imageTrailingPadding: isSet(object.imageTrailingPadding)
        ? globalThis.Number(object.imageTrailingPadding)
        : undefined,
    };
  },

  toJSON(message: AIRichResponseMessage_AIRichResponseLatexMetadata_AIRichResponseLatexExpression): unknown {
    const obj: any = {};
    if (message.latexExpression !== undefined) {
      obj.latexExpression = message.latexExpression;
    }
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    if (message.width !== undefined) {
      obj.width = message.width;
    }
    if (message.height !== undefined) {
      obj.height = message.height;
    }
    if (message.fontHeight !== undefined) {
      obj.fontHeight = message.fontHeight;
    }
    if (message.imageTopPadding !== undefined) {
      obj.imageTopPadding = message.imageTopPadding;
    }
    if (message.imageLeadingPadding !== undefined) {
      obj.imageLeadingPadding = message.imageLeadingPadding;
    }
    if (message.imageBottomPadding !== undefined) {
      obj.imageBottomPadding = message.imageBottomPadding;
    }
    if (message.imageTrailingPadding !== undefined) {
      obj.imageTrailingPadding = message.imageTrailingPadding;
    }
    return obj;
  },

  create<
    I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseLatexMetadata_AIRichResponseLatexExpression>, I>,
  >(base?: I): AIRichResponseMessage_AIRichResponseLatexMetadata_AIRichResponseLatexExpression {
    return AIRichResponseMessage_AIRichResponseLatexMetadata_AIRichResponseLatexExpression.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseLatexMetadata_AIRichResponseLatexExpression>, I>,
  >(object: I): AIRichResponseMessage_AIRichResponseLatexMetadata_AIRichResponseLatexExpression {
    const message = createBaseAIRichResponseMessage_AIRichResponseLatexMetadata_AIRichResponseLatexExpression();
    message.latexExpression = object.latexExpression ?? undefined;
    message.url = object.url ?? undefined;
    message.width = object.width ?? undefined;
    message.height = object.height ?? undefined;
    message.fontHeight = object.fontHeight ?? undefined;
    message.imageTopPadding = object.imageTopPadding ?? undefined;
    message.imageLeadingPadding = object.imageLeadingPadding ?? undefined;
    message.imageBottomPadding = object.imageBottomPadding ?? undefined;
    message.imageTrailingPadding = object.imageTrailingPadding ?? undefined;
    return message;
  },
};

function createBaseAIRichResponseMessage_AIRichResponseMapMetadata(): AIRichResponseMessage_AIRichResponseMapMetadata {
  return {
    centerLatitude: undefined,
    centerLongitude: undefined,
    latitudeDelta: undefined,
    longitudeDelta: undefined,
    annotations: [],
    showInfoList: undefined,
  };
}

export const AIRichResponseMessage_AIRichResponseMapMetadata: MessageFns<
  AIRichResponseMessage_AIRichResponseMapMetadata
> = {
  encode(
    message: AIRichResponseMessage_AIRichResponseMapMetadata,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.centerLatitude !== undefined) {
      writer.uint32(9).double(message.centerLatitude);
    }
    if (message.centerLongitude !== undefined) {
      writer.uint32(17).double(message.centerLongitude);
    }
    if (message.latitudeDelta !== undefined) {
      writer.uint32(25).double(message.latitudeDelta);
    }
    if (message.longitudeDelta !== undefined) {
      writer.uint32(33).double(message.longitudeDelta);
    }
    for (const v of message.annotations) {
      AIRichResponseMessage_AIRichResponseMapMetadata_AIRichResponseMapAnnotation.encode(v!, writer.uint32(42).fork())
        .join();
    }
    if (message.showInfoList !== undefined) {
      writer.uint32(48).bool(message.showInfoList);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AIRichResponseMessage_AIRichResponseMapMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAIRichResponseMessage_AIRichResponseMapMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.centerLatitude = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.centerLongitude = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.latitudeDelta = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.longitudeDelta = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.annotations.push(
            AIRichResponseMessage_AIRichResponseMapMetadata_AIRichResponseMapAnnotation.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.showInfoList = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AIRichResponseMessage_AIRichResponseMapMetadata {
    return {
      centerLatitude: isSet(object.centerLatitude) ? globalThis.Number(object.centerLatitude) : undefined,
      centerLongitude: isSet(object.centerLongitude) ? globalThis.Number(object.centerLongitude) : undefined,
      latitudeDelta: isSet(object.latitudeDelta) ? globalThis.Number(object.latitudeDelta) : undefined,
      longitudeDelta: isSet(object.longitudeDelta) ? globalThis.Number(object.longitudeDelta) : undefined,
      annotations: globalThis.Array.isArray(object?.annotations)
        ? object.annotations.map((e: any) =>
          AIRichResponseMessage_AIRichResponseMapMetadata_AIRichResponseMapAnnotation.fromJSON(e)
        )
        : [],
      showInfoList: isSet(object.showInfoList) ? globalThis.Boolean(object.showInfoList) : undefined,
    };
  },

  toJSON(message: AIRichResponseMessage_AIRichResponseMapMetadata): unknown {
    const obj: any = {};
    if (message.centerLatitude !== undefined) {
      obj.centerLatitude = message.centerLatitude;
    }
    if (message.centerLongitude !== undefined) {
      obj.centerLongitude = message.centerLongitude;
    }
    if (message.latitudeDelta !== undefined) {
      obj.latitudeDelta = message.latitudeDelta;
    }
    if (message.longitudeDelta !== undefined) {
      obj.longitudeDelta = message.longitudeDelta;
    }
    if (message.annotations?.length) {
      obj.annotations = message.annotations.map((e) =>
        AIRichResponseMessage_AIRichResponseMapMetadata_AIRichResponseMapAnnotation.toJSON(e)
      );
    }
    if (message.showInfoList !== undefined) {
      obj.showInfoList = message.showInfoList;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseMapMetadata>, I>>(
    base?: I,
  ): AIRichResponseMessage_AIRichResponseMapMetadata {
    return AIRichResponseMessage_AIRichResponseMapMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseMapMetadata>, I>>(
    object: I,
  ): AIRichResponseMessage_AIRichResponseMapMetadata {
    const message = createBaseAIRichResponseMessage_AIRichResponseMapMetadata();
    message.centerLatitude = object.centerLatitude ?? undefined;
    message.centerLongitude = object.centerLongitude ?? undefined;
    message.latitudeDelta = object.latitudeDelta ?? undefined;
    message.longitudeDelta = object.longitudeDelta ?? undefined;
    message.annotations =
      object.annotations?.map((e) =>
        AIRichResponseMessage_AIRichResponseMapMetadata_AIRichResponseMapAnnotation.fromPartial(e)
      ) || [];
    message.showInfoList = object.showInfoList ?? undefined;
    return message;
  },
};

function createBaseAIRichResponseMessage_AIRichResponseMapMetadata_AIRichResponseMapAnnotation(): AIRichResponseMessage_AIRichResponseMapMetadata_AIRichResponseMapAnnotation {
  return { annotationNumber: undefined, latitude: undefined, longitude: undefined, title: undefined, body: undefined };
}

export const AIRichResponseMessage_AIRichResponseMapMetadata_AIRichResponseMapAnnotation: MessageFns<
  AIRichResponseMessage_AIRichResponseMapMetadata_AIRichResponseMapAnnotation
> = {
  encode(
    message: AIRichResponseMessage_AIRichResponseMapMetadata_AIRichResponseMapAnnotation,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.annotationNumber !== undefined) {
      writer.uint32(8).uint32(message.annotationNumber);
    }
    if (message.latitude !== undefined) {
      writer.uint32(17).double(message.latitude);
    }
    if (message.longitude !== undefined) {
      writer.uint32(25).double(message.longitude);
    }
    if (message.title !== undefined) {
      writer.uint32(34).string(message.title);
    }
    if (message.body !== undefined) {
      writer.uint32(42).string(message.body);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): AIRichResponseMessage_AIRichResponseMapMetadata_AIRichResponseMapAnnotation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAIRichResponseMessage_AIRichResponseMapMetadata_AIRichResponseMapAnnotation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.annotationNumber = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.latitude = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.longitude = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.body = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AIRichResponseMessage_AIRichResponseMapMetadata_AIRichResponseMapAnnotation {
    return {
      annotationNumber: isSet(object.annotationNumber) ? globalThis.Number(object.annotationNumber) : undefined,
      latitude: isSet(object.latitude) ? globalThis.Number(object.latitude) : undefined,
      longitude: isSet(object.longitude) ? globalThis.Number(object.longitude) : undefined,
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      body: isSet(object.body) ? globalThis.String(object.body) : undefined,
    };
  },

  toJSON(message: AIRichResponseMessage_AIRichResponseMapMetadata_AIRichResponseMapAnnotation): unknown {
    const obj: any = {};
    if (message.annotationNumber !== undefined) {
      obj.annotationNumber = Math.round(message.annotationNumber);
    }
    if (message.latitude !== undefined) {
      obj.latitude = message.latitude;
    }
    if (message.longitude !== undefined) {
      obj.longitude = message.longitude;
    }
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.body !== undefined) {
      obj.body = message.body;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseMapMetadata_AIRichResponseMapAnnotation>, I>>(
    base?: I,
  ): AIRichResponseMessage_AIRichResponseMapMetadata_AIRichResponseMapAnnotation {
    return AIRichResponseMessage_AIRichResponseMapMetadata_AIRichResponseMapAnnotation.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseMapMetadata_AIRichResponseMapAnnotation>, I>,
  >(object: I): AIRichResponseMessage_AIRichResponseMapMetadata_AIRichResponseMapAnnotation {
    const message = createBaseAIRichResponseMessage_AIRichResponseMapMetadata_AIRichResponseMapAnnotation();
    message.annotationNumber = object.annotationNumber ?? undefined;
    message.latitude = object.latitude ?? undefined;
    message.longitude = object.longitude ?? undefined;
    message.title = object.title ?? undefined;
    message.body = object.body ?? undefined;
    return message;
  },
};

function createBaseAIRichResponseMessage_AIRichResponseSubMessage(): AIRichResponseMessage_AIRichResponseSubMessage {
  return {
    messageType: undefined,
    gridImageMetadata: undefined,
    messageText: undefined,
    imageMetadata: undefined,
    codeMetadata: undefined,
    tableMetadata: undefined,
    dynamicMetadata: undefined,
    latexMetadata: undefined,
    mapMetadata: undefined,
    contentItemsMetadata: undefined,
  };
}

export const AIRichResponseMessage_AIRichResponseSubMessage: MessageFns<
  AIRichResponseMessage_AIRichResponseSubMessage
> = {
  encode(
    message: AIRichResponseMessage_AIRichResponseSubMessage,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.messageType !== undefined) {
      writer.uint32(8).int32(message.messageType);
    }
    if (message.gridImageMetadata !== undefined) {
      AIRichResponseMessage_AIRichResponseGridImageMetadata.encode(message.gridImageMetadata, writer.uint32(18).fork())
        .join();
    }
    if (message.messageText !== undefined) {
      writer.uint32(26).string(message.messageText);
    }
    if (message.imageMetadata !== undefined) {
      AIRichResponseMessage_AIRichResponseInlineImageMetadata.encode(message.imageMetadata, writer.uint32(34).fork())
        .join();
    }
    if (message.codeMetadata !== undefined) {
      AIRichResponseMessage_AIRichResponseCodeMetadata.encode(message.codeMetadata, writer.uint32(42).fork()).join();
    }
    if (message.tableMetadata !== undefined) {
      AIRichResponseMessage_AIRichResponseTableMetadata.encode(message.tableMetadata, writer.uint32(50).fork()).join();
    }
    if (message.dynamicMetadata !== undefined) {
      AIRichResponseMessage_AIRichResponseDynamicMetadata.encode(message.dynamicMetadata, writer.uint32(58).fork())
        .join();
    }
    if (message.latexMetadata !== undefined) {
      AIRichResponseMessage_AIRichResponseLatexMetadata.encode(message.latexMetadata, writer.uint32(66).fork()).join();
    }
    if (message.mapMetadata !== undefined) {
      AIRichResponseMessage_AIRichResponseMapMetadata.encode(message.mapMetadata, writer.uint32(74).fork()).join();
    }
    if (message.contentItemsMetadata !== undefined) {
      AIRichResponseMessage_AIRichResponseContentItemsMetadata.encode(
        message.contentItemsMetadata,
        writer.uint32(82).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AIRichResponseMessage_AIRichResponseSubMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAIRichResponseMessage_AIRichResponseSubMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.messageType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gridImageMetadata = AIRichResponseMessage_AIRichResponseGridImageMetadata.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.messageText = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.imageMetadata = AIRichResponseMessage_AIRichResponseInlineImageMetadata.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.codeMetadata = AIRichResponseMessage_AIRichResponseCodeMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.tableMetadata = AIRichResponseMessage_AIRichResponseTableMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.dynamicMetadata = AIRichResponseMessage_AIRichResponseDynamicMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.latexMetadata = AIRichResponseMessage_AIRichResponseLatexMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.mapMetadata = AIRichResponseMessage_AIRichResponseMapMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.contentItemsMetadata = AIRichResponseMessage_AIRichResponseContentItemsMetadata.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AIRichResponseMessage_AIRichResponseSubMessage {
    return {
      messageType: isSet(object.messageType)
        ? aIRichResponseMessage_AIRichResponseSubMessageTypeFromJSON(object.messageType)
        : undefined,
      gridImageMetadata: isSet(object.gridImageMetadata)
        ? AIRichResponseMessage_AIRichResponseGridImageMetadata.fromJSON(object.gridImageMetadata)
        : undefined,
      messageText: isSet(object.messageText) ? globalThis.String(object.messageText) : undefined,
      imageMetadata: isSet(object.imageMetadata)
        ? AIRichResponseMessage_AIRichResponseInlineImageMetadata.fromJSON(object.imageMetadata)
        : undefined,
      codeMetadata: isSet(object.codeMetadata)
        ? AIRichResponseMessage_AIRichResponseCodeMetadata.fromJSON(object.codeMetadata)
        : undefined,
      tableMetadata: isSet(object.tableMetadata)
        ? AIRichResponseMessage_AIRichResponseTableMetadata.fromJSON(object.tableMetadata)
        : undefined,
      dynamicMetadata: isSet(object.dynamicMetadata)
        ? AIRichResponseMessage_AIRichResponseDynamicMetadata.fromJSON(object.dynamicMetadata)
        : undefined,
      latexMetadata: isSet(object.latexMetadata)
        ? AIRichResponseMessage_AIRichResponseLatexMetadata.fromJSON(object.latexMetadata)
        : undefined,
      mapMetadata: isSet(object.mapMetadata)
        ? AIRichResponseMessage_AIRichResponseMapMetadata.fromJSON(object.mapMetadata)
        : undefined,
      contentItemsMetadata: isSet(object.contentItemsMetadata)
        ? AIRichResponseMessage_AIRichResponseContentItemsMetadata.fromJSON(object.contentItemsMetadata)
        : undefined,
    };
  },

  toJSON(message: AIRichResponseMessage_AIRichResponseSubMessage): unknown {
    const obj: any = {};
    if (message.messageType !== undefined) {
      obj.messageType = aIRichResponseMessage_AIRichResponseSubMessageTypeToJSON(message.messageType);
    }
    if (message.gridImageMetadata !== undefined) {
      obj.gridImageMetadata = AIRichResponseMessage_AIRichResponseGridImageMetadata.toJSON(message.gridImageMetadata);
    }
    if (message.messageText !== undefined) {
      obj.messageText = message.messageText;
    }
    if (message.imageMetadata !== undefined) {
      obj.imageMetadata = AIRichResponseMessage_AIRichResponseInlineImageMetadata.toJSON(message.imageMetadata);
    }
    if (message.codeMetadata !== undefined) {
      obj.codeMetadata = AIRichResponseMessage_AIRichResponseCodeMetadata.toJSON(message.codeMetadata);
    }
    if (message.tableMetadata !== undefined) {
      obj.tableMetadata = AIRichResponseMessage_AIRichResponseTableMetadata.toJSON(message.tableMetadata);
    }
    if (message.dynamicMetadata !== undefined) {
      obj.dynamicMetadata = AIRichResponseMessage_AIRichResponseDynamicMetadata.toJSON(message.dynamicMetadata);
    }
    if (message.latexMetadata !== undefined) {
      obj.latexMetadata = AIRichResponseMessage_AIRichResponseLatexMetadata.toJSON(message.latexMetadata);
    }
    if (message.mapMetadata !== undefined) {
      obj.mapMetadata = AIRichResponseMessage_AIRichResponseMapMetadata.toJSON(message.mapMetadata);
    }
    if (message.contentItemsMetadata !== undefined) {
      obj.contentItemsMetadata = AIRichResponseMessage_AIRichResponseContentItemsMetadata.toJSON(
        message.contentItemsMetadata,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseSubMessage>, I>>(
    base?: I,
  ): AIRichResponseMessage_AIRichResponseSubMessage {
    return AIRichResponseMessage_AIRichResponseSubMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseSubMessage>, I>>(
    object: I,
  ): AIRichResponseMessage_AIRichResponseSubMessage {
    const message = createBaseAIRichResponseMessage_AIRichResponseSubMessage();
    message.messageType = object.messageType ?? undefined;
    message.gridImageMetadata = (object.gridImageMetadata !== undefined && object.gridImageMetadata !== null)
      ? AIRichResponseMessage_AIRichResponseGridImageMetadata.fromPartial(object.gridImageMetadata)
      : undefined;
    message.messageText = object.messageText ?? undefined;
    message.imageMetadata = (object.imageMetadata !== undefined && object.imageMetadata !== null)
      ? AIRichResponseMessage_AIRichResponseInlineImageMetadata.fromPartial(object.imageMetadata)
      : undefined;
    message.codeMetadata = (object.codeMetadata !== undefined && object.codeMetadata !== null)
      ? AIRichResponseMessage_AIRichResponseCodeMetadata.fromPartial(object.codeMetadata)
      : undefined;
    message.tableMetadata = (object.tableMetadata !== undefined && object.tableMetadata !== null)
      ? AIRichResponseMessage_AIRichResponseTableMetadata.fromPartial(object.tableMetadata)
      : undefined;
    message.dynamicMetadata = (object.dynamicMetadata !== undefined && object.dynamicMetadata !== null)
      ? AIRichResponseMessage_AIRichResponseDynamicMetadata.fromPartial(object.dynamicMetadata)
      : undefined;
    message.latexMetadata = (object.latexMetadata !== undefined && object.latexMetadata !== null)
      ? AIRichResponseMessage_AIRichResponseLatexMetadata.fromPartial(object.latexMetadata)
      : undefined;
    message.mapMetadata = (object.mapMetadata !== undefined && object.mapMetadata !== null)
      ? AIRichResponseMessage_AIRichResponseMapMetadata.fromPartial(object.mapMetadata)
      : undefined;
    message.contentItemsMetadata = (object.contentItemsMetadata !== undefined && object.contentItemsMetadata !== null)
      ? AIRichResponseMessage_AIRichResponseContentItemsMetadata.fromPartial(object.contentItemsMetadata)
      : undefined;
    return message;
  },
};

function createBaseAIRichResponseMessage_AIRichResponseTableMetadata(): AIRichResponseMessage_AIRichResponseTableMetadata {
  return { rows: [] };
}

export const AIRichResponseMessage_AIRichResponseTableMetadata: MessageFns<
  AIRichResponseMessage_AIRichResponseTableMetadata
> = {
  encode(
    message: AIRichResponseMessage_AIRichResponseTableMetadata,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.rows) {
      AIRichResponseMessage_AIRichResponseTableMetadata_AIRichResponseTableRow.encode(v!, writer.uint32(10).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AIRichResponseMessage_AIRichResponseTableMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAIRichResponseMessage_AIRichResponseTableMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rows.push(
            AIRichResponseMessage_AIRichResponseTableMetadata_AIRichResponseTableRow.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AIRichResponseMessage_AIRichResponseTableMetadata {
    return {
      rows: globalThis.Array.isArray(object?.rows)
        ? object.rows.map((e: any) =>
          AIRichResponseMessage_AIRichResponseTableMetadata_AIRichResponseTableRow.fromJSON(e)
        )
        : [],
    };
  },

  toJSON(message: AIRichResponseMessage_AIRichResponseTableMetadata): unknown {
    const obj: any = {};
    if (message.rows?.length) {
      obj.rows = message.rows.map((e) =>
        AIRichResponseMessage_AIRichResponseTableMetadata_AIRichResponseTableRow.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseTableMetadata>, I>>(
    base?: I,
  ): AIRichResponseMessage_AIRichResponseTableMetadata {
    return AIRichResponseMessage_AIRichResponseTableMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseTableMetadata>, I>>(
    object: I,
  ): AIRichResponseMessage_AIRichResponseTableMetadata {
    const message = createBaseAIRichResponseMessage_AIRichResponseTableMetadata();
    message.rows =
      object.rows?.map((e) =>
        AIRichResponseMessage_AIRichResponseTableMetadata_AIRichResponseTableRow.fromPartial(e)
      ) || [];
    return message;
  },
};

function createBaseAIRichResponseMessage_AIRichResponseTableMetadata_AIRichResponseTableRow(): AIRichResponseMessage_AIRichResponseTableMetadata_AIRichResponseTableRow {
  return { items: [], isHeading: undefined };
}

export const AIRichResponseMessage_AIRichResponseTableMetadata_AIRichResponseTableRow: MessageFns<
  AIRichResponseMessage_AIRichResponseTableMetadata_AIRichResponseTableRow
> = {
  encode(
    message: AIRichResponseMessage_AIRichResponseTableMetadata_AIRichResponseTableRow,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.items) {
      writer.uint32(10).string(v!);
    }
    if (message.isHeading !== undefined) {
      writer.uint32(16).bool(message.isHeading);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): AIRichResponseMessage_AIRichResponseTableMetadata_AIRichResponseTableRow {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAIRichResponseMessage_AIRichResponseTableMetadata_AIRichResponseTableRow();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.items.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isHeading = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AIRichResponseMessage_AIRichResponseTableMetadata_AIRichResponseTableRow {
    return {
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => globalThis.String(e)) : [],
      isHeading: isSet(object.isHeading) ? globalThis.Boolean(object.isHeading) : undefined,
    };
  },

  toJSON(message: AIRichResponseMessage_AIRichResponseTableMetadata_AIRichResponseTableRow): unknown {
    const obj: any = {};
    if (message.items?.length) {
      obj.items = message.items;
    }
    if (message.isHeading !== undefined) {
      obj.isHeading = message.isHeading;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseTableMetadata_AIRichResponseTableRow>, I>>(
    base?: I,
  ): AIRichResponseMessage_AIRichResponseTableMetadata_AIRichResponseTableRow {
    return AIRichResponseMessage_AIRichResponseTableMetadata_AIRichResponseTableRow.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseTableMetadata_AIRichResponseTableRow>, I>,
  >(object: I): AIRichResponseMessage_AIRichResponseTableMetadata_AIRichResponseTableRow {
    const message = createBaseAIRichResponseMessage_AIRichResponseTableMetadata_AIRichResponseTableRow();
    message.items = object.items?.map((e) => e) || [];
    message.isHeading = object.isHeading ?? undefined;
    return message;
  },
};

function createBaseAIRichResponseMessage_AIRichResponseUnifiedResponse(): AIRichResponseMessage_AIRichResponseUnifiedResponse {
  return { data: undefined };
}

export const AIRichResponseMessage_AIRichResponseUnifiedResponse: MessageFns<
  AIRichResponseMessage_AIRichResponseUnifiedResponse
> = {
  encode(
    message: AIRichResponseMessage_AIRichResponseUnifiedResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.data !== undefined) {
      writer.uint32(10).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AIRichResponseMessage_AIRichResponseUnifiedResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAIRichResponseMessage_AIRichResponseUnifiedResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AIRichResponseMessage_AIRichResponseUnifiedResponse {
    return { data: isSet(object.data) ? bytesFromBase64(object.data) : undefined };
  },

  toJSON(message: AIRichResponseMessage_AIRichResponseUnifiedResponse): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseUnifiedResponse>, I>>(
    base?: I,
  ): AIRichResponseMessage_AIRichResponseUnifiedResponse {
    return AIRichResponseMessage_AIRichResponseUnifiedResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AIRichResponseMessage_AIRichResponseUnifiedResponse>, I>>(
    object: I,
  ): AIRichResponseMessage_AIRichResponseUnifiedResponse {
    const message = createBaseAIRichResponseMessage_AIRichResponseUnifiedResponse();
    message.data = object.data ?? undefined;
    return message;
  },
};

function createBaseAccount(): Account {
  return { lid: undefined, username: undefined, countryCode: undefined, isUsernameDeleted: undefined };
}

export const Account: MessageFns<Account> = {
  encode(message: Account, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lid !== undefined) {
      writer.uint32(10).string(message.lid);
    }
    if (message.username !== undefined) {
      writer.uint32(18).string(message.username);
    }
    if (message.countryCode !== undefined) {
      writer.uint32(26).string(message.countryCode);
    }
    if (message.isUsernameDeleted !== undefined) {
      writer.uint32(32).bool(message.isUsernameDeleted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Account {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.lid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.countryCode = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isUsernameDeleted = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Account {
    return {
      lid: isSet(object.lid) ? globalThis.String(object.lid) : undefined,
      username: isSet(object.username) ? globalThis.String(object.username) : undefined,
      countryCode: isSet(object.countryCode) ? globalThis.String(object.countryCode) : undefined,
      isUsernameDeleted: isSet(object.isUsernameDeleted) ? globalThis.Boolean(object.isUsernameDeleted) : undefined,
    };
  },

  toJSON(message: Account): unknown {
    const obj: any = {};
    if (message.lid !== undefined) {
      obj.lid = message.lid;
    }
    if (message.username !== undefined) {
      obj.username = message.username;
    }
    if (message.countryCode !== undefined) {
      obj.countryCode = message.countryCode;
    }
    if (message.isUsernameDeleted !== undefined) {
      obj.isUsernameDeleted = message.isUsernameDeleted;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Account>, I>>(base?: I): Account {
    return Account.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Account>, I>>(object: I): Account {
    const message = createBaseAccount();
    message.lid = object.lid ?? undefined;
    message.username = object.username ?? undefined;
    message.countryCode = object.countryCode ?? undefined;
    message.isUsernameDeleted = object.isUsernameDeleted ?? undefined;
    return message;
  },
};

function createBaseActionLink(): ActionLink {
  return { url: undefined, buttonTitle: undefined };
}

export const ActionLink: MessageFns<ActionLink> = {
  encode(message: ActionLink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== undefined) {
      writer.uint32(10).string(message.url);
    }
    if (message.buttonTitle !== undefined) {
      writer.uint32(18).string(message.buttonTitle);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActionLink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActionLink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.buttonTitle = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActionLink {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : undefined,
      buttonTitle: isSet(object.buttonTitle) ? globalThis.String(object.buttonTitle) : undefined,
    };
  },

  toJSON(message: ActionLink): unknown {
    const obj: any = {};
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    if (message.buttonTitle !== undefined) {
      obj.buttonTitle = message.buttonTitle;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ActionLink>, I>>(base?: I): ActionLink {
    return ActionLink.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActionLink>, I>>(object: I): ActionLink {
    const message = createBaseActionLink();
    message.url = object.url ?? undefined;
    message.buttonTitle = object.buttonTitle ?? undefined;
    return message;
  },
};

function createBaseAutoDownloadSettings(): AutoDownloadSettings {
  return {
    downloadImages: undefined,
    downloadAudio: undefined,
    downloadVideo: undefined,
    downloadDocuments: undefined,
  };
}

export const AutoDownloadSettings: MessageFns<AutoDownloadSettings> = {
  encode(message: AutoDownloadSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.downloadImages !== undefined) {
      writer.uint32(8).bool(message.downloadImages);
    }
    if (message.downloadAudio !== undefined) {
      writer.uint32(16).bool(message.downloadAudio);
    }
    if (message.downloadVideo !== undefined) {
      writer.uint32(24).bool(message.downloadVideo);
    }
    if (message.downloadDocuments !== undefined) {
      writer.uint32(32).bool(message.downloadDocuments);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutoDownloadSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutoDownloadSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.downloadImages = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.downloadAudio = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.downloadVideo = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.downloadDocuments = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutoDownloadSettings {
    return {
      downloadImages: isSet(object.downloadImages) ? globalThis.Boolean(object.downloadImages) : undefined,
      downloadAudio: isSet(object.downloadAudio) ? globalThis.Boolean(object.downloadAudio) : undefined,
      downloadVideo: isSet(object.downloadVideo) ? globalThis.Boolean(object.downloadVideo) : undefined,
      downloadDocuments: isSet(object.downloadDocuments) ? globalThis.Boolean(object.downloadDocuments) : undefined,
    };
  },

  toJSON(message: AutoDownloadSettings): unknown {
    const obj: any = {};
    if (message.downloadImages !== undefined) {
      obj.downloadImages = message.downloadImages;
    }
    if (message.downloadAudio !== undefined) {
      obj.downloadAudio = message.downloadAudio;
    }
    if (message.downloadVideo !== undefined) {
      obj.downloadVideo = message.downloadVideo;
    }
    if (message.downloadDocuments !== undefined) {
      obj.downloadDocuments = message.downloadDocuments;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AutoDownloadSettings>, I>>(base?: I): AutoDownloadSettings {
    return AutoDownloadSettings.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AutoDownloadSettings>, I>>(object: I): AutoDownloadSettings {
    const message = createBaseAutoDownloadSettings();
    message.downloadImages = object.downloadImages ?? undefined;
    message.downloadAudio = object.downloadAudio ?? undefined;
    message.downloadVideo = object.downloadVideo ?? undefined;
    message.downloadDocuments = object.downloadDocuments ?? undefined;
    return message;
  },
};

function createBaseAvatarUserSettings(): AvatarUserSettings {
  return { fbid: undefined, password: undefined };
}

export const AvatarUserSettings: MessageFns<AvatarUserSettings> = {
  encode(message: AvatarUserSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fbid !== undefined) {
      writer.uint32(10).string(message.fbid);
    }
    if (message.password !== undefined) {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AvatarUserSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAvatarUserSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fbid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AvatarUserSettings {
    return {
      fbid: isSet(object.fbid) ? globalThis.String(object.fbid) : undefined,
      password: isSet(object.password) ? globalThis.String(object.password) : undefined,
    };
  },

  toJSON(message: AvatarUserSettings): unknown {
    const obj: any = {};
    if (message.fbid !== undefined) {
      obj.fbid = message.fbid;
    }
    if (message.password !== undefined) {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AvatarUserSettings>, I>>(base?: I): AvatarUserSettings {
    return AvatarUserSettings.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AvatarUserSettings>, I>>(object: I): AvatarUserSettings {
    const message = createBaseAvatarUserSettings();
    message.fbid = object.fbid ?? undefined;
    message.password = object.password ?? undefined;
    return message;
  },
};

function createBaseBizAccountLinkInfo(): BizAccountLinkInfo {
  return {
    whatsappBizAcctFbid: undefined,
    whatsappAcctNumber: undefined,
    issueTime: undefined,
    hostStorage: undefined,
    accountType: undefined,
  };
}

export const BizAccountLinkInfo: MessageFns<BizAccountLinkInfo> = {
  encode(message: BizAccountLinkInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.whatsappBizAcctFbid !== undefined) {
      writer.uint32(8).uint64(message.whatsappBizAcctFbid);
    }
    if (message.whatsappAcctNumber !== undefined) {
      writer.uint32(18).string(message.whatsappAcctNumber);
    }
    if (message.issueTime !== undefined) {
      writer.uint32(24).uint64(message.issueTime);
    }
    if (message.hostStorage !== undefined) {
      writer.uint32(32).int32(message.hostStorage);
    }
    if (message.accountType !== undefined) {
      writer.uint32(40).int32(message.accountType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BizAccountLinkInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBizAccountLinkInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.whatsappBizAcctFbid = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.whatsappAcctNumber = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.issueTime = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.hostStorage = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.accountType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BizAccountLinkInfo {
    return {
      whatsappBizAcctFbid: isSet(object.whatsappBizAcctFbid)
        ? globalThis.Number(object.whatsappBizAcctFbid)
        : undefined,
      whatsappAcctNumber: isSet(object.whatsappAcctNumber) ? globalThis.String(object.whatsappAcctNumber) : undefined,
      issueTime: isSet(object.issueTime) ? globalThis.Number(object.issueTime) : undefined,
      hostStorage: isSet(object.hostStorage)
        ? bizAccountLinkInfo_HostStorageTypeFromJSON(object.hostStorage)
        : undefined,
      accountType: isSet(object.accountType) ? bizAccountLinkInfo_AccountTypeFromJSON(object.accountType) : undefined,
    };
  },

  toJSON(message: BizAccountLinkInfo): unknown {
    const obj: any = {};
    if (message.whatsappBizAcctFbid !== undefined) {
      obj.whatsappBizAcctFbid = Math.round(message.whatsappBizAcctFbid);
    }
    if (message.whatsappAcctNumber !== undefined) {
      obj.whatsappAcctNumber = message.whatsappAcctNumber;
    }
    if (message.issueTime !== undefined) {
      obj.issueTime = Math.round(message.issueTime);
    }
    if (message.hostStorage !== undefined) {
      obj.hostStorage = bizAccountLinkInfo_HostStorageTypeToJSON(message.hostStorage);
    }
    if (message.accountType !== undefined) {
      obj.accountType = bizAccountLinkInfo_AccountTypeToJSON(message.accountType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BizAccountLinkInfo>, I>>(base?: I): BizAccountLinkInfo {
    return BizAccountLinkInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BizAccountLinkInfo>, I>>(object: I): BizAccountLinkInfo {
    const message = createBaseBizAccountLinkInfo();
    message.whatsappBizAcctFbid = object.whatsappBizAcctFbid ?? undefined;
    message.whatsappAcctNumber = object.whatsappAcctNumber ?? undefined;
    message.issueTime = object.issueTime ?? undefined;
    message.hostStorage = object.hostStorage ?? undefined;
    message.accountType = object.accountType ?? undefined;
    return message;
  },
};

function createBaseBizAccountPayload(): BizAccountPayload {
  return { vnameCert: undefined, bizAcctLinkInfo: undefined };
}

export const BizAccountPayload: MessageFns<BizAccountPayload> = {
  encode(message: BizAccountPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.vnameCert !== undefined) {
      VerifiedNameCertificate.encode(message.vnameCert, writer.uint32(10).fork()).join();
    }
    if (message.bizAcctLinkInfo !== undefined) {
      writer.uint32(18).bytes(message.bizAcctLinkInfo);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BizAccountPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBizAccountPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.vnameCert = VerifiedNameCertificate.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.bizAcctLinkInfo = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BizAccountPayload {
    return {
      vnameCert: isSet(object.vnameCert) ? VerifiedNameCertificate.fromJSON(object.vnameCert) : undefined,
      bizAcctLinkInfo: isSet(object.bizAcctLinkInfo) ? bytesFromBase64(object.bizAcctLinkInfo) : undefined,
    };
  },

  toJSON(message: BizAccountPayload): unknown {
    const obj: any = {};
    if (message.vnameCert !== undefined) {
      obj.vnameCert = VerifiedNameCertificate.toJSON(message.vnameCert);
    }
    if (message.bizAcctLinkInfo !== undefined) {
      obj.bizAcctLinkInfo = base64FromBytes(message.bizAcctLinkInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BizAccountPayload>, I>>(base?: I): BizAccountPayload {
    return BizAccountPayload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BizAccountPayload>, I>>(object: I): BizAccountPayload {
    const message = createBaseBizAccountPayload();
    message.vnameCert = (object.vnameCert !== undefined && object.vnameCert !== null)
      ? VerifiedNameCertificate.fromPartial(object.vnameCert)
      : undefined;
    message.bizAcctLinkInfo = object.bizAcctLinkInfo ?? undefined;
    return message;
  },
};

function createBaseBizIdentityInfo(): BizIdentityInfo {
  return {
    vlevel: undefined,
    vnameCert: undefined,
    signed: undefined,
    revoked: undefined,
    hostStorage: undefined,
    actualActors: undefined,
    privacyModeTs: undefined,
    featureControls: undefined,
  };
}

export const BizIdentityInfo: MessageFns<BizIdentityInfo> = {
  encode(message: BizIdentityInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.vlevel !== undefined) {
      writer.uint32(8).int32(message.vlevel);
    }
    if (message.vnameCert !== undefined) {
      VerifiedNameCertificate.encode(message.vnameCert, writer.uint32(18).fork()).join();
    }
    if (message.signed !== undefined) {
      writer.uint32(24).bool(message.signed);
    }
    if (message.revoked !== undefined) {
      writer.uint32(32).bool(message.revoked);
    }
    if (message.hostStorage !== undefined) {
      writer.uint32(40).int32(message.hostStorage);
    }
    if (message.actualActors !== undefined) {
      writer.uint32(48).int32(message.actualActors);
    }
    if (message.privacyModeTs !== undefined) {
      writer.uint32(56).uint64(message.privacyModeTs);
    }
    if (message.featureControls !== undefined) {
      writer.uint32(64).uint64(message.featureControls);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BizIdentityInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBizIdentityInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.vlevel = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.vnameCert = VerifiedNameCertificate.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.signed = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.revoked = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.hostStorage = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.actualActors = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.privacyModeTs = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.featureControls = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BizIdentityInfo {
    return {
      vlevel: isSet(object.vlevel) ? bizIdentityInfo_VerifiedLevelValueFromJSON(object.vlevel) : undefined,
      vnameCert: isSet(object.vnameCert) ? VerifiedNameCertificate.fromJSON(object.vnameCert) : undefined,
      signed: isSet(object.signed) ? globalThis.Boolean(object.signed) : undefined,
      revoked: isSet(object.revoked) ? globalThis.Boolean(object.revoked) : undefined,
      hostStorage: isSet(object.hostStorage) ? bizIdentityInfo_HostStorageTypeFromJSON(object.hostStorage) : undefined,
      actualActors: isSet(object.actualActors)
        ? bizIdentityInfo_ActualActorsTypeFromJSON(object.actualActors)
        : undefined,
      privacyModeTs: isSet(object.privacyModeTs) ? globalThis.Number(object.privacyModeTs) : undefined,
      featureControls: isSet(object.featureControls) ? globalThis.Number(object.featureControls) : undefined,
    };
  },

  toJSON(message: BizIdentityInfo): unknown {
    const obj: any = {};
    if (message.vlevel !== undefined) {
      obj.vlevel = bizIdentityInfo_VerifiedLevelValueToJSON(message.vlevel);
    }
    if (message.vnameCert !== undefined) {
      obj.vnameCert = VerifiedNameCertificate.toJSON(message.vnameCert);
    }
    if (message.signed !== undefined) {
      obj.signed = message.signed;
    }
    if (message.revoked !== undefined) {
      obj.revoked = message.revoked;
    }
    if (message.hostStorage !== undefined) {
      obj.hostStorage = bizIdentityInfo_HostStorageTypeToJSON(message.hostStorage);
    }
    if (message.actualActors !== undefined) {
      obj.actualActors = bizIdentityInfo_ActualActorsTypeToJSON(message.actualActors);
    }
    if (message.privacyModeTs !== undefined) {
      obj.privacyModeTs = Math.round(message.privacyModeTs);
    }
    if (message.featureControls !== undefined) {
      obj.featureControls = Math.round(message.featureControls);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BizIdentityInfo>, I>>(base?: I): BizIdentityInfo {
    return BizIdentityInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BizIdentityInfo>, I>>(object: I): BizIdentityInfo {
    const message = createBaseBizIdentityInfo();
    message.vlevel = object.vlevel ?? undefined;
    message.vnameCert = (object.vnameCert !== undefined && object.vnameCert !== null)
      ? VerifiedNameCertificate.fromPartial(object.vnameCert)
      : undefined;
    message.signed = object.signed ?? undefined;
    message.revoked = object.revoked ?? undefined;
    message.hostStorage = object.hostStorage ?? undefined;
    message.actualActors = object.actualActors ?? undefined;
    message.privacyModeTs = object.privacyModeTs ?? undefined;
    message.featureControls = object.featureControls ?? undefined;
    return message;
  },
};

function createBaseBotAgeCollectionMetadata(): BotAgeCollectionMetadata {
  return { ageCollectionEligible: undefined, shouldTriggerAgeCollectionOnClient: undefined };
}

export const BotAgeCollectionMetadata: MessageFns<BotAgeCollectionMetadata> = {
  encode(message: BotAgeCollectionMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ageCollectionEligible !== undefined) {
      writer.uint32(8).bool(message.ageCollectionEligible);
    }
    if (message.shouldTriggerAgeCollectionOnClient !== undefined) {
      writer.uint32(16).bool(message.shouldTriggerAgeCollectionOnClient);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotAgeCollectionMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotAgeCollectionMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.ageCollectionEligible = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.shouldTriggerAgeCollectionOnClient = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotAgeCollectionMetadata {
    return {
      ageCollectionEligible: isSet(object.ageCollectionEligible)
        ? globalThis.Boolean(object.ageCollectionEligible)
        : undefined,
      shouldTriggerAgeCollectionOnClient: isSet(object.shouldTriggerAgeCollectionOnClient)
        ? globalThis.Boolean(object.shouldTriggerAgeCollectionOnClient)
        : undefined,
    };
  },

  toJSON(message: BotAgeCollectionMetadata): unknown {
    const obj: any = {};
    if (message.ageCollectionEligible !== undefined) {
      obj.ageCollectionEligible = message.ageCollectionEligible;
    }
    if (message.shouldTriggerAgeCollectionOnClient !== undefined) {
      obj.shouldTriggerAgeCollectionOnClient = message.shouldTriggerAgeCollectionOnClient;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotAgeCollectionMetadata>, I>>(base?: I): BotAgeCollectionMetadata {
    return BotAgeCollectionMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotAgeCollectionMetadata>, I>>(object: I): BotAgeCollectionMetadata {
    const message = createBaseBotAgeCollectionMetadata();
    message.ageCollectionEligible = object.ageCollectionEligible ?? undefined;
    message.shouldTriggerAgeCollectionOnClient = object.shouldTriggerAgeCollectionOnClient ?? undefined;
    return message;
  },
};

function createBaseBotAvatarMetadata(): BotAvatarMetadata {
  return {
    sentiment: undefined,
    behaviorGraph: undefined,
    action: undefined,
    intensity: undefined,
    wordCount: undefined,
  };
}

export const BotAvatarMetadata: MessageFns<BotAvatarMetadata> = {
  encode(message: BotAvatarMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sentiment !== undefined) {
      writer.uint32(8).uint32(message.sentiment);
    }
    if (message.behaviorGraph !== undefined) {
      writer.uint32(18).string(message.behaviorGraph);
    }
    if (message.action !== undefined) {
      writer.uint32(24).uint32(message.action);
    }
    if (message.intensity !== undefined) {
      writer.uint32(32).uint32(message.intensity);
    }
    if (message.wordCount !== undefined) {
      writer.uint32(40).uint32(message.wordCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotAvatarMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotAvatarMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.sentiment = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.behaviorGraph = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.action = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.intensity = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.wordCount = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotAvatarMetadata {
    return {
      sentiment: isSet(object.sentiment) ? globalThis.Number(object.sentiment) : undefined,
      behaviorGraph: isSet(object.behaviorGraph) ? globalThis.String(object.behaviorGraph) : undefined,
      action: isSet(object.action) ? globalThis.Number(object.action) : undefined,
      intensity: isSet(object.intensity) ? globalThis.Number(object.intensity) : undefined,
      wordCount: isSet(object.wordCount) ? globalThis.Number(object.wordCount) : undefined,
    };
  },

  toJSON(message: BotAvatarMetadata): unknown {
    const obj: any = {};
    if (message.sentiment !== undefined) {
      obj.sentiment = Math.round(message.sentiment);
    }
    if (message.behaviorGraph !== undefined) {
      obj.behaviorGraph = message.behaviorGraph;
    }
    if (message.action !== undefined) {
      obj.action = Math.round(message.action);
    }
    if (message.intensity !== undefined) {
      obj.intensity = Math.round(message.intensity);
    }
    if (message.wordCount !== undefined) {
      obj.wordCount = Math.round(message.wordCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotAvatarMetadata>, I>>(base?: I): BotAvatarMetadata {
    return BotAvatarMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotAvatarMetadata>, I>>(object: I): BotAvatarMetadata {
    const message = createBaseBotAvatarMetadata();
    message.sentiment = object.sentiment ?? undefined;
    message.behaviorGraph = object.behaviorGraph ?? undefined;
    message.action = object.action ?? undefined;
    message.intensity = object.intensity ?? undefined;
    message.wordCount = object.wordCount ?? undefined;
    return message;
  },
};

function createBaseBotCapabilityMetadata(): BotCapabilityMetadata {
  return { capabilities: [] };
}

export const BotCapabilityMetadata: MessageFns<BotCapabilityMetadata> = {
  encode(message: BotCapabilityMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.capabilities) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotCapabilityMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotCapabilityMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.capabilities.push(reader.int32() as any);

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.capabilities.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotCapabilityMetadata {
    return {
      capabilities: globalThis.Array.isArray(object?.capabilities)
        ? object.capabilities.map((e: any) => botCapabilityMetadata_BotCapabilityTypeFromJSON(e))
        : [],
    };
  },

  toJSON(message: BotCapabilityMetadata): unknown {
    const obj: any = {};
    if (message.capabilities?.length) {
      obj.capabilities = message.capabilities.map((e) => botCapabilityMetadata_BotCapabilityTypeToJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotCapabilityMetadata>, I>>(base?: I): BotCapabilityMetadata {
    return BotCapabilityMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotCapabilityMetadata>, I>>(object: I): BotCapabilityMetadata {
    const message = createBaseBotCapabilityMetadata();
    message.capabilities = object.capabilities?.map((e) => e) || [];
    return message;
  },
};

function createBaseBotImagineMetadata(): BotImagineMetadata {
  return { imagineType: undefined };
}

export const BotImagineMetadata: MessageFns<BotImagineMetadata> = {
  encode(message: BotImagineMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.imagineType !== undefined) {
      writer.uint32(8).int32(message.imagineType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotImagineMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotImagineMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.imagineType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotImagineMetadata {
    return {
      imagineType: isSet(object.imagineType) ? botImagineMetadata_ImagineTypeFromJSON(object.imagineType) : undefined,
    };
  },

  toJSON(message: BotImagineMetadata): unknown {
    const obj: any = {};
    if (message.imagineType !== undefined) {
      obj.imagineType = botImagineMetadata_ImagineTypeToJSON(message.imagineType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotImagineMetadata>, I>>(base?: I): BotImagineMetadata {
    return BotImagineMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotImagineMetadata>, I>>(object: I): BotImagineMetadata {
    const message = createBaseBotImagineMetadata();
    message.imagineType = object.imagineType ?? undefined;
    return message;
  },
};

function createBaseBotLinkedAccount(): BotLinkedAccount {
  return { type: undefined };
}

export const BotLinkedAccount: MessageFns<BotLinkedAccount> = {
  encode(message: BotLinkedAccount, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== undefined) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotLinkedAccount {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotLinkedAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotLinkedAccount {
    return { type: isSet(object.type) ? botLinkedAccount_BotLinkedAccountTypeFromJSON(object.type) : undefined };
  },

  toJSON(message: BotLinkedAccount): unknown {
    const obj: any = {};
    if (message.type !== undefined) {
      obj.type = botLinkedAccount_BotLinkedAccountTypeToJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotLinkedAccount>, I>>(base?: I): BotLinkedAccount {
    return BotLinkedAccount.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotLinkedAccount>, I>>(object: I): BotLinkedAccount {
    const message = createBaseBotLinkedAccount();
    message.type = object.type ?? undefined;
    return message;
  },
};

function createBaseBotLinkedAccountsMetadata(): BotLinkedAccountsMetadata {
  return { accounts: [], acAuthTokens: undefined, acErrorCode: undefined };
}

export const BotLinkedAccountsMetadata: MessageFns<BotLinkedAccountsMetadata> = {
  encode(message: BotLinkedAccountsMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.accounts) {
      BotLinkedAccount.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.acAuthTokens !== undefined) {
      writer.uint32(18).bytes(message.acAuthTokens);
    }
    if (message.acErrorCode !== undefined) {
      writer.uint32(24).int32(message.acErrorCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotLinkedAccountsMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotLinkedAccountsMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accounts.push(BotLinkedAccount.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.acAuthTokens = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.acErrorCode = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotLinkedAccountsMetadata {
    return {
      accounts: globalThis.Array.isArray(object?.accounts)
        ? object.accounts.map((e: any) => BotLinkedAccount.fromJSON(e))
        : [],
      acAuthTokens: isSet(object.acAuthTokens) ? bytesFromBase64(object.acAuthTokens) : undefined,
      acErrorCode: isSet(object.acErrorCode) ? globalThis.Number(object.acErrorCode) : undefined,
    };
  },

  toJSON(message: BotLinkedAccountsMetadata): unknown {
    const obj: any = {};
    if (message.accounts?.length) {
      obj.accounts = message.accounts.map((e) => BotLinkedAccount.toJSON(e));
    }
    if (message.acAuthTokens !== undefined) {
      obj.acAuthTokens = base64FromBytes(message.acAuthTokens);
    }
    if (message.acErrorCode !== undefined) {
      obj.acErrorCode = Math.round(message.acErrorCode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotLinkedAccountsMetadata>, I>>(base?: I): BotLinkedAccountsMetadata {
    return BotLinkedAccountsMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotLinkedAccountsMetadata>, I>>(object: I): BotLinkedAccountsMetadata {
    const message = createBaseBotLinkedAccountsMetadata();
    message.accounts = object.accounts?.map((e) => BotLinkedAccount.fromPartial(e)) || [];
    message.acAuthTokens = object.acAuthTokens ?? undefined;
    message.acErrorCode = object.acErrorCode ?? undefined;
    return message;
  },
};

function createBaseBotMediaMetadata(): BotMediaMetadata {
  return {
    fileSha256: undefined,
    mediaKey: undefined,
    fileEncSha256: undefined,
    directPath: undefined,
    mediaKeyTimestamp: undefined,
    mimetype: undefined,
    orientationType: undefined,
  };
}

export const BotMediaMetadata: MessageFns<BotMediaMetadata> = {
  encode(message: BotMediaMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fileSha256 !== undefined) {
      writer.uint32(10).string(message.fileSha256);
    }
    if (message.mediaKey !== undefined) {
      writer.uint32(18).string(message.mediaKey);
    }
    if (message.fileEncSha256 !== undefined) {
      writer.uint32(26).string(message.fileEncSha256);
    }
    if (message.directPath !== undefined) {
      writer.uint32(34).string(message.directPath);
    }
    if (message.mediaKeyTimestamp !== undefined) {
      writer.uint32(40).int64(message.mediaKeyTimestamp);
    }
    if (message.mimetype !== undefined) {
      writer.uint32(50).string(message.mimetype);
    }
    if (message.orientationType !== undefined) {
      writer.uint32(56).int32(message.orientationType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotMediaMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotMediaMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fileSha256 = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.mediaKey = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fileEncSha256 = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.directPath = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.mediaKeyTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.mimetype = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.orientationType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotMediaMetadata {
    return {
      fileSha256: isSet(object.fileSha256) ? globalThis.String(object.fileSha256) : undefined,
      mediaKey: isSet(object.mediaKey) ? globalThis.String(object.mediaKey) : undefined,
      fileEncSha256: isSet(object.fileEncSha256) ? globalThis.String(object.fileEncSha256) : undefined,
      directPath: isSet(object.directPath) ? globalThis.String(object.directPath) : undefined,
      mediaKeyTimestamp: isSet(object.mediaKeyTimestamp) ? globalThis.Number(object.mediaKeyTimestamp) : undefined,
      mimetype: isSet(object.mimetype) ? globalThis.String(object.mimetype) : undefined,
      orientationType: isSet(object.orientationType)
        ? botMediaMetadata_OrientationTypeFromJSON(object.orientationType)
        : undefined,
    };
  },

  toJSON(message: BotMediaMetadata): unknown {
    const obj: any = {};
    if (message.fileSha256 !== undefined) {
      obj.fileSha256 = message.fileSha256;
    }
    if (message.mediaKey !== undefined) {
      obj.mediaKey = message.mediaKey;
    }
    if (message.fileEncSha256 !== undefined) {
      obj.fileEncSha256 = message.fileEncSha256;
    }
    if (message.directPath !== undefined) {
      obj.directPath = message.directPath;
    }
    if (message.mediaKeyTimestamp !== undefined) {
      obj.mediaKeyTimestamp = Math.round(message.mediaKeyTimestamp);
    }
    if (message.mimetype !== undefined) {
      obj.mimetype = message.mimetype;
    }
    if (message.orientationType !== undefined) {
      obj.orientationType = botMediaMetadata_OrientationTypeToJSON(message.orientationType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotMediaMetadata>, I>>(base?: I): BotMediaMetadata {
    return BotMediaMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotMediaMetadata>, I>>(object: I): BotMediaMetadata {
    const message = createBaseBotMediaMetadata();
    message.fileSha256 = object.fileSha256 ?? undefined;
    message.mediaKey = object.mediaKey ?? undefined;
    message.fileEncSha256 = object.fileEncSha256 ?? undefined;
    message.directPath = object.directPath ?? undefined;
    message.mediaKeyTimestamp = object.mediaKeyTimestamp ?? undefined;
    message.mimetype = object.mimetype ?? undefined;
    message.orientationType = object.orientationType ?? undefined;
    return message;
  },
};

function createBaseBotMemoryFact(): BotMemoryFact {
  return { fact: undefined, factId: undefined };
}

export const BotMemoryFact: MessageFns<BotMemoryFact> = {
  encode(message: BotMemoryFact, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fact !== undefined) {
      writer.uint32(10).string(message.fact);
    }
    if (message.factId !== undefined) {
      writer.uint32(18).string(message.factId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotMemoryFact {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotMemoryFact();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fact = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.factId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotMemoryFact {
    return {
      fact: isSet(object.fact) ? globalThis.String(object.fact) : undefined,
      factId: isSet(object.factId) ? globalThis.String(object.factId) : undefined,
    };
  },

  toJSON(message: BotMemoryFact): unknown {
    const obj: any = {};
    if (message.fact !== undefined) {
      obj.fact = message.fact;
    }
    if (message.factId !== undefined) {
      obj.factId = message.factId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotMemoryFact>, I>>(base?: I): BotMemoryFact {
    return BotMemoryFact.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotMemoryFact>, I>>(object: I): BotMemoryFact {
    const message = createBaseBotMemoryFact();
    message.fact = object.fact ?? undefined;
    message.factId = object.factId ?? undefined;
    return message;
  },
};

function createBaseBotMemoryMetadata(): BotMemoryMetadata {
  return { addedFacts: [], removedFacts: [], disclaimer: undefined };
}

export const BotMemoryMetadata: MessageFns<BotMemoryMetadata> = {
  encode(message: BotMemoryMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.addedFacts) {
      BotMemoryFact.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.removedFacts) {
      BotMemoryFact.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.disclaimer !== undefined) {
      writer.uint32(26).string(message.disclaimer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotMemoryMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotMemoryMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.addedFacts.push(BotMemoryFact.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.removedFacts.push(BotMemoryFact.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.disclaimer = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotMemoryMetadata {
    return {
      addedFacts: globalThis.Array.isArray(object?.addedFacts)
        ? object.addedFacts.map((e: any) => BotMemoryFact.fromJSON(e))
        : [],
      removedFacts: globalThis.Array.isArray(object?.removedFacts)
        ? object.removedFacts.map((e: any) => BotMemoryFact.fromJSON(e))
        : [],
      disclaimer: isSet(object.disclaimer) ? globalThis.String(object.disclaimer) : undefined,
    };
  },

  toJSON(message: BotMemoryMetadata): unknown {
    const obj: any = {};
    if (message.addedFacts?.length) {
      obj.addedFacts = message.addedFacts.map((e) => BotMemoryFact.toJSON(e));
    }
    if (message.removedFacts?.length) {
      obj.removedFacts = message.removedFacts.map((e) => BotMemoryFact.toJSON(e));
    }
    if (message.disclaimer !== undefined) {
      obj.disclaimer = message.disclaimer;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotMemoryMetadata>, I>>(base?: I): BotMemoryMetadata {
    return BotMemoryMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotMemoryMetadata>, I>>(object: I): BotMemoryMetadata {
    const message = createBaseBotMemoryMetadata();
    message.addedFacts = object.addedFacts?.map((e) => BotMemoryFact.fromPartial(e)) || [];
    message.removedFacts = object.removedFacts?.map((e) => BotMemoryFact.fromPartial(e)) || [];
    message.disclaimer = object.disclaimer ?? undefined;
    return message;
  },
};

function createBaseBotMemuMetadata(): BotMemuMetadata {
  return { faceImages: [] };
}

export const BotMemuMetadata: MessageFns<BotMemuMetadata> = {
  encode(message: BotMemuMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.faceImages) {
      BotMediaMetadata.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotMemuMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotMemuMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.faceImages.push(BotMediaMetadata.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotMemuMetadata {
    return {
      faceImages: globalThis.Array.isArray(object?.faceImages)
        ? object.faceImages.map((e: any) => BotMediaMetadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BotMemuMetadata): unknown {
    const obj: any = {};
    if (message.faceImages?.length) {
      obj.faceImages = message.faceImages.map((e) => BotMediaMetadata.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotMemuMetadata>, I>>(base?: I): BotMemuMetadata {
    return BotMemuMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotMemuMetadata>, I>>(object: I): BotMemuMetadata {
    const message = createBaseBotMemuMetadata();
    message.faceImages = object.faceImages?.map((e) => BotMediaMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBotMetadata(): BotMetadata {
  return {
    avatarMetadata: undefined,
    personaId: undefined,
    pluginMetadata: undefined,
    suggestedPromptMetadata: undefined,
    invokerJid: undefined,
    sessionMetadata: undefined,
    memuMetadata: undefined,
    timezone: undefined,
    reminderMetadata: undefined,
    modelMetadata: undefined,
    messageDisclaimerText: undefined,
    progressIndicatorMetadata: undefined,
    capabilityMetadata: undefined,
    imagineMetadata: undefined,
    memoryMetadata: undefined,
    renderingMetadata: undefined,
    botMetricsMetadata: undefined,
    botLinkedAccountsMetadata: undefined,
    richResponseSourcesMetadata: undefined,
    aiConversationContext: undefined,
    botPromotionMessageMetadata: undefined,
    botModeSelectionMetadata: undefined,
    botQuotaMetadata: undefined,
    botAgeCollectionMetadata: undefined,
  };
}

export const BotMetadata: MessageFns<BotMetadata> = {
  encode(message: BotMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.avatarMetadata !== undefined) {
      BotAvatarMetadata.encode(message.avatarMetadata, writer.uint32(10).fork()).join();
    }
    if (message.personaId !== undefined) {
      writer.uint32(18).string(message.personaId);
    }
    if (message.pluginMetadata !== undefined) {
      BotPluginMetadata.encode(message.pluginMetadata, writer.uint32(26).fork()).join();
    }
    if (message.suggestedPromptMetadata !== undefined) {
      BotSuggestedPromptMetadata.encode(message.suggestedPromptMetadata, writer.uint32(34).fork()).join();
    }
    if (message.invokerJid !== undefined) {
      writer.uint32(42).string(message.invokerJid);
    }
    if (message.sessionMetadata !== undefined) {
      BotSessionMetadata.encode(message.sessionMetadata, writer.uint32(50).fork()).join();
    }
    if (message.memuMetadata !== undefined) {
      BotMemuMetadata.encode(message.memuMetadata, writer.uint32(58).fork()).join();
    }
    if (message.timezone !== undefined) {
      writer.uint32(66).string(message.timezone);
    }
    if (message.reminderMetadata !== undefined) {
      BotReminderMetadata.encode(message.reminderMetadata, writer.uint32(74).fork()).join();
    }
    if (message.modelMetadata !== undefined) {
      BotModelMetadata.encode(message.modelMetadata, writer.uint32(82).fork()).join();
    }
    if (message.messageDisclaimerText !== undefined) {
      writer.uint32(90).string(message.messageDisclaimerText);
    }
    if (message.progressIndicatorMetadata !== undefined) {
      BotProgressIndicatorMetadata.encode(message.progressIndicatorMetadata, writer.uint32(98).fork()).join();
    }
    if (message.capabilityMetadata !== undefined) {
      BotCapabilityMetadata.encode(message.capabilityMetadata, writer.uint32(106).fork()).join();
    }
    if (message.imagineMetadata !== undefined) {
      BotImagineMetadata.encode(message.imagineMetadata, writer.uint32(114).fork()).join();
    }
    if (message.memoryMetadata !== undefined) {
      BotMemoryMetadata.encode(message.memoryMetadata, writer.uint32(122).fork()).join();
    }
    if (message.renderingMetadata !== undefined) {
      BotRenderingMetadata.encode(message.renderingMetadata, writer.uint32(130).fork()).join();
    }
    if (message.botMetricsMetadata !== undefined) {
      BotMetricsMetadata.encode(message.botMetricsMetadata, writer.uint32(138).fork()).join();
    }
    if (message.botLinkedAccountsMetadata !== undefined) {
      BotLinkedAccountsMetadata.encode(message.botLinkedAccountsMetadata, writer.uint32(146).fork()).join();
    }
    if (message.richResponseSourcesMetadata !== undefined) {
      BotSourcesMetadata.encode(message.richResponseSourcesMetadata, writer.uint32(154).fork()).join();
    }
    if (message.aiConversationContext !== undefined) {
      writer.uint32(162).bytes(message.aiConversationContext);
    }
    if (message.botPromotionMessageMetadata !== undefined) {
      BotPromotionMessageMetadata.encode(message.botPromotionMessageMetadata, writer.uint32(170).fork()).join();
    }
    if (message.botModeSelectionMetadata !== undefined) {
      BotModeSelectionMetadata.encode(message.botModeSelectionMetadata, writer.uint32(178).fork()).join();
    }
    if (message.botQuotaMetadata !== undefined) {
      BotQuotaMetadata.encode(message.botQuotaMetadata, writer.uint32(186).fork()).join();
    }
    if (message.botAgeCollectionMetadata !== undefined) {
      BotAgeCollectionMetadata.encode(message.botAgeCollectionMetadata, writer.uint32(194).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.avatarMetadata = BotAvatarMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.personaId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pluginMetadata = BotPluginMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.suggestedPromptMetadata = BotSuggestedPromptMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.invokerJid = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.sessionMetadata = BotSessionMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.memuMetadata = BotMemuMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.timezone = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.reminderMetadata = BotReminderMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.modelMetadata = BotModelMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.messageDisclaimerText = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.progressIndicatorMetadata = BotProgressIndicatorMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.capabilityMetadata = BotCapabilityMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.imagineMetadata = BotImagineMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.memoryMetadata = BotMemoryMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.renderingMetadata = BotRenderingMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.botMetricsMetadata = BotMetricsMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.botLinkedAccountsMetadata = BotLinkedAccountsMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.richResponseSourcesMetadata = BotSourcesMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.aiConversationContext = reader.bytes();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.botPromotionMessageMetadata = BotPromotionMessageMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.botModeSelectionMetadata = BotModeSelectionMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.botQuotaMetadata = BotQuotaMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.botAgeCollectionMetadata = BotAgeCollectionMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotMetadata {
    return {
      avatarMetadata: isSet(object.avatarMetadata) ? BotAvatarMetadata.fromJSON(object.avatarMetadata) : undefined,
      personaId: isSet(object.personaId) ? globalThis.String(object.personaId) : undefined,
      pluginMetadata: isSet(object.pluginMetadata) ? BotPluginMetadata.fromJSON(object.pluginMetadata) : undefined,
      suggestedPromptMetadata: isSet(object.suggestedPromptMetadata)
        ? BotSuggestedPromptMetadata.fromJSON(object.suggestedPromptMetadata)
        : undefined,
      invokerJid: isSet(object.invokerJid) ? globalThis.String(object.invokerJid) : undefined,
      sessionMetadata: isSet(object.sessionMetadata) ? BotSessionMetadata.fromJSON(object.sessionMetadata) : undefined,
      memuMetadata: isSet(object.memuMetadata) ? BotMemuMetadata.fromJSON(object.memuMetadata) : undefined,
      timezone: isSet(object.timezone) ? globalThis.String(object.timezone) : undefined,
      reminderMetadata: isSet(object.reminderMetadata)
        ? BotReminderMetadata.fromJSON(object.reminderMetadata)
        : undefined,
      modelMetadata: isSet(object.modelMetadata) ? BotModelMetadata.fromJSON(object.modelMetadata) : undefined,
      messageDisclaimerText: isSet(object.messageDisclaimerText)
        ? globalThis.String(object.messageDisclaimerText)
        : undefined,
      progressIndicatorMetadata: isSet(object.progressIndicatorMetadata)
        ? BotProgressIndicatorMetadata.fromJSON(object.progressIndicatorMetadata)
        : undefined,
      capabilityMetadata: isSet(object.capabilityMetadata)
        ? BotCapabilityMetadata.fromJSON(object.capabilityMetadata)
        : undefined,
      imagineMetadata: isSet(object.imagineMetadata) ? BotImagineMetadata.fromJSON(object.imagineMetadata) : undefined,
      memoryMetadata: isSet(object.memoryMetadata) ? BotMemoryMetadata.fromJSON(object.memoryMetadata) : undefined,
      renderingMetadata: isSet(object.renderingMetadata)
        ? BotRenderingMetadata.fromJSON(object.renderingMetadata)
        : undefined,
      botMetricsMetadata: isSet(object.botMetricsMetadata)
        ? BotMetricsMetadata.fromJSON(object.botMetricsMetadata)
        : undefined,
      botLinkedAccountsMetadata: isSet(object.botLinkedAccountsMetadata)
        ? BotLinkedAccountsMetadata.fromJSON(object.botLinkedAccountsMetadata)
        : undefined,
      richResponseSourcesMetadata: isSet(object.richResponseSourcesMetadata)
        ? BotSourcesMetadata.fromJSON(object.richResponseSourcesMetadata)
        : undefined,
      aiConversationContext: isSet(object.aiConversationContext)
        ? bytesFromBase64(object.aiConversationContext)
        : undefined,
      botPromotionMessageMetadata: isSet(object.botPromotionMessageMetadata)
        ? BotPromotionMessageMetadata.fromJSON(object.botPromotionMessageMetadata)
        : undefined,
      botModeSelectionMetadata: isSet(object.botModeSelectionMetadata)
        ? BotModeSelectionMetadata.fromJSON(object.botModeSelectionMetadata)
        : undefined,
      botQuotaMetadata: isSet(object.botQuotaMetadata) ? BotQuotaMetadata.fromJSON(object.botQuotaMetadata) : undefined,
      botAgeCollectionMetadata: isSet(object.botAgeCollectionMetadata)
        ? BotAgeCollectionMetadata.fromJSON(object.botAgeCollectionMetadata)
        : undefined,
    };
  },

  toJSON(message: BotMetadata): unknown {
    const obj: any = {};
    if (message.avatarMetadata !== undefined) {
      obj.avatarMetadata = BotAvatarMetadata.toJSON(message.avatarMetadata);
    }
    if (message.personaId !== undefined) {
      obj.personaId = message.personaId;
    }
    if (message.pluginMetadata !== undefined) {
      obj.pluginMetadata = BotPluginMetadata.toJSON(message.pluginMetadata);
    }
    if (message.suggestedPromptMetadata !== undefined) {
      obj.suggestedPromptMetadata = BotSuggestedPromptMetadata.toJSON(message.suggestedPromptMetadata);
    }
    if (message.invokerJid !== undefined) {
      obj.invokerJid = message.invokerJid;
    }
    if (message.sessionMetadata !== undefined) {
      obj.sessionMetadata = BotSessionMetadata.toJSON(message.sessionMetadata);
    }
    if (message.memuMetadata !== undefined) {
      obj.memuMetadata = BotMemuMetadata.toJSON(message.memuMetadata);
    }
    if (message.timezone !== undefined) {
      obj.timezone = message.timezone;
    }
    if (message.reminderMetadata !== undefined) {
      obj.reminderMetadata = BotReminderMetadata.toJSON(message.reminderMetadata);
    }
    if (message.modelMetadata !== undefined) {
      obj.modelMetadata = BotModelMetadata.toJSON(message.modelMetadata);
    }
    if (message.messageDisclaimerText !== undefined) {
      obj.messageDisclaimerText = message.messageDisclaimerText;
    }
    if (message.progressIndicatorMetadata !== undefined) {
      obj.progressIndicatorMetadata = BotProgressIndicatorMetadata.toJSON(message.progressIndicatorMetadata);
    }
    if (message.capabilityMetadata !== undefined) {
      obj.capabilityMetadata = BotCapabilityMetadata.toJSON(message.capabilityMetadata);
    }
    if (message.imagineMetadata !== undefined) {
      obj.imagineMetadata = BotImagineMetadata.toJSON(message.imagineMetadata);
    }
    if (message.memoryMetadata !== undefined) {
      obj.memoryMetadata = BotMemoryMetadata.toJSON(message.memoryMetadata);
    }
    if (message.renderingMetadata !== undefined) {
      obj.renderingMetadata = BotRenderingMetadata.toJSON(message.renderingMetadata);
    }
    if (message.botMetricsMetadata !== undefined) {
      obj.botMetricsMetadata = BotMetricsMetadata.toJSON(message.botMetricsMetadata);
    }
    if (message.botLinkedAccountsMetadata !== undefined) {
      obj.botLinkedAccountsMetadata = BotLinkedAccountsMetadata.toJSON(message.botLinkedAccountsMetadata);
    }
    if (message.richResponseSourcesMetadata !== undefined) {
      obj.richResponseSourcesMetadata = BotSourcesMetadata.toJSON(message.richResponseSourcesMetadata);
    }
    if (message.aiConversationContext !== undefined) {
      obj.aiConversationContext = base64FromBytes(message.aiConversationContext);
    }
    if (message.botPromotionMessageMetadata !== undefined) {
      obj.botPromotionMessageMetadata = BotPromotionMessageMetadata.toJSON(message.botPromotionMessageMetadata);
    }
    if (message.botModeSelectionMetadata !== undefined) {
      obj.botModeSelectionMetadata = BotModeSelectionMetadata.toJSON(message.botModeSelectionMetadata);
    }
    if (message.botQuotaMetadata !== undefined) {
      obj.botQuotaMetadata = BotQuotaMetadata.toJSON(message.botQuotaMetadata);
    }
    if (message.botAgeCollectionMetadata !== undefined) {
      obj.botAgeCollectionMetadata = BotAgeCollectionMetadata.toJSON(message.botAgeCollectionMetadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotMetadata>, I>>(base?: I): BotMetadata {
    return BotMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotMetadata>, I>>(object: I): BotMetadata {
    const message = createBaseBotMetadata();
    message.avatarMetadata = (object.avatarMetadata !== undefined && object.avatarMetadata !== null)
      ? BotAvatarMetadata.fromPartial(object.avatarMetadata)
      : undefined;
    message.personaId = object.personaId ?? undefined;
    message.pluginMetadata = (object.pluginMetadata !== undefined && object.pluginMetadata !== null)
      ? BotPluginMetadata.fromPartial(object.pluginMetadata)
      : undefined;
    message.suggestedPromptMetadata =
      (object.suggestedPromptMetadata !== undefined && object.suggestedPromptMetadata !== null)
        ? BotSuggestedPromptMetadata.fromPartial(object.suggestedPromptMetadata)
        : undefined;
    message.invokerJid = object.invokerJid ?? undefined;
    message.sessionMetadata = (object.sessionMetadata !== undefined && object.sessionMetadata !== null)
      ? BotSessionMetadata.fromPartial(object.sessionMetadata)
      : undefined;
    message.memuMetadata = (object.memuMetadata !== undefined && object.memuMetadata !== null)
      ? BotMemuMetadata.fromPartial(object.memuMetadata)
      : undefined;
    message.timezone = object.timezone ?? undefined;
    message.reminderMetadata = (object.reminderMetadata !== undefined && object.reminderMetadata !== null)
      ? BotReminderMetadata.fromPartial(object.reminderMetadata)
      : undefined;
    message.modelMetadata = (object.modelMetadata !== undefined && object.modelMetadata !== null)
      ? BotModelMetadata.fromPartial(object.modelMetadata)
      : undefined;
    message.messageDisclaimerText = object.messageDisclaimerText ?? undefined;
    message.progressIndicatorMetadata =
      (object.progressIndicatorMetadata !== undefined && object.progressIndicatorMetadata !== null)
        ? BotProgressIndicatorMetadata.fromPartial(object.progressIndicatorMetadata)
        : undefined;
    message.capabilityMetadata = (object.capabilityMetadata !== undefined && object.capabilityMetadata !== null)
      ? BotCapabilityMetadata.fromPartial(object.capabilityMetadata)
      : undefined;
    message.imagineMetadata = (object.imagineMetadata !== undefined && object.imagineMetadata !== null)
      ? BotImagineMetadata.fromPartial(object.imagineMetadata)
      : undefined;
    message.memoryMetadata = (object.memoryMetadata !== undefined && object.memoryMetadata !== null)
      ? BotMemoryMetadata.fromPartial(object.memoryMetadata)
      : undefined;
    message.renderingMetadata = (object.renderingMetadata !== undefined && object.renderingMetadata !== null)
      ? BotRenderingMetadata.fromPartial(object.renderingMetadata)
      : undefined;
    message.botMetricsMetadata = (object.botMetricsMetadata !== undefined && object.botMetricsMetadata !== null)
      ? BotMetricsMetadata.fromPartial(object.botMetricsMetadata)
      : undefined;
    message.botLinkedAccountsMetadata =
      (object.botLinkedAccountsMetadata !== undefined && object.botLinkedAccountsMetadata !== null)
        ? BotLinkedAccountsMetadata.fromPartial(object.botLinkedAccountsMetadata)
        : undefined;
    message.richResponseSourcesMetadata =
      (object.richResponseSourcesMetadata !== undefined && object.richResponseSourcesMetadata !== null)
        ? BotSourcesMetadata.fromPartial(object.richResponseSourcesMetadata)
        : undefined;
    message.aiConversationContext = object.aiConversationContext ?? undefined;
    message.botPromotionMessageMetadata =
      (object.botPromotionMessageMetadata !== undefined && object.botPromotionMessageMetadata !== null)
        ? BotPromotionMessageMetadata.fromPartial(object.botPromotionMessageMetadata)
        : undefined;
    message.botModeSelectionMetadata =
      (object.botModeSelectionMetadata !== undefined && object.botModeSelectionMetadata !== null)
        ? BotModeSelectionMetadata.fromPartial(object.botModeSelectionMetadata)
        : undefined;
    message.botQuotaMetadata = (object.botQuotaMetadata !== undefined && object.botQuotaMetadata !== null)
      ? BotQuotaMetadata.fromPartial(object.botQuotaMetadata)
      : undefined;
    message.botAgeCollectionMetadata =
      (object.botAgeCollectionMetadata !== undefined && object.botAgeCollectionMetadata !== null)
        ? BotAgeCollectionMetadata.fromPartial(object.botAgeCollectionMetadata)
        : undefined;
    return message;
  },
};

function createBaseBotMetricsMetadata(): BotMetricsMetadata {
  return { destinationId: undefined, destinationEntryPoint: undefined, threadOrigin: undefined };
}

export const BotMetricsMetadata: MessageFns<BotMetricsMetadata> = {
  encode(message: BotMetricsMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.destinationId !== undefined) {
      writer.uint32(10).string(message.destinationId);
    }
    if (message.destinationEntryPoint !== undefined) {
      writer.uint32(16).int32(message.destinationEntryPoint);
    }
    if (message.threadOrigin !== undefined) {
      writer.uint32(24).int32(message.threadOrigin);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotMetricsMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotMetricsMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.destinationId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.destinationEntryPoint = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.threadOrigin = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotMetricsMetadata {
    return {
      destinationId: isSet(object.destinationId) ? globalThis.String(object.destinationId) : undefined,
      destinationEntryPoint: isSet(object.destinationEntryPoint)
        ? botMetricsEntryPointFromJSON(object.destinationEntryPoint)
        : undefined,
      threadOrigin: isSet(object.threadOrigin) ? botMetricsThreadEntryPointFromJSON(object.threadOrigin) : undefined,
    };
  },

  toJSON(message: BotMetricsMetadata): unknown {
    const obj: any = {};
    if (message.destinationId !== undefined) {
      obj.destinationId = message.destinationId;
    }
    if (message.destinationEntryPoint !== undefined) {
      obj.destinationEntryPoint = botMetricsEntryPointToJSON(message.destinationEntryPoint);
    }
    if (message.threadOrigin !== undefined) {
      obj.threadOrigin = botMetricsThreadEntryPointToJSON(message.threadOrigin);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotMetricsMetadata>, I>>(base?: I): BotMetricsMetadata {
    return BotMetricsMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotMetricsMetadata>, I>>(object: I): BotMetricsMetadata {
    const message = createBaseBotMetricsMetadata();
    message.destinationId = object.destinationId ?? undefined;
    message.destinationEntryPoint = object.destinationEntryPoint ?? undefined;
    message.threadOrigin = object.threadOrigin ?? undefined;
    return message;
  },
};

function createBaseBotModeSelectionMetadata(): BotModeSelectionMetadata {
  return { mode: [] };
}

export const BotModeSelectionMetadata: MessageFns<BotModeSelectionMetadata> = {
  encode(message: BotModeSelectionMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.mode) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotModeSelectionMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotModeSelectionMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.mode.push(reader.int32() as any);

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.mode.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotModeSelectionMetadata {
    return {
      mode: globalThis.Array.isArray(object?.mode)
        ? object.mode.map((e: any) => botModeSelectionMetadata_BotUserSelectionModeFromJSON(e))
        : [],
    };
  },

  toJSON(message: BotModeSelectionMetadata): unknown {
    const obj: any = {};
    if (message.mode?.length) {
      obj.mode = message.mode.map((e) => botModeSelectionMetadata_BotUserSelectionModeToJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotModeSelectionMetadata>, I>>(base?: I): BotModeSelectionMetadata {
    return BotModeSelectionMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotModeSelectionMetadata>, I>>(object: I): BotModeSelectionMetadata {
    const message = createBaseBotModeSelectionMetadata();
    message.mode = object.mode?.map((e) => e) || [];
    return message;
  },
};

function createBaseBotModelMetadata(): BotModelMetadata {
  return { modelType: undefined, premiumModelStatus: undefined };
}

export const BotModelMetadata: MessageFns<BotModelMetadata> = {
  encode(message: BotModelMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.modelType !== undefined) {
      writer.uint32(8).int32(message.modelType);
    }
    if (message.premiumModelStatus !== undefined) {
      writer.uint32(16).int32(message.premiumModelStatus);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotModelMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotModelMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.modelType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.premiumModelStatus = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotModelMetadata {
    return {
      modelType: isSet(object.modelType) ? botModelMetadata_ModelTypeFromJSON(object.modelType) : undefined,
      premiumModelStatus: isSet(object.premiumModelStatus)
        ? botModelMetadata_PremiumModelStatusFromJSON(object.premiumModelStatus)
        : undefined,
    };
  },

  toJSON(message: BotModelMetadata): unknown {
    const obj: any = {};
    if (message.modelType !== undefined) {
      obj.modelType = botModelMetadata_ModelTypeToJSON(message.modelType);
    }
    if (message.premiumModelStatus !== undefined) {
      obj.premiumModelStatus = botModelMetadata_PremiumModelStatusToJSON(message.premiumModelStatus);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotModelMetadata>, I>>(base?: I): BotModelMetadata {
    return BotModelMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotModelMetadata>, I>>(object: I): BotModelMetadata {
    const message = createBaseBotModelMetadata();
    message.modelType = object.modelType ?? undefined;
    message.premiumModelStatus = object.premiumModelStatus ?? undefined;
    return message;
  },
};

function createBaseBotPluginMetadata(): BotPluginMetadata {
  return {
    provider: undefined,
    pluginType: undefined,
    thumbnailCdnUrl: undefined,
    profilePhotoCdnUrl: undefined,
    searchProviderUrl: undefined,
    referenceIndex: undefined,
    expectedLinksCount: undefined,
    searchQuery: undefined,
    parentPluginMessageKey: undefined,
    deprecatedField: undefined,
    parentPluginType: undefined,
    faviconCdnUrl: undefined,
  };
}

export const BotPluginMetadata: MessageFns<BotPluginMetadata> = {
  encode(message: BotPluginMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.provider !== undefined) {
      writer.uint32(8).int32(message.provider);
    }
    if (message.pluginType !== undefined) {
      writer.uint32(16).int32(message.pluginType);
    }
    if (message.thumbnailCdnUrl !== undefined) {
      writer.uint32(26).string(message.thumbnailCdnUrl);
    }
    if (message.profilePhotoCdnUrl !== undefined) {
      writer.uint32(34).string(message.profilePhotoCdnUrl);
    }
    if (message.searchProviderUrl !== undefined) {
      writer.uint32(42).string(message.searchProviderUrl);
    }
    if (message.referenceIndex !== undefined) {
      writer.uint32(48).uint32(message.referenceIndex);
    }
    if (message.expectedLinksCount !== undefined) {
      writer.uint32(56).uint32(message.expectedLinksCount);
    }
    if (message.searchQuery !== undefined) {
      writer.uint32(74).string(message.searchQuery);
    }
    if (message.parentPluginMessageKey !== undefined) {
      MessageKey.encode(message.parentPluginMessageKey, writer.uint32(82).fork()).join();
    }
    if (message.deprecatedField !== undefined) {
      writer.uint32(88).int32(message.deprecatedField);
    }
    if (message.parentPluginType !== undefined) {
      writer.uint32(96).int32(message.parentPluginType);
    }
    if (message.faviconCdnUrl !== undefined) {
      writer.uint32(106).string(message.faviconCdnUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotPluginMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotPluginMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.provider = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pluginType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.thumbnailCdnUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.profilePhotoCdnUrl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.searchProviderUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.referenceIndex = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.expectedLinksCount = reader.uint32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.searchQuery = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.parentPluginMessageKey = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.deprecatedField = reader.int32() as any;
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.parentPluginType = reader.int32() as any;
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.faviconCdnUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotPluginMetadata {
    return {
      provider: isSet(object.provider) ? botPluginMetadata_SearchProviderFromJSON(object.provider) : undefined,
      pluginType: isSet(object.pluginType) ? botPluginMetadata_PluginTypeFromJSON(object.pluginType) : undefined,
      thumbnailCdnUrl: isSet(object.thumbnailCdnUrl) ? globalThis.String(object.thumbnailCdnUrl) : undefined,
      profilePhotoCdnUrl: isSet(object.profilePhotoCdnUrl) ? globalThis.String(object.profilePhotoCdnUrl) : undefined,
      searchProviderUrl: isSet(object.searchProviderUrl) ? globalThis.String(object.searchProviderUrl) : undefined,
      referenceIndex: isSet(object.referenceIndex) ? globalThis.Number(object.referenceIndex) : undefined,
      expectedLinksCount: isSet(object.expectedLinksCount) ? globalThis.Number(object.expectedLinksCount) : undefined,
      searchQuery: isSet(object.searchQuery) ? globalThis.String(object.searchQuery) : undefined,
      parentPluginMessageKey: isSet(object.parentPluginMessageKey)
        ? MessageKey.fromJSON(object.parentPluginMessageKey)
        : undefined,
      deprecatedField: isSet(object.deprecatedField)
        ? botPluginMetadata_PluginTypeFromJSON(object.deprecatedField)
        : undefined,
      parentPluginType: isSet(object.parentPluginType)
        ? botPluginMetadata_PluginTypeFromJSON(object.parentPluginType)
        : undefined,
      faviconCdnUrl: isSet(object.faviconCdnUrl) ? globalThis.String(object.faviconCdnUrl) : undefined,
    };
  },

  toJSON(message: BotPluginMetadata): unknown {
    const obj: any = {};
    if (message.provider !== undefined) {
      obj.provider = botPluginMetadata_SearchProviderToJSON(message.provider);
    }
    if (message.pluginType !== undefined) {
      obj.pluginType = botPluginMetadata_PluginTypeToJSON(message.pluginType);
    }
    if (message.thumbnailCdnUrl !== undefined) {
      obj.thumbnailCdnUrl = message.thumbnailCdnUrl;
    }
    if (message.profilePhotoCdnUrl !== undefined) {
      obj.profilePhotoCdnUrl = message.profilePhotoCdnUrl;
    }
    if (message.searchProviderUrl !== undefined) {
      obj.searchProviderUrl = message.searchProviderUrl;
    }
    if (message.referenceIndex !== undefined) {
      obj.referenceIndex = Math.round(message.referenceIndex);
    }
    if (message.expectedLinksCount !== undefined) {
      obj.expectedLinksCount = Math.round(message.expectedLinksCount);
    }
    if (message.searchQuery !== undefined) {
      obj.searchQuery = message.searchQuery;
    }
    if (message.parentPluginMessageKey !== undefined) {
      obj.parentPluginMessageKey = MessageKey.toJSON(message.parentPluginMessageKey);
    }
    if (message.deprecatedField !== undefined) {
      obj.deprecatedField = botPluginMetadata_PluginTypeToJSON(message.deprecatedField);
    }
    if (message.parentPluginType !== undefined) {
      obj.parentPluginType = botPluginMetadata_PluginTypeToJSON(message.parentPluginType);
    }
    if (message.faviconCdnUrl !== undefined) {
      obj.faviconCdnUrl = message.faviconCdnUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotPluginMetadata>, I>>(base?: I): BotPluginMetadata {
    return BotPluginMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotPluginMetadata>, I>>(object: I): BotPluginMetadata {
    const message = createBaseBotPluginMetadata();
    message.provider = object.provider ?? undefined;
    message.pluginType = object.pluginType ?? undefined;
    message.thumbnailCdnUrl = object.thumbnailCdnUrl ?? undefined;
    message.profilePhotoCdnUrl = object.profilePhotoCdnUrl ?? undefined;
    message.searchProviderUrl = object.searchProviderUrl ?? undefined;
    message.referenceIndex = object.referenceIndex ?? undefined;
    message.expectedLinksCount = object.expectedLinksCount ?? undefined;
    message.searchQuery = object.searchQuery ?? undefined;
    message.parentPluginMessageKey =
      (object.parentPluginMessageKey !== undefined && object.parentPluginMessageKey !== null)
        ? MessageKey.fromPartial(object.parentPluginMessageKey)
        : undefined;
    message.deprecatedField = object.deprecatedField ?? undefined;
    message.parentPluginType = object.parentPluginType ?? undefined;
    message.faviconCdnUrl = object.faviconCdnUrl ?? undefined;
    return message;
  },
};

function createBaseBotProgressIndicatorMetadata(): BotProgressIndicatorMetadata {
  return { progressDescription: undefined, stepsMetadata: [] };
}

export const BotProgressIndicatorMetadata: MessageFns<BotProgressIndicatorMetadata> = {
  encode(message: BotProgressIndicatorMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.progressDescription !== undefined) {
      writer.uint32(10).string(message.progressDescription);
    }
    for (const v of message.stepsMetadata) {
      BotProgressIndicatorMetadata_BotPlanningStepMetadata.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotProgressIndicatorMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotProgressIndicatorMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.progressDescription = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.stepsMetadata.push(
            BotProgressIndicatorMetadata_BotPlanningStepMetadata.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotProgressIndicatorMetadata {
    return {
      progressDescription: isSet(object.progressDescription)
        ? globalThis.String(object.progressDescription)
        : undefined,
      stepsMetadata: globalThis.Array.isArray(object?.stepsMetadata)
        ? object.stepsMetadata.map((e: any) => BotProgressIndicatorMetadata_BotPlanningStepMetadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BotProgressIndicatorMetadata): unknown {
    const obj: any = {};
    if (message.progressDescription !== undefined) {
      obj.progressDescription = message.progressDescription;
    }
    if (message.stepsMetadata?.length) {
      obj.stepsMetadata = message.stepsMetadata.map((e) =>
        BotProgressIndicatorMetadata_BotPlanningStepMetadata.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotProgressIndicatorMetadata>, I>>(base?: I): BotProgressIndicatorMetadata {
    return BotProgressIndicatorMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotProgressIndicatorMetadata>, I>>(object: I): BotProgressIndicatorMetadata {
    const message = createBaseBotProgressIndicatorMetadata();
    message.progressDescription = object.progressDescription ?? undefined;
    message.stepsMetadata =
      object.stepsMetadata?.map((e) => BotProgressIndicatorMetadata_BotPlanningStepMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBotProgressIndicatorMetadata_BotPlanningStepMetadata(): BotProgressIndicatorMetadata_BotPlanningStepMetadata {
  return {
    statusTitle: undefined,
    statusBody: undefined,
    sourcesMetadata: [],
    status: undefined,
    isReasoning: undefined,
    isEnhancedSearch: undefined,
    sections: [],
  };
}

export const BotProgressIndicatorMetadata_BotPlanningStepMetadata: MessageFns<
  BotProgressIndicatorMetadata_BotPlanningStepMetadata
> = {
  encode(
    message: BotProgressIndicatorMetadata_BotPlanningStepMetadata,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.statusTitle !== undefined) {
      writer.uint32(10).string(message.statusTitle);
    }
    if (message.statusBody !== undefined) {
      writer.uint32(18).string(message.statusBody);
    }
    for (const v of message.sourcesMetadata) {
      BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata.encode(
        v!,
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.status !== undefined) {
      writer.uint32(32).int32(message.status);
    }
    if (message.isReasoning !== undefined) {
      writer.uint32(40).bool(message.isReasoning);
    }
    if (message.isEnhancedSearch !== undefined) {
      writer.uint32(48).bool(message.isEnhancedSearch);
    }
    for (const v of message.sections) {
      BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningStepSectionMetadata.encode(
        v!,
        writer.uint32(58).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotProgressIndicatorMetadata_BotPlanningStepMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotProgressIndicatorMetadata_BotPlanningStepMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.statusTitle = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.statusBody = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sourcesMetadata.push(
            BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata.decode(
              reader,
              reader.uint32(),
            ),
          );
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isReasoning = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isEnhancedSearch = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.sections.push(
            BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningStepSectionMetadata.decode(
              reader,
              reader.uint32(),
            ),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotProgressIndicatorMetadata_BotPlanningStepMetadata {
    return {
      statusTitle: isSet(object.statusTitle) ? globalThis.String(object.statusTitle) : undefined,
      statusBody: isSet(object.statusBody) ? globalThis.String(object.statusBody) : undefined,
      sourcesMetadata: globalThis.Array.isArray(object?.sourcesMetadata)
        ? object.sourcesMetadata.map((e: any) =>
          BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata.fromJSON(e)
        )
        : [],
      status: isSet(object.status)
        ? botProgressIndicatorMetadata_BotPlanningStepMetadata_PlanningStepStatusFromJSON(object.status)
        : undefined,
      isReasoning: isSet(object.isReasoning) ? globalThis.Boolean(object.isReasoning) : undefined,
      isEnhancedSearch: isSet(object.isEnhancedSearch) ? globalThis.Boolean(object.isEnhancedSearch) : undefined,
      sections: globalThis.Array.isArray(object?.sections)
        ? object.sections.map((e: any) =>
          BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningStepSectionMetadata.fromJSON(e)
        )
        : [],
    };
  },

  toJSON(message: BotProgressIndicatorMetadata_BotPlanningStepMetadata): unknown {
    const obj: any = {};
    if (message.statusTitle !== undefined) {
      obj.statusTitle = message.statusTitle;
    }
    if (message.statusBody !== undefined) {
      obj.statusBody = message.statusBody;
    }
    if (message.sourcesMetadata?.length) {
      obj.sourcesMetadata = message.sourcesMetadata.map((e) =>
        BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata.toJSON(e)
      );
    }
    if (message.status !== undefined) {
      obj.status = botProgressIndicatorMetadata_BotPlanningStepMetadata_PlanningStepStatusToJSON(message.status);
    }
    if (message.isReasoning !== undefined) {
      obj.isReasoning = message.isReasoning;
    }
    if (message.isEnhancedSearch !== undefined) {
      obj.isEnhancedSearch = message.isEnhancedSearch;
    }
    if (message.sections?.length) {
      obj.sections = message.sections.map((e) =>
        BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningStepSectionMetadata.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotProgressIndicatorMetadata_BotPlanningStepMetadata>, I>>(
    base?: I,
  ): BotProgressIndicatorMetadata_BotPlanningStepMetadata {
    return BotProgressIndicatorMetadata_BotPlanningStepMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotProgressIndicatorMetadata_BotPlanningStepMetadata>, I>>(
    object: I,
  ): BotProgressIndicatorMetadata_BotPlanningStepMetadata {
    const message = createBaseBotProgressIndicatorMetadata_BotPlanningStepMetadata();
    message.statusTitle = object.statusTitle ?? undefined;
    message.statusBody = object.statusBody ?? undefined;
    message.sourcesMetadata =
      object.sourcesMetadata?.map((e) =>
        BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata.fromPartial(e)
      ) || [];
    message.status = object.status ?? undefined;
    message.isReasoning = object.isReasoning ?? undefined;
    message.isEnhancedSearch = object.isEnhancedSearch ?? undefined;
    message.sections =
      object.sections?.map((e) =>
        BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningStepSectionMetadata.fromPartial(e)
      ) || [];
    return message;
  },
};

function createBaseBotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourceMetadata(): BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourceMetadata {
  return { title: undefined, provider: undefined, sourceUrl: undefined, favIconUrl: undefined };
}

export const BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourceMetadata: MessageFns<
  BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourceMetadata
> = {
  encode(
    message: BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourceMetadata,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.title !== undefined) {
      writer.uint32(10).string(message.title);
    }
    if (message.provider !== undefined) {
      writer.uint32(16).int32(message.provider);
    }
    if (message.sourceUrl !== undefined) {
      writer.uint32(26).string(message.sourceUrl);
    }
    if (message.favIconUrl !== undefined) {
      writer.uint32(34).string(message.favIconUrl);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourceMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourceMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.provider = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sourceUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.favIconUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourceMetadata {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      provider: isSet(object.provider)
        ? botProgressIndicatorMetadata_BotPlanningStepMetadata_BotSearchSourceProviderFromJSON(object.provider)
        : undefined,
      sourceUrl: isSet(object.sourceUrl) ? globalThis.String(object.sourceUrl) : undefined,
      favIconUrl: isSet(object.favIconUrl) ? globalThis.String(object.favIconUrl) : undefined,
    };
  },

  toJSON(message: BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourceMetadata): unknown {
    const obj: any = {};
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.provider !== undefined) {
      obj.provider = botProgressIndicatorMetadata_BotPlanningStepMetadata_BotSearchSourceProviderToJSON(
        message.provider,
      );
    }
    if (message.sourceUrl !== undefined) {
      obj.sourceUrl = message.sourceUrl;
    }
    if (message.favIconUrl !== undefined) {
      obj.favIconUrl = message.favIconUrl;
    }
    return obj;
  },

  create<
    I extends Exact<
      DeepPartial<BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourceMetadata>,
      I
    >,
  >(base?: I): BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourceMetadata {
    return BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourceMetadata.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<
      DeepPartial<BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourceMetadata>,
      I
    >,
  >(object: I): BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourceMetadata {
    const message = createBaseBotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourceMetadata();
    message.title = object.title ?? undefined;
    message.provider = object.provider ?? undefined;
    message.sourceUrl = object.sourceUrl ?? undefined;
    message.favIconUrl = object.favIconUrl ?? undefined;
    return message;
  },
};

function createBaseBotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata(): BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata {
  return { sourceTitle: undefined, provider: undefined, sourceUrl: undefined };
}

export const BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata: MessageFns<
  BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata
> = {
  encode(
    message: BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.sourceTitle !== undefined) {
      writer.uint32(10).string(message.sourceTitle);
    }
    if (message.provider !== undefined) {
      writer.uint32(16).int32(message.provider);
    }
    if (message.sourceUrl !== undefined) {
      writer.uint32(26).string(message.sourceUrl);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sourceTitle = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.provider = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sourceUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata {
    return {
      sourceTitle: isSet(object.sourceTitle) ? globalThis.String(object.sourceTitle) : undefined,
      provider: isSet(object.provider)
        ? botProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata_BotPlanningSearchSourceProviderFromJSON(
          object.provider,
        )
        : undefined,
      sourceUrl: isSet(object.sourceUrl) ? globalThis.String(object.sourceUrl) : undefined,
    };
  },

  toJSON(message: BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata): unknown {
    const obj: any = {};
    if (message.sourceTitle !== undefined) {
      obj.sourceTitle = message.sourceTitle;
    }
    if (message.provider !== undefined) {
      obj.provider =
        botProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata_BotPlanningSearchSourceProviderToJSON(
          message.provider,
        );
    }
    if (message.sourceUrl !== undefined) {
      obj.sourceUrl = message.sourceUrl;
    }
    return obj;
  },

  create<
    I extends Exact<
      DeepPartial<BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata>,
      I
    >,
  >(base?: I): BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata {
    return BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<
      DeepPartial<BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata>,
      I
    >,
  >(object: I): BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata {
    const message = createBaseBotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourcesMetadata();
    message.sourceTitle = object.sourceTitle ?? undefined;
    message.provider = object.provider ?? undefined;
    message.sourceUrl = object.sourceUrl ?? undefined;
    return message;
  },
};

function createBaseBotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningStepSectionMetadata(): BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningStepSectionMetadata {
  return { sectionTitle: undefined, sectionBody: undefined, sourcesMetadata: [] };
}

export const BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningStepSectionMetadata: MessageFns<
  BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningStepSectionMetadata
> = {
  encode(
    message: BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningStepSectionMetadata,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.sectionTitle !== undefined) {
      writer.uint32(10).string(message.sectionTitle);
    }
    if (message.sectionBody !== undefined) {
      writer.uint32(18).string(message.sectionBody);
    }
    for (const v of message.sourcesMetadata) {
      BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourceMetadata.encode(
        v!,
        writer.uint32(26).fork(),
      ).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningStepSectionMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningStepSectionMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sectionTitle = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sectionBody = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sourcesMetadata.push(
            BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourceMetadata.decode(
              reader,
              reader.uint32(),
            ),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningStepSectionMetadata {
    return {
      sectionTitle: isSet(object.sectionTitle) ? globalThis.String(object.sectionTitle) : undefined,
      sectionBody: isSet(object.sectionBody) ? globalThis.String(object.sectionBody) : undefined,
      sourcesMetadata: globalThis.Array.isArray(object?.sourcesMetadata)
        ? object.sourcesMetadata.map((e: any) =>
          BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourceMetadata.fromJSON(e)
        )
        : [],
    };
  },

  toJSON(message: BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningStepSectionMetadata): unknown {
    const obj: any = {};
    if (message.sectionTitle !== undefined) {
      obj.sectionTitle = message.sectionTitle;
    }
    if (message.sectionBody !== undefined) {
      obj.sectionBody = message.sectionBody;
    }
    if (message.sourcesMetadata?.length) {
      obj.sourcesMetadata = message.sourcesMetadata.map((e) =>
        BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourceMetadata.toJSON(e)
      );
    }
    return obj;
  },

  create<
    I extends Exact<
      DeepPartial<BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningStepSectionMetadata>,
      I
    >,
  >(base?: I): BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningStepSectionMetadata {
    return BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningStepSectionMetadata.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<
      DeepPartial<BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningStepSectionMetadata>,
      I
    >,
  >(object: I): BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningStepSectionMetadata {
    const message = createBaseBotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningStepSectionMetadata();
    message.sectionTitle = object.sectionTitle ?? undefined;
    message.sectionBody = object.sectionBody ?? undefined;
    message.sourcesMetadata =
      object.sourcesMetadata?.map((e) =>
        BotProgressIndicatorMetadata_BotPlanningStepMetadata_BotPlanningSearchSourceMetadata.fromPartial(e)
      ) || [];
    return message;
  },
};

function createBaseBotPromotionMessageMetadata(): BotPromotionMessageMetadata {
  return { promotionType: undefined, buttonTitle: undefined };
}

export const BotPromotionMessageMetadata: MessageFns<BotPromotionMessageMetadata> = {
  encode(message: BotPromotionMessageMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.promotionType !== undefined) {
      writer.uint32(8).int32(message.promotionType);
    }
    if (message.buttonTitle !== undefined) {
      writer.uint32(18).string(message.buttonTitle);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotPromotionMessageMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotPromotionMessageMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.promotionType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.buttonTitle = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotPromotionMessageMetadata {
    return {
      promotionType: isSet(object.promotionType)
        ? botPromotionMessageMetadata_BotPromotionTypeFromJSON(object.promotionType)
        : undefined,
      buttonTitle: isSet(object.buttonTitle) ? globalThis.String(object.buttonTitle) : undefined,
    };
  },

  toJSON(message: BotPromotionMessageMetadata): unknown {
    const obj: any = {};
    if (message.promotionType !== undefined) {
      obj.promotionType = botPromotionMessageMetadata_BotPromotionTypeToJSON(message.promotionType);
    }
    if (message.buttonTitle !== undefined) {
      obj.buttonTitle = message.buttonTitle;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotPromotionMessageMetadata>, I>>(base?: I): BotPromotionMessageMetadata {
    return BotPromotionMessageMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotPromotionMessageMetadata>, I>>(object: I): BotPromotionMessageMetadata {
    const message = createBaseBotPromotionMessageMetadata();
    message.promotionType = object.promotionType ?? undefined;
    message.buttonTitle = object.buttonTitle ?? undefined;
    return message;
  },
};

function createBaseBotPromptSuggestion(): BotPromptSuggestion {
  return { prompt: undefined, promptId: undefined };
}

export const BotPromptSuggestion: MessageFns<BotPromptSuggestion> = {
  encode(message: BotPromptSuggestion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.prompt !== undefined) {
      writer.uint32(10).string(message.prompt);
    }
    if (message.promptId !== undefined) {
      writer.uint32(18).string(message.promptId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotPromptSuggestion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotPromptSuggestion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.prompt = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.promptId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotPromptSuggestion {
    return {
      prompt: isSet(object.prompt) ? globalThis.String(object.prompt) : undefined,
      promptId: isSet(object.promptId) ? globalThis.String(object.promptId) : undefined,
    };
  },

  toJSON(message: BotPromptSuggestion): unknown {
    const obj: any = {};
    if (message.prompt !== undefined) {
      obj.prompt = message.prompt;
    }
    if (message.promptId !== undefined) {
      obj.promptId = message.promptId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotPromptSuggestion>, I>>(base?: I): BotPromptSuggestion {
    return BotPromptSuggestion.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotPromptSuggestion>, I>>(object: I): BotPromptSuggestion {
    const message = createBaseBotPromptSuggestion();
    message.prompt = object.prompt ?? undefined;
    message.promptId = object.promptId ?? undefined;
    return message;
  },
};

function createBaseBotPromptSuggestions(): BotPromptSuggestions {
  return { suggestions: [] };
}

export const BotPromptSuggestions: MessageFns<BotPromptSuggestions> = {
  encode(message: BotPromptSuggestions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.suggestions) {
      BotPromptSuggestion.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotPromptSuggestions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotPromptSuggestions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.suggestions.push(BotPromptSuggestion.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotPromptSuggestions {
    return {
      suggestions: globalThis.Array.isArray(object?.suggestions)
        ? object.suggestions.map((e: any) => BotPromptSuggestion.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BotPromptSuggestions): unknown {
    const obj: any = {};
    if (message.suggestions?.length) {
      obj.suggestions = message.suggestions.map((e) => BotPromptSuggestion.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotPromptSuggestions>, I>>(base?: I): BotPromptSuggestions {
    return BotPromptSuggestions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotPromptSuggestions>, I>>(object: I): BotPromptSuggestions {
    const message = createBaseBotPromptSuggestions();
    message.suggestions = object.suggestions?.map((e) => BotPromptSuggestion.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBotQuotaMetadata(): BotQuotaMetadata {
  return { botFeatureQuotaMetadata: [] };
}

export const BotQuotaMetadata: MessageFns<BotQuotaMetadata> = {
  encode(message: BotQuotaMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.botFeatureQuotaMetadata) {
      BotQuotaMetadata_BotFeatureQuotaMetadata.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotQuotaMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotQuotaMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.botFeatureQuotaMetadata.push(
            BotQuotaMetadata_BotFeatureQuotaMetadata.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotQuotaMetadata {
    return {
      botFeatureQuotaMetadata: globalThis.Array.isArray(object?.botFeatureQuotaMetadata)
        ? object.botFeatureQuotaMetadata.map((e: any) => BotQuotaMetadata_BotFeatureQuotaMetadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BotQuotaMetadata): unknown {
    const obj: any = {};
    if (message.botFeatureQuotaMetadata?.length) {
      obj.botFeatureQuotaMetadata = message.botFeatureQuotaMetadata.map((e) =>
        BotQuotaMetadata_BotFeatureQuotaMetadata.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotQuotaMetadata>, I>>(base?: I): BotQuotaMetadata {
    return BotQuotaMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotQuotaMetadata>, I>>(object: I): BotQuotaMetadata {
    const message = createBaseBotQuotaMetadata();
    message.botFeatureQuotaMetadata =
      object.botFeatureQuotaMetadata?.map((e) => BotQuotaMetadata_BotFeatureQuotaMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBotQuotaMetadata_BotFeatureQuotaMetadata(): BotQuotaMetadata_BotFeatureQuotaMetadata {
  return { featureType: undefined, remainingQuota: undefined, expirationTimestamp: undefined };
}

export const BotQuotaMetadata_BotFeatureQuotaMetadata: MessageFns<BotQuotaMetadata_BotFeatureQuotaMetadata> = {
  encode(message: BotQuotaMetadata_BotFeatureQuotaMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.featureType !== undefined) {
      writer.uint32(8).int32(message.featureType);
    }
    if (message.remainingQuota !== undefined) {
      writer.uint32(16).uint32(message.remainingQuota);
    }
    if (message.expirationTimestamp !== undefined) {
      writer.uint32(24).uint64(message.expirationTimestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotQuotaMetadata_BotFeatureQuotaMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotQuotaMetadata_BotFeatureQuotaMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.featureType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.remainingQuota = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.expirationTimestamp = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotQuotaMetadata_BotFeatureQuotaMetadata {
    return {
      featureType: isSet(object.featureType)
        ? botQuotaMetadata_BotFeatureQuotaMetadata_BotFeatureTypeFromJSON(object.featureType)
        : undefined,
      remainingQuota: isSet(object.remainingQuota) ? globalThis.Number(object.remainingQuota) : undefined,
      expirationTimestamp: isSet(object.expirationTimestamp)
        ? globalThis.Number(object.expirationTimestamp)
        : undefined,
    };
  },

  toJSON(message: BotQuotaMetadata_BotFeatureQuotaMetadata): unknown {
    const obj: any = {};
    if (message.featureType !== undefined) {
      obj.featureType = botQuotaMetadata_BotFeatureQuotaMetadata_BotFeatureTypeToJSON(message.featureType);
    }
    if (message.remainingQuota !== undefined) {
      obj.remainingQuota = Math.round(message.remainingQuota);
    }
    if (message.expirationTimestamp !== undefined) {
      obj.expirationTimestamp = Math.round(message.expirationTimestamp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotQuotaMetadata_BotFeatureQuotaMetadata>, I>>(
    base?: I,
  ): BotQuotaMetadata_BotFeatureQuotaMetadata {
    return BotQuotaMetadata_BotFeatureQuotaMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotQuotaMetadata_BotFeatureQuotaMetadata>, I>>(
    object: I,
  ): BotQuotaMetadata_BotFeatureQuotaMetadata {
    const message = createBaseBotQuotaMetadata_BotFeatureQuotaMetadata();
    message.featureType = object.featureType ?? undefined;
    message.remainingQuota = object.remainingQuota ?? undefined;
    message.expirationTimestamp = object.expirationTimestamp ?? undefined;
    return message;
  },
};

function createBaseBotReminderMetadata(): BotReminderMetadata {
  return {
    requestMessageKey: undefined,
    action: undefined,
    name: undefined,
    nextTriggerTimestamp: undefined,
    frequency: undefined,
  };
}

export const BotReminderMetadata: MessageFns<BotReminderMetadata> = {
  encode(message: BotReminderMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestMessageKey !== undefined) {
      MessageKey.encode(message.requestMessageKey, writer.uint32(10).fork()).join();
    }
    if (message.action !== undefined) {
      writer.uint32(16).int32(message.action);
    }
    if (message.name !== undefined) {
      writer.uint32(26).string(message.name);
    }
    if (message.nextTriggerTimestamp !== undefined) {
      writer.uint32(32).uint64(message.nextTriggerTimestamp);
    }
    if (message.frequency !== undefined) {
      writer.uint32(40).int32(message.frequency);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotReminderMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotReminderMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestMessageKey = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.action = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.nextTriggerTimestamp = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.frequency = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotReminderMetadata {
    return {
      requestMessageKey: isSet(object.requestMessageKey) ? MessageKey.fromJSON(object.requestMessageKey) : undefined,
      action: isSet(object.action) ? botReminderMetadata_ReminderActionFromJSON(object.action) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      nextTriggerTimestamp: isSet(object.nextTriggerTimestamp)
        ? globalThis.Number(object.nextTriggerTimestamp)
        : undefined,
      frequency: isSet(object.frequency) ? botReminderMetadata_ReminderFrequencyFromJSON(object.frequency) : undefined,
    };
  },

  toJSON(message: BotReminderMetadata): unknown {
    const obj: any = {};
    if (message.requestMessageKey !== undefined) {
      obj.requestMessageKey = MessageKey.toJSON(message.requestMessageKey);
    }
    if (message.action !== undefined) {
      obj.action = botReminderMetadata_ReminderActionToJSON(message.action);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.nextTriggerTimestamp !== undefined) {
      obj.nextTriggerTimestamp = Math.round(message.nextTriggerTimestamp);
    }
    if (message.frequency !== undefined) {
      obj.frequency = botReminderMetadata_ReminderFrequencyToJSON(message.frequency);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotReminderMetadata>, I>>(base?: I): BotReminderMetadata {
    return BotReminderMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotReminderMetadata>, I>>(object: I): BotReminderMetadata {
    const message = createBaseBotReminderMetadata();
    message.requestMessageKey = (object.requestMessageKey !== undefined && object.requestMessageKey !== null)
      ? MessageKey.fromPartial(object.requestMessageKey)
      : undefined;
    message.action = object.action ?? undefined;
    message.name = object.name ?? undefined;
    message.nextTriggerTimestamp = object.nextTriggerTimestamp ?? undefined;
    message.frequency = object.frequency ?? undefined;
    return message;
  },
};

function createBaseBotRenderingMetadata(): BotRenderingMetadata {
  return { keywords: [] };
}

export const BotRenderingMetadata: MessageFns<BotRenderingMetadata> = {
  encode(message: BotRenderingMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.keywords) {
      BotRenderingMetadata_Keyword.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotRenderingMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotRenderingMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.keywords.push(BotRenderingMetadata_Keyword.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotRenderingMetadata {
    return {
      keywords: globalThis.Array.isArray(object?.keywords)
        ? object.keywords.map((e: any) => BotRenderingMetadata_Keyword.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BotRenderingMetadata): unknown {
    const obj: any = {};
    if (message.keywords?.length) {
      obj.keywords = message.keywords.map((e) => BotRenderingMetadata_Keyword.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotRenderingMetadata>, I>>(base?: I): BotRenderingMetadata {
    return BotRenderingMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotRenderingMetadata>, I>>(object: I): BotRenderingMetadata {
    const message = createBaseBotRenderingMetadata();
    message.keywords = object.keywords?.map((e) => BotRenderingMetadata_Keyword.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBotRenderingMetadata_Keyword(): BotRenderingMetadata_Keyword {
  return { value: undefined, associatedPrompts: [] };
}

export const BotRenderingMetadata_Keyword: MessageFns<BotRenderingMetadata_Keyword> = {
  encode(message: BotRenderingMetadata_Keyword, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== undefined) {
      writer.uint32(10).string(message.value);
    }
    for (const v of message.associatedPrompts) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotRenderingMetadata_Keyword {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotRenderingMetadata_Keyword();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.associatedPrompts.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotRenderingMetadata_Keyword {
    return {
      value: isSet(object.value) ? globalThis.String(object.value) : undefined,
      associatedPrompts: globalThis.Array.isArray(object?.associatedPrompts)
        ? object.associatedPrompts.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: BotRenderingMetadata_Keyword): unknown {
    const obj: any = {};
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    if (message.associatedPrompts?.length) {
      obj.associatedPrompts = message.associatedPrompts;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotRenderingMetadata_Keyword>, I>>(base?: I): BotRenderingMetadata_Keyword {
    return BotRenderingMetadata_Keyword.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotRenderingMetadata_Keyword>, I>>(object: I): BotRenderingMetadata_Keyword {
    const message = createBaseBotRenderingMetadata_Keyword();
    message.value = object.value ?? undefined;
    message.associatedPrompts = object.associatedPrompts?.map((e) => e) || [];
    return message;
  },
};

function createBaseBotSessionMetadata(): BotSessionMetadata {
  return { sessionId: undefined, sessionSource: undefined };
}

export const BotSessionMetadata: MessageFns<BotSessionMetadata> = {
  encode(message: BotSessionMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionId !== undefined) {
      writer.uint32(10).string(message.sessionId);
    }
    if (message.sessionSource !== undefined) {
      writer.uint32(16).int32(message.sessionSource);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotSessionMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotSessionMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.sessionSource = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotSessionMetadata {
    return {
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : undefined,
      sessionSource: isSet(object.sessionSource) ? botSessionSourceFromJSON(object.sessionSource) : undefined,
    };
  },

  toJSON(message: BotSessionMetadata): unknown {
    const obj: any = {};
    if (message.sessionId !== undefined) {
      obj.sessionId = message.sessionId;
    }
    if (message.sessionSource !== undefined) {
      obj.sessionSource = botSessionSourceToJSON(message.sessionSource);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotSessionMetadata>, I>>(base?: I): BotSessionMetadata {
    return BotSessionMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotSessionMetadata>, I>>(object: I): BotSessionMetadata {
    const message = createBaseBotSessionMetadata();
    message.sessionId = object.sessionId ?? undefined;
    message.sessionSource = object.sessionSource ?? undefined;
    return message;
  },
};

function createBaseBotSourcesMetadata(): BotSourcesMetadata {
  return { sources: [] };
}

export const BotSourcesMetadata: MessageFns<BotSourcesMetadata> = {
  encode(message: BotSourcesMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.sources) {
      BotSourcesMetadata_BotSourceItem.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotSourcesMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotSourcesMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sources.push(BotSourcesMetadata_BotSourceItem.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotSourcesMetadata {
    return {
      sources: globalThis.Array.isArray(object?.sources)
        ? object.sources.map((e: any) => BotSourcesMetadata_BotSourceItem.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BotSourcesMetadata): unknown {
    const obj: any = {};
    if (message.sources?.length) {
      obj.sources = message.sources.map((e) => BotSourcesMetadata_BotSourceItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotSourcesMetadata>, I>>(base?: I): BotSourcesMetadata {
    return BotSourcesMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotSourcesMetadata>, I>>(object: I): BotSourcesMetadata {
    const message = createBaseBotSourcesMetadata();
    message.sources = object.sources?.map((e) => BotSourcesMetadata_BotSourceItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBotSourcesMetadata_BotSourceItem(): BotSourcesMetadata_BotSourceItem {
  return {
    provider: undefined,
    thumbnailCdnUrl: undefined,
    sourceProviderUrl: undefined,
    sourceQuery: undefined,
    faviconCdnUrl: undefined,
    citationNumber: undefined,
  };
}

export const BotSourcesMetadata_BotSourceItem: MessageFns<BotSourcesMetadata_BotSourceItem> = {
  encode(message: BotSourcesMetadata_BotSourceItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.provider !== undefined) {
      writer.uint32(8).int32(message.provider);
    }
    if (message.thumbnailCdnUrl !== undefined) {
      writer.uint32(18).string(message.thumbnailCdnUrl);
    }
    if (message.sourceProviderUrl !== undefined) {
      writer.uint32(26).string(message.sourceProviderUrl);
    }
    if (message.sourceQuery !== undefined) {
      writer.uint32(34).string(message.sourceQuery);
    }
    if (message.faviconCdnUrl !== undefined) {
      writer.uint32(42).string(message.faviconCdnUrl);
    }
    if (message.citationNumber !== undefined) {
      writer.uint32(48).uint32(message.citationNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotSourcesMetadata_BotSourceItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotSourcesMetadata_BotSourceItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.provider = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.thumbnailCdnUrl = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sourceProviderUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sourceQuery = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.faviconCdnUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.citationNumber = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotSourcesMetadata_BotSourceItem {
    return {
      provider: isSet(object.provider)
        ? botSourcesMetadata_BotSourceItem_SourceProviderFromJSON(object.provider)
        : undefined,
      thumbnailCdnUrl: isSet(object.thumbnailCdnUrl) ? globalThis.String(object.thumbnailCdnUrl) : undefined,
      sourceProviderUrl: isSet(object.sourceProviderUrl) ? globalThis.String(object.sourceProviderUrl) : undefined,
      sourceQuery: isSet(object.sourceQuery) ? globalThis.String(object.sourceQuery) : undefined,
      faviconCdnUrl: isSet(object.faviconCdnUrl) ? globalThis.String(object.faviconCdnUrl) : undefined,
      citationNumber: isSet(object.citationNumber) ? globalThis.Number(object.citationNumber) : undefined,
    };
  },

  toJSON(message: BotSourcesMetadata_BotSourceItem): unknown {
    const obj: any = {};
    if (message.provider !== undefined) {
      obj.provider = botSourcesMetadata_BotSourceItem_SourceProviderToJSON(message.provider);
    }
    if (message.thumbnailCdnUrl !== undefined) {
      obj.thumbnailCdnUrl = message.thumbnailCdnUrl;
    }
    if (message.sourceProviderUrl !== undefined) {
      obj.sourceProviderUrl = message.sourceProviderUrl;
    }
    if (message.sourceQuery !== undefined) {
      obj.sourceQuery = message.sourceQuery;
    }
    if (message.faviconCdnUrl !== undefined) {
      obj.faviconCdnUrl = message.faviconCdnUrl;
    }
    if (message.citationNumber !== undefined) {
      obj.citationNumber = Math.round(message.citationNumber);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotSourcesMetadata_BotSourceItem>, I>>(
    base?: I,
  ): BotSourcesMetadata_BotSourceItem {
    return BotSourcesMetadata_BotSourceItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotSourcesMetadata_BotSourceItem>, I>>(
    object: I,
  ): BotSourcesMetadata_BotSourceItem {
    const message = createBaseBotSourcesMetadata_BotSourceItem();
    message.provider = object.provider ?? undefined;
    message.thumbnailCdnUrl = object.thumbnailCdnUrl ?? undefined;
    message.sourceProviderUrl = object.sourceProviderUrl ?? undefined;
    message.sourceQuery = object.sourceQuery ?? undefined;
    message.faviconCdnUrl = object.faviconCdnUrl ?? undefined;
    message.citationNumber = object.citationNumber ?? undefined;
    return message;
  },
};

function createBaseBotSuggestedPromptMetadata(): BotSuggestedPromptMetadata {
  return {
    suggestedPrompts: [],
    selectedPromptIndex: undefined,
    promptSuggestions: undefined,
    selectedPromptId: undefined,
  };
}

export const BotSuggestedPromptMetadata: MessageFns<BotSuggestedPromptMetadata> = {
  encode(message: BotSuggestedPromptMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.suggestedPrompts) {
      writer.uint32(10).string(v!);
    }
    if (message.selectedPromptIndex !== undefined) {
      writer.uint32(16).uint32(message.selectedPromptIndex);
    }
    if (message.promptSuggestions !== undefined) {
      BotPromptSuggestions.encode(message.promptSuggestions, writer.uint32(26).fork()).join();
    }
    if (message.selectedPromptId !== undefined) {
      writer.uint32(34).string(message.selectedPromptId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BotSuggestedPromptMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBotSuggestedPromptMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.suggestedPrompts.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.selectedPromptIndex = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.promptSuggestions = BotPromptSuggestions.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.selectedPromptId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BotSuggestedPromptMetadata {
    return {
      suggestedPrompts: globalThis.Array.isArray(object?.suggestedPrompts)
        ? object.suggestedPrompts.map((e: any) => globalThis.String(e))
        : [],
      selectedPromptIndex: isSet(object.selectedPromptIndex)
        ? globalThis.Number(object.selectedPromptIndex)
        : undefined,
      promptSuggestions: isSet(object.promptSuggestions)
        ? BotPromptSuggestions.fromJSON(object.promptSuggestions)
        : undefined,
      selectedPromptId: isSet(object.selectedPromptId) ? globalThis.String(object.selectedPromptId) : undefined,
    };
  },

  toJSON(message: BotSuggestedPromptMetadata): unknown {
    const obj: any = {};
    if (message.suggestedPrompts?.length) {
      obj.suggestedPrompts = message.suggestedPrompts;
    }
    if (message.selectedPromptIndex !== undefined) {
      obj.selectedPromptIndex = Math.round(message.selectedPromptIndex);
    }
    if (message.promptSuggestions !== undefined) {
      obj.promptSuggestions = BotPromptSuggestions.toJSON(message.promptSuggestions);
    }
    if (message.selectedPromptId !== undefined) {
      obj.selectedPromptId = message.selectedPromptId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BotSuggestedPromptMetadata>, I>>(base?: I): BotSuggestedPromptMetadata {
    return BotSuggestedPromptMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BotSuggestedPromptMetadata>, I>>(object: I): BotSuggestedPromptMetadata {
    const message = createBaseBotSuggestedPromptMetadata();
    message.suggestedPrompts = object.suggestedPrompts?.map((e) => e) || [];
    message.selectedPromptIndex = object.selectedPromptIndex ?? undefined;
    message.promptSuggestions = (object.promptSuggestions !== undefined && object.promptSuggestions !== null)
      ? BotPromptSuggestions.fromPartial(object.promptSuggestions)
      : undefined;
    message.selectedPromptId = object.selectedPromptId ?? undefined;
    return message;
  },
};

function createBaseCallLogRecord(): CallLogRecord {
  return {
    callResult: undefined,
    isDndMode: undefined,
    silenceReason: undefined,
    duration: undefined,
    startTime: undefined,
    isIncoming: undefined,
    isVideo: undefined,
    isCallLink: undefined,
    callLinkToken: undefined,
    scheduledCallId: undefined,
    callId: undefined,
    callCreatorJid: undefined,
    groupJid: undefined,
    participants: [],
    callType: undefined,
  };
}

export const CallLogRecord: MessageFns<CallLogRecord> = {
  encode(message: CallLogRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.callResult !== undefined) {
      writer.uint32(8).int32(message.callResult);
    }
    if (message.isDndMode !== undefined) {
      writer.uint32(16).bool(message.isDndMode);
    }
    if (message.silenceReason !== undefined) {
      writer.uint32(24).int32(message.silenceReason);
    }
    if (message.duration !== undefined) {
      writer.uint32(32).int64(message.duration);
    }
    if (message.startTime !== undefined) {
      writer.uint32(40).int64(message.startTime);
    }
    if (message.isIncoming !== undefined) {
      writer.uint32(48).bool(message.isIncoming);
    }
    if (message.isVideo !== undefined) {
      writer.uint32(56).bool(message.isVideo);
    }
    if (message.isCallLink !== undefined) {
      writer.uint32(64).bool(message.isCallLink);
    }
    if (message.callLinkToken !== undefined) {
      writer.uint32(74).string(message.callLinkToken);
    }
    if (message.scheduledCallId !== undefined) {
      writer.uint32(82).string(message.scheduledCallId);
    }
    if (message.callId !== undefined) {
      writer.uint32(90).string(message.callId);
    }
    if (message.callCreatorJid !== undefined) {
      writer.uint32(98).string(message.callCreatorJid);
    }
    if (message.groupJid !== undefined) {
      writer.uint32(106).string(message.groupJid);
    }
    for (const v of message.participants) {
      CallLogRecord_ParticipantInfo.encode(v!, writer.uint32(114).fork()).join();
    }
    if (message.callType !== undefined) {
      writer.uint32(120).int32(message.callType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CallLogRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallLogRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.callResult = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isDndMode = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.silenceReason = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.duration = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.startTime = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isIncoming = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.isVideo = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.isCallLink = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.callLinkToken = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.scheduledCallId = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.callId = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.callCreatorJid = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.groupJid = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.participants.push(CallLogRecord_ParticipantInfo.decode(reader, reader.uint32()));
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.callType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallLogRecord {
    return {
      callResult: isSet(object.callResult) ? callLogRecord_CallResultFromJSON(object.callResult) : undefined,
      isDndMode: isSet(object.isDndMode) ? globalThis.Boolean(object.isDndMode) : undefined,
      silenceReason: isSet(object.silenceReason)
        ? callLogRecord_SilenceReasonFromJSON(object.silenceReason)
        : undefined,
      duration: isSet(object.duration) ? globalThis.Number(object.duration) : undefined,
      startTime: isSet(object.startTime) ? globalThis.Number(object.startTime) : undefined,
      isIncoming: isSet(object.isIncoming) ? globalThis.Boolean(object.isIncoming) : undefined,
      isVideo: isSet(object.isVideo) ? globalThis.Boolean(object.isVideo) : undefined,
      isCallLink: isSet(object.isCallLink) ? globalThis.Boolean(object.isCallLink) : undefined,
      callLinkToken: isSet(object.callLinkToken) ? globalThis.String(object.callLinkToken) : undefined,
      scheduledCallId: isSet(object.scheduledCallId) ? globalThis.String(object.scheduledCallId) : undefined,
      callId: isSet(object.callId) ? globalThis.String(object.callId) : undefined,
      callCreatorJid: isSet(object.callCreatorJid) ? globalThis.String(object.callCreatorJid) : undefined,
      groupJid: isSet(object.groupJid) ? globalThis.String(object.groupJid) : undefined,
      participants: globalThis.Array.isArray(object?.participants)
        ? object.participants.map((e: any) => CallLogRecord_ParticipantInfo.fromJSON(e))
        : [],
      callType: isSet(object.callType) ? callLogRecord_CallTypeFromJSON(object.callType) : undefined,
    };
  },

  toJSON(message: CallLogRecord): unknown {
    const obj: any = {};
    if (message.callResult !== undefined) {
      obj.callResult = callLogRecord_CallResultToJSON(message.callResult);
    }
    if (message.isDndMode !== undefined) {
      obj.isDndMode = message.isDndMode;
    }
    if (message.silenceReason !== undefined) {
      obj.silenceReason = callLogRecord_SilenceReasonToJSON(message.silenceReason);
    }
    if (message.duration !== undefined) {
      obj.duration = Math.round(message.duration);
    }
    if (message.startTime !== undefined) {
      obj.startTime = Math.round(message.startTime);
    }
    if (message.isIncoming !== undefined) {
      obj.isIncoming = message.isIncoming;
    }
    if (message.isVideo !== undefined) {
      obj.isVideo = message.isVideo;
    }
    if (message.isCallLink !== undefined) {
      obj.isCallLink = message.isCallLink;
    }
    if (message.callLinkToken !== undefined) {
      obj.callLinkToken = message.callLinkToken;
    }
    if (message.scheduledCallId !== undefined) {
      obj.scheduledCallId = message.scheduledCallId;
    }
    if (message.callId !== undefined) {
      obj.callId = message.callId;
    }
    if (message.callCreatorJid !== undefined) {
      obj.callCreatorJid = message.callCreatorJid;
    }
    if (message.groupJid !== undefined) {
      obj.groupJid = message.groupJid;
    }
    if (message.participants?.length) {
      obj.participants = message.participants.map((e) => CallLogRecord_ParticipantInfo.toJSON(e));
    }
    if (message.callType !== undefined) {
      obj.callType = callLogRecord_CallTypeToJSON(message.callType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CallLogRecord>, I>>(base?: I): CallLogRecord {
    return CallLogRecord.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CallLogRecord>, I>>(object: I): CallLogRecord {
    const message = createBaseCallLogRecord();
    message.callResult = object.callResult ?? undefined;
    message.isDndMode = object.isDndMode ?? undefined;
    message.silenceReason = object.silenceReason ?? undefined;
    message.duration = object.duration ?? undefined;
    message.startTime = object.startTime ?? undefined;
    message.isIncoming = object.isIncoming ?? undefined;
    message.isVideo = object.isVideo ?? undefined;
    message.isCallLink = object.isCallLink ?? undefined;
    message.callLinkToken = object.callLinkToken ?? undefined;
    message.scheduledCallId = object.scheduledCallId ?? undefined;
    message.callId = object.callId ?? undefined;
    message.callCreatorJid = object.callCreatorJid ?? undefined;
    message.groupJid = object.groupJid ?? undefined;
    message.participants = object.participants?.map((e) => CallLogRecord_ParticipantInfo.fromPartial(e)) || [];
    message.callType = object.callType ?? undefined;
    return message;
  },
};

function createBaseCallLogRecord_ParticipantInfo(): CallLogRecord_ParticipantInfo {
  return { userJid: undefined, callResult: undefined };
}

export const CallLogRecord_ParticipantInfo: MessageFns<CallLogRecord_ParticipantInfo> = {
  encode(message: CallLogRecord_ParticipantInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userJid !== undefined) {
      writer.uint32(10).string(message.userJid);
    }
    if (message.callResult !== undefined) {
      writer.uint32(16).int32(message.callResult);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CallLogRecord_ParticipantInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallLogRecord_ParticipantInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userJid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.callResult = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallLogRecord_ParticipantInfo {
    return {
      userJid: isSet(object.userJid) ? globalThis.String(object.userJid) : undefined,
      callResult: isSet(object.callResult) ? callLogRecord_CallResultFromJSON(object.callResult) : undefined,
    };
  },

  toJSON(message: CallLogRecord_ParticipantInfo): unknown {
    const obj: any = {};
    if (message.userJid !== undefined) {
      obj.userJid = message.userJid;
    }
    if (message.callResult !== undefined) {
      obj.callResult = callLogRecord_CallResultToJSON(message.callResult);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CallLogRecord_ParticipantInfo>, I>>(base?: I): CallLogRecord_ParticipantInfo {
    return CallLogRecord_ParticipantInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CallLogRecord_ParticipantInfo>, I>>(
    object: I,
  ): CallLogRecord_ParticipantInfo {
    const message = createBaseCallLogRecord_ParticipantInfo();
    message.userJid = object.userJid ?? undefined;
    message.callResult = object.callResult ?? undefined;
    return message;
  },
};

function createBaseCertChain(): CertChain {
  return { leaf: undefined, intermediate: undefined };
}

export const CertChain: MessageFns<CertChain> = {
  encode(message: CertChain, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.leaf !== undefined) {
      CertChain_NoiseCertificate.encode(message.leaf, writer.uint32(10).fork()).join();
    }
    if (message.intermediate !== undefined) {
      CertChain_NoiseCertificate.encode(message.intermediate, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CertChain {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertChain();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.leaf = CertChain_NoiseCertificate.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.intermediate = CertChain_NoiseCertificate.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CertChain {
    return {
      leaf: isSet(object.leaf) ? CertChain_NoiseCertificate.fromJSON(object.leaf) : undefined,
      intermediate: isSet(object.intermediate) ? CertChain_NoiseCertificate.fromJSON(object.intermediate) : undefined,
    };
  },

  toJSON(message: CertChain): unknown {
    const obj: any = {};
    if (message.leaf !== undefined) {
      obj.leaf = CertChain_NoiseCertificate.toJSON(message.leaf);
    }
    if (message.intermediate !== undefined) {
      obj.intermediate = CertChain_NoiseCertificate.toJSON(message.intermediate);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CertChain>, I>>(base?: I): CertChain {
    return CertChain.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CertChain>, I>>(object: I): CertChain {
    const message = createBaseCertChain();
    message.leaf = (object.leaf !== undefined && object.leaf !== null)
      ? CertChain_NoiseCertificate.fromPartial(object.leaf)
      : undefined;
    message.intermediate = (object.intermediate !== undefined && object.intermediate !== null)
      ? CertChain_NoiseCertificate.fromPartial(object.intermediate)
      : undefined;
    return message;
  },
};

function createBaseCertChain_NoiseCertificate(): CertChain_NoiseCertificate {
  return { details: undefined, signature: undefined };
}

export const CertChain_NoiseCertificate: MessageFns<CertChain_NoiseCertificate> = {
  encode(message: CertChain_NoiseCertificate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      writer.uint32(10).bytes(message.details);
    }
    if (message.signature !== undefined) {
      writer.uint32(18).bytes(message.signature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CertChain_NoiseCertificate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertChain_NoiseCertificate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.details = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signature = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CertChain_NoiseCertificate {
    return {
      details: isSet(object.details) ? bytesFromBase64(object.details) : undefined,
      signature: isSet(object.signature) ? bytesFromBase64(object.signature) : undefined,
    };
  },

  toJSON(message: CertChain_NoiseCertificate): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = base64FromBytes(message.details);
    }
    if (message.signature !== undefined) {
      obj.signature = base64FromBytes(message.signature);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CertChain_NoiseCertificate>, I>>(base?: I): CertChain_NoiseCertificate {
    return CertChain_NoiseCertificate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CertChain_NoiseCertificate>, I>>(object: I): CertChain_NoiseCertificate {
    const message = createBaseCertChain_NoiseCertificate();
    message.details = object.details ?? undefined;
    message.signature = object.signature ?? undefined;
    return message;
  },
};

function createBaseCertChain_NoiseCertificate_Details(): CertChain_NoiseCertificate_Details {
  return { serial: undefined, issuerSerial: undefined, key: undefined, notBefore: undefined, notAfter: undefined };
}

export const CertChain_NoiseCertificate_Details: MessageFns<CertChain_NoiseCertificate_Details> = {
  encode(message: CertChain_NoiseCertificate_Details, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serial !== undefined) {
      writer.uint32(8).uint32(message.serial);
    }
    if (message.issuerSerial !== undefined) {
      writer.uint32(16).uint32(message.issuerSerial);
    }
    if (message.key !== undefined) {
      writer.uint32(26).bytes(message.key);
    }
    if (message.notBefore !== undefined) {
      writer.uint32(32).uint64(message.notBefore);
    }
    if (message.notAfter !== undefined) {
      writer.uint32(40).uint64(message.notAfter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CertChain_NoiseCertificate_Details {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertChain_NoiseCertificate_Details();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.serial = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.issuerSerial = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.key = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.notBefore = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.notAfter = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CertChain_NoiseCertificate_Details {
    return {
      serial: isSet(object.serial) ? globalThis.Number(object.serial) : undefined,
      issuerSerial: isSet(object.issuerSerial) ? globalThis.Number(object.issuerSerial) : undefined,
      key: isSet(object.key) ? bytesFromBase64(object.key) : undefined,
      notBefore: isSet(object.notBefore) ? globalThis.Number(object.notBefore) : undefined,
      notAfter: isSet(object.notAfter) ? globalThis.Number(object.notAfter) : undefined,
    };
  },

  toJSON(message: CertChain_NoiseCertificate_Details): unknown {
    const obj: any = {};
    if (message.serial !== undefined) {
      obj.serial = Math.round(message.serial);
    }
    if (message.issuerSerial !== undefined) {
      obj.issuerSerial = Math.round(message.issuerSerial);
    }
    if (message.key !== undefined) {
      obj.key = base64FromBytes(message.key);
    }
    if (message.notBefore !== undefined) {
      obj.notBefore = Math.round(message.notBefore);
    }
    if (message.notAfter !== undefined) {
      obj.notAfter = Math.round(message.notAfter);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CertChain_NoiseCertificate_Details>, I>>(
    base?: I,
  ): CertChain_NoiseCertificate_Details {
    return CertChain_NoiseCertificate_Details.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CertChain_NoiseCertificate_Details>, I>>(
    object: I,
  ): CertChain_NoiseCertificate_Details {
    const message = createBaseCertChain_NoiseCertificate_Details();
    message.serial = object.serial ?? undefined;
    message.issuerSerial = object.issuerSerial ?? undefined;
    message.key = object.key ?? undefined;
    message.notBefore = object.notBefore ?? undefined;
    message.notAfter = object.notAfter ?? undefined;
    return message;
  },
};

function createBaseChatLockSettings(): ChatLockSettings {
  return { hideLockedChats: undefined, secretCode: undefined };
}

export const ChatLockSettings: MessageFns<ChatLockSettings> = {
  encode(message: ChatLockSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.hideLockedChats !== undefined) {
      writer.uint32(8).bool(message.hideLockedChats);
    }
    if (message.secretCode !== undefined) {
      UserPassword.encode(message.secretCode, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChatLockSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatLockSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.hideLockedChats = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.secretCode = UserPassword.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChatLockSettings {
    return {
      hideLockedChats: isSet(object.hideLockedChats) ? globalThis.Boolean(object.hideLockedChats) : undefined,
      secretCode: isSet(object.secretCode) ? UserPassword.fromJSON(object.secretCode) : undefined,
    };
  },

  toJSON(message: ChatLockSettings): unknown {
    const obj: any = {};
    if (message.hideLockedChats !== undefined) {
      obj.hideLockedChats = message.hideLockedChats;
    }
    if (message.secretCode !== undefined) {
      obj.secretCode = UserPassword.toJSON(message.secretCode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChatLockSettings>, I>>(base?: I): ChatLockSettings {
    return ChatLockSettings.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChatLockSettings>, I>>(object: I): ChatLockSettings {
    const message = createBaseChatLockSettings();
    message.hideLockedChats = object.hideLockedChats ?? undefined;
    message.secretCode = (object.secretCode !== undefined && object.secretCode !== null)
      ? UserPassword.fromPartial(object.secretCode)
      : undefined;
    return message;
  },
};

function createBaseChatRowOpaqueData(): ChatRowOpaqueData {
  return { draftMessage: undefined };
}

export const ChatRowOpaqueData: MessageFns<ChatRowOpaqueData> = {
  encode(message: ChatRowOpaqueData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.draftMessage !== undefined) {
      ChatRowOpaqueData_DraftMessage.encode(message.draftMessage, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChatRowOpaqueData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatRowOpaqueData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.draftMessage = ChatRowOpaqueData_DraftMessage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChatRowOpaqueData {
    return {
      draftMessage: isSet(object.draftMessage)
        ? ChatRowOpaqueData_DraftMessage.fromJSON(object.draftMessage)
        : undefined,
    };
  },

  toJSON(message: ChatRowOpaqueData): unknown {
    const obj: any = {};
    if (message.draftMessage !== undefined) {
      obj.draftMessage = ChatRowOpaqueData_DraftMessage.toJSON(message.draftMessage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChatRowOpaqueData>, I>>(base?: I): ChatRowOpaqueData {
    return ChatRowOpaqueData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChatRowOpaqueData>, I>>(object: I): ChatRowOpaqueData {
    const message = createBaseChatRowOpaqueData();
    message.draftMessage = (object.draftMessage !== undefined && object.draftMessage !== null)
      ? ChatRowOpaqueData_DraftMessage.fromPartial(object.draftMessage)
      : undefined;
    return message;
  },
};

function createBaseChatRowOpaqueData_DraftMessage(): ChatRowOpaqueData_DraftMessage {
  return {
    text: undefined,
    omittedUrl: undefined,
    ctwaContextLinkData: undefined,
    ctwaContext: undefined,
    timestamp: undefined,
  };
}

export const ChatRowOpaqueData_DraftMessage: MessageFns<ChatRowOpaqueData_DraftMessage> = {
  encode(message: ChatRowOpaqueData_DraftMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== undefined) {
      writer.uint32(10).string(message.text);
    }
    if (message.omittedUrl !== undefined) {
      writer.uint32(18).string(message.omittedUrl);
    }
    if (message.ctwaContextLinkData !== undefined) {
      ChatRowOpaqueData_DraftMessage_CtwaContextLinkData.encode(message.ctwaContextLinkData, writer.uint32(26).fork())
        .join();
    }
    if (message.ctwaContext !== undefined) {
      ChatRowOpaqueData_DraftMessage_CtwaContextData.encode(message.ctwaContext, writer.uint32(34).fork()).join();
    }
    if (message.timestamp !== undefined) {
      writer.uint32(40).int64(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChatRowOpaqueData_DraftMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatRowOpaqueData_DraftMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.omittedUrl = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ctwaContextLinkData = ChatRowOpaqueData_DraftMessage_CtwaContextLinkData.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.ctwaContext = ChatRowOpaqueData_DraftMessage_CtwaContextData.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChatRowOpaqueData_DraftMessage {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : undefined,
      omittedUrl: isSet(object.omittedUrl) ? globalThis.String(object.omittedUrl) : undefined,
      ctwaContextLinkData: isSet(object.ctwaContextLinkData)
        ? ChatRowOpaqueData_DraftMessage_CtwaContextLinkData.fromJSON(object.ctwaContextLinkData)
        : undefined,
      ctwaContext: isSet(object.ctwaContext)
        ? ChatRowOpaqueData_DraftMessage_CtwaContextData.fromJSON(object.ctwaContext)
        : undefined,
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : undefined,
    };
  },

  toJSON(message: ChatRowOpaqueData_DraftMessage): unknown {
    const obj: any = {};
    if (message.text !== undefined) {
      obj.text = message.text;
    }
    if (message.omittedUrl !== undefined) {
      obj.omittedUrl = message.omittedUrl;
    }
    if (message.ctwaContextLinkData !== undefined) {
      obj.ctwaContextLinkData = ChatRowOpaqueData_DraftMessage_CtwaContextLinkData.toJSON(message.ctwaContextLinkData);
    }
    if (message.ctwaContext !== undefined) {
      obj.ctwaContext = ChatRowOpaqueData_DraftMessage_CtwaContextData.toJSON(message.ctwaContext);
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = Math.round(message.timestamp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChatRowOpaqueData_DraftMessage>, I>>(base?: I): ChatRowOpaqueData_DraftMessage {
    return ChatRowOpaqueData_DraftMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChatRowOpaqueData_DraftMessage>, I>>(
    object: I,
  ): ChatRowOpaqueData_DraftMessage {
    const message = createBaseChatRowOpaqueData_DraftMessage();
    message.text = object.text ?? undefined;
    message.omittedUrl = object.omittedUrl ?? undefined;
    message.ctwaContextLinkData = (object.ctwaContextLinkData !== undefined && object.ctwaContextLinkData !== null)
      ? ChatRowOpaqueData_DraftMessage_CtwaContextLinkData.fromPartial(object.ctwaContextLinkData)
      : undefined;
    message.ctwaContext = (object.ctwaContext !== undefined && object.ctwaContext !== null)
      ? ChatRowOpaqueData_DraftMessage_CtwaContextData.fromPartial(object.ctwaContext)
      : undefined;
    message.timestamp = object.timestamp ?? undefined;
    return message;
  },
};

function createBaseChatRowOpaqueData_DraftMessage_CtwaContextData(): ChatRowOpaqueData_DraftMessage_CtwaContextData {
  return {
    conversionSource: undefined,
    conversionData: undefined,
    sourceUrl: undefined,
    sourceId: undefined,
    sourceType: undefined,
    title: undefined,
    description: undefined,
    thumbnail: undefined,
    thumbnailUrl: undefined,
    mediaType: undefined,
    mediaUrl: undefined,
    isSuspiciousLink: undefined,
  };
}

export const ChatRowOpaqueData_DraftMessage_CtwaContextData: MessageFns<
  ChatRowOpaqueData_DraftMessage_CtwaContextData
> = {
  encode(
    message: ChatRowOpaqueData_DraftMessage_CtwaContextData,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.conversionSource !== undefined) {
      writer.uint32(10).string(message.conversionSource);
    }
    if (message.conversionData !== undefined) {
      writer.uint32(18).bytes(message.conversionData);
    }
    if (message.sourceUrl !== undefined) {
      writer.uint32(26).string(message.sourceUrl);
    }
    if (message.sourceId !== undefined) {
      writer.uint32(34).string(message.sourceId);
    }
    if (message.sourceType !== undefined) {
      writer.uint32(42).string(message.sourceType);
    }
    if (message.title !== undefined) {
      writer.uint32(50).string(message.title);
    }
    if (message.description !== undefined) {
      writer.uint32(58).string(message.description);
    }
    if (message.thumbnail !== undefined) {
      writer.uint32(66).string(message.thumbnail);
    }
    if (message.thumbnailUrl !== undefined) {
      writer.uint32(74).string(message.thumbnailUrl);
    }
    if (message.mediaType !== undefined) {
      writer.uint32(80).int32(message.mediaType);
    }
    if (message.mediaUrl !== undefined) {
      writer.uint32(90).string(message.mediaUrl);
    }
    if (message.isSuspiciousLink !== undefined) {
      writer.uint32(96).bool(message.isSuspiciousLink);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChatRowOpaqueData_DraftMessage_CtwaContextData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatRowOpaqueData_DraftMessage_CtwaContextData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.conversionSource = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.conversionData = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sourceUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sourceId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.sourceType = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.thumbnail = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.thumbnailUrl = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.mediaType = reader.int32() as any;
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.mediaUrl = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.isSuspiciousLink = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChatRowOpaqueData_DraftMessage_CtwaContextData {
    return {
      conversionSource: isSet(object.conversionSource) ? globalThis.String(object.conversionSource) : undefined,
      conversionData: isSet(object.conversionData) ? bytesFromBase64(object.conversionData) : undefined,
      sourceUrl: isSet(object.sourceUrl) ? globalThis.String(object.sourceUrl) : undefined,
      sourceId: isSet(object.sourceId) ? globalThis.String(object.sourceId) : undefined,
      sourceType: isSet(object.sourceType) ? globalThis.String(object.sourceType) : undefined,
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      thumbnail: isSet(object.thumbnail) ? globalThis.String(object.thumbnail) : undefined,
      thumbnailUrl: isSet(object.thumbnailUrl) ? globalThis.String(object.thumbnailUrl) : undefined,
      mediaType: isSet(object.mediaType)
        ? chatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaTypeFromJSON(
          object.mediaType,
        )
        : undefined,
      mediaUrl: isSet(object.mediaUrl) ? globalThis.String(object.mediaUrl) : undefined,
      isSuspiciousLink: isSet(object.isSuspiciousLink) ? globalThis.Boolean(object.isSuspiciousLink) : undefined,
    };
  },

  toJSON(message: ChatRowOpaqueData_DraftMessage_CtwaContextData): unknown {
    const obj: any = {};
    if (message.conversionSource !== undefined) {
      obj.conversionSource = message.conversionSource;
    }
    if (message.conversionData !== undefined) {
      obj.conversionData = base64FromBytes(message.conversionData);
    }
    if (message.sourceUrl !== undefined) {
      obj.sourceUrl = message.sourceUrl;
    }
    if (message.sourceId !== undefined) {
      obj.sourceId = message.sourceId;
    }
    if (message.sourceType !== undefined) {
      obj.sourceType = message.sourceType;
    }
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.thumbnail !== undefined) {
      obj.thumbnail = message.thumbnail;
    }
    if (message.thumbnailUrl !== undefined) {
      obj.thumbnailUrl = message.thumbnailUrl;
    }
    if (message.mediaType !== undefined) {
      obj.mediaType = chatRowOpaqueData_DraftMessage_CtwaContextData_ContextInfoExternalAdReplyInfoMediaTypeToJSON(
        message.mediaType,
      );
    }
    if (message.mediaUrl !== undefined) {
      obj.mediaUrl = message.mediaUrl;
    }
    if (message.isSuspiciousLink !== undefined) {
      obj.isSuspiciousLink = message.isSuspiciousLink;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChatRowOpaqueData_DraftMessage_CtwaContextData>, I>>(
    base?: I,
  ): ChatRowOpaqueData_DraftMessage_CtwaContextData {
    return ChatRowOpaqueData_DraftMessage_CtwaContextData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChatRowOpaqueData_DraftMessage_CtwaContextData>, I>>(
    object: I,
  ): ChatRowOpaqueData_DraftMessage_CtwaContextData {
    const message = createBaseChatRowOpaqueData_DraftMessage_CtwaContextData();
    message.conversionSource = object.conversionSource ?? undefined;
    message.conversionData = object.conversionData ?? undefined;
    message.sourceUrl = object.sourceUrl ?? undefined;
    message.sourceId = object.sourceId ?? undefined;
    message.sourceType = object.sourceType ?? undefined;
    message.title = object.title ?? undefined;
    message.description = object.description ?? undefined;
    message.thumbnail = object.thumbnail ?? undefined;
    message.thumbnailUrl = object.thumbnailUrl ?? undefined;
    message.mediaType = object.mediaType ?? undefined;
    message.mediaUrl = object.mediaUrl ?? undefined;
    message.isSuspiciousLink = object.isSuspiciousLink ?? undefined;
    return message;
  },
};

function createBaseChatRowOpaqueData_DraftMessage_CtwaContextLinkData(): ChatRowOpaqueData_DraftMessage_CtwaContextLinkData {
  return { context: undefined, sourceUrl: undefined, icebreaker: undefined, phone: undefined };
}

export const ChatRowOpaqueData_DraftMessage_CtwaContextLinkData: MessageFns<
  ChatRowOpaqueData_DraftMessage_CtwaContextLinkData
> = {
  encode(
    message: ChatRowOpaqueData_DraftMessage_CtwaContextLinkData,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.context !== undefined) {
      writer.uint32(10).string(message.context);
    }
    if (message.sourceUrl !== undefined) {
      writer.uint32(18).string(message.sourceUrl);
    }
    if (message.icebreaker !== undefined) {
      writer.uint32(26).string(message.icebreaker);
    }
    if (message.phone !== undefined) {
      writer.uint32(34).string(message.phone);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChatRowOpaqueData_DraftMessage_CtwaContextLinkData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatRowOpaqueData_DraftMessage_CtwaContextLinkData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.context = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sourceUrl = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.icebreaker = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.phone = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChatRowOpaqueData_DraftMessage_CtwaContextLinkData {
    return {
      context: isSet(object.context) ? globalThis.String(object.context) : undefined,
      sourceUrl: isSet(object.sourceUrl) ? globalThis.String(object.sourceUrl) : undefined,
      icebreaker: isSet(object.icebreaker) ? globalThis.String(object.icebreaker) : undefined,
      phone: isSet(object.phone) ? globalThis.String(object.phone) : undefined,
    };
  },

  toJSON(message: ChatRowOpaqueData_DraftMessage_CtwaContextLinkData): unknown {
    const obj: any = {};
    if (message.context !== undefined) {
      obj.context = message.context;
    }
    if (message.sourceUrl !== undefined) {
      obj.sourceUrl = message.sourceUrl;
    }
    if (message.icebreaker !== undefined) {
      obj.icebreaker = message.icebreaker;
    }
    if (message.phone !== undefined) {
      obj.phone = message.phone;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChatRowOpaqueData_DraftMessage_CtwaContextLinkData>, I>>(
    base?: I,
  ): ChatRowOpaqueData_DraftMessage_CtwaContextLinkData {
    return ChatRowOpaqueData_DraftMessage_CtwaContextLinkData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChatRowOpaqueData_DraftMessage_CtwaContextLinkData>, I>>(
    object: I,
  ): ChatRowOpaqueData_DraftMessage_CtwaContextLinkData {
    const message = createBaseChatRowOpaqueData_DraftMessage_CtwaContextLinkData();
    message.context = object.context ?? undefined;
    message.sourceUrl = object.sourceUrl ?? undefined;
    message.icebreaker = object.icebreaker ?? undefined;
    message.phone = object.phone ?? undefined;
    return message;
  },
};

function createBaseCitation(): Citation {
  return { title: "", subtitle: "", cmsId: "", imageUrl: "" };
}

export const Citation: MessageFns<Citation> = {
  encode(message: Citation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.subtitle !== "") {
      writer.uint32(18).string(message.subtitle);
    }
    if (message.cmsId !== "") {
      writer.uint32(26).string(message.cmsId);
    }
    if (message.imageUrl !== "") {
      writer.uint32(34).string(message.imageUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Citation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCitation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.subtitle = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.cmsId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.imageUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Citation {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      subtitle: isSet(object.subtitle) ? globalThis.String(object.subtitle) : "",
      cmsId: isSet(object.cmsId) ? globalThis.String(object.cmsId) : "",
      imageUrl: isSet(object.imageUrl) ? globalThis.String(object.imageUrl) : "",
    };
  },

  toJSON(message: Citation): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.subtitle !== "") {
      obj.subtitle = message.subtitle;
    }
    if (message.cmsId !== "") {
      obj.cmsId = message.cmsId;
    }
    if (message.imageUrl !== "") {
      obj.imageUrl = message.imageUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Citation>, I>>(base?: I): Citation {
    return Citation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Citation>, I>>(object: I): Citation {
    const message = createBaseCitation();
    message.title = object.title ?? "";
    message.subtitle = object.subtitle ?? "";
    message.cmsId = object.cmsId ?? "";
    message.imageUrl = object.imageUrl ?? "";
    return message;
  },
};

function createBaseClientPairingProps(): ClientPairingProps {
  return { isChatDbLidMigrated: undefined, isSyncdPureLidSession: undefined };
}

export const ClientPairingProps: MessageFns<ClientPairingProps> = {
  encode(message: ClientPairingProps, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isChatDbLidMigrated !== undefined) {
      writer.uint32(8).bool(message.isChatDbLidMigrated);
    }
    if (message.isSyncdPureLidSession !== undefined) {
      writer.uint32(16).bool(message.isSyncdPureLidSession);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientPairingProps {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientPairingProps();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isChatDbLidMigrated = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isSyncdPureLidSession = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientPairingProps {
    return {
      isChatDbLidMigrated: isSet(object.isChatDbLidMigrated)
        ? globalThis.Boolean(object.isChatDbLidMigrated)
        : undefined,
      isSyncdPureLidSession: isSet(object.isSyncdPureLidSession)
        ? globalThis.Boolean(object.isSyncdPureLidSession)
        : undefined,
    };
  },

  toJSON(message: ClientPairingProps): unknown {
    const obj: any = {};
    if (message.isChatDbLidMigrated !== undefined) {
      obj.isChatDbLidMigrated = message.isChatDbLidMigrated;
    }
    if (message.isSyncdPureLidSession !== undefined) {
      obj.isSyncdPureLidSession = message.isSyncdPureLidSession;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientPairingProps>, I>>(base?: I): ClientPairingProps {
    return ClientPairingProps.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientPairingProps>, I>>(object: I): ClientPairingProps {
    const message = createBaseClientPairingProps();
    message.isChatDbLidMigrated = object.isChatDbLidMigrated ?? undefined;
    message.isSyncdPureLidSession = object.isSyncdPureLidSession ?? undefined;
    return message;
  },
};

function createBaseClientPayload(): ClientPayload {
  return {
    username: undefined,
    passive: undefined,
    userAgent: undefined,
    webInfo: undefined,
    pushName: undefined,
    sessionId: undefined,
    shortConnect: undefined,
    connectType: undefined,
    connectReason: undefined,
    shards: [],
    dnsSource: undefined,
    connectAttemptCount: undefined,
    device: undefined,
    devicePairingData: undefined,
    product: undefined,
    fbCat: undefined,
    fbUserAgent: undefined,
    oc: undefined,
    lc: undefined,
    iosAppExtension: undefined,
    fbAppId: undefined,
    fbDeviceId: undefined,
    pull: undefined,
    paddingBytes: undefined,
    yearClass: undefined,
    memClass: undefined,
    interopData: undefined,
    trafficAnonymization: undefined,
    lidDbMigrated: undefined,
    accountType: undefined,
  };
}

export const ClientPayload: MessageFns<ClientPayload> = {
  encode(message: ClientPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== undefined) {
      writer.uint32(8).uint64(message.username);
    }
    if (message.passive !== undefined) {
      writer.uint32(24).bool(message.passive);
    }
    if (message.userAgent !== undefined) {
      ClientPayload_UserAgent.encode(message.userAgent, writer.uint32(42).fork()).join();
    }
    if (message.webInfo !== undefined) {
      ClientPayload_WebInfo.encode(message.webInfo, writer.uint32(50).fork()).join();
    }
    if (message.pushName !== undefined) {
      writer.uint32(58).string(message.pushName);
    }
    if (message.sessionId !== undefined) {
      writer.uint32(77).sfixed32(message.sessionId);
    }
    if (message.shortConnect !== undefined) {
      writer.uint32(80).bool(message.shortConnect);
    }
    if (message.connectType !== undefined) {
      writer.uint32(96).int32(message.connectType);
    }
    if (message.connectReason !== undefined) {
      writer.uint32(104).int32(message.connectReason);
    }
    writer.uint32(114).fork();
    for (const v of message.shards) {
      writer.int32(v);
    }
    writer.join();
    if (message.dnsSource !== undefined) {
      ClientPayload_DNSSource.encode(message.dnsSource, writer.uint32(122).fork()).join();
    }
    if (message.connectAttemptCount !== undefined) {
      writer.uint32(128).uint32(message.connectAttemptCount);
    }
    if (message.device !== undefined) {
      writer.uint32(144).uint32(message.device);
    }
    if (message.devicePairingData !== undefined) {
      ClientPayload_DevicePairingRegistrationData.encode(message.devicePairingData, writer.uint32(154).fork()).join();
    }
    if (message.product !== undefined) {
      writer.uint32(160).int32(message.product);
    }
    if (message.fbCat !== undefined) {
      writer.uint32(170).bytes(message.fbCat);
    }
    if (message.fbUserAgent !== undefined) {
      writer.uint32(178).bytes(message.fbUserAgent);
    }
    if (message.oc !== undefined) {
      writer.uint32(184).bool(message.oc);
    }
    if (message.lc !== undefined) {
      writer.uint32(192).int32(message.lc);
    }
    if (message.iosAppExtension !== undefined) {
      writer.uint32(240).int32(message.iosAppExtension);
    }
    if (message.fbAppId !== undefined) {
      writer.uint32(248).uint64(message.fbAppId);
    }
    if (message.fbDeviceId !== undefined) {
      writer.uint32(258).bytes(message.fbDeviceId);
    }
    if (message.pull !== undefined) {
      writer.uint32(264).bool(message.pull);
    }
    if (message.paddingBytes !== undefined) {
      writer.uint32(274).bytes(message.paddingBytes);
    }
    if (message.yearClass !== undefined) {
      writer.uint32(288).int32(message.yearClass);
    }
    if (message.memClass !== undefined) {
      writer.uint32(296).int32(message.memClass);
    }
    if (message.interopData !== undefined) {
      ClientPayload_InteropData.encode(message.interopData, writer.uint32(306).fork()).join();
    }
    if (message.trafficAnonymization !== undefined) {
      writer.uint32(320).int32(message.trafficAnonymization);
    }
    if (message.lidDbMigrated !== undefined) {
      writer.uint32(328).bool(message.lidDbMigrated);
    }
    if (message.accountType !== undefined) {
      writer.uint32(336).int32(message.accountType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.username = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.passive = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.userAgent = ClientPayload_UserAgent.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.webInfo = ClientPayload_WebInfo.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.pushName = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 77) {
            break;
          }

          message.sessionId = reader.sfixed32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.shortConnect = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.connectType = reader.int32() as any;
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.connectReason = reader.int32() as any;
          continue;
        }
        case 14: {
          if (tag === 112) {
            message.shards.push(reader.int32());

            continue;
          }

          if (tag === 114) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.shards.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.dnsSource = ClientPayload_DNSSource.decode(reader, reader.uint32());
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.connectAttemptCount = reader.uint32();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.device = reader.uint32();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.devicePairingData = ClientPayload_DevicePairingRegistrationData.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.product = reader.int32() as any;
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.fbCat = reader.bytes();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.fbUserAgent = reader.bytes();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.oc = reader.bool();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.lc = reader.int32();
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.iosAppExtension = reader.int32() as any;
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.fbAppId = longToNumber(reader.uint64());
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.fbDeviceId = reader.bytes();
          continue;
        }
        case 33: {
          if (tag !== 264) {
            break;
          }

          message.pull = reader.bool();
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.paddingBytes = reader.bytes();
          continue;
        }
        case 36: {
          if (tag !== 288) {
            break;
          }

          message.yearClass = reader.int32();
          continue;
        }
        case 37: {
          if (tag !== 296) {
            break;
          }

          message.memClass = reader.int32();
          continue;
        }
        case 38: {
          if (tag !== 306) {
            break;
          }

          message.interopData = ClientPayload_InteropData.decode(reader, reader.uint32());
          continue;
        }
        case 40: {
          if (tag !== 320) {
            break;
          }

          message.trafficAnonymization = reader.int32() as any;
          continue;
        }
        case 41: {
          if (tag !== 328) {
            break;
          }

          message.lidDbMigrated = reader.bool();
          continue;
        }
        case 42: {
          if (tag !== 336) {
            break;
          }

          message.accountType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientPayload {
    return {
      username: isSet(object.username) ? globalThis.Number(object.username) : undefined,
      passive: isSet(object.passive) ? globalThis.Boolean(object.passive) : undefined,
      userAgent: isSet(object.userAgent) ? ClientPayload_UserAgent.fromJSON(object.userAgent) : undefined,
      webInfo: isSet(object.webInfo) ? ClientPayload_WebInfo.fromJSON(object.webInfo) : undefined,
      pushName: isSet(object.pushName) ? globalThis.String(object.pushName) : undefined,
      sessionId: isSet(object.sessionId) ? globalThis.Number(object.sessionId) : undefined,
      shortConnect: isSet(object.shortConnect) ? globalThis.Boolean(object.shortConnect) : undefined,
      connectType: isSet(object.connectType) ? clientPayload_ConnectTypeFromJSON(object.connectType) : undefined,
      connectReason: isSet(object.connectReason)
        ? clientPayload_ConnectReasonFromJSON(object.connectReason)
        : undefined,
      shards: globalThis.Array.isArray(object?.shards) ? object.shards.map((e: any) => globalThis.Number(e)) : [],
      dnsSource: isSet(object.dnsSource) ? ClientPayload_DNSSource.fromJSON(object.dnsSource) : undefined,
      connectAttemptCount: isSet(object.connectAttemptCount)
        ? globalThis.Number(object.connectAttemptCount)
        : undefined,
      device: isSet(object.device) ? globalThis.Number(object.device) : undefined,
      devicePairingData: isSet(object.devicePairingData)
        ? ClientPayload_DevicePairingRegistrationData.fromJSON(object.devicePairingData)
        : undefined,
      product: isSet(object.product) ? clientPayload_ProductFromJSON(object.product) : undefined,
      fbCat: isSet(object.fbCat) ? bytesFromBase64(object.fbCat) : undefined,
      fbUserAgent: isSet(object.fbUserAgent) ? bytesFromBase64(object.fbUserAgent) : undefined,
      oc: isSet(object.oc) ? globalThis.Boolean(object.oc) : undefined,
      lc: isSet(object.lc) ? globalThis.Number(object.lc) : undefined,
      iosAppExtension: isSet(object.iosAppExtension)
        ? clientPayload_IOSAppExtensionFromJSON(object.iosAppExtension)
        : undefined,
      fbAppId: isSet(object.fbAppId) ? globalThis.Number(object.fbAppId) : undefined,
      fbDeviceId: isSet(object.fbDeviceId) ? bytesFromBase64(object.fbDeviceId) : undefined,
      pull: isSet(object.pull) ? globalThis.Boolean(object.pull) : undefined,
      paddingBytes: isSet(object.paddingBytes) ? bytesFromBase64(object.paddingBytes) : undefined,
      yearClass: isSet(object.yearClass) ? globalThis.Number(object.yearClass) : undefined,
      memClass: isSet(object.memClass) ? globalThis.Number(object.memClass) : undefined,
      interopData: isSet(object.interopData) ? ClientPayload_InteropData.fromJSON(object.interopData) : undefined,
      trafficAnonymization: isSet(object.trafficAnonymization)
        ? clientPayload_TrafficAnonymizationFromJSON(object.trafficAnonymization)
        : undefined,
      lidDbMigrated: isSet(object.lidDbMigrated) ? globalThis.Boolean(object.lidDbMigrated) : undefined,
      accountType: isSet(object.accountType) ? clientPayload_AccountTypeFromJSON(object.accountType) : undefined,
    };
  },

  toJSON(message: ClientPayload): unknown {
    const obj: any = {};
    if (message.username !== undefined) {
      obj.username = Math.round(message.username);
    }
    if (message.passive !== undefined) {
      obj.passive = message.passive;
    }
    if (message.userAgent !== undefined) {
      obj.userAgent = ClientPayload_UserAgent.toJSON(message.userAgent);
    }
    if (message.webInfo !== undefined) {
      obj.webInfo = ClientPayload_WebInfo.toJSON(message.webInfo);
    }
    if (message.pushName !== undefined) {
      obj.pushName = message.pushName;
    }
    if (message.sessionId !== undefined) {
      obj.sessionId = Math.round(message.sessionId);
    }
    if (message.shortConnect !== undefined) {
      obj.shortConnect = message.shortConnect;
    }
    if (message.connectType !== undefined) {
      obj.connectType = clientPayload_ConnectTypeToJSON(message.connectType);
    }
    if (message.connectReason !== undefined) {
      obj.connectReason = clientPayload_ConnectReasonToJSON(message.connectReason);
    }
    if (message.shards?.length) {
      obj.shards = message.shards.map((e) => Math.round(e));
    }
    if (message.dnsSource !== undefined) {
      obj.dnsSource = ClientPayload_DNSSource.toJSON(message.dnsSource);
    }
    if (message.connectAttemptCount !== undefined) {
      obj.connectAttemptCount = Math.round(message.connectAttemptCount);
    }
    if (message.device !== undefined) {
      obj.device = Math.round(message.device);
    }
    if (message.devicePairingData !== undefined) {
      obj.devicePairingData = ClientPayload_DevicePairingRegistrationData.toJSON(message.devicePairingData);
    }
    if (message.product !== undefined) {
      obj.product = clientPayload_ProductToJSON(message.product);
    }
    if (message.fbCat !== undefined) {
      obj.fbCat = base64FromBytes(message.fbCat);
    }
    if (message.fbUserAgent !== undefined) {
      obj.fbUserAgent = base64FromBytes(message.fbUserAgent);
    }
    if (message.oc !== undefined) {
      obj.oc = message.oc;
    }
    if (message.lc !== undefined) {
      obj.lc = Math.round(message.lc);
    }
    if (message.iosAppExtension !== undefined) {
      obj.iosAppExtension = clientPayload_IOSAppExtensionToJSON(message.iosAppExtension);
    }
    if (message.fbAppId !== undefined) {
      obj.fbAppId = Math.round(message.fbAppId);
    }
    if (message.fbDeviceId !== undefined) {
      obj.fbDeviceId = base64FromBytes(message.fbDeviceId);
    }
    if (message.pull !== undefined) {
      obj.pull = message.pull;
    }
    if (message.paddingBytes !== undefined) {
      obj.paddingBytes = base64FromBytes(message.paddingBytes);
    }
    if (message.yearClass !== undefined) {
      obj.yearClass = Math.round(message.yearClass);
    }
    if (message.memClass !== undefined) {
      obj.memClass = Math.round(message.memClass);
    }
    if (message.interopData !== undefined) {
      obj.interopData = ClientPayload_InteropData.toJSON(message.interopData);
    }
    if (message.trafficAnonymization !== undefined) {
      obj.trafficAnonymization = clientPayload_TrafficAnonymizationToJSON(message.trafficAnonymization);
    }
    if (message.lidDbMigrated !== undefined) {
      obj.lidDbMigrated = message.lidDbMigrated;
    }
    if (message.accountType !== undefined) {
      obj.accountType = clientPayload_AccountTypeToJSON(message.accountType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientPayload>, I>>(base?: I): ClientPayload {
    return ClientPayload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientPayload>, I>>(object: I): ClientPayload {
    const message = createBaseClientPayload();
    message.username = object.username ?? undefined;
    message.passive = object.passive ?? undefined;
    message.userAgent = (object.userAgent !== undefined && object.userAgent !== null)
      ? ClientPayload_UserAgent.fromPartial(object.userAgent)
      : undefined;
    message.webInfo = (object.webInfo !== undefined && object.webInfo !== null)
      ? ClientPayload_WebInfo.fromPartial(object.webInfo)
      : undefined;
    message.pushName = object.pushName ?? undefined;
    message.sessionId = object.sessionId ?? undefined;
    message.shortConnect = object.shortConnect ?? undefined;
    message.connectType = object.connectType ?? undefined;
    message.connectReason = object.connectReason ?? undefined;
    message.shards = object.shards?.map((e) => e) || [];
    message.dnsSource = (object.dnsSource !== undefined && object.dnsSource !== null)
      ? ClientPayload_DNSSource.fromPartial(object.dnsSource)
      : undefined;
    message.connectAttemptCount = object.connectAttemptCount ?? undefined;
    message.device = object.device ?? undefined;
    message.devicePairingData = (object.devicePairingData !== undefined && object.devicePairingData !== null)
      ? ClientPayload_DevicePairingRegistrationData.fromPartial(object.devicePairingData)
      : undefined;
    message.product = object.product ?? undefined;
    message.fbCat = object.fbCat ?? undefined;
    message.fbUserAgent = object.fbUserAgent ?? undefined;
    message.oc = object.oc ?? undefined;
    message.lc = object.lc ?? undefined;
    message.iosAppExtension = object.iosAppExtension ?? undefined;
    message.fbAppId = object.fbAppId ?? undefined;
    message.fbDeviceId = object.fbDeviceId ?? undefined;
    message.pull = object.pull ?? undefined;
    message.paddingBytes = object.paddingBytes ?? undefined;
    message.yearClass = object.yearClass ?? undefined;
    message.memClass = object.memClass ?? undefined;
    message.interopData = (object.interopData !== undefined && object.interopData !== null)
      ? ClientPayload_InteropData.fromPartial(object.interopData)
      : undefined;
    message.trafficAnonymization = object.trafficAnonymization ?? undefined;
    message.lidDbMigrated = object.lidDbMigrated ?? undefined;
    message.accountType = object.accountType ?? undefined;
    return message;
  },
};

function createBaseClientPayload_DNSSource(): ClientPayload_DNSSource {
  return { dnsMethod: undefined, appCached: undefined };
}

export const ClientPayload_DNSSource: MessageFns<ClientPayload_DNSSource> = {
  encode(message: ClientPayload_DNSSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dnsMethod !== undefined) {
      writer.uint32(120).int32(message.dnsMethod);
    }
    if (message.appCached !== undefined) {
      writer.uint32(128).bool(message.appCached);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientPayload_DNSSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientPayload_DNSSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.dnsMethod = reader.int32() as any;
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.appCached = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientPayload_DNSSource {
    return {
      dnsMethod: isSet(object.dnsMethod)
        ? clientPayload_DNSSource_DNSResolutionMethodFromJSON(object.dnsMethod)
        : undefined,
      appCached: isSet(object.appCached) ? globalThis.Boolean(object.appCached) : undefined,
    };
  },

  toJSON(message: ClientPayload_DNSSource): unknown {
    const obj: any = {};
    if (message.dnsMethod !== undefined) {
      obj.dnsMethod = clientPayload_DNSSource_DNSResolutionMethodToJSON(message.dnsMethod);
    }
    if (message.appCached !== undefined) {
      obj.appCached = message.appCached;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientPayload_DNSSource>, I>>(base?: I): ClientPayload_DNSSource {
    return ClientPayload_DNSSource.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientPayload_DNSSource>, I>>(object: I): ClientPayload_DNSSource {
    const message = createBaseClientPayload_DNSSource();
    message.dnsMethod = object.dnsMethod ?? undefined;
    message.appCached = object.appCached ?? undefined;
    return message;
  },
};

function createBaseClientPayload_DevicePairingRegistrationData(): ClientPayload_DevicePairingRegistrationData {
  return {
    eRegid: undefined,
    eKeytype: undefined,
    eIdent: undefined,
    eSkeyId: undefined,
    eSkeyVal: undefined,
    eSkeySig: undefined,
    buildHash: undefined,
    deviceProps: undefined,
  };
}

export const ClientPayload_DevicePairingRegistrationData: MessageFns<ClientPayload_DevicePairingRegistrationData> = {
  encode(
    message: ClientPayload_DevicePairingRegistrationData,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.eRegid !== undefined) {
      writer.uint32(10).bytes(message.eRegid);
    }
    if (message.eKeytype !== undefined) {
      writer.uint32(18).bytes(message.eKeytype);
    }
    if (message.eIdent !== undefined) {
      writer.uint32(26).bytes(message.eIdent);
    }
    if (message.eSkeyId !== undefined) {
      writer.uint32(34).bytes(message.eSkeyId);
    }
    if (message.eSkeyVal !== undefined) {
      writer.uint32(42).bytes(message.eSkeyVal);
    }
    if (message.eSkeySig !== undefined) {
      writer.uint32(50).bytes(message.eSkeySig);
    }
    if (message.buildHash !== undefined) {
      writer.uint32(58).bytes(message.buildHash);
    }
    if (message.deviceProps !== undefined) {
      writer.uint32(66).bytes(message.deviceProps);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientPayload_DevicePairingRegistrationData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientPayload_DevicePairingRegistrationData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eRegid = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.eKeytype = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.eIdent = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.eSkeyId = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.eSkeyVal = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.eSkeySig = reader.bytes();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.buildHash = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.deviceProps = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientPayload_DevicePairingRegistrationData {
    return {
      eRegid: isSet(object.eRegid) ? bytesFromBase64(object.eRegid) : undefined,
      eKeytype: isSet(object.eKeytype) ? bytesFromBase64(object.eKeytype) : undefined,
      eIdent: isSet(object.eIdent) ? bytesFromBase64(object.eIdent) : undefined,
      eSkeyId: isSet(object.eSkeyId) ? bytesFromBase64(object.eSkeyId) : undefined,
      eSkeyVal: isSet(object.eSkeyVal) ? bytesFromBase64(object.eSkeyVal) : undefined,
      eSkeySig: isSet(object.eSkeySig) ? bytesFromBase64(object.eSkeySig) : undefined,
      buildHash: isSet(object.buildHash) ? bytesFromBase64(object.buildHash) : undefined,
      deviceProps: isSet(object.deviceProps) ? bytesFromBase64(object.deviceProps) : undefined,
    };
  },

  toJSON(message: ClientPayload_DevicePairingRegistrationData): unknown {
    const obj: any = {};
    if (message.eRegid !== undefined) {
      obj.eRegid = base64FromBytes(message.eRegid);
    }
    if (message.eKeytype !== undefined) {
      obj.eKeytype = base64FromBytes(message.eKeytype);
    }
    if (message.eIdent !== undefined) {
      obj.eIdent = base64FromBytes(message.eIdent);
    }
    if (message.eSkeyId !== undefined) {
      obj.eSkeyId = base64FromBytes(message.eSkeyId);
    }
    if (message.eSkeyVal !== undefined) {
      obj.eSkeyVal = base64FromBytes(message.eSkeyVal);
    }
    if (message.eSkeySig !== undefined) {
      obj.eSkeySig = base64FromBytes(message.eSkeySig);
    }
    if (message.buildHash !== undefined) {
      obj.buildHash = base64FromBytes(message.buildHash);
    }
    if (message.deviceProps !== undefined) {
      obj.deviceProps = base64FromBytes(message.deviceProps);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientPayload_DevicePairingRegistrationData>, I>>(
    base?: I,
  ): ClientPayload_DevicePairingRegistrationData {
    return ClientPayload_DevicePairingRegistrationData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientPayload_DevicePairingRegistrationData>, I>>(
    object: I,
  ): ClientPayload_DevicePairingRegistrationData {
    const message = createBaseClientPayload_DevicePairingRegistrationData();
    message.eRegid = object.eRegid ?? undefined;
    message.eKeytype = object.eKeytype ?? undefined;
    message.eIdent = object.eIdent ?? undefined;
    message.eSkeyId = object.eSkeyId ?? undefined;
    message.eSkeyVal = object.eSkeyVal ?? undefined;
    message.eSkeySig = object.eSkeySig ?? undefined;
    message.buildHash = object.buildHash ?? undefined;
    message.deviceProps = object.deviceProps ?? undefined;
    return message;
  },
};

function createBaseClientPayload_InteropData(): ClientPayload_InteropData {
  return { accountId: undefined, token: undefined, enableReadReceipts: undefined };
}

export const ClientPayload_InteropData: MessageFns<ClientPayload_InteropData> = {
  encode(message: ClientPayload_InteropData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountId !== undefined) {
      writer.uint32(8).uint64(message.accountId);
    }
    if (message.token !== undefined) {
      writer.uint32(18).bytes(message.token);
    }
    if (message.enableReadReceipts !== undefined) {
      writer.uint32(24).bool(message.enableReadReceipts);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientPayload_InteropData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientPayload_InteropData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.accountId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.token = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.enableReadReceipts = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientPayload_InteropData {
    return {
      accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : undefined,
      token: isSet(object.token) ? bytesFromBase64(object.token) : undefined,
      enableReadReceipts: isSet(object.enableReadReceipts) ? globalThis.Boolean(object.enableReadReceipts) : undefined,
    };
  },

  toJSON(message: ClientPayload_InteropData): unknown {
    const obj: any = {};
    if (message.accountId !== undefined) {
      obj.accountId = Math.round(message.accountId);
    }
    if (message.token !== undefined) {
      obj.token = base64FromBytes(message.token);
    }
    if (message.enableReadReceipts !== undefined) {
      obj.enableReadReceipts = message.enableReadReceipts;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientPayload_InteropData>, I>>(base?: I): ClientPayload_InteropData {
    return ClientPayload_InteropData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientPayload_InteropData>, I>>(object: I): ClientPayload_InteropData {
    const message = createBaseClientPayload_InteropData();
    message.accountId = object.accountId ?? undefined;
    message.token = object.token ?? undefined;
    message.enableReadReceipts = object.enableReadReceipts ?? undefined;
    return message;
  },
};

function createBaseClientPayload_UserAgent(): ClientPayload_UserAgent {
  return {
    platform: undefined,
    appVersion: undefined,
    mcc: undefined,
    mnc: undefined,
    osVersion: undefined,
    manufacturer: undefined,
    device: undefined,
    osBuildNumber: undefined,
    phoneId: undefined,
    releaseChannel: undefined,
    localeLanguageIso6391: undefined,
    localeCountryIso31661Alpha2: undefined,
    deviceBoard: undefined,
    deviceExpId: undefined,
    deviceType: undefined,
    deviceModelType: undefined,
  };
}

export const ClientPayload_UserAgent: MessageFns<ClientPayload_UserAgent> = {
  encode(message: ClientPayload_UserAgent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.platform !== undefined) {
      writer.uint32(8).int32(message.platform);
    }
    if (message.appVersion !== undefined) {
      ClientPayload_UserAgent_AppVersion.encode(message.appVersion, writer.uint32(18).fork()).join();
    }
    if (message.mcc !== undefined) {
      writer.uint32(26).string(message.mcc);
    }
    if (message.mnc !== undefined) {
      writer.uint32(34).string(message.mnc);
    }
    if (message.osVersion !== undefined) {
      writer.uint32(42).string(message.osVersion);
    }
    if (message.manufacturer !== undefined) {
      writer.uint32(50).string(message.manufacturer);
    }
    if (message.device !== undefined) {
      writer.uint32(58).string(message.device);
    }
    if (message.osBuildNumber !== undefined) {
      writer.uint32(66).string(message.osBuildNumber);
    }
    if (message.phoneId !== undefined) {
      writer.uint32(74).string(message.phoneId);
    }
    if (message.releaseChannel !== undefined) {
      writer.uint32(80).int32(message.releaseChannel);
    }
    if (message.localeLanguageIso6391 !== undefined) {
      writer.uint32(90).string(message.localeLanguageIso6391);
    }
    if (message.localeCountryIso31661Alpha2 !== undefined) {
      writer.uint32(98).string(message.localeCountryIso31661Alpha2);
    }
    if (message.deviceBoard !== undefined) {
      writer.uint32(106).string(message.deviceBoard);
    }
    if (message.deviceExpId !== undefined) {
      writer.uint32(114).string(message.deviceExpId);
    }
    if (message.deviceType !== undefined) {
      writer.uint32(120).int32(message.deviceType);
    }
    if (message.deviceModelType !== undefined) {
      writer.uint32(130).string(message.deviceModelType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientPayload_UserAgent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientPayload_UserAgent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.platform = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.appVersion = ClientPayload_UserAgent_AppVersion.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.mcc = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.mnc = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.osVersion = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.manufacturer = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.device = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.osBuildNumber = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.phoneId = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.releaseChannel = reader.int32() as any;
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.localeLanguageIso6391 = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.localeCountryIso31661Alpha2 = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.deviceBoard = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.deviceExpId = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.deviceType = reader.int32() as any;
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.deviceModelType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientPayload_UserAgent {
    return {
      platform: isSet(object.platform) ? clientPayload_UserAgent_PlatformFromJSON(object.platform) : undefined,
      appVersion: isSet(object.appVersion) ? ClientPayload_UserAgent_AppVersion.fromJSON(object.appVersion) : undefined,
      mcc: isSet(object.mcc) ? globalThis.String(object.mcc) : undefined,
      mnc: isSet(object.mnc) ? globalThis.String(object.mnc) : undefined,
      osVersion: isSet(object.osVersion) ? globalThis.String(object.osVersion) : undefined,
      manufacturer: isSet(object.manufacturer) ? globalThis.String(object.manufacturer) : undefined,
      device: isSet(object.device) ? globalThis.String(object.device) : undefined,
      osBuildNumber: isSet(object.osBuildNumber) ? globalThis.String(object.osBuildNumber) : undefined,
      phoneId: isSet(object.phoneId) ? globalThis.String(object.phoneId) : undefined,
      releaseChannel: isSet(object.releaseChannel)
        ? clientPayload_UserAgent_ReleaseChannelFromJSON(object.releaseChannel)
        : undefined,
      localeLanguageIso6391: isSet(object.localeLanguageIso6391)
        ? globalThis.String(object.localeLanguageIso6391)
        : undefined,
      localeCountryIso31661Alpha2: isSet(object.localeCountryIso31661Alpha2)
        ? globalThis.String(object.localeCountryIso31661Alpha2)
        : undefined,
      deviceBoard: isSet(object.deviceBoard) ? globalThis.String(object.deviceBoard) : undefined,
      deviceExpId: isSet(object.deviceExpId) ? globalThis.String(object.deviceExpId) : undefined,
      deviceType: isSet(object.deviceType) ? clientPayload_UserAgent_DeviceTypeFromJSON(object.deviceType) : undefined,
      deviceModelType: isSet(object.deviceModelType) ? globalThis.String(object.deviceModelType) : undefined,
    };
  },

  toJSON(message: ClientPayload_UserAgent): unknown {
    const obj: any = {};
    if (message.platform !== undefined) {
      obj.platform = clientPayload_UserAgent_PlatformToJSON(message.platform);
    }
    if (message.appVersion !== undefined) {
      obj.appVersion = ClientPayload_UserAgent_AppVersion.toJSON(message.appVersion);
    }
    if (message.mcc !== undefined) {
      obj.mcc = message.mcc;
    }
    if (message.mnc !== undefined) {
      obj.mnc = message.mnc;
    }
    if (message.osVersion !== undefined) {
      obj.osVersion = message.osVersion;
    }
    if (message.manufacturer !== undefined) {
      obj.manufacturer = message.manufacturer;
    }
    if (message.device !== undefined) {
      obj.device = message.device;
    }
    if (message.osBuildNumber !== undefined) {
      obj.osBuildNumber = message.osBuildNumber;
    }
    if (message.phoneId !== undefined) {
      obj.phoneId = message.phoneId;
    }
    if (message.releaseChannel !== undefined) {
      obj.releaseChannel = clientPayload_UserAgent_ReleaseChannelToJSON(message.releaseChannel);
    }
    if (message.localeLanguageIso6391 !== undefined) {
      obj.localeLanguageIso6391 = message.localeLanguageIso6391;
    }
    if (message.localeCountryIso31661Alpha2 !== undefined) {
      obj.localeCountryIso31661Alpha2 = message.localeCountryIso31661Alpha2;
    }
    if (message.deviceBoard !== undefined) {
      obj.deviceBoard = message.deviceBoard;
    }
    if (message.deviceExpId !== undefined) {
      obj.deviceExpId = message.deviceExpId;
    }
    if (message.deviceType !== undefined) {
      obj.deviceType = clientPayload_UserAgent_DeviceTypeToJSON(message.deviceType);
    }
    if (message.deviceModelType !== undefined) {
      obj.deviceModelType = message.deviceModelType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientPayload_UserAgent>, I>>(base?: I): ClientPayload_UserAgent {
    return ClientPayload_UserAgent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientPayload_UserAgent>, I>>(object: I): ClientPayload_UserAgent {
    const message = createBaseClientPayload_UserAgent();
    message.platform = object.platform ?? undefined;
    message.appVersion = (object.appVersion !== undefined && object.appVersion !== null)
      ? ClientPayload_UserAgent_AppVersion.fromPartial(object.appVersion)
      : undefined;
    message.mcc = object.mcc ?? undefined;
    message.mnc = object.mnc ?? undefined;
    message.osVersion = object.osVersion ?? undefined;
    message.manufacturer = object.manufacturer ?? undefined;
    message.device = object.device ?? undefined;
    message.osBuildNumber = object.osBuildNumber ?? undefined;
    message.phoneId = object.phoneId ?? undefined;
    message.releaseChannel = object.releaseChannel ?? undefined;
    message.localeLanguageIso6391 = object.localeLanguageIso6391 ?? undefined;
    message.localeCountryIso31661Alpha2 = object.localeCountryIso31661Alpha2 ?? undefined;
    message.deviceBoard = object.deviceBoard ?? undefined;
    message.deviceExpId = object.deviceExpId ?? undefined;
    message.deviceType = object.deviceType ?? undefined;
    message.deviceModelType = object.deviceModelType ?? undefined;
    return message;
  },
};

function createBaseClientPayload_UserAgent_AppVersion(): ClientPayload_UserAgent_AppVersion {
  return { primary: undefined, secondary: undefined, tertiary: undefined, quaternary: undefined, quinary: undefined };
}

export const ClientPayload_UserAgent_AppVersion: MessageFns<ClientPayload_UserAgent_AppVersion> = {
  encode(message: ClientPayload_UserAgent_AppVersion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.primary !== undefined) {
      writer.uint32(8).uint32(message.primary);
    }
    if (message.secondary !== undefined) {
      writer.uint32(16).uint32(message.secondary);
    }
    if (message.tertiary !== undefined) {
      writer.uint32(24).uint32(message.tertiary);
    }
    if (message.quaternary !== undefined) {
      writer.uint32(32).uint32(message.quaternary);
    }
    if (message.quinary !== undefined) {
      writer.uint32(40).uint32(message.quinary);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientPayload_UserAgent_AppVersion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientPayload_UserAgent_AppVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.primary = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.secondary = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.tertiary = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.quaternary = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.quinary = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientPayload_UserAgent_AppVersion {
    return {
      primary: isSet(object.primary) ? globalThis.Number(object.primary) : undefined,
      secondary: isSet(object.secondary) ? globalThis.Number(object.secondary) : undefined,
      tertiary: isSet(object.tertiary) ? globalThis.Number(object.tertiary) : undefined,
      quaternary: isSet(object.quaternary) ? globalThis.Number(object.quaternary) : undefined,
      quinary: isSet(object.quinary) ? globalThis.Number(object.quinary) : undefined,
    };
  },

  toJSON(message: ClientPayload_UserAgent_AppVersion): unknown {
    const obj: any = {};
    if (message.primary !== undefined) {
      obj.primary = Math.round(message.primary);
    }
    if (message.secondary !== undefined) {
      obj.secondary = Math.round(message.secondary);
    }
    if (message.tertiary !== undefined) {
      obj.tertiary = Math.round(message.tertiary);
    }
    if (message.quaternary !== undefined) {
      obj.quaternary = Math.round(message.quaternary);
    }
    if (message.quinary !== undefined) {
      obj.quinary = Math.round(message.quinary);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientPayload_UserAgent_AppVersion>, I>>(
    base?: I,
  ): ClientPayload_UserAgent_AppVersion {
    return ClientPayload_UserAgent_AppVersion.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientPayload_UserAgent_AppVersion>, I>>(
    object: I,
  ): ClientPayload_UserAgent_AppVersion {
    const message = createBaseClientPayload_UserAgent_AppVersion();
    message.primary = object.primary ?? undefined;
    message.secondary = object.secondary ?? undefined;
    message.tertiary = object.tertiary ?? undefined;
    message.quaternary = object.quaternary ?? undefined;
    message.quinary = object.quinary ?? undefined;
    return message;
  },
};

function createBaseClientPayload_WebInfo(): ClientPayload_WebInfo {
  return { refToken: undefined, version: undefined, webdPayload: undefined, webSubPlatform: undefined };
}

export const ClientPayload_WebInfo: MessageFns<ClientPayload_WebInfo> = {
  encode(message: ClientPayload_WebInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.refToken !== undefined) {
      writer.uint32(10).string(message.refToken);
    }
    if (message.version !== undefined) {
      writer.uint32(18).string(message.version);
    }
    if (message.webdPayload !== undefined) {
      ClientPayload_WebInfo_WebdPayload.encode(message.webdPayload, writer.uint32(26).fork()).join();
    }
    if (message.webSubPlatform !== undefined) {
      writer.uint32(32).int32(message.webSubPlatform);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientPayload_WebInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientPayload_WebInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.refToken = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.webdPayload = ClientPayload_WebInfo_WebdPayload.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.webSubPlatform = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientPayload_WebInfo {
    return {
      refToken: isSet(object.refToken) ? globalThis.String(object.refToken) : undefined,
      version: isSet(object.version) ? globalThis.String(object.version) : undefined,
      webdPayload: isSet(object.webdPayload)
        ? ClientPayload_WebInfo_WebdPayload.fromJSON(object.webdPayload)
        : undefined,
      webSubPlatform: isSet(object.webSubPlatform)
        ? clientPayload_WebInfo_WebSubPlatformFromJSON(object.webSubPlatform)
        : undefined,
    };
  },

  toJSON(message: ClientPayload_WebInfo): unknown {
    const obj: any = {};
    if (message.refToken !== undefined) {
      obj.refToken = message.refToken;
    }
    if (message.version !== undefined) {
      obj.version = message.version;
    }
    if (message.webdPayload !== undefined) {
      obj.webdPayload = ClientPayload_WebInfo_WebdPayload.toJSON(message.webdPayload);
    }
    if (message.webSubPlatform !== undefined) {
      obj.webSubPlatform = clientPayload_WebInfo_WebSubPlatformToJSON(message.webSubPlatform);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientPayload_WebInfo>, I>>(base?: I): ClientPayload_WebInfo {
    return ClientPayload_WebInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientPayload_WebInfo>, I>>(object: I): ClientPayload_WebInfo {
    const message = createBaseClientPayload_WebInfo();
    message.refToken = object.refToken ?? undefined;
    message.version = object.version ?? undefined;
    message.webdPayload = (object.webdPayload !== undefined && object.webdPayload !== null)
      ? ClientPayload_WebInfo_WebdPayload.fromPartial(object.webdPayload)
      : undefined;
    message.webSubPlatform = object.webSubPlatform ?? undefined;
    return message;
  },
};

function createBaseClientPayload_WebInfo_WebdPayload(): ClientPayload_WebInfo_WebdPayload {
  return {
    usesParticipantInKey: undefined,
    supportsStarredMessages: undefined,
    supportsDocumentMessages: undefined,
    supportsUrlMessages: undefined,
    supportsMediaRetry: undefined,
    supportsE2EImage: undefined,
    supportsE2EVideo: undefined,
    supportsE2EAudio: undefined,
    supportsE2EDocument: undefined,
    documentTypes: undefined,
    features: undefined,
  };
}

export const ClientPayload_WebInfo_WebdPayload: MessageFns<ClientPayload_WebInfo_WebdPayload> = {
  encode(message: ClientPayload_WebInfo_WebdPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.usesParticipantInKey !== undefined) {
      writer.uint32(8).bool(message.usesParticipantInKey);
    }
    if (message.supportsStarredMessages !== undefined) {
      writer.uint32(16).bool(message.supportsStarredMessages);
    }
    if (message.supportsDocumentMessages !== undefined) {
      writer.uint32(24).bool(message.supportsDocumentMessages);
    }
    if (message.supportsUrlMessages !== undefined) {
      writer.uint32(32).bool(message.supportsUrlMessages);
    }
    if (message.supportsMediaRetry !== undefined) {
      writer.uint32(40).bool(message.supportsMediaRetry);
    }
    if (message.supportsE2EImage !== undefined) {
      writer.uint32(48).bool(message.supportsE2EImage);
    }
    if (message.supportsE2EVideo !== undefined) {
      writer.uint32(56).bool(message.supportsE2EVideo);
    }
    if (message.supportsE2EAudio !== undefined) {
      writer.uint32(64).bool(message.supportsE2EAudio);
    }
    if (message.supportsE2EDocument !== undefined) {
      writer.uint32(72).bool(message.supportsE2EDocument);
    }
    if (message.documentTypes !== undefined) {
      writer.uint32(82).string(message.documentTypes);
    }
    if (message.features !== undefined) {
      writer.uint32(90).bytes(message.features);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientPayload_WebInfo_WebdPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientPayload_WebInfo_WebdPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.usesParticipantInKey = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.supportsStarredMessages = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.supportsDocumentMessages = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.supportsUrlMessages = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.supportsMediaRetry = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.supportsE2EImage = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.supportsE2EVideo = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.supportsE2EAudio = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.supportsE2EDocument = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.documentTypes = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.features = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientPayload_WebInfo_WebdPayload {
    return {
      usesParticipantInKey: isSet(object.usesParticipantInKey)
        ? globalThis.Boolean(object.usesParticipantInKey)
        : undefined,
      supportsStarredMessages: isSet(object.supportsStarredMessages)
        ? globalThis.Boolean(object.supportsStarredMessages)
        : undefined,
      supportsDocumentMessages: isSet(object.supportsDocumentMessages)
        ? globalThis.Boolean(object.supportsDocumentMessages)
        : undefined,
      supportsUrlMessages: isSet(object.supportsUrlMessages)
        ? globalThis.Boolean(object.supportsUrlMessages)
        : undefined,
      supportsMediaRetry: isSet(object.supportsMediaRetry) ? globalThis.Boolean(object.supportsMediaRetry) : undefined,
      supportsE2EImage: isSet(object.supportsE2EImage) ? globalThis.Boolean(object.supportsE2EImage) : undefined,
      supportsE2EVideo: isSet(object.supportsE2EVideo) ? globalThis.Boolean(object.supportsE2EVideo) : undefined,
      supportsE2EAudio: isSet(object.supportsE2EAudio) ? globalThis.Boolean(object.supportsE2EAudio) : undefined,
      supportsE2EDocument: isSet(object.supportsE2EDocument)
        ? globalThis.Boolean(object.supportsE2EDocument)
        : undefined,
      documentTypes: isSet(object.documentTypes) ? globalThis.String(object.documentTypes) : undefined,
      features: isSet(object.features) ? bytesFromBase64(object.features) : undefined,
    };
  },

  toJSON(message: ClientPayload_WebInfo_WebdPayload): unknown {
    const obj: any = {};
    if (message.usesParticipantInKey !== undefined) {
      obj.usesParticipantInKey = message.usesParticipantInKey;
    }
    if (message.supportsStarredMessages !== undefined) {
      obj.supportsStarredMessages = message.supportsStarredMessages;
    }
    if (message.supportsDocumentMessages !== undefined) {
      obj.supportsDocumentMessages = message.supportsDocumentMessages;
    }
    if (message.supportsUrlMessages !== undefined) {
      obj.supportsUrlMessages = message.supportsUrlMessages;
    }
    if (message.supportsMediaRetry !== undefined) {
      obj.supportsMediaRetry = message.supportsMediaRetry;
    }
    if (message.supportsE2EImage !== undefined) {
      obj.supportsE2EImage = message.supportsE2EImage;
    }
    if (message.supportsE2EVideo !== undefined) {
      obj.supportsE2EVideo = message.supportsE2EVideo;
    }
    if (message.supportsE2EAudio !== undefined) {
      obj.supportsE2EAudio = message.supportsE2EAudio;
    }
    if (message.supportsE2EDocument !== undefined) {
      obj.supportsE2EDocument = message.supportsE2EDocument;
    }
    if (message.documentTypes !== undefined) {
      obj.documentTypes = message.documentTypes;
    }
    if (message.features !== undefined) {
      obj.features = base64FromBytes(message.features);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientPayload_WebInfo_WebdPayload>, I>>(
    base?: I,
  ): ClientPayload_WebInfo_WebdPayload {
    return ClientPayload_WebInfo_WebdPayload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientPayload_WebInfo_WebdPayload>, I>>(
    object: I,
  ): ClientPayload_WebInfo_WebdPayload {
    const message = createBaseClientPayload_WebInfo_WebdPayload();
    message.usesParticipantInKey = object.usesParticipantInKey ?? undefined;
    message.supportsStarredMessages = object.supportsStarredMessages ?? undefined;
    message.supportsDocumentMessages = object.supportsDocumentMessages ?? undefined;
    message.supportsUrlMessages = object.supportsUrlMessages ?? undefined;
    message.supportsMediaRetry = object.supportsMediaRetry ?? undefined;
    message.supportsE2EImage = object.supportsE2EImage ?? undefined;
    message.supportsE2EVideo = object.supportsE2EVideo ?? undefined;
    message.supportsE2EAudio = object.supportsE2EAudio ?? undefined;
    message.supportsE2EDocument = object.supportsE2EDocument ?? undefined;
    message.documentTypes = object.documentTypes ?? undefined;
    message.features = object.features ?? undefined;
    return message;
  },
};

function createBaseCommentMetadata(): CommentMetadata {
  return { commentParentKey: undefined, replyCount: undefined };
}

export const CommentMetadata: MessageFns<CommentMetadata> = {
  encode(message: CommentMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.commentParentKey !== undefined) {
      MessageKey.encode(message.commentParentKey, writer.uint32(10).fork()).join();
    }
    if (message.replyCount !== undefined) {
      writer.uint32(16).uint32(message.replyCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommentMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommentMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.commentParentKey = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.replyCount = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommentMetadata {
    return {
      commentParentKey: isSet(object.commentParentKey) ? MessageKey.fromJSON(object.commentParentKey) : undefined,
      replyCount: isSet(object.replyCount) ? globalThis.Number(object.replyCount) : undefined,
    };
  },

  toJSON(message: CommentMetadata): unknown {
    const obj: any = {};
    if (message.commentParentKey !== undefined) {
      obj.commentParentKey = MessageKey.toJSON(message.commentParentKey);
    }
    if (message.replyCount !== undefined) {
      obj.replyCount = Math.round(message.replyCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommentMetadata>, I>>(base?: I): CommentMetadata {
    return CommentMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommentMetadata>, I>>(object: I): CommentMetadata {
    const message = createBaseCommentMetadata();
    message.commentParentKey = (object.commentParentKey !== undefined && object.commentParentKey !== null)
      ? MessageKey.fromPartial(object.commentParentKey)
      : undefined;
    message.replyCount = object.replyCount ?? undefined;
    return message;
  },
};

function createBaseCompanionCommitment(): CompanionCommitment {
  return { hash: undefined };
}

export const CompanionCommitment: MessageFns<CompanionCommitment> = {
  encode(message: CompanionCommitment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.hash !== undefined) {
      writer.uint32(10).bytes(message.hash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompanionCommitment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompanionCommitment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.hash = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompanionCommitment {
    return { hash: isSet(object.hash) ? bytesFromBase64(object.hash) : undefined };
  },

  toJSON(message: CompanionCommitment): unknown {
    const obj: any = {};
    if (message.hash !== undefined) {
      obj.hash = base64FromBytes(message.hash);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CompanionCommitment>, I>>(base?: I): CompanionCommitment {
    return CompanionCommitment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CompanionCommitment>, I>>(object: I): CompanionCommitment {
    const message = createBaseCompanionCommitment();
    message.hash = object.hash ?? undefined;
    return message;
  },
};

function createBaseCompanionEphemeralIdentity(): CompanionEphemeralIdentity {
  return { publicKey: undefined, deviceType: undefined, ref: undefined };
}

export const CompanionEphemeralIdentity: MessageFns<CompanionEphemeralIdentity> = {
  encode(message: CompanionEphemeralIdentity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.publicKey !== undefined) {
      writer.uint32(10).bytes(message.publicKey);
    }
    if (message.deviceType !== undefined) {
      writer.uint32(16).int32(message.deviceType);
    }
    if (message.ref !== undefined) {
      writer.uint32(26).string(message.ref);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompanionEphemeralIdentity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompanionEphemeralIdentity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.publicKey = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.deviceType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ref = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompanionEphemeralIdentity {
    return {
      publicKey: isSet(object.publicKey) ? bytesFromBase64(object.publicKey) : undefined,
      deviceType: isSet(object.deviceType) ? deviceProps_PlatformTypeFromJSON(object.deviceType) : undefined,
      ref: isSet(object.ref) ? globalThis.String(object.ref) : undefined,
    };
  },

  toJSON(message: CompanionEphemeralIdentity): unknown {
    const obj: any = {};
    if (message.publicKey !== undefined) {
      obj.publicKey = base64FromBytes(message.publicKey);
    }
    if (message.deviceType !== undefined) {
      obj.deviceType = deviceProps_PlatformTypeToJSON(message.deviceType);
    }
    if (message.ref !== undefined) {
      obj.ref = message.ref;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CompanionEphemeralIdentity>, I>>(base?: I): CompanionEphemeralIdentity {
    return CompanionEphemeralIdentity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CompanionEphemeralIdentity>, I>>(object: I): CompanionEphemeralIdentity {
    const message = createBaseCompanionEphemeralIdentity();
    message.publicKey = object.publicKey ?? undefined;
    message.deviceType = object.deviceType ?? undefined;
    message.ref = object.ref ?? undefined;
    return message;
  },
};

function createBaseConfig(): Config {
  return { field: {}, version: undefined };
}

export const Config: MessageFns<Config> = {
  encode(message: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.field).forEach(([key, value]) => {
      Config_FieldEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    if (message.version !== undefined) {
      writer.uint32(16).uint32(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = Config_FieldEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.field[entry1.key] = entry1.value;
          }
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.version = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      field: isObject(object.field)
        ? Object.entries(object.field).reduce<{ [key: number]: Field }>((acc, [key, value]) => {
          acc[globalThis.Number(key)] = Field.fromJSON(value);
          return acc;
        }, {})
        : {},
      version: isSet(object.version) ? globalThis.Number(object.version) : undefined,
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.field) {
      const entries = Object.entries(message.field);
      if (entries.length > 0) {
        obj.field = {};
        entries.forEach(([k, v]) => {
          obj.field[k] = Field.toJSON(v);
        });
      }
    }
    if (message.version !== undefined) {
      obj.version = Math.round(message.version);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Config>, I>>(base?: I): Config {
    return Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config>, I>>(object: I): Config {
    const message = createBaseConfig();
    message.field = Object.entries(object.field ?? {}).reduce<{ [key: number]: Field }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[globalThis.Number(key)] = Field.fromPartial(value);
      }
      return acc;
    }, {});
    message.version = object.version ?? undefined;
    return message;
  },
};

function createBaseConfig_FieldEntry(): Config_FieldEntry {
  return { key: 0, value: undefined };
}

export const Config_FieldEntry: MessageFns<Config_FieldEntry> = {
  encode(message: Config_FieldEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).uint32(message.key);
    }
    if (message.value !== undefined) {
      Field.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config_FieldEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig_FieldEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Field.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config_FieldEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? Field.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: Config_FieldEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = Field.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Config_FieldEntry>, I>>(base?: I): Config_FieldEntry {
    return Config_FieldEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config_FieldEntry>, I>>(object: I): Config_FieldEntry {
    const message = createBaseConfig_FieldEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null) ? Field.fromPartial(object.value) : undefined;
    return message;
  },
};

function createBaseContextInfo(): ContextInfo {
  return {
    stanzaId: undefined,
    participant: undefined,
    quotedMessage: undefined,
    remoteJid: undefined,
    mentionedJid: [],
    conversionSource: undefined,
    conversionData: undefined,
    conversionDelaySeconds: undefined,
    forwardingScore: undefined,
    isForwarded: undefined,
    quotedAd: undefined,
    placeholderKey: undefined,
    expiration: undefined,
    ephemeralSettingTimestamp: undefined,
    ephemeralSharedSecret: undefined,
    externalAdReply: undefined,
    entryPointConversionSource: undefined,
    entryPointConversionApp: undefined,
    entryPointConversionDelaySeconds: undefined,
    disappearingMode: undefined,
    actionLink: undefined,
    groupSubject: undefined,
    parentGroupJid: undefined,
    trustBannerType: undefined,
    trustBannerAction: undefined,
    isSampled: undefined,
    groupMentions: [],
    utm: undefined,
    forwardedNewsletterMessageInfo: undefined,
    businessMessageForwardInfo: undefined,
    smbClientCampaignId: undefined,
    smbServerCampaignId: undefined,
    dataSharingContext: undefined,
    alwaysShowAdAttribution: undefined,
    featureEligibilities: undefined,
    entryPointConversionExternalSource: undefined,
    entryPointConversionExternalMedium: undefined,
    ctwaSignals: undefined,
    ctwaPayload: undefined,
    forwardedAiBotMessageInfo: undefined,
    statusAttributionType: undefined,
    urlTrackingMap: undefined,
    pairedMediaType: undefined,
    rankingVersion: undefined,
    memberLabel: undefined,
    isQuestion: undefined,
    statusSourceType: undefined,
  };
}

export const ContextInfo: MessageFns<ContextInfo> = {
  encode(message: ContextInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stanzaId !== undefined) {
      writer.uint32(10).string(message.stanzaId);
    }
    if (message.participant !== undefined) {
      writer.uint32(18).string(message.participant);
    }
    if (message.quotedMessage !== undefined) {
      Message.encode(message.quotedMessage, writer.uint32(26).fork()).join();
    }
    if (message.remoteJid !== undefined) {
      writer.uint32(34).string(message.remoteJid);
    }
    for (const v of message.mentionedJid) {
      writer.uint32(122).string(v!);
    }
    if (message.conversionSource !== undefined) {
      writer.uint32(146).string(message.conversionSource);
    }
    if (message.conversionData !== undefined) {
      writer.uint32(154).bytes(message.conversionData);
    }
    if (message.conversionDelaySeconds !== undefined) {
      writer.uint32(160).uint32(message.conversionDelaySeconds);
    }
    if (message.forwardingScore !== undefined) {
      writer.uint32(168).uint32(message.forwardingScore);
    }
    if (message.isForwarded !== undefined) {
      writer.uint32(176).bool(message.isForwarded);
    }
    if (message.quotedAd !== undefined) {
      ContextInfo_AdReplyInfo.encode(message.quotedAd, writer.uint32(186).fork()).join();
    }
    if (message.placeholderKey !== undefined) {
      MessageKey.encode(message.placeholderKey, writer.uint32(194).fork()).join();
    }
    if (message.expiration !== undefined) {
      writer.uint32(200).uint32(message.expiration);
    }
    if (message.ephemeralSettingTimestamp !== undefined) {
      writer.uint32(208).int64(message.ephemeralSettingTimestamp);
    }
    if (message.ephemeralSharedSecret !== undefined) {
      writer.uint32(218).bytes(message.ephemeralSharedSecret);
    }
    if (message.externalAdReply !== undefined) {
      ContextInfo_ExternalAdReplyInfo.encode(message.externalAdReply, writer.uint32(226).fork()).join();
    }
    if (message.entryPointConversionSource !== undefined) {
      writer.uint32(234).string(message.entryPointConversionSource);
    }
    if (message.entryPointConversionApp !== undefined) {
      writer.uint32(242).string(message.entryPointConversionApp);
    }
    if (message.entryPointConversionDelaySeconds !== undefined) {
      writer.uint32(248).uint32(message.entryPointConversionDelaySeconds);
    }
    if (message.disappearingMode !== undefined) {
      DisappearingMode.encode(message.disappearingMode, writer.uint32(258).fork()).join();
    }
    if (message.actionLink !== undefined) {
      ActionLink.encode(message.actionLink, writer.uint32(266).fork()).join();
    }
    if (message.groupSubject !== undefined) {
      writer.uint32(274).string(message.groupSubject);
    }
    if (message.parentGroupJid !== undefined) {
      writer.uint32(282).string(message.parentGroupJid);
    }
    if (message.trustBannerType !== undefined) {
      writer.uint32(298).string(message.trustBannerType);
    }
    if (message.trustBannerAction !== undefined) {
      writer.uint32(304).uint32(message.trustBannerAction);
    }
    if (message.isSampled !== undefined) {
      writer.uint32(312).bool(message.isSampled);
    }
    for (const v of message.groupMentions) {
      GroupMention.encode(v!, writer.uint32(322).fork()).join();
    }
    if (message.utm !== undefined) {
      ContextInfo_UTMInfo.encode(message.utm, writer.uint32(330).fork()).join();
    }
    if (message.forwardedNewsletterMessageInfo !== undefined) {
      ContextInfo_ForwardedNewsletterMessageInfo.encode(
        message.forwardedNewsletterMessageInfo,
        writer.uint32(346).fork(),
      ).join();
    }
    if (message.businessMessageForwardInfo !== undefined) {
      ContextInfo_BusinessMessageForwardInfo.encode(message.businessMessageForwardInfo, writer.uint32(354).fork())
        .join();
    }
    if (message.smbClientCampaignId !== undefined) {
      writer.uint32(362).string(message.smbClientCampaignId);
    }
    if (message.smbServerCampaignId !== undefined) {
      writer.uint32(370).string(message.smbServerCampaignId);
    }
    if (message.dataSharingContext !== undefined) {
      ContextInfo_DataSharingContext.encode(message.dataSharingContext, writer.uint32(378).fork()).join();
    }
    if (message.alwaysShowAdAttribution !== undefined) {
      writer.uint32(384).bool(message.alwaysShowAdAttribution);
    }
    if (message.featureEligibilities !== undefined) {
      ContextInfo_FeatureEligibilities.encode(message.featureEligibilities, writer.uint32(394).fork()).join();
    }
    if (message.entryPointConversionExternalSource !== undefined) {
      writer.uint32(402).string(message.entryPointConversionExternalSource);
    }
    if (message.entryPointConversionExternalMedium !== undefined) {
      writer.uint32(410).string(message.entryPointConversionExternalMedium);
    }
    if (message.ctwaSignals !== undefined) {
      writer.uint32(434).string(message.ctwaSignals);
    }
    if (message.ctwaPayload !== undefined) {
      writer.uint32(442).bytes(message.ctwaPayload);
    }
    if (message.forwardedAiBotMessageInfo !== undefined) {
      ContextInfo_ForwardedAIBotMessageInfo.encode(message.forwardedAiBotMessageInfo, writer.uint32(450).fork()).join();
    }
    if (message.statusAttributionType !== undefined) {
      writer.uint32(456).int32(message.statusAttributionType);
    }
    if (message.urlTrackingMap !== undefined) {
      UrlTrackingMap.encode(message.urlTrackingMap, writer.uint32(466).fork()).join();
    }
    if (message.pairedMediaType !== undefined) {
      writer.uint32(472).int32(message.pairedMediaType);
    }
    if (message.rankingVersion !== undefined) {
      writer.uint32(480).uint32(message.rankingVersion);
    }
    if (message.memberLabel !== undefined) {
      MemberLabel.encode(message.memberLabel, writer.uint32(498).fork()).join();
    }
    if (message.isQuestion !== undefined) {
      writer.uint32(504).bool(message.isQuestion);
    }
    if (message.statusSourceType !== undefined) {
      writer.uint32(512).int32(message.statusSourceType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContextInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContextInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stanzaId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.participant = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.quotedMessage = Message.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.remoteJid = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.mentionedJid.push(reader.string());
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.conversionSource = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.conversionData = reader.bytes();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.conversionDelaySeconds = reader.uint32();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.forwardingScore = reader.uint32();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.isForwarded = reader.bool();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.quotedAd = ContextInfo_AdReplyInfo.decode(reader, reader.uint32());
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.placeholderKey = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.expiration = reader.uint32();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.ephemeralSettingTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.ephemeralSharedSecret = reader.bytes();
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.externalAdReply = ContextInfo_ExternalAdReplyInfo.decode(reader, reader.uint32());
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.entryPointConversionSource = reader.string();
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.entryPointConversionApp = reader.string();
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.entryPointConversionDelaySeconds = reader.uint32();
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.disappearingMode = DisappearingMode.decode(reader, reader.uint32());
          continue;
        }
        case 33: {
          if (tag !== 266) {
            break;
          }

          message.actionLink = ActionLink.decode(reader, reader.uint32());
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.groupSubject = reader.string();
          continue;
        }
        case 35: {
          if (tag !== 282) {
            break;
          }

          message.parentGroupJid = reader.string();
          continue;
        }
        case 37: {
          if (tag !== 298) {
            break;
          }

          message.trustBannerType = reader.string();
          continue;
        }
        case 38: {
          if (tag !== 304) {
            break;
          }

          message.trustBannerAction = reader.uint32();
          continue;
        }
        case 39: {
          if (tag !== 312) {
            break;
          }

          message.isSampled = reader.bool();
          continue;
        }
        case 40: {
          if (tag !== 322) {
            break;
          }

          message.groupMentions.push(GroupMention.decode(reader, reader.uint32()));
          continue;
        }
        case 41: {
          if (tag !== 330) {
            break;
          }

          message.utm = ContextInfo_UTMInfo.decode(reader, reader.uint32());
          continue;
        }
        case 43: {
          if (tag !== 346) {
            break;
          }

          message.forwardedNewsletterMessageInfo = ContextInfo_ForwardedNewsletterMessageInfo.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 44: {
          if (tag !== 354) {
            break;
          }

          message.businessMessageForwardInfo = ContextInfo_BusinessMessageForwardInfo.decode(reader, reader.uint32());
          continue;
        }
        case 45: {
          if (tag !== 362) {
            break;
          }

          message.smbClientCampaignId = reader.string();
          continue;
        }
        case 46: {
          if (tag !== 370) {
            break;
          }

          message.smbServerCampaignId = reader.string();
          continue;
        }
        case 47: {
          if (tag !== 378) {
            break;
          }

          message.dataSharingContext = ContextInfo_DataSharingContext.decode(reader, reader.uint32());
          continue;
        }
        case 48: {
          if (tag !== 384) {
            break;
          }

          message.alwaysShowAdAttribution = reader.bool();
          continue;
        }
        case 49: {
          if (tag !== 394) {
            break;
          }

          message.featureEligibilities = ContextInfo_FeatureEligibilities.decode(reader, reader.uint32());
          continue;
        }
        case 50: {
          if (tag !== 402) {
            break;
          }

          message.entryPointConversionExternalSource = reader.string();
          continue;
        }
        case 51: {
          if (tag !== 410) {
            break;
          }

          message.entryPointConversionExternalMedium = reader.string();
          continue;
        }
        case 54: {
          if (tag !== 434) {
            break;
          }

          message.ctwaSignals = reader.string();
          continue;
        }
        case 55: {
          if (tag !== 442) {
            break;
          }

          message.ctwaPayload = reader.bytes();
          continue;
        }
        case 56: {
          if (tag !== 450) {
            break;
          }

          message.forwardedAiBotMessageInfo = ContextInfo_ForwardedAIBotMessageInfo.decode(reader, reader.uint32());
          continue;
        }
        case 57: {
          if (tag !== 456) {
            break;
          }

          message.statusAttributionType = reader.int32() as any;
          continue;
        }
        case 58: {
          if (tag !== 466) {
            break;
          }

          message.urlTrackingMap = UrlTrackingMap.decode(reader, reader.uint32());
          continue;
        }
        case 59: {
          if (tag !== 472) {
            break;
          }

          message.pairedMediaType = reader.int32() as any;
          continue;
        }
        case 60: {
          if (tag !== 480) {
            break;
          }

          message.rankingVersion = reader.uint32();
          continue;
        }
        case 62: {
          if (tag !== 498) {
            break;
          }

          message.memberLabel = MemberLabel.decode(reader, reader.uint32());
          continue;
        }
        case 63: {
          if (tag !== 504) {
            break;
          }

          message.isQuestion = reader.bool();
          continue;
        }
        case 64: {
          if (tag !== 512) {
            break;
          }

          message.statusSourceType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContextInfo {
    return {
      stanzaId: isSet(object.stanzaId) ? globalThis.String(object.stanzaId) : undefined,
      participant: isSet(object.participant) ? globalThis.String(object.participant) : undefined,
      quotedMessage: isSet(object.quotedMessage) ? Message.fromJSON(object.quotedMessage) : undefined,
      remoteJid: isSet(object.remoteJid) ? globalThis.String(object.remoteJid) : undefined,
      mentionedJid: globalThis.Array.isArray(object?.mentionedJid)
        ? object.mentionedJid.map((e: any) => globalThis.String(e))
        : [],
      conversionSource: isSet(object.conversionSource) ? globalThis.String(object.conversionSource) : undefined,
      conversionData: isSet(object.conversionData) ? bytesFromBase64(object.conversionData) : undefined,
      conversionDelaySeconds: isSet(object.conversionDelaySeconds)
        ? globalThis.Number(object.conversionDelaySeconds)
        : undefined,
      forwardingScore: isSet(object.forwardingScore) ? globalThis.Number(object.forwardingScore) : undefined,
      isForwarded: isSet(object.isForwarded) ? globalThis.Boolean(object.isForwarded) : undefined,
      quotedAd: isSet(object.quotedAd) ? ContextInfo_AdReplyInfo.fromJSON(object.quotedAd) : undefined,
      placeholderKey: isSet(object.placeholderKey) ? MessageKey.fromJSON(object.placeholderKey) : undefined,
      expiration: isSet(object.expiration) ? globalThis.Number(object.expiration) : undefined,
      ephemeralSettingTimestamp: isSet(object.ephemeralSettingTimestamp)
        ? globalThis.Number(object.ephemeralSettingTimestamp)
        : undefined,
      ephemeralSharedSecret: isSet(object.ephemeralSharedSecret)
        ? bytesFromBase64(object.ephemeralSharedSecret)
        : undefined,
      externalAdReply: isSet(object.externalAdReply)
        ? ContextInfo_ExternalAdReplyInfo.fromJSON(object.externalAdReply)
        : undefined,
      entryPointConversionSource: isSet(object.entryPointConversionSource)
        ? globalThis.String(object.entryPointConversionSource)
        : undefined,
      entryPointConversionApp: isSet(object.entryPointConversionApp)
        ? globalThis.String(object.entryPointConversionApp)
        : undefined,
      entryPointConversionDelaySeconds: isSet(object.entryPointConversionDelaySeconds)
        ? globalThis.Number(object.entryPointConversionDelaySeconds)
        : undefined,
      disappearingMode: isSet(object.disappearingMode) ? DisappearingMode.fromJSON(object.disappearingMode) : undefined,
      actionLink: isSet(object.actionLink) ? ActionLink.fromJSON(object.actionLink) : undefined,
      groupSubject: isSet(object.groupSubject) ? globalThis.String(object.groupSubject) : undefined,
      parentGroupJid: isSet(object.parentGroupJid) ? globalThis.String(object.parentGroupJid) : undefined,
      trustBannerType: isSet(object.trustBannerType) ? globalThis.String(object.trustBannerType) : undefined,
      trustBannerAction: isSet(object.trustBannerAction) ? globalThis.Number(object.trustBannerAction) : undefined,
      isSampled: isSet(object.isSampled) ? globalThis.Boolean(object.isSampled) : undefined,
      groupMentions: globalThis.Array.isArray(object?.groupMentions)
        ? object.groupMentions.map((e: any) => GroupMention.fromJSON(e))
        : [],
      utm: isSet(object.utm) ? ContextInfo_UTMInfo.fromJSON(object.utm) : undefined,
      forwardedNewsletterMessageInfo: isSet(object.forwardedNewsletterMessageInfo)
        ? ContextInfo_ForwardedNewsletterMessageInfo.fromJSON(object.forwardedNewsletterMessageInfo)
        : undefined,
      businessMessageForwardInfo: isSet(object.businessMessageForwardInfo)
        ? ContextInfo_BusinessMessageForwardInfo.fromJSON(object.businessMessageForwardInfo)
        : undefined,
      smbClientCampaignId: isSet(object.smbClientCampaignId)
        ? globalThis.String(object.smbClientCampaignId)
        : undefined,
      smbServerCampaignId: isSet(object.smbServerCampaignId)
        ? globalThis.String(object.smbServerCampaignId)
        : undefined,
      dataSharingContext: isSet(object.dataSharingContext)
        ? ContextInfo_DataSharingContext.fromJSON(object.dataSharingContext)
        : undefined,
      alwaysShowAdAttribution: isSet(object.alwaysShowAdAttribution)
        ? globalThis.Boolean(object.alwaysShowAdAttribution)
        : undefined,
      featureEligibilities: isSet(object.featureEligibilities)
        ? ContextInfo_FeatureEligibilities.fromJSON(object.featureEligibilities)
        : undefined,
      entryPointConversionExternalSource: isSet(object.entryPointConversionExternalSource)
        ? globalThis.String(object.entryPointConversionExternalSource)
        : undefined,
      entryPointConversionExternalMedium: isSet(object.entryPointConversionExternalMedium)
        ? globalThis.String(object.entryPointConversionExternalMedium)
        : undefined,
      ctwaSignals: isSet(object.ctwaSignals) ? globalThis.String(object.ctwaSignals) : undefined,
      ctwaPayload: isSet(object.ctwaPayload) ? bytesFromBase64(object.ctwaPayload) : undefined,
      forwardedAiBotMessageInfo: isSet(object.forwardedAiBotMessageInfo)
        ? ContextInfo_ForwardedAIBotMessageInfo.fromJSON(object.forwardedAiBotMessageInfo)
        : undefined,
      statusAttributionType: isSet(object.statusAttributionType)
        ? contextInfo_StatusAttributionTypeFromJSON(object.statusAttributionType)
        : undefined,
      urlTrackingMap: isSet(object.urlTrackingMap) ? UrlTrackingMap.fromJSON(object.urlTrackingMap) : undefined,
      pairedMediaType: isSet(object.pairedMediaType)
        ? contextInfo_PairedMediaTypeFromJSON(object.pairedMediaType)
        : undefined,
      rankingVersion: isSet(object.rankingVersion) ? globalThis.Number(object.rankingVersion) : undefined,
      memberLabel: isSet(object.memberLabel) ? MemberLabel.fromJSON(object.memberLabel) : undefined,
      isQuestion: isSet(object.isQuestion) ? globalThis.Boolean(object.isQuestion) : undefined,
      statusSourceType: isSet(object.statusSourceType)
        ? contextInfo_StatusSourceTypeFromJSON(object.statusSourceType)
        : undefined,
    };
  },

  toJSON(message: ContextInfo): unknown {
    const obj: any = {};
    if (message.stanzaId !== undefined) {
      obj.stanzaId = message.stanzaId;
    }
    if (message.participant !== undefined) {
      obj.participant = message.participant;
    }
    if (message.quotedMessage !== undefined) {
      obj.quotedMessage = Message.toJSON(message.quotedMessage);
    }
    if (message.remoteJid !== undefined) {
      obj.remoteJid = message.remoteJid;
    }
    if (message.mentionedJid?.length) {
      obj.mentionedJid = message.mentionedJid;
    }
    if (message.conversionSource !== undefined) {
      obj.conversionSource = message.conversionSource;
    }
    if (message.conversionData !== undefined) {
      obj.conversionData = base64FromBytes(message.conversionData);
    }
    if (message.conversionDelaySeconds !== undefined) {
      obj.conversionDelaySeconds = Math.round(message.conversionDelaySeconds);
    }
    if (message.forwardingScore !== undefined) {
      obj.forwardingScore = Math.round(message.forwardingScore);
    }
    if (message.isForwarded !== undefined) {
      obj.isForwarded = message.isForwarded;
    }
    if (message.quotedAd !== undefined) {
      obj.quotedAd = ContextInfo_AdReplyInfo.toJSON(message.quotedAd);
    }
    if (message.placeholderKey !== undefined) {
      obj.placeholderKey = MessageKey.toJSON(message.placeholderKey);
    }
    if (message.expiration !== undefined) {
      obj.expiration = Math.round(message.expiration);
    }
    if (message.ephemeralSettingTimestamp !== undefined) {
      obj.ephemeralSettingTimestamp = Math.round(message.ephemeralSettingTimestamp);
    }
    if (message.ephemeralSharedSecret !== undefined) {
      obj.ephemeralSharedSecret = base64FromBytes(message.ephemeralSharedSecret);
    }
    if (message.externalAdReply !== undefined) {
      obj.externalAdReply = ContextInfo_ExternalAdReplyInfo.toJSON(message.externalAdReply);
    }
    if (message.entryPointConversionSource !== undefined) {
      obj.entryPointConversionSource = message.entryPointConversionSource;
    }
    if (message.entryPointConversionApp !== undefined) {
      obj.entryPointConversionApp = message.entryPointConversionApp;
    }
    if (message.entryPointConversionDelaySeconds !== undefined) {
      obj.entryPointConversionDelaySeconds = Math.round(message.entryPointConversionDelaySeconds);
    }
    if (message.disappearingMode !== undefined) {
      obj.disappearingMode = DisappearingMode.toJSON(message.disappearingMode);
    }
    if (message.actionLink !== undefined) {
      obj.actionLink = ActionLink.toJSON(message.actionLink);
    }
    if (message.groupSubject !== undefined) {
      obj.groupSubject = message.groupSubject;
    }
    if (message.parentGroupJid !== undefined) {
      obj.parentGroupJid = message.parentGroupJid;
    }
    if (message.trustBannerType !== undefined) {
      obj.trustBannerType = message.trustBannerType;
    }
    if (message.trustBannerAction !== undefined) {
      obj.trustBannerAction = Math.round(message.trustBannerAction);
    }
    if (message.isSampled !== undefined) {
      obj.isSampled = message.isSampled;
    }
    if (message.groupMentions?.length) {
      obj.groupMentions = message.groupMentions.map((e) => GroupMention.toJSON(e));
    }
    if (message.utm !== undefined) {
      obj.utm = ContextInfo_UTMInfo.toJSON(message.utm);
    }
    if (message.forwardedNewsletterMessageInfo !== undefined) {
      obj.forwardedNewsletterMessageInfo = ContextInfo_ForwardedNewsletterMessageInfo.toJSON(
        message.forwardedNewsletterMessageInfo,
      );
    }
    if (message.businessMessageForwardInfo !== undefined) {
      obj.businessMessageForwardInfo = ContextInfo_BusinessMessageForwardInfo.toJSON(
        message.businessMessageForwardInfo,
      );
    }
    if (message.smbClientCampaignId !== undefined) {
      obj.smbClientCampaignId = message.smbClientCampaignId;
    }
    if (message.smbServerCampaignId !== undefined) {
      obj.smbServerCampaignId = message.smbServerCampaignId;
    }
    if (message.dataSharingContext !== undefined) {
      obj.dataSharingContext = ContextInfo_DataSharingContext.toJSON(message.dataSharingContext);
    }
    if (message.alwaysShowAdAttribution !== undefined) {
      obj.alwaysShowAdAttribution = message.alwaysShowAdAttribution;
    }
    if (message.featureEligibilities !== undefined) {
      obj.featureEligibilities = ContextInfo_FeatureEligibilities.toJSON(message.featureEligibilities);
    }
    if (message.entryPointConversionExternalSource !== undefined) {
      obj.entryPointConversionExternalSource = message.entryPointConversionExternalSource;
    }
    if (message.entryPointConversionExternalMedium !== undefined) {
      obj.entryPointConversionExternalMedium = message.entryPointConversionExternalMedium;
    }
    if (message.ctwaSignals !== undefined) {
      obj.ctwaSignals = message.ctwaSignals;
    }
    if (message.ctwaPayload !== undefined) {
      obj.ctwaPayload = base64FromBytes(message.ctwaPayload);
    }
    if (message.forwardedAiBotMessageInfo !== undefined) {
      obj.forwardedAiBotMessageInfo = ContextInfo_ForwardedAIBotMessageInfo.toJSON(message.forwardedAiBotMessageInfo);
    }
    if (message.statusAttributionType !== undefined) {
      obj.statusAttributionType = contextInfo_StatusAttributionTypeToJSON(message.statusAttributionType);
    }
    if (message.urlTrackingMap !== undefined) {
      obj.urlTrackingMap = UrlTrackingMap.toJSON(message.urlTrackingMap);
    }
    if (message.pairedMediaType !== undefined) {
      obj.pairedMediaType = contextInfo_PairedMediaTypeToJSON(message.pairedMediaType);
    }
    if (message.rankingVersion !== undefined) {
      obj.rankingVersion = Math.round(message.rankingVersion);
    }
    if (message.memberLabel !== undefined) {
      obj.memberLabel = MemberLabel.toJSON(message.memberLabel);
    }
    if (message.isQuestion !== undefined) {
      obj.isQuestion = message.isQuestion;
    }
    if (message.statusSourceType !== undefined) {
      obj.statusSourceType = contextInfo_StatusSourceTypeToJSON(message.statusSourceType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ContextInfo>, I>>(base?: I): ContextInfo {
    return ContextInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ContextInfo>, I>>(object: I): ContextInfo {
    const message = createBaseContextInfo();
    message.stanzaId = object.stanzaId ?? undefined;
    message.participant = object.participant ?? undefined;
    message.quotedMessage = (object.quotedMessage !== undefined && object.quotedMessage !== null)
      ? Message.fromPartial(object.quotedMessage)
      : undefined;
    message.remoteJid = object.remoteJid ?? undefined;
    message.mentionedJid = object.mentionedJid?.map((e) => e) || [];
    message.conversionSource = object.conversionSource ?? undefined;
    message.conversionData = object.conversionData ?? undefined;
    message.conversionDelaySeconds = object.conversionDelaySeconds ?? undefined;
    message.forwardingScore = object.forwardingScore ?? undefined;
    message.isForwarded = object.isForwarded ?? undefined;
    message.quotedAd = (object.quotedAd !== undefined && object.quotedAd !== null)
      ? ContextInfo_AdReplyInfo.fromPartial(object.quotedAd)
      : undefined;
    message.placeholderKey = (object.placeholderKey !== undefined && object.placeholderKey !== null)
      ? MessageKey.fromPartial(object.placeholderKey)
      : undefined;
    message.expiration = object.expiration ?? undefined;
    message.ephemeralSettingTimestamp = object.ephemeralSettingTimestamp ?? undefined;
    message.ephemeralSharedSecret = object.ephemeralSharedSecret ?? undefined;
    message.externalAdReply = (object.externalAdReply !== undefined && object.externalAdReply !== null)
      ? ContextInfo_ExternalAdReplyInfo.fromPartial(object.externalAdReply)
      : undefined;
    message.entryPointConversionSource = object.entryPointConversionSource ?? undefined;
    message.entryPointConversionApp = object.entryPointConversionApp ?? undefined;
    message.entryPointConversionDelaySeconds = object.entryPointConversionDelaySeconds ?? undefined;
    message.disappearingMode = (object.disappearingMode !== undefined && object.disappearingMode !== null)
      ? DisappearingMode.fromPartial(object.disappearingMode)
      : undefined;
    message.actionLink = (object.actionLink !== undefined && object.actionLink !== null)
      ? ActionLink.fromPartial(object.actionLink)
      : undefined;
    message.groupSubject = object.groupSubject ?? undefined;
    message.parentGroupJid = object.parentGroupJid ?? undefined;
    message.trustBannerType = object.trustBannerType ?? undefined;
    message.trustBannerAction = object.trustBannerAction ?? undefined;
    message.isSampled = object.isSampled ?? undefined;
    message.groupMentions = object.groupMentions?.map((e) => GroupMention.fromPartial(e)) || [];
    message.utm = (object.utm !== undefined && object.utm !== null)
      ? ContextInfo_UTMInfo.fromPartial(object.utm)
      : undefined;
    message.forwardedNewsletterMessageInfo =
      (object.forwardedNewsletterMessageInfo !== undefined && object.forwardedNewsletterMessageInfo !== null)
        ? ContextInfo_ForwardedNewsletterMessageInfo.fromPartial(object.forwardedNewsletterMessageInfo)
        : undefined;
    message.businessMessageForwardInfo =
      (object.businessMessageForwardInfo !== undefined && object.businessMessageForwardInfo !== null)
        ? ContextInfo_BusinessMessageForwardInfo.fromPartial(object.businessMessageForwardInfo)
        : undefined;
    message.smbClientCampaignId = object.smbClientCampaignId ?? undefined;
    message.smbServerCampaignId = object.smbServerCampaignId ?? undefined;
    message.dataSharingContext = (object.dataSharingContext !== undefined && object.dataSharingContext !== null)
      ? ContextInfo_DataSharingContext.fromPartial(object.dataSharingContext)
      : undefined;
    message.alwaysShowAdAttribution = object.alwaysShowAdAttribution ?? undefined;
    message.featureEligibilities = (object.featureEligibilities !== undefined && object.featureEligibilities !== null)
      ? ContextInfo_FeatureEligibilities.fromPartial(object.featureEligibilities)
      : undefined;
    message.entryPointConversionExternalSource = object.entryPointConversionExternalSource ?? undefined;
    message.entryPointConversionExternalMedium = object.entryPointConversionExternalMedium ?? undefined;
    message.ctwaSignals = object.ctwaSignals ?? undefined;
    message.ctwaPayload = object.ctwaPayload ?? undefined;
    message.forwardedAiBotMessageInfo =
      (object.forwardedAiBotMessageInfo !== undefined && object.forwardedAiBotMessageInfo !== null)
        ? ContextInfo_ForwardedAIBotMessageInfo.fromPartial(object.forwardedAiBotMessageInfo)
        : undefined;
    message.statusAttributionType = object.statusAttributionType ?? undefined;
    message.urlTrackingMap = (object.urlTrackingMap !== undefined && object.urlTrackingMap !== null)
      ? UrlTrackingMap.fromPartial(object.urlTrackingMap)
      : undefined;
    message.pairedMediaType = object.pairedMediaType ?? undefined;
    message.rankingVersion = object.rankingVersion ?? undefined;
    message.memberLabel = (object.memberLabel !== undefined && object.memberLabel !== null)
      ? MemberLabel.fromPartial(object.memberLabel)
      : undefined;
    message.isQuestion = object.isQuestion ?? undefined;
    message.statusSourceType = object.statusSourceType ?? undefined;
    return message;
  },
};

function createBaseContextInfo_AdReplyInfo(): ContextInfo_AdReplyInfo {
  return { advertiserName: undefined, mediaType: undefined, jpegThumbnail: undefined, caption: undefined };
}

export const ContextInfo_AdReplyInfo: MessageFns<ContextInfo_AdReplyInfo> = {
  encode(message: ContextInfo_AdReplyInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.advertiserName !== undefined) {
      writer.uint32(10).string(message.advertiserName);
    }
    if (message.mediaType !== undefined) {
      writer.uint32(16).int32(message.mediaType);
    }
    if (message.jpegThumbnail !== undefined) {
      writer.uint32(130).bytes(message.jpegThumbnail);
    }
    if (message.caption !== undefined) {
      writer.uint32(138).string(message.caption);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContextInfo_AdReplyInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContextInfo_AdReplyInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.advertiserName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.mediaType = reader.int32() as any;
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.jpegThumbnail = reader.bytes();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.caption = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContextInfo_AdReplyInfo {
    return {
      advertiserName: isSet(object.advertiserName) ? globalThis.String(object.advertiserName) : undefined,
      mediaType: isSet(object.mediaType) ? contextInfo_AdReplyInfo_MediaTypeFromJSON(object.mediaType) : undefined,
      jpegThumbnail: isSet(object.jpegThumbnail) ? bytesFromBase64(object.jpegThumbnail) : undefined,
      caption: isSet(object.caption) ? globalThis.String(object.caption) : undefined,
    };
  },

  toJSON(message: ContextInfo_AdReplyInfo): unknown {
    const obj: any = {};
    if (message.advertiserName !== undefined) {
      obj.advertiserName = message.advertiserName;
    }
    if (message.mediaType !== undefined) {
      obj.mediaType = contextInfo_AdReplyInfo_MediaTypeToJSON(message.mediaType);
    }
    if (message.jpegThumbnail !== undefined) {
      obj.jpegThumbnail = base64FromBytes(message.jpegThumbnail);
    }
    if (message.caption !== undefined) {
      obj.caption = message.caption;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ContextInfo_AdReplyInfo>, I>>(base?: I): ContextInfo_AdReplyInfo {
    return ContextInfo_AdReplyInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ContextInfo_AdReplyInfo>, I>>(object: I): ContextInfo_AdReplyInfo {
    const message = createBaseContextInfo_AdReplyInfo();
    message.advertiserName = object.advertiserName ?? undefined;
    message.mediaType = object.mediaType ?? undefined;
    message.jpegThumbnail = object.jpegThumbnail ?? undefined;
    message.caption = object.caption ?? undefined;
    return message;
  },
};

function createBaseContextInfo_BusinessMessageForwardInfo(): ContextInfo_BusinessMessageForwardInfo {
  return { businessOwnerJid: undefined };
}

export const ContextInfo_BusinessMessageForwardInfo: MessageFns<ContextInfo_BusinessMessageForwardInfo> = {
  encode(message: ContextInfo_BusinessMessageForwardInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.businessOwnerJid !== undefined) {
      writer.uint32(10).string(message.businessOwnerJid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContextInfo_BusinessMessageForwardInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContextInfo_BusinessMessageForwardInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.businessOwnerJid = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContextInfo_BusinessMessageForwardInfo {
    return {
      businessOwnerJid: isSet(object.businessOwnerJid) ? globalThis.String(object.businessOwnerJid) : undefined,
    };
  },

  toJSON(message: ContextInfo_BusinessMessageForwardInfo): unknown {
    const obj: any = {};
    if (message.businessOwnerJid !== undefined) {
      obj.businessOwnerJid = message.businessOwnerJid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ContextInfo_BusinessMessageForwardInfo>, I>>(
    base?: I,
  ): ContextInfo_BusinessMessageForwardInfo {
    return ContextInfo_BusinessMessageForwardInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ContextInfo_BusinessMessageForwardInfo>, I>>(
    object: I,
  ): ContextInfo_BusinessMessageForwardInfo {
    const message = createBaseContextInfo_BusinessMessageForwardInfo();
    message.businessOwnerJid = object.businessOwnerJid ?? undefined;
    return message;
  },
};

function createBaseContextInfo_DataSharingContext(): ContextInfo_DataSharingContext {
  return { showMmDisclosure: undefined, encryptedSignalTokenConsented: undefined, parameters: [] };
}

export const ContextInfo_DataSharingContext: MessageFns<ContextInfo_DataSharingContext> = {
  encode(message: ContextInfo_DataSharingContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.showMmDisclosure !== undefined) {
      writer.uint32(8).bool(message.showMmDisclosure);
    }
    if (message.encryptedSignalTokenConsented !== undefined) {
      writer.uint32(18).string(message.encryptedSignalTokenConsented);
    }
    for (const v of message.parameters) {
      ContextInfo_DataSharingContext_Parameters.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContextInfo_DataSharingContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContextInfo_DataSharingContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.showMmDisclosure = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.encryptedSignalTokenConsented = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.parameters.push(ContextInfo_DataSharingContext_Parameters.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContextInfo_DataSharingContext {
    return {
      showMmDisclosure: isSet(object.showMmDisclosure) ? globalThis.Boolean(object.showMmDisclosure) : undefined,
      encryptedSignalTokenConsented: isSet(object.encryptedSignalTokenConsented)
        ? globalThis.String(object.encryptedSignalTokenConsented)
        : undefined,
      parameters: globalThis.Array.isArray(object?.parameters)
        ? object.parameters.map((e: any) => ContextInfo_DataSharingContext_Parameters.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ContextInfo_DataSharingContext): unknown {
    const obj: any = {};
    if (message.showMmDisclosure !== undefined) {
      obj.showMmDisclosure = message.showMmDisclosure;
    }
    if (message.encryptedSignalTokenConsented !== undefined) {
      obj.encryptedSignalTokenConsented = message.encryptedSignalTokenConsented;
    }
    if (message.parameters?.length) {
      obj.parameters = message.parameters.map((e) => ContextInfo_DataSharingContext_Parameters.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ContextInfo_DataSharingContext>, I>>(base?: I): ContextInfo_DataSharingContext {
    return ContextInfo_DataSharingContext.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ContextInfo_DataSharingContext>, I>>(
    object: I,
  ): ContextInfo_DataSharingContext {
    const message = createBaseContextInfo_DataSharingContext();
    message.showMmDisclosure = object.showMmDisclosure ?? undefined;
    message.encryptedSignalTokenConsented = object.encryptedSignalTokenConsented ?? undefined;
    message.parameters = object.parameters?.map((e) => ContextInfo_DataSharingContext_Parameters.fromPartial(e)) || [];
    return message;
  },
};

function createBaseContextInfo_DataSharingContext_Parameters(): ContextInfo_DataSharingContext_Parameters {
  return { key: undefined, stringData: undefined, intData: undefined, floatData: undefined, contents: undefined };
}

export const ContextInfo_DataSharingContext_Parameters: MessageFns<ContextInfo_DataSharingContext_Parameters> = {
  encode(message: ContextInfo_DataSharingContext_Parameters, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined) {
      writer.uint32(10).string(message.key);
    }
    if (message.stringData !== undefined) {
      writer.uint32(18).string(message.stringData);
    }
    if (message.intData !== undefined) {
      writer.uint32(24).int64(message.intData);
    }
    if (message.floatData !== undefined) {
      writer.uint32(37).float(message.floatData);
    }
    if (message.contents !== undefined) {
      ContextInfo_DataSharingContext_Parameters.encode(message.contents, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContextInfo_DataSharingContext_Parameters {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContextInfo_DataSharingContext_Parameters();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.stringData = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.intData = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.floatData = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.contents = ContextInfo_DataSharingContext_Parameters.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContextInfo_DataSharingContext_Parameters {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : undefined,
      stringData: isSet(object.stringData) ? globalThis.String(object.stringData) : undefined,
      intData: isSet(object.intData) ? globalThis.Number(object.intData) : undefined,
      floatData: isSet(object.floatData) ? globalThis.Number(object.floatData) : undefined,
      contents: isSet(object.contents)
        ? ContextInfo_DataSharingContext_Parameters.fromJSON(object.contents)
        : undefined,
    };
  },

  toJSON(message: ContextInfo_DataSharingContext_Parameters): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.stringData !== undefined) {
      obj.stringData = message.stringData;
    }
    if (message.intData !== undefined) {
      obj.intData = Math.round(message.intData);
    }
    if (message.floatData !== undefined) {
      obj.floatData = message.floatData;
    }
    if (message.contents !== undefined) {
      obj.contents = ContextInfo_DataSharingContext_Parameters.toJSON(message.contents);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ContextInfo_DataSharingContext_Parameters>, I>>(
    base?: I,
  ): ContextInfo_DataSharingContext_Parameters {
    return ContextInfo_DataSharingContext_Parameters.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ContextInfo_DataSharingContext_Parameters>, I>>(
    object: I,
  ): ContextInfo_DataSharingContext_Parameters {
    const message = createBaseContextInfo_DataSharingContext_Parameters();
    message.key = object.key ?? undefined;
    message.stringData = object.stringData ?? undefined;
    message.intData = object.intData ?? undefined;
    message.floatData = object.floatData ?? undefined;
    message.contents = (object.contents !== undefined && object.contents !== null)
      ? ContextInfo_DataSharingContext_Parameters.fromPartial(object.contents)
      : undefined;
    return message;
  },
};

function createBaseContextInfo_ExternalAdReplyInfo(): ContextInfo_ExternalAdReplyInfo {
  return {
    title: undefined,
    body: undefined,
    mediaType: undefined,
    thumbnailUrl: undefined,
    mediaUrl: undefined,
    thumbnail: undefined,
    sourceType: undefined,
    sourceId: undefined,
    sourceUrl: undefined,
    containsAutoReply: undefined,
    renderLargerThumbnail: undefined,
    showAdAttribution: undefined,
    ctwaClid: undefined,
    ref: undefined,
    clickToWhatsappCall: undefined,
    adContextPreviewDismissed: undefined,
    sourceApp: undefined,
    automatedGreetingMessageShown: undefined,
    greetingMessageBody: undefined,
    ctaPayload: undefined,
    disableNudge: undefined,
    originalImageUrl: undefined,
    automatedGreetingMessageCtaType: undefined,
    wtwaAdFormat: undefined,
    adType: undefined,
  };
}

export const ContextInfo_ExternalAdReplyInfo: MessageFns<ContextInfo_ExternalAdReplyInfo> = {
  encode(message: ContextInfo_ExternalAdReplyInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== undefined) {
      writer.uint32(10).string(message.title);
    }
    if (message.body !== undefined) {
      writer.uint32(18).string(message.body);
    }
    if (message.mediaType !== undefined) {
      writer.uint32(24).int32(message.mediaType);
    }
    if (message.thumbnailUrl !== undefined) {
      writer.uint32(34).string(message.thumbnailUrl);
    }
    if (message.mediaUrl !== undefined) {
      writer.uint32(42).string(message.mediaUrl);
    }
    if (message.thumbnail !== undefined) {
      writer.uint32(50).bytes(message.thumbnail);
    }
    if (message.sourceType !== undefined) {
      writer.uint32(58).string(message.sourceType);
    }
    if (message.sourceId !== undefined) {
      writer.uint32(66).string(message.sourceId);
    }
    if (message.sourceUrl !== undefined) {
      writer.uint32(74).string(message.sourceUrl);
    }
    if (message.containsAutoReply !== undefined) {
      writer.uint32(80).bool(message.containsAutoReply);
    }
    if (message.renderLargerThumbnail !== undefined) {
      writer.uint32(88).bool(message.renderLargerThumbnail);
    }
    if (message.showAdAttribution !== undefined) {
      writer.uint32(96).bool(message.showAdAttribution);
    }
    if (message.ctwaClid !== undefined) {
      writer.uint32(106).string(message.ctwaClid);
    }
    if (message.ref !== undefined) {
      writer.uint32(114).string(message.ref);
    }
    if (message.clickToWhatsappCall !== undefined) {
      writer.uint32(120).bool(message.clickToWhatsappCall);
    }
    if (message.adContextPreviewDismissed !== undefined) {
      writer.uint32(128).bool(message.adContextPreviewDismissed);
    }
    if (message.sourceApp !== undefined) {
      writer.uint32(138).string(message.sourceApp);
    }
    if (message.automatedGreetingMessageShown !== undefined) {
      writer.uint32(144).bool(message.automatedGreetingMessageShown);
    }
    if (message.greetingMessageBody !== undefined) {
      writer.uint32(154).string(message.greetingMessageBody);
    }
    if (message.ctaPayload !== undefined) {
      writer.uint32(162).string(message.ctaPayload);
    }
    if (message.disableNudge !== undefined) {
      writer.uint32(168).bool(message.disableNudge);
    }
    if (message.originalImageUrl !== undefined) {
      writer.uint32(178).string(message.originalImageUrl);
    }
    if (message.automatedGreetingMessageCtaType !== undefined) {
      writer.uint32(186).string(message.automatedGreetingMessageCtaType);
    }
    if (message.wtwaAdFormat !== undefined) {
      writer.uint32(192).bool(message.wtwaAdFormat);
    }
    if (message.adType !== undefined) {
      writer.uint32(200).int32(message.adType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContextInfo_ExternalAdReplyInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContextInfo_ExternalAdReplyInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.mediaType = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.thumbnailUrl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.mediaUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.thumbnail = reader.bytes();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.sourceType = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.sourceId = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.sourceUrl = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.containsAutoReply = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.renderLargerThumbnail = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.showAdAttribution = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.ctwaClid = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.ref = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.clickToWhatsappCall = reader.bool();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.adContextPreviewDismissed = reader.bool();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.sourceApp = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.automatedGreetingMessageShown = reader.bool();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.greetingMessageBody = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.ctaPayload = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.disableNudge = reader.bool();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.originalImageUrl = reader.string();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.automatedGreetingMessageCtaType = reader.string();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.wtwaAdFormat = reader.bool();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.adType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContextInfo_ExternalAdReplyInfo {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      body: isSet(object.body) ? globalThis.String(object.body) : undefined,
      mediaType: isSet(object.mediaType)
        ? contextInfo_ExternalAdReplyInfo_MediaTypeFromJSON(object.mediaType)
        : undefined,
      thumbnailUrl: isSet(object.thumbnailUrl) ? globalThis.String(object.thumbnailUrl) : undefined,
      mediaUrl: isSet(object.mediaUrl) ? globalThis.String(object.mediaUrl) : undefined,
      thumbnail: isSet(object.thumbnail) ? bytesFromBase64(object.thumbnail) : undefined,
      sourceType: isSet(object.sourceType) ? globalThis.String(object.sourceType) : undefined,
      sourceId: isSet(object.sourceId) ? globalThis.String(object.sourceId) : undefined,
      sourceUrl: isSet(object.sourceUrl) ? globalThis.String(object.sourceUrl) : undefined,
      containsAutoReply: isSet(object.containsAutoReply) ? globalThis.Boolean(object.containsAutoReply) : undefined,
      renderLargerThumbnail: isSet(object.renderLargerThumbnail)
        ? globalThis.Boolean(object.renderLargerThumbnail)
        : undefined,
      showAdAttribution: isSet(object.showAdAttribution) ? globalThis.Boolean(object.showAdAttribution) : undefined,
      ctwaClid: isSet(object.ctwaClid) ? globalThis.String(object.ctwaClid) : undefined,
      ref: isSet(object.ref) ? globalThis.String(object.ref) : undefined,
      clickToWhatsappCall: isSet(object.clickToWhatsappCall)
        ? globalThis.Boolean(object.clickToWhatsappCall)
        : undefined,
      adContextPreviewDismissed: isSet(object.adContextPreviewDismissed)
        ? globalThis.Boolean(object.adContextPreviewDismissed)
        : undefined,
      sourceApp: isSet(object.sourceApp) ? globalThis.String(object.sourceApp) : undefined,
      automatedGreetingMessageShown: isSet(object.automatedGreetingMessageShown)
        ? globalThis.Boolean(object.automatedGreetingMessageShown)
        : undefined,
      greetingMessageBody: isSet(object.greetingMessageBody)
        ? globalThis.String(object.greetingMessageBody)
        : undefined,
      ctaPayload: isSet(object.ctaPayload) ? globalThis.String(object.ctaPayload) : undefined,
      disableNudge: isSet(object.disableNudge) ? globalThis.Boolean(object.disableNudge) : undefined,
      originalImageUrl: isSet(object.originalImageUrl) ? globalThis.String(object.originalImageUrl) : undefined,
      automatedGreetingMessageCtaType: isSet(object.automatedGreetingMessageCtaType)
        ? globalThis.String(object.automatedGreetingMessageCtaType)
        : undefined,
      wtwaAdFormat: isSet(object.wtwaAdFormat) ? globalThis.Boolean(object.wtwaAdFormat) : undefined,
      adType: isSet(object.adType) ? contextInfo_ExternalAdReplyInfo_AdTypeFromJSON(object.adType) : undefined,
    };
  },

  toJSON(message: ContextInfo_ExternalAdReplyInfo): unknown {
    const obj: any = {};
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.body !== undefined) {
      obj.body = message.body;
    }
    if (message.mediaType !== undefined) {
      obj.mediaType = contextInfo_ExternalAdReplyInfo_MediaTypeToJSON(message.mediaType);
    }
    if (message.thumbnailUrl !== undefined) {
      obj.thumbnailUrl = message.thumbnailUrl;
    }
    if (message.mediaUrl !== undefined) {
      obj.mediaUrl = message.mediaUrl;
    }
    if (message.thumbnail !== undefined) {
      obj.thumbnail = base64FromBytes(message.thumbnail);
    }
    if (message.sourceType !== undefined) {
      obj.sourceType = message.sourceType;
    }
    if (message.sourceId !== undefined) {
      obj.sourceId = message.sourceId;
    }
    if (message.sourceUrl !== undefined) {
      obj.sourceUrl = message.sourceUrl;
    }
    if (message.containsAutoReply !== undefined) {
      obj.containsAutoReply = message.containsAutoReply;
    }
    if (message.renderLargerThumbnail !== undefined) {
      obj.renderLargerThumbnail = message.renderLargerThumbnail;
    }
    if (message.showAdAttribution !== undefined) {
      obj.showAdAttribution = message.showAdAttribution;
    }
    if (message.ctwaClid !== undefined) {
      obj.ctwaClid = message.ctwaClid;
    }
    if (message.ref !== undefined) {
      obj.ref = message.ref;
    }
    if (message.clickToWhatsappCall !== undefined) {
      obj.clickToWhatsappCall = message.clickToWhatsappCall;
    }
    if (message.adContextPreviewDismissed !== undefined) {
      obj.adContextPreviewDismissed = message.adContextPreviewDismissed;
    }
    if (message.sourceApp !== undefined) {
      obj.sourceApp = message.sourceApp;
    }
    if (message.automatedGreetingMessageShown !== undefined) {
      obj.automatedGreetingMessageShown = message.automatedGreetingMessageShown;
    }
    if (message.greetingMessageBody !== undefined) {
      obj.greetingMessageBody = message.greetingMessageBody;
    }
    if (message.ctaPayload !== undefined) {
      obj.ctaPayload = message.ctaPayload;
    }
    if (message.disableNudge !== undefined) {
      obj.disableNudge = message.disableNudge;
    }
    if (message.originalImageUrl !== undefined) {
      obj.originalImageUrl = message.originalImageUrl;
    }
    if (message.automatedGreetingMessageCtaType !== undefined) {
      obj.automatedGreetingMessageCtaType = message.automatedGreetingMessageCtaType;
    }
    if (message.wtwaAdFormat !== undefined) {
      obj.wtwaAdFormat = message.wtwaAdFormat;
    }
    if (message.adType !== undefined) {
      obj.adType = contextInfo_ExternalAdReplyInfo_AdTypeToJSON(message.adType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ContextInfo_ExternalAdReplyInfo>, I>>(base?: I): ContextInfo_ExternalAdReplyInfo {
    return ContextInfo_ExternalAdReplyInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ContextInfo_ExternalAdReplyInfo>, I>>(
    object: I,
  ): ContextInfo_ExternalAdReplyInfo {
    const message = createBaseContextInfo_ExternalAdReplyInfo();
    message.title = object.title ?? undefined;
    message.body = object.body ?? undefined;
    message.mediaType = object.mediaType ?? undefined;
    message.thumbnailUrl = object.thumbnailUrl ?? undefined;
    message.mediaUrl = object.mediaUrl ?? undefined;
    message.thumbnail = object.thumbnail ?? undefined;
    message.sourceType = object.sourceType ?? undefined;
    message.sourceId = object.sourceId ?? undefined;
    message.sourceUrl = object.sourceUrl ?? undefined;
    message.containsAutoReply = object.containsAutoReply ?? undefined;
    message.renderLargerThumbnail = object.renderLargerThumbnail ?? undefined;
    message.showAdAttribution = object.showAdAttribution ?? undefined;
    message.ctwaClid = object.ctwaClid ?? undefined;
    message.ref = object.ref ?? undefined;
    message.clickToWhatsappCall = object.clickToWhatsappCall ?? undefined;
    message.adContextPreviewDismissed = object.adContextPreviewDismissed ?? undefined;
    message.sourceApp = object.sourceApp ?? undefined;
    message.automatedGreetingMessageShown = object.automatedGreetingMessageShown ?? undefined;
    message.greetingMessageBody = object.greetingMessageBody ?? undefined;
    message.ctaPayload = object.ctaPayload ?? undefined;
    message.disableNudge = object.disableNudge ?? undefined;
    message.originalImageUrl = object.originalImageUrl ?? undefined;
    message.automatedGreetingMessageCtaType = object.automatedGreetingMessageCtaType ?? undefined;
    message.wtwaAdFormat = object.wtwaAdFormat ?? undefined;
    message.adType = object.adType ?? undefined;
    return message;
  },
};

function createBaseContextInfo_FeatureEligibilities(): ContextInfo_FeatureEligibilities {
  return {
    cannotBeReactedTo: undefined,
    cannotBeRanked: undefined,
    canRequestFeedback: undefined,
    canBeReshared: undefined,
  };
}

export const ContextInfo_FeatureEligibilities: MessageFns<ContextInfo_FeatureEligibilities> = {
  encode(message: ContextInfo_FeatureEligibilities, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cannotBeReactedTo !== undefined) {
      writer.uint32(8).bool(message.cannotBeReactedTo);
    }
    if (message.cannotBeRanked !== undefined) {
      writer.uint32(16).bool(message.cannotBeRanked);
    }
    if (message.canRequestFeedback !== undefined) {
      writer.uint32(24).bool(message.canRequestFeedback);
    }
    if (message.canBeReshared !== undefined) {
      writer.uint32(32).bool(message.canBeReshared);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContextInfo_FeatureEligibilities {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContextInfo_FeatureEligibilities();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.cannotBeReactedTo = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.cannotBeRanked = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.canRequestFeedback = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.canBeReshared = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContextInfo_FeatureEligibilities {
    return {
      cannotBeReactedTo: isSet(object.cannotBeReactedTo) ? globalThis.Boolean(object.cannotBeReactedTo) : undefined,
      cannotBeRanked: isSet(object.cannotBeRanked) ? globalThis.Boolean(object.cannotBeRanked) : undefined,
      canRequestFeedback: isSet(object.canRequestFeedback) ? globalThis.Boolean(object.canRequestFeedback) : undefined,
      canBeReshared: isSet(object.canBeReshared) ? globalThis.Boolean(object.canBeReshared) : undefined,
    };
  },

  toJSON(message: ContextInfo_FeatureEligibilities): unknown {
    const obj: any = {};
    if (message.cannotBeReactedTo !== undefined) {
      obj.cannotBeReactedTo = message.cannotBeReactedTo;
    }
    if (message.cannotBeRanked !== undefined) {
      obj.cannotBeRanked = message.cannotBeRanked;
    }
    if (message.canRequestFeedback !== undefined) {
      obj.canRequestFeedback = message.canRequestFeedback;
    }
    if (message.canBeReshared !== undefined) {
      obj.canBeReshared = message.canBeReshared;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ContextInfo_FeatureEligibilities>, I>>(
    base?: I,
  ): ContextInfo_FeatureEligibilities {
    return ContextInfo_FeatureEligibilities.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ContextInfo_FeatureEligibilities>, I>>(
    object: I,
  ): ContextInfo_FeatureEligibilities {
    const message = createBaseContextInfo_FeatureEligibilities();
    message.cannotBeReactedTo = object.cannotBeReactedTo ?? undefined;
    message.cannotBeRanked = object.cannotBeRanked ?? undefined;
    message.canRequestFeedback = object.canRequestFeedback ?? undefined;
    message.canBeReshared = object.canBeReshared ?? undefined;
    return message;
  },
};

function createBaseContextInfo_ForwardedAIBotMessageInfo(): ContextInfo_ForwardedAIBotMessageInfo {
  return { botName: undefined, botJid: undefined, creatorName: undefined };
}

export const ContextInfo_ForwardedAIBotMessageInfo: MessageFns<ContextInfo_ForwardedAIBotMessageInfo> = {
  encode(message: ContextInfo_ForwardedAIBotMessageInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.botName !== undefined) {
      writer.uint32(10).string(message.botName);
    }
    if (message.botJid !== undefined) {
      writer.uint32(18).string(message.botJid);
    }
    if (message.creatorName !== undefined) {
      writer.uint32(26).string(message.creatorName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContextInfo_ForwardedAIBotMessageInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContextInfo_ForwardedAIBotMessageInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.botName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.botJid = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.creatorName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContextInfo_ForwardedAIBotMessageInfo {
    return {
      botName: isSet(object.botName) ? globalThis.String(object.botName) : undefined,
      botJid: isSet(object.botJid) ? globalThis.String(object.botJid) : undefined,
      creatorName: isSet(object.creatorName) ? globalThis.String(object.creatorName) : undefined,
    };
  },

  toJSON(message: ContextInfo_ForwardedAIBotMessageInfo): unknown {
    const obj: any = {};
    if (message.botName !== undefined) {
      obj.botName = message.botName;
    }
    if (message.botJid !== undefined) {
      obj.botJid = message.botJid;
    }
    if (message.creatorName !== undefined) {
      obj.creatorName = message.creatorName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ContextInfo_ForwardedAIBotMessageInfo>, I>>(
    base?: I,
  ): ContextInfo_ForwardedAIBotMessageInfo {
    return ContextInfo_ForwardedAIBotMessageInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ContextInfo_ForwardedAIBotMessageInfo>, I>>(
    object: I,
  ): ContextInfo_ForwardedAIBotMessageInfo {
    const message = createBaseContextInfo_ForwardedAIBotMessageInfo();
    message.botName = object.botName ?? undefined;
    message.botJid = object.botJid ?? undefined;
    message.creatorName = object.creatorName ?? undefined;
    return message;
  },
};

function createBaseContextInfo_ForwardedNewsletterMessageInfo(): ContextInfo_ForwardedNewsletterMessageInfo {
  return {
    newsletterJid: undefined,
    serverMessageId: undefined,
    newsletterName: undefined,
    contentType: undefined,
    accessibilityText: undefined,
  };
}

export const ContextInfo_ForwardedNewsletterMessageInfo: MessageFns<ContextInfo_ForwardedNewsletterMessageInfo> = {
  encode(message: ContextInfo_ForwardedNewsletterMessageInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.newsletterJid !== undefined) {
      writer.uint32(10).string(message.newsletterJid);
    }
    if (message.serverMessageId !== undefined) {
      writer.uint32(16).int32(message.serverMessageId);
    }
    if (message.newsletterName !== undefined) {
      writer.uint32(26).string(message.newsletterName);
    }
    if (message.contentType !== undefined) {
      writer.uint32(32).int32(message.contentType);
    }
    if (message.accessibilityText !== undefined) {
      writer.uint32(42).string(message.accessibilityText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContextInfo_ForwardedNewsletterMessageInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContextInfo_ForwardedNewsletterMessageInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.newsletterJid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.serverMessageId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.newsletterName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.contentType = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.accessibilityText = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContextInfo_ForwardedNewsletterMessageInfo {
    return {
      newsletterJid: isSet(object.newsletterJid) ? globalThis.String(object.newsletterJid) : undefined,
      serverMessageId: isSet(object.serverMessageId) ? globalThis.Number(object.serverMessageId) : undefined,
      newsletterName: isSet(object.newsletterName) ? globalThis.String(object.newsletterName) : undefined,
      contentType: isSet(object.contentType)
        ? contextInfo_ForwardedNewsletterMessageInfo_ContentTypeFromJSON(object.contentType)
        : undefined,
      accessibilityText: isSet(object.accessibilityText) ? globalThis.String(object.accessibilityText) : undefined,
    };
  },

  toJSON(message: ContextInfo_ForwardedNewsletterMessageInfo): unknown {
    const obj: any = {};
    if (message.newsletterJid !== undefined) {
      obj.newsletterJid = message.newsletterJid;
    }
    if (message.serverMessageId !== undefined) {
      obj.serverMessageId = Math.round(message.serverMessageId);
    }
    if (message.newsletterName !== undefined) {
      obj.newsletterName = message.newsletterName;
    }
    if (message.contentType !== undefined) {
      obj.contentType = contextInfo_ForwardedNewsletterMessageInfo_ContentTypeToJSON(message.contentType);
    }
    if (message.accessibilityText !== undefined) {
      obj.accessibilityText = message.accessibilityText;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ContextInfo_ForwardedNewsletterMessageInfo>, I>>(
    base?: I,
  ): ContextInfo_ForwardedNewsletterMessageInfo {
    return ContextInfo_ForwardedNewsletterMessageInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ContextInfo_ForwardedNewsletterMessageInfo>, I>>(
    object: I,
  ): ContextInfo_ForwardedNewsletterMessageInfo {
    const message = createBaseContextInfo_ForwardedNewsletterMessageInfo();
    message.newsletterJid = object.newsletterJid ?? undefined;
    message.serverMessageId = object.serverMessageId ?? undefined;
    message.newsletterName = object.newsletterName ?? undefined;
    message.contentType = object.contentType ?? undefined;
    message.accessibilityText = object.accessibilityText ?? undefined;
    return message;
  },
};

function createBaseContextInfo_UTMInfo(): ContextInfo_UTMInfo {
  return { utmSource: undefined, utmCampaign: undefined };
}

export const ContextInfo_UTMInfo: MessageFns<ContextInfo_UTMInfo> = {
  encode(message: ContextInfo_UTMInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.utmSource !== undefined) {
      writer.uint32(10).string(message.utmSource);
    }
    if (message.utmCampaign !== undefined) {
      writer.uint32(18).string(message.utmCampaign);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContextInfo_UTMInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContextInfo_UTMInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.utmSource = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.utmCampaign = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContextInfo_UTMInfo {
    return {
      utmSource: isSet(object.utmSource) ? globalThis.String(object.utmSource) : undefined,
      utmCampaign: isSet(object.utmCampaign) ? globalThis.String(object.utmCampaign) : undefined,
    };
  },

  toJSON(message: ContextInfo_UTMInfo): unknown {
    const obj: any = {};
    if (message.utmSource !== undefined) {
      obj.utmSource = message.utmSource;
    }
    if (message.utmCampaign !== undefined) {
      obj.utmCampaign = message.utmCampaign;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ContextInfo_UTMInfo>, I>>(base?: I): ContextInfo_UTMInfo {
    return ContextInfo_UTMInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ContextInfo_UTMInfo>, I>>(object: I): ContextInfo_UTMInfo {
    const message = createBaseContextInfo_UTMInfo();
    message.utmSource = object.utmSource ?? undefined;
    message.utmCampaign = object.utmCampaign ?? undefined;
    return message;
  },
};

function createBaseConversation(): Conversation {
  return {
    id: "",
    messages: [],
    newJid: undefined,
    oldJid: undefined,
    lastMsgTimestamp: undefined,
    unreadCount: undefined,
    readOnly: undefined,
    endOfHistoryTransfer: undefined,
    ephemeralExpiration: undefined,
    ephemeralSettingTimestamp: undefined,
    endOfHistoryTransferType: undefined,
    conversationTimestamp: undefined,
    name: undefined,
    pHash: undefined,
    notSpam: undefined,
    archived: undefined,
    disappearingMode: undefined,
    unreadMentionCount: undefined,
    markedAsUnread: undefined,
    participant: [],
    tcToken: undefined,
    tcTokenTimestamp: undefined,
    contactPrimaryIdentityKey: undefined,
    pinned: undefined,
    muteEndTime: undefined,
    wallpaper: undefined,
    mediaVisibility: undefined,
    tcTokenSenderTimestamp: undefined,
    suspended: undefined,
    terminated: undefined,
    createdAt: undefined,
    createdBy: undefined,
    description: undefined,
    support: undefined,
    isParentGroup: undefined,
    parentGroupId: undefined,
    isDefaultSubgroup: undefined,
    displayName: undefined,
    pnJid: undefined,
    shareOwnPn: undefined,
    pnhDuplicateLidThread: undefined,
    lidJid: undefined,
    username: undefined,
    lidOriginType: undefined,
    commentsCount: undefined,
    locked: undefined,
    systemMessageToInsert: undefined,
    capiCreatedGroup: undefined,
    accountLid: undefined,
    limitSharing: undefined,
    limitSharingSettingTimestamp: undefined,
    limitSharingTrigger: undefined,
    limitSharingInitiatedByMe: undefined,
  };
}

export const Conversation: MessageFns<Conversation> = {
  encode(message: Conversation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    for (const v of message.messages) {
      HistorySyncMsg.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.newJid !== undefined) {
      writer.uint32(26).string(message.newJid);
    }
    if (message.oldJid !== undefined) {
      writer.uint32(34).string(message.oldJid);
    }
    if (message.lastMsgTimestamp !== undefined) {
      writer.uint32(40).uint64(message.lastMsgTimestamp);
    }
    if (message.unreadCount !== undefined) {
      writer.uint32(48).uint32(message.unreadCount);
    }
    if (message.readOnly !== undefined) {
      writer.uint32(56).bool(message.readOnly);
    }
    if (message.endOfHistoryTransfer !== undefined) {
      writer.uint32(64).bool(message.endOfHistoryTransfer);
    }
    if (message.ephemeralExpiration !== undefined) {
      writer.uint32(72).uint32(message.ephemeralExpiration);
    }
    if (message.ephemeralSettingTimestamp !== undefined) {
      writer.uint32(80).int64(message.ephemeralSettingTimestamp);
    }
    if (message.endOfHistoryTransferType !== undefined) {
      writer.uint32(88).int32(message.endOfHistoryTransferType);
    }
    if (message.conversationTimestamp !== undefined) {
      writer.uint32(96).uint64(message.conversationTimestamp);
    }
    if (message.name !== undefined) {
      writer.uint32(106).string(message.name);
    }
    if (message.pHash !== undefined) {
      writer.uint32(114).string(message.pHash);
    }
    if (message.notSpam !== undefined) {
      writer.uint32(120).bool(message.notSpam);
    }
    if (message.archived !== undefined) {
      writer.uint32(128).bool(message.archived);
    }
    if (message.disappearingMode !== undefined) {
      DisappearingMode.encode(message.disappearingMode, writer.uint32(138).fork()).join();
    }
    if (message.unreadMentionCount !== undefined) {
      writer.uint32(144).uint32(message.unreadMentionCount);
    }
    if (message.markedAsUnread !== undefined) {
      writer.uint32(152).bool(message.markedAsUnread);
    }
    for (const v of message.participant) {
      GroupParticipant.encode(v!, writer.uint32(162).fork()).join();
    }
    if (message.tcToken !== undefined) {
      writer.uint32(170).bytes(message.tcToken);
    }
    if (message.tcTokenTimestamp !== undefined) {
      writer.uint32(176).uint64(message.tcTokenTimestamp);
    }
    if (message.contactPrimaryIdentityKey !== undefined) {
      writer.uint32(186).bytes(message.contactPrimaryIdentityKey);
    }
    if (message.pinned !== undefined) {
      writer.uint32(192).uint32(message.pinned);
    }
    if (message.muteEndTime !== undefined) {
      writer.uint32(200).uint64(message.muteEndTime);
    }
    if (message.wallpaper !== undefined) {
      WallpaperSettings.encode(message.wallpaper, writer.uint32(210).fork()).join();
    }
    if (message.mediaVisibility !== undefined) {
      writer.uint32(216).int32(message.mediaVisibility);
    }
    if (message.tcTokenSenderTimestamp !== undefined) {
      writer.uint32(224).uint64(message.tcTokenSenderTimestamp);
    }
    if (message.suspended !== undefined) {
      writer.uint32(232).bool(message.suspended);
    }
    if (message.terminated !== undefined) {
      writer.uint32(240).bool(message.terminated);
    }
    if (message.createdAt !== undefined) {
      writer.uint32(248).uint64(message.createdAt);
    }
    if (message.createdBy !== undefined) {
      writer.uint32(258).string(message.createdBy);
    }
    if (message.description !== undefined) {
      writer.uint32(266).string(message.description);
    }
    if (message.support !== undefined) {
      writer.uint32(272).bool(message.support);
    }
    if (message.isParentGroup !== undefined) {
      writer.uint32(280).bool(message.isParentGroup);
    }
    if (message.parentGroupId !== undefined) {
      writer.uint32(298).string(message.parentGroupId);
    }
    if (message.isDefaultSubgroup !== undefined) {
      writer.uint32(288).bool(message.isDefaultSubgroup);
    }
    if (message.displayName !== undefined) {
      writer.uint32(306).string(message.displayName);
    }
    if (message.pnJid !== undefined) {
      writer.uint32(314).string(message.pnJid);
    }
    if (message.shareOwnPn !== undefined) {
      writer.uint32(320).bool(message.shareOwnPn);
    }
    if (message.pnhDuplicateLidThread !== undefined) {
      writer.uint32(328).bool(message.pnhDuplicateLidThread);
    }
    if (message.lidJid !== undefined) {
      writer.uint32(338).string(message.lidJid);
    }
    if (message.username !== undefined) {
      writer.uint32(346).string(message.username);
    }
    if (message.lidOriginType !== undefined) {
      writer.uint32(354).string(message.lidOriginType);
    }
    if (message.commentsCount !== undefined) {
      writer.uint32(360).uint32(message.commentsCount);
    }
    if (message.locked !== undefined) {
      writer.uint32(368).bool(message.locked);
    }
    if (message.systemMessageToInsert !== undefined) {
      writer.uint32(376).int32(message.systemMessageToInsert);
    }
    if (message.capiCreatedGroup !== undefined) {
      writer.uint32(384).bool(message.capiCreatedGroup);
    }
    if (message.accountLid !== undefined) {
      writer.uint32(394).string(message.accountLid);
    }
    if (message.limitSharing !== undefined) {
      writer.uint32(400).bool(message.limitSharing);
    }
    if (message.limitSharingSettingTimestamp !== undefined) {
      writer.uint32(408).int64(message.limitSharingSettingTimestamp);
    }
    if (message.limitSharingTrigger !== undefined) {
      writer.uint32(416).int32(message.limitSharingTrigger);
    }
    if (message.limitSharingInitiatedByMe !== undefined) {
      writer.uint32(424).bool(message.limitSharingInitiatedByMe);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Conversation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConversation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.messages.push(HistorySyncMsg.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.newJid = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.oldJid = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.lastMsgTimestamp = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.unreadCount = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.readOnly = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.endOfHistoryTransfer = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.ephemeralExpiration = reader.uint32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.ephemeralSettingTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.endOfHistoryTransferType = reader.int32() as any;
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.conversationTimestamp = longToNumber(reader.uint64());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.pHash = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.notSpam = reader.bool();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.archived = reader.bool();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.disappearingMode = DisappearingMode.decode(reader, reader.uint32());
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.unreadMentionCount = reader.uint32();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.markedAsUnread = reader.bool();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.participant.push(GroupParticipant.decode(reader, reader.uint32()));
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.tcToken = reader.bytes();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.tcTokenTimestamp = longToNumber(reader.uint64());
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.contactPrimaryIdentityKey = reader.bytes();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.pinned = reader.uint32();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.muteEndTime = longToNumber(reader.uint64());
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.wallpaper = WallpaperSettings.decode(reader, reader.uint32());
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.mediaVisibility = reader.int32() as any;
          continue;
        }
        case 28: {
          if (tag !== 224) {
            break;
          }

          message.tcTokenSenderTimestamp = longToNumber(reader.uint64());
          continue;
        }
        case 29: {
          if (tag !== 232) {
            break;
          }

          message.suspended = reader.bool();
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.terminated = reader.bool();
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.createdAt = longToNumber(reader.uint64());
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.createdBy = reader.string();
          continue;
        }
        case 33: {
          if (tag !== 266) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 34: {
          if (tag !== 272) {
            break;
          }

          message.support = reader.bool();
          continue;
        }
        case 35: {
          if (tag !== 280) {
            break;
          }

          message.isParentGroup = reader.bool();
          continue;
        }
        case 37: {
          if (tag !== 298) {
            break;
          }

          message.parentGroupId = reader.string();
          continue;
        }
        case 36: {
          if (tag !== 288) {
            break;
          }

          message.isDefaultSubgroup = reader.bool();
          continue;
        }
        case 38: {
          if (tag !== 306) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 39: {
          if (tag !== 314) {
            break;
          }

          message.pnJid = reader.string();
          continue;
        }
        case 40: {
          if (tag !== 320) {
            break;
          }

          message.shareOwnPn = reader.bool();
          continue;
        }
        case 41: {
          if (tag !== 328) {
            break;
          }

          message.pnhDuplicateLidThread = reader.bool();
          continue;
        }
        case 42: {
          if (tag !== 338) {
            break;
          }

          message.lidJid = reader.string();
          continue;
        }
        case 43: {
          if (tag !== 346) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 44: {
          if (tag !== 354) {
            break;
          }

          message.lidOriginType = reader.string();
          continue;
        }
        case 45: {
          if (tag !== 360) {
            break;
          }

          message.commentsCount = reader.uint32();
          continue;
        }
        case 46: {
          if (tag !== 368) {
            break;
          }

          message.locked = reader.bool();
          continue;
        }
        case 47: {
          if (tag !== 376) {
            break;
          }

          message.systemMessageToInsert = reader.int32() as any;
          continue;
        }
        case 48: {
          if (tag !== 384) {
            break;
          }

          message.capiCreatedGroup = reader.bool();
          continue;
        }
        case 49: {
          if (tag !== 394) {
            break;
          }

          message.accountLid = reader.string();
          continue;
        }
        case 50: {
          if (tag !== 400) {
            break;
          }

          message.limitSharing = reader.bool();
          continue;
        }
        case 51: {
          if (tag !== 408) {
            break;
          }

          message.limitSharingSettingTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 52: {
          if (tag !== 416) {
            break;
          }

          message.limitSharingTrigger = reader.int32() as any;
          continue;
        }
        case 53: {
          if (tag !== 424) {
            break;
          }

          message.limitSharingInitiatedByMe = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Conversation {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      messages: globalThis.Array.isArray(object?.messages)
        ? object.messages.map((e: any) => HistorySyncMsg.fromJSON(e))
        : [],
      newJid: isSet(object.newJid) ? globalThis.String(object.newJid) : undefined,
      oldJid: isSet(object.oldJid) ? globalThis.String(object.oldJid) : undefined,
      lastMsgTimestamp: isSet(object.lastMsgTimestamp) ? globalThis.Number(object.lastMsgTimestamp) : undefined,
      unreadCount: isSet(object.unreadCount) ? globalThis.Number(object.unreadCount) : undefined,
      readOnly: isSet(object.readOnly) ? globalThis.Boolean(object.readOnly) : undefined,
      endOfHistoryTransfer: isSet(object.endOfHistoryTransfer)
        ? globalThis.Boolean(object.endOfHistoryTransfer)
        : undefined,
      ephemeralExpiration: isSet(object.ephemeralExpiration)
        ? globalThis.Number(object.ephemeralExpiration)
        : undefined,
      ephemeralSettingTimestamp: isSet(object.ephemeralSettingTimestamp)
        ? globalThis.Number(object.ephemeralSettingTimestamp)
        : undefined,
      endOfHistoryTransferType: isSet(object.endOfHistoryTransferType)
        ? conversation_EndOfHistoryTransferTypeFromJSON(object.endOfHistoryTransferType)
        : undefined,
      conversationTimestamp: isSet(object.conversationTimestamp)
        ? globalThis.Number(object.conversationTimestamp)
        : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      pHash: isSet(object.pHash) ? globalThis.String(object.pHash) : undefined,
      notSpam: isSet(object.notSpam) ? globalThis.Boolean(object.notSpam) : undefined,
      archived: isSet(object.archived) ? globalThis.Boolean(object.archived) : undefined,
      disappearingMode: isSet(object.disappearingMode) ? DisappearingMode.fromJSON(object.disappearingMode) : undefined,
      unreadMentionCount: isSet(object.unreadMentionCount) ? globalThis.Number(object.unreadMentionCount) : undefined,
      markedAsUnread: isSet(object.markedAsUnread) ? globalThis.Boolean(object.markedAsUnread) : undefined,
      participant: globalThis.Array.isArray(object?.participant)
        ? object.participant.map((e: any) => GroupParticipant.fromJSON(e))
        : [],
      tcToken: isSet(object.tcToken) ? bytesFromBase64(object.tcToken) : undefined,
      tcTokenTimestamp: isSet(object.tcTokenTimestamp) ? globalThis.Number(object.tcTokenTimestamp) : undefined,
      contactPrimaryIdentityKey: isSet(object.contactPrimaryIdentityKey)
        ? bytesFromBase64(object.contactPrimaryIdentityKey)
        : undefined,
      pinned: isSet(object.pinned) ? globalThis.Number(object.pinned) : undefined,
      muteEndTime: isSet(object.muteEndTime) ? globalThis.Number(object.muteEndTime) : undefined,
      wallpaper: isSet(object.wallpaper) ? WallpaperSettings.fromJSON(object.wallpaper) : undefined,
      mediaVisibility: isSet(object.mediaVisibility) ? mediaVisibilityFromJSON(object.mediaVisibility) : undefined,
      tcTokenSenderTimestamp: isSet(object.tcTokenSenderTimestamp)
        ? globalThis.Number(object.tcTokenSenderTimestamp)
        : undefined,
      suspended: isSet(object.suspended) ? globalThis.Boolean(object.suspended) : undefined,
      terminated: isSet(object.terminated) ? globalThis.Boolean(object.terminated) : undefined,
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : undefined,
      createdBy: isSet(object.createdBy) ? globalThis.String(object.createdBy) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      support: isSet(object.support) ? globalThis.Boolean(object.support) : undefined,
      isParentGroup: isSet(object.isParentGroup) ? globalThis.Boolean(object.isParentGroup) : undefined,
      parentGroupId: isSet(object.parentGroupId) ? globalThis.String(object.parentGroupId) : undefined,
      isDefaultSubgroup: isSet(object.isDefaultSubgroup) ? globalThis.Boolean(object.isDefaultSubgroup) : undefined,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : undefined,
      pnJid: isSet(object.pnJid) ? globalThis.String(object.pnJid) : undefined,
      shareOwnPn: isSet(object.shareOwnPn) ? globalThis.Boolean(object.shareOwnPn) : undefined,
      pnhDuplicateLidThread: isSet(object.pnhDuplicateLidThread)
        ? globalThis.Boolean(object.pnhDuplicateLidThread)
        : undefined,
      lidJid: isSet(object.lidJid) ? globalThis.String(object.lidJid) : undefined,
      username: isSet(object.username) ? globalThis.String(object.username) : undefined,
      lidOriginType: isSet(object.lidOriginType) ? globalThis.String(object.lidOriginType) : undefined,
      commentsCount: isSet(object.commentsCount) ? globalThis.Number(object.commentsCount) : undefined,
      locked: isSet(object.locked) ? globalThis.Boolean(object.locked) : undefined,
      systemMessageToInsert: isSet(object.systemMessageToInsert)
        ? privacySystemMessageFromJSON(object.systemMessageToInsert)
        : undefined,
      capiCreatedGroup: isSet(object.capiCreatedGroup) ? globalThis.Boolean(object.capiCreatedGroup) : undefined,
      accountLid: isSet(object.accountLid) ? globalThis.String(object.accountLid) : undefined,
      limitSharing: isSet(object.limitSharing) ? globalThis.Boolean(object.limitSharing) : undefined,
      limitSharingSettingTimestamp: isSet(object.limitSharingSettingTimestamp)
        ? globalThis.Number(object.limitSharingSettingTimestamp)
        : undefined,
      limitSharingTrigger: isSet(object.limitSharingTrigger)
        ? limitSharing_TriggerTypeFromJSON(object.limitSharingTrigger)
        : undefined,
      limitSharingInitiatedByMe: isSet(object.limitSharingInitiatedByMe)
        ? globalThis.Boolean(object.limitSharingInitiatedByMe)
        : undefined,
    };
  },

  toJSON(message: Conversation): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.messages?.length) {
      obj.messages = message.messages.map((e) => HistorySyncMsg.toJSON(e));
    }
    if (message.newJid !== undefined) {
      obj.newJid = message.newJid;
    }
    if (message.oldJid !== undefined) {
      obj.oldJid = message.oldJid;
    }
    if (message.lastMsgTimestamp !== undefined) {
      obj.lastMsgTimestamp = Math.round(message.lastMsgTimestamp);
    }
    if (message.unreadCount !== undefined) {
      obj.unreadCount = Math.round(message.unreadCount);
    }
    if (message.readOnly !== undefined) {
      obj.readOnly = message.readOnly;
    }
    if (message.endOfHistoryTransfer !== undefined) {
      obj.endOfHistoryTransfer = message.endOfHistoryTransfer;
    }
    if (message.ephemeralExpiration !== undefined) {
      obj.ephemeralExpiration = Math.round(message.ephemeralExpiration);
    }
    if (message.ephemeralSettingTimestamp !== undefined) {
      obj.ephemeralSettingTimestamp = Math.round(message.ephemeralSettingTimestamp);
    }
    if (message.endOfHistoryTransferType !== undefined) {
      obj.endOfHistoryTransferType = conversation_EndOfHistoryTransferTypeToJSON(message.endOfHistoryTransferType);
    }
    if (message.conversationTimestamp !== undefined) {
      obj.conversationTimestamp = Math.round(message.conversationTimestamp);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.pHash !== undefined) {
      obj.pHash = message.pHash;
    }
    if (message.notSpam !== undefined) {
      obj.notSpam = message.notSpam;
    }
    if (message.archived !== undefined) {
      obj.archived = message.archived;
    }
    if (message.disappearingMode !== undefined) {
      obj.disappearingMode = DisappearingMode.toJSON(message.disappearingMode);
    }
    if (message.unreadMentionCount !== undefined) {
      obj.unreadMentionCount = Math.round(message.unreadMentionCount);
    }
    if (message.markedAsUnread !== undefined) {
      obj.markedAsUnread = message.markedAsUnread;
    }
    if (message.participant?.length) {
      obj.participant = message.participant.map((e) => GroupParticipant.toJSON(e));
    }
    if (message.tcToken !== undefined) {
      obj.tcToken = base64FromBytes(message.tcToken);
    }
    if (message.tcTokenTimestamp !== undefined) {
      obj.tcTokenTimestamp = Math.round(message.tcTokenTimestamp);
    }
    if (message.contactPrimaryIdentityKey !== undefined) {
      obj.contactPrimaryIdentityKey = base64FromBytes(message.contactPrimaryIdentityKey);
    }
    if (message.pinned !== undefined) {
      obj.pinned = Math.round(message.pinned);
    }
    if (message.muteEndTime !== undefined) {
      obj.muteEndTime = Math.round(message.muteEndTime);
    }
    if (message.wallpaper !== undefined) {
      obj.wallpaper = WallpaperSettings.toJSON(message.wallpaper);
    }
    if (message.mediaVisibility !== undefined) {
      obj.mediaVisibility = mediaVisibilityToJSON(message.mediaVisibility);
    }
    if (message.tcTokenSenderTimestamp !== undefined) {
      obj.tcTokenSenderTimestamp = Math.round(message.tcTokenSenderTimestamp);
    }
    if (message.suspended !== undefined) {
      obj.suspended = message.suspended;
    }
    if (message.terminated !== undefined) {
      obj.terminated = message.terminated;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.createdBy !== undefined) {
      obj.createdBy = message.createdBy;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.support !== undefined) {
      obj.support = message.support;
    }
    if (message.isParentGroup !== undefined) {
      obj.isParentGroup = message.isParentGroup;
    }
    if (message.parentGroupId !== undefined) {
      obj.parentGroupId = message.parentGroupId;
    }
    if (message.isDefaultSubgroup !== undefined) {
      obj.isDefaultSubgroup = message.isDefaultSubgroup;
    }
    if (message.displayName !== undefined) {
      obj.displayName = message.displayName;
    }
    if (message.pnJid !== undefined) {
      obj.pnJid = message.pnJid;
    }
    if (message.shareOwnPn !== undefined) {
      obj.shareOwnPn = message.shareOwnPn;
    }
    if (message.pnhDuplicateLidThread !== undefined) {
      obj.pnhDuplicateLidThread = message.pnhDuplicateLidThread;
    }
    if (message.lidJid !== undefined) {
      obj.lidJid = message.lidJid;
    }
    if (message.username !== undefined) {
      obj.username = message.username;
    }
    if (message.lidOriginType !== undefined) {
      obj.lidOriginType = message.lidOriginType;
    }
    if (message.commentsCount !== undefined) {
      obj.commentsCount = Math.round(message.commentsCount);
    }
    if (message.locked !== undefined) {
      obj.locked = message.locked;
    }
    if (message.systemMessageToInsert !== undefined) {
      obj.systemMessageToInsert = privacySystemMessageToJSON(message.systemMessageToInsert);
    }
    if (message.capiCreatedGroup !== undefined) {
      obj.capiCreatedGroup = message.capiCreatedGroup;
    }
    if (message.accountLid !== undefined) {
      obj.accountLid = message.accountLid;
    }
    if (message.limitSharing !== undefined) {
      obj.limitSharing = message.limitSharing;
    }
    if (message.limitSharingSettingTimestamp !== undefined) {
      obj.limitSharingSettingTimestamp = Math.round(message.limitSharingSettingTimestamp);
    }
    if (message.limitSharingTrigger !== undefined) {
      obj.limitSharingTrigger = limitSharing_TriggerTypeToJSON(message.limitSharingTrigger);
    }
    if (message.limitSharingInitiatedByMe !== undefined) {
      obj.limitSharingInitiatedByMe = message.limitSharingInitiatedByMe;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Conversation>, I>>(base?: I): Conversation {
    return Conversation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Conversation>, I>>(object: I): Conversation {
    const message = createBaseConversation();
    message.id = object.id ?? "";
    message.messages = object.messages?.map((e) => HistorySyncMsg.fromPartial(e)) || [];
    message.newJid = object.newJid ?? undefined;
    message.oldJid = object.oldJid ?? undefined;
    message.lastMsgTimestamp = object.lastMsgTimestamp ?? undefined;
    message.unreadCount = object.unreadCount ?? undefined;
    message.readOnly = object.readOnly ?? undefined;
    message.endOfHistoryTransfer = object.endOfHistoryTransfer ?? undefined;
    message.ephemeralExpiration = object.ephemeralExpiration ?? undefined;
    message.ephemeralSettingTimestamp = object.ephemeralSettingTimestamp ?? undefined;
    message.endOfHistoryTransferType = object.endOfHistoryTransferType ?? undefined;
    message.conversationTimestamp = object.conversationTimestamp ?? undefined;
    message.name = object.name ?? undefined;
    message.pHash = object.pHash ?? undefined;
    message.notSpam = object.notSpam ?? undefined;
    message.archived = object.archived ?? undefined;
    message.disappearingMode = (object.disappearingMode !== undefined && object.disappearingMode !== null)
      ? DisappearingMode.fromPartial(object.disappearingMode)
      : undefined;
    message.unreadMentionCount = object.unreadMentionCount ?? undefined;
    message.markedAsUnread = object.markedAsUnread ?? undefined;
    message.participant = object.participant?.map((e) => GroupParticipant.fromPartial(e)) || [];
    message.tcToken = object.tcToken ?? undefined;
    message.tcTokenTimestamp = object.tcTokenTimestamp ?? undefined;
    message.contactPrimaryIdentityKey = object.contactPrimaryIdentityKey ?? undefined;
    message.pinned = object.pinned ?? undefined;
    message.muteEndTime = object.muteEndTime ?? undefined;
    message.wallpaper = (object.wallpaper !== undefined && object.wallpaper !== null)
      ? WallpaperSettings.fromPartial(object.wallpaper)
      : undefined;
    message.mediaVisibility = object.mediaVisibility ?? undefined;
    message.tcTokenSenderTimestamp = object.tcTokenSenderTimestamp ?? undefined;
    message.suspended = object.suspended ?? undefined;
    message.terminated = object.terminated ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.createdBy = object.createdBy ?? undefined;
    message.description = object.description ?? undefined;
    message.support = object.support ?? undefined;
    message.isParentGroup = object.isParentGroup ?? undefined;
    message.parentGroupId = object.parentGroupId ?? undefined;
    message.isDefaultSubgroup = object.isDefaultSubgroup ?? undefined;
    message.displayName = object.displayName ?? undefined;
    message.pnJid = object.pnJid ?? undefined;
    message.shareOwnPn = object.shareOwnPn ?? undefined;
    message.pnhDuplicateLidThread = object.pnhDuplicateLidThread ?? undefined;
    message.lidJid = object.lidJid ?? undefined;
    message.username = object.username ?? undefined;
    message.lidOriginType = object.lidOriginType ?? undefined;
    message.commentsCount = object.commentsCount ?? undefined;
    message.locked = object.locked ?? undefined;
    message.systemMessageToInsert = object.systemMessageToInsert ?? undefined;
    message.capiCreatedGroup = object.capiCreatedGroup ?? undefined;
    message.accountLid = object.accountLid ?? undefined;
    message.limitSharing = object.limitSharing ?? undefined;
    message.limitSharingSettingTimestamp = object.limitSharingSettingTimestamp ?? undefined;
    message.limitSharingTrigger = object.limitSharingTrigger ?? undefined;
    message.limitSharingInitiatedByMe = object.limitSharingInitiatedByMe ?? undefined;
    return message;
  },
};

function createBaseDeviceCapabilities(): DeviceCapabilities {
  return { chatLockSupportLevel: undefined, lidMigration: undefined };
}

export const DeviceCapabilities: MessageFns<DeviceCapabilities> = {
  encode(message: DeviceCapabilities, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chatLockSupportLevel !== undefined) {
      writer.uint32(8).int32(message.chatLockSupportLevel);
    }
    if (message.lidMigration !== undefined) {
      DeviceCapabilities_LIDMigration.encode(message.lidMigration, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeviceCapabilities {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceCapabilities();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.chatLockSupportLevel = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.lidMigration = DeviceCapabilities_LIDMigration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceCapabilities {
    return {
      chatLockSupportLevel: isSet(object.chatLockSupportLevel)
        ? deviceCapabilities_ChatLockSupportLevelFromJSON(object.chatLockSupportLevel)
        : undefined,
      lidMigration: isSet(object.lidMigration)
        ? DeviceCapabilities_LIDMigration.fromJSON(object.lidMigration)
        : undefined,
    };
  },

  toJSON(message: DeviceCapabilities): unknown {
    const obj: any = {};
    if (message.chatLockSupportLevel !== undefined) {
      obj.chatLockSupportLevel = deviceCapabilities_ChatLockSupportLevelToJSON(message.chatLockSupportLevel);
    }
    if (message.lidMigration !== undefined) {
      obj.lidMigration = DeviceCapabilities_LIDMigration.toJSON(message.lidMigration);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceCapabilities>, I>>(base?: I): DeviceCapabilities {
    return DeviceCapabilities.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceCapabilities>, I>>(object: I): DeviceCapabilities {
    const message = createBaseDeviceCapabilities();
    message.chatLockSupportLevel = object.chatLockSupportLevel ?? undefined;
    message.lidMigration = (object.lidMigration !== undefined && object.lidMigration !== null)
      ? DeviceCapabilities_LIDMigration.fromPartial(object.lidMigration)
      : undefined;
    return message;
  },
};

function createBaseDeviceCapabilities_LIDMigration(): DeviceCapabilities_LIDMigration {
  return { chatDbMigrationTimestamp: undefined };
}

export const DeviceCapabilities_LIDMigration: MessageFns<DeviceCapabilities_LIDMigration> = {
  encode(message: DeviceCapabilities_LIDMigration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chatDbMigrationTimestamp !== undefined) {
      writer.uint32(8).uint64(message.chatDbMigrationTimestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeviceCapabilities_LIDMigration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceCapabilities_LIDMigration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.chatDbMigrationTimestamp = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceCapabilities_LIDMigration {
    return {
      chatDbMigrationTimestamp: isSet(object.chatDbMigrationTimestamp)
        ? globalThis.Number(object.chatDbMigrationTimestamp)
        : undefined,
    };
  },

  toJSON(message: DeviceCapabilities_LIDMigration): unknown {
    const obj: any = {};
    if (message.chatDbMigrationTimestamp !== undefined) {
      obj.chatDbMigrationTimestamp = Math.round(message.chatDbMigrationTimestamp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceCapabilities_LIDMigration>, I>>(base?: I): DeviceCapabilities_LIDMigration {
    return DeviceCapabilities_LIDMigration.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceCapabilities_LIDMigration>, I>>(
    object: I,
  ): DeviceCapabilities_LIDMigration {
    const message = createBaseDeviceCapabilities_LIDMigration();
    message.chatDbMigrationTimestamp = object.chatDbMigrationTimestamp ?? undefined;
    return message;
  },
};

function createBaseDeviceConsistencyCodeMessage(): DeviceConsistencyCodeMessage {
  return { generation: undefined, signature: undefined };
}

export const DeviceConsistencyCodeMessage: MessageFns<DeviceConsistencyCodeMessage> = {
  encode(message: DeviceConsistencyCodeMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.generation !== undefined) {
      writer.uint32(8).uint32(message.generation);
    }
    if (message.signature !== undefined) {
      writer.uint32(18).bytes(message.signature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeviceConsistencyCodeMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceConsistencyCodeMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.generation = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signature = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceConsistencyCodeMessage {
    return {
      generation: isSet(object.generation) ? globalThis.Number(object.generation) : undefined,
      signature: isSet(object.signature) ? bytesFromBase64(object.signature) : undefined,
    };
  },

  toJSON(message: DeviceConsistencyCodeMessage): unknown {
    const obj: any = {};
    if (message.generation !== undefined) {
      obj.generation = Math.round(message.generation);
    }
    if (message.signature !== undefined) {
      obj.signature = base64FromBytes(message.signature);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceConsistencyCodeMessage>, I>>(base?: I): DeviceConsistencyCodeMessage {
    return DeviceConsistencyCodeMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceConsistencyCodeMessage>, I>>(object: I): DeviceConsistencyCodeMessage {
    const message = createBaseDeviceConsistencyCodeMessage();
    message.generation = object.generation ?? undefined;
    message.signature = object.signature ?? undefined;
    return message;
  },
};

function createBaseDeviceListMetadata(): DeviceListMetadata {
  return {
    senderKeyHash: undefined,
    senderTimestamp: undefined,
    senderKeyIndexes: [],
    senderAccountType: undefined,
    receiverAccountType: undefined,
    recipientKeyHash: undefined,
    recipientTimestamp: undefined,
    recipientKeyIndexes: [],
  };
}

export const DeviceListMetadata: MessageFns<DeviceListMetadata> = {
  encode(message: DeviceListMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.senderKeyHash !== undefined) {
      writer.uint32(10).bytes(message.senderKeyHash);
    }
    if (message.senderTimestamp !== undefined) {
      writer.uint32(16).uint64(message.senderTimestamp);
    }
    writer.uint32(26).fork();
    for (const v of message.senderKeyIndexes) {
      writer.uint32(v);
    }
    writer.join();
    if (message.senderAccountType !== undefined) {
      writer.uint32(32).int32(message.senderAccountType);
    }
    if (message.receiverAccountType !== undefined) {
      writer.uint32(40).int32(message.receiverAccountType);
    }
    if (message.recipientKeyHash !== undefined) {
      writer.uint32(66).bytes(message.recipientKeyHash);
    }
    if (message.recipientTimestamp !== undefined) {
      writer.uint32(72).uint64(message.recipientTimestamp);
    }
    writer.uint32(82).fork();
    for (const v of message.recipientKeyIndexes) {
      writer.uint32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeviceListMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceListMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.senderKeyHash = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.senderTimestamp = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.senderKeyIndexes.push(reader.uint32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.senderKeyIndexes.push(reader.uint32());
            }

            continue;
          }

          break;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.senderAccountType = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.receiverAccountType = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.recipientKeyHash = reader.bytes();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.recipientTimestamp = longToNumber(reader.uint64());
          continue;
        }
        case 10: {
          if (tag === 80) {
            message.recipientKeyIndexes.push(reader.uint32());

            continue;
          }

          if (tag === 82) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.recipientKeyIndexes.push(reader.uint32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceListMetadata {
    return {
      senderKeyHash: isSet(object.senderKeyHash) ? bytesFromBase64(object.senderKeyHash) : undefined,
      senderTimestamp: isSet(object.senderTimestamp) ? globalThis.Number(object.senderTimestamp) : undefined,
      senderKeyIndexes: globalThis.Array.isArray(object?.senderKeyIndexes)
        ? object.senderKeyIndexes.map((e: any) => globalThis.Number(e))
        : [],
      senderAccountType: isSet(object.senderAccountType)
        ? aDVEncryptionTypeFromJSON(object.senderAccountType)
        : undefined,
      receiverAccountType: isSet(object.receiverAccountType)
        ? aDVEncryptionTypeFromJSON(object.receiverAccountType)
        : undefined,
      recipientKeyHash: isSet(object.recipientKeyHash) ? bytesFromBase64(object.recipientKeyHash) : undefined,
      recipientTimestamp: isSet(object.recipientTimestamp) ? globalThis.Number(object.recipientTimestamp) : undefined,
      recipientKeyIndexes: globalThis.Array.isArray(object?.recipientKeyIndexes)
        ? object.recipientKeyIndexes.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: DeviceListMetadata): unknown {
    const obj: any = {};
    if (message.senderKeyHash !== undefined) {
      obj.senderKeyHash = base64FromBytes(message.senderKeyHash);
    }
    if (message.senderTimestamp !== undefined) {
      obj.senderTimestamp = Math.round(message.senderTimestamp);
    }
    if (message.senderKeyIndexes?.length) {
      obj.senderKeyIndexes = message.senderKeyIndexes.map((e) => Math.round(e));
    }
    if (message.senderAccountType !== undefined) {
      obj.senderAccountType = aDVEncryptionTypeToJSON(message.senderAccountType);
    }
    if (message.receiverAccountType !== undefined) {
      obj.receiverAccountType = aDVEncryptionTypeToJSON(message.receiverAccountType);
    }
    if (message.recipientKeyHash !== undefined) {
      obj.recipientKeyHash = base64FromBytes(message.recipientKeyHash);
    }
    if (message.recipientTimestamp !== undefined) {
      obj.recipientTimestamp = Math.round(message.recipientTimestamp);
    }
    if (message.recipientKeyIndexes?.length) {
      obj.recipientKeyIndexes = message.recipientKeyIndexes.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceListMetadata>, I>>(base?: I): DeviceListMetadata {
    return DeviceListMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceListMetadata>, I>>(object: I): DeviceListMetadata {
    const message = createBaseDeviceListMetadata();
    message.senderKeyHash = object.senderKeyHash ?? undefined;
    message.senderTimestamp = object.senderTimestamp ?? undefined;
    message.senderKeyIndexes = object.senderKeyIndexes?.map((e) => e) || [];
    message.senderAccountType = object.senderAccountType ?? undefined;
    message.receiverAccountType = object.receiverAccountType ?? undefined;
    message.recipientKeyHash = object.recipientKeyHash ?? undefined;
    message.recipientTimestamp = object.recipientTimestamp ?? undefined;
    message.recipientKeyIndexes = object.recipientKeyIndexes?.map((e) => e) || [];
    return message;
  },
};

function createBaseDeviceProps(): DeviceProps {
  return {
    os: undefined,
    version: undefined,
    platformType: undefined,
    requireFullSync: undefined,
    historySyncConfig: undefined,
  };
}

export const DeviceProps: MessageFns<DeviceProps> = {
  encode(message: DeviceProps, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.os !== undefined) {
      writer.uint32(10).string(message.os);
    }
    if (message.version !== undefined) {
      DeviceProps_AppVersion.encode(message.version, writer.uint32(18).fork()).join();
    }
    if (message.platformType !== undefined) {
      writer.uint32(24).int32(message.platformType);
    }
    if (message.requireFullSync !== undefined) {
      writer.uint32(32).bool(message.requireFullSync);
    }
    if (message.historySyncConfig !== undefined) {
      DeviceProps_HistorySyncConfig.encode(message.historySyncConfig, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeviceProps {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceProps();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.os = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.version = DeviceProps_AppVersion.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.platformType = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.requireFullSync = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.historySyncConfig = DeviceProps_HistorySyncConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceProps {
    return {
      os: isSet(object.os) ? globalThis.String(object.os) : undefined,
      version: isSet(object.version) ? DeviceProps_AppVersion.fromJSON(object.version) : undefined,
      platformType: isSet(object.platformType) ? deviceProps_PlatformTypeFromJSON(object.platformType) : undefined,
      requireFullSync: isSet(object.requireFullSync) ? globalThis.Boolean(object.requireFullSync) : undefined,
      historySyncConfig: isSet(object.historySyncConfig)
        ? DeviceProps_HistorySyncConfig.fromJSON(object.historySyncConfig)
        : undefined,
    };
  },

  toJSON(message: DeviceProps): unknown {
    const obj: any = {};
    if (message.os !== undefined) {
      obj.os = message.os;
    }
    if (message.version !== undefined) {
      obj.version = DeviceProps_AppVersion.toJSON(message.version);
    }
    if (message.platformType !== undefined) {
      obj.platformType = deviceProps_PlatformTypeToJSON(message.platformType);
    }
    if (message.requireFullSync !== undefined) {
      obj.requireFullSync = message.requireFullSync;
    }
    if (message.historySyncConfig !== undefined) {
      obj.historySyncConfig = DeviceProps_HistorySyncConfig.toJSON(message.historySyncConfig);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceProps>, I>>(base?: I): DeviceProps {
    return DeviceProps.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceProps>, I>>(object: I): DeviceProps {
    const message = createBaseDeviceProps();
    message.os = object.os ?? undefined;
    message.version = (object.version !== undefined && object.version !== null)
      ? DeviceProps_AppVersion.fromPartial(object.version)
      : undefined;
    message.platformType = object.platformType ?? undefined;
    message.requireFullSync = object.requireFullSync ?? undefined;
    message.historySyncConfig = (object.historySyncConfig !== undefined && object.historySyncConfig !== null)
      ? DeviceProps_HistorySyncConfig.fromPartial(object.historySyncConfig)
      : undefined;
    return message;
  },
};

function createBaseDeviceProps_AppVersion(): DeviceProps_AppVersion {
  return { primary: undefined, secondary: undefined, tertiary: undefined, quaternary: undefined, quinary: undefined };
}

export const DeviceProps_AppVersion: MessageFns<DeviceProps_AppVersion> = {
  encode(message: DeviceProps_AppVersion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.primary !== undefined) {
      writer.uint32(8).uint32(message.primary);
    }
    if (message.secondary !== undefined) {
      writer.uint32(16).uint32(message.secondary);
    }
    if (message.tertiary !== undefined) {
      writer.uint32(24).uint32(message.tertiary);
    }
    if (message.quaternary !== undefined) {
      writer.uint32(32).uint32(message.quaternary);
    }
    if (message.quinary !== undefined) {
      writer.uint32(40).uint32(message.quinary);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeviceProps_AppVersion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceProps_AppVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.primary = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.secondary = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.tertiary = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.quaternary = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.quinary = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceProps_AppVersion {
    return {
      primary: isSet(object.primary) ? globalThis.Number(object.primary) : undefined,
      secondary: isSet(object.secondary) ? globalThis.Number(object.secondary) : undefined,
      tertiary: isSet(object.tertiary) ? globalThis.Number(object.tertiary) : undefined,
      quaternary: isSet(object.quaternary) ? globalThis.Number(object.quaternary) : undefined,
      quinary: isSet(object.quinary) ? globalThis.Number(object.quinary) : undefined,
    };
  },

  toJSON(message: DeviceProps_AppVersion): unknown {
    const obj: any = {};
    if (message.primary !== undefined) {
      obj.primary = Math.round(message.primary);
    }
    if (message.secondary !== undefined) {
      obj.secondary = Math.round(message.secondary);
    }
    if (message.tertiary !== undefined) {
      obj.tertiary = Math.round(message.tertiary);
    }
    if (message.quaternary !== undefined) {
      obj.quaternary = Math.round(message.quaternary);
    }
    if (message.quinary !== undefined) {
      obj.quinary = Math.round(message.quinary);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceProps_AppVersion>, I>>(base?: I): DeviceProps_AppVersion {
    return DeviceProps_AppVersion.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceProps_AppVersion>, I>>(object: I): DeviceProps_AppVersion {
    const message = createBaseDeviceProps_AppVersion();
    message.primary = object.primary ?? undefined;
    message.secondary = object.secondary ?? undefined;
    message.tertiary = object.tertiary ?? undefined;
    message.quaternary = object.quaternary ?? undefined;
    message.quinary = object.quinary ?? undefined;
    return message;
  },
};

function createBaseDeviceProps_HistorySyncConfig(): DeviceProps_HistorySyncConfig {
  return {
    fullSyncDaysLimit: undefined,
    fullSyncSizeMbLimit: undefined,
    storageQuotaMb: undefined,
    inlineInitialPayloadInE2EeMsg: undefined,
    recentSyncDaysLimit: undefined,
    supportCallLogHistory: undefined,
    supportBotUserAgentChatHistory: undefined,
    supportCagReactionsAndPolls: undefined,
    supportBizHostedMsg: undefined,
    supportRecentSyncChunkMessageCountTuning: undefined,
    supportHostedGroupMsg: undefined,
    supportFbidBotChatHistory: undefined,
    supportAddOnHistorySyncMigration: undefined,
    supportMessageAssociation: undefined,
  };
}

export const DeviceProps_HistorySyncConfig: MessageFns<DeviceProps_HistorySyncConfig> = {
  encode(message: DeviceProps_HistorySyncConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fullSyncDaysLimit !== undefined) {
      writer.uint32(8).uint32(message.fullSyncDaysLimit);
    }
    if (message.fullSyncSizeMbLimit !== undefined) {
      writer.uint32(16).uint32(message.fullSyncSizeMbLimit);
    }
    if (message.storageQuotaMb !== undefined) {
      writer.uint32(24).uint32(message.storageQuotaMb);
    }
    if (message.inlineInitialPayloadInE2EeMsg !== undefined) {
      writer.uint32(32).bool(message.inlineInitialPayloadInE2EeMsg);
    }
    if (message.recentSyncDaysLimit !== undefined) {
      writer.uint32(40).uint32(message.recentSyncDaysLimit);
    }
    if (message.supportCallLogHistory !== undefined) {
      writer.uint32(48).bool(message.supportCallLogHistory);
    }
    if (message.supportBotUserAgentChatHistory !== undefined) {
      writer.uint32(56).bool(message.supportBotUserAgentChatHistory);
    }
    if (message.supportCagReactionsAndPolls !== undefined) {
      writer.uint32(64).bool(message.supportCagReactionsAndPolls);
    }
    if (message.supportBizHostedMsg !== undefined) {
      writer.uint32(72).bool(message.supportBizHostedMsg);
    }
    if (message.supportRecentSyncChunkMessageCountTuning !== undefined) {
      writer.uint32(80).bool(message.supportRecentSyncChunkMessageCountTuning);
    }
    if (message.supportHostedGroupMsg !== undefined) {
      writer.uint32(88).bool(message.supportHostedGroupMsg);
    }
    if (message.supportFbidBotChatHistory !== undefined) {
      writer.uint32(96).bool(message.supportFbidBotChatHistory);
    }
    if (message.supportAddOnHistorySyncMigration !== undefined) {
      writer.uint32(104).bool(message.supportAddOnHistorySyncMigration);
    }
    if (message.supportMessageAssociation !== undefined) {
      writer.uint32(112).bool(message.supportMessageAssociation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeviceProps_HistorySyncConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceProps_HistorySyncConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.fullSyncDaysLimit = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.fullSyncSizeMbLimit = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.storageQuotaMb = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.inlineInitialPayloadInE2EeMsg = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.recentSyncDaysLimit = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.supportCallLogHistory = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.supportBotUserAgentChatHistory = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.supportCagReactionsAndPolls = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.supportBizHostedMsg = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.supportRecentSyncChunkMessageCountTuning = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.supportHostedGroupMsg = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.supportFbidBotChatHistory = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.supportAddOnHistorySyncMigration = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.supportMessageAssociation = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceProps_HistorySyncConfig {
    return {
      fullSyncDaysLimit: isSet(object.fullSyncDaysLimit) ? globalThis.Number(object.fullSyncDaysLimit) : undefined,
      fullSyncSizeMbLimit: isSet(object.fullSyncSizeMbLimit)
        ? globalThis.Number(object.fullSyncSizeMbLimit)
        : undefined,
      storageQuotaMb: isSet(object.storageQuotaMb) ? globalThis.Number(object.storageQuotaMb) : undefined,
      inlineInitialPayloadInE2EeMsg: isSet(object.inlineInitialPayloadInE2EeMsg)
        ? globalThis.Boolean(object.inlineInitialPayloadInE2EeMsg)
        : undefined,
      recentSyncDaysLimit: isSet(object.recentSyncDaysLimit)
        ? globalThis.Number(object.recentSyncDaysLimit)
        : undefined,
      supportCallLogHistory: isSet(object.supportCallLogHistory)
        ? globalThis.Boolean(object.supportCallLogHistory)
        : undefined,
      supportBotUserAgentChatHistory: isSet(object.supportBotUserAgentChatHistory)
        ? globalThis.Boolean(object.supportBotUserAgentChatHistory)
        : undefined,
      supportCagReactionsAndPolls: isSet(object.supportCagReactionsAndPolls)
        ? globalThis.Boolean(object.supportCagReactionsAndPolls)
        : undefined,
      supportBizHostedMsg: isSet(object.supportBizHostedMsg)
        ? globalThis.Boolean(object.supportBizHostedMsg)
        : undefined,
      supportRecentSyncChunkMessageCountTuning: isSet(object.supportRecentSyncChunkMessageCountTuning)
        ? globalThis.Boolean(object.supportRecentSyncChunkMessageCountTuning)
        : undefined,
      supportHostedGroupMsg: isSet(object.supportHostedGroupMsg)
        ? globalThis.Boolean(object.supportHostedGroupMsg)
        : undefined,
      supportFbidBotChatHistory: isSet(object.supportFbidBotChatHistory)
        ? globalThis.Boolean(object.supportFbidBotChatHistory)
        : undefined,
      supportAddOnHistorySyncMigration: isSet(object.supportAddOnHistorySyncMigration)
        ? globalThis.Boolean(object.supportAddOnHistorySyncMigration)
        : undefined,
      supportMessageAssociation: isSet(object.supportMessageAssociation)
        ? globalThis.Boolean(object.supportMessageAssociation)
        : undefined,
    };
  },

  toJSON(message: DeviceProps_HistorySyncConfig): unknown {
    const obj: any = {};
    if (message.fullSyncDaysLimit !== undefined) {
      obj.fullSyncDaysLimit = Math.round(message.fullSyncDaysLimit);
    }
    if (message.fullSyncSizeMbLimit !== undefined) {
      obj.fullSyncSizeMbLimit = Math.round(message.fullSyncSizeMbLimit);
    }
    if (message.storageQuotaMb !== undefined) {
      obj.storageQuotaMb = Math.round(message.storageQuotaMb);
    }
    if (message.inlineInitialPayloadInE2EeMsg !== undefined) {
      obj.inlineInitialPayloadInE2EeMsg = message.inlineInitialPayloadInE2EeMsg;
    }
    if (message.recentSyncDaysLimit !== undefined) {
      obj.recentSyncDaysLimit = Math.round(message.recentSyncDaysLimit);
    }
    if (message.supportCallLogHistory !== undefined) {
      obj.supportCallLogHistory = message.supportCallLogHistory;
    }
    if (message.supportBotUserAgentChatHistory !== undefined) {
      obj.supportBotUserAgentChatHistory = message.supportBotUserAgentChatHistory;
    }
    if (message.supportCagReactionsAndPolls !== undefined) {
      obj.supportCagReactionsAndPolls = message.supportCagReactionsAndPolls;
    }
    if (message.supportBizHostedMsg !== undefined) {
      obj.supportBizHostedMsg = message.supportBizHostedMsg;
    }
    if (message.supportRecentSyncChunkMessageCountTuning !== undefined) {
      obj.supportRecentSyncChunkMessageCountTuning = message.supportRecentSyncChunkMessageCountTuning;
    }
    if (message.supportHostedGroupMsg !== undefined) {
      obj.supportHostedGroupMsg = message.supportHostedGroupMsg;
    }
    if (message.supportFbidBotChatHistory !== undefined) {
      obj.supportFbidBotChatHistory = message.supportFbidBotChatHistory;
    }
    if (message.supportAddOnHistorySyncMigration !== undefined) {
      obj.supportAddOnHistorySyncMigration = message.supportAddOnHistorySyncMigration;
    }
    if (message.supportMessageAssociation !== undefined) {
      obj.supportMessageAssociation = message.supportMessageAssociation;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceProps_HistorySyncConfig>, I>>(base?: I): DeviceProps_HistorySyncConfig {
    return DeviceProps_HistorySyncConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceProps_HistorySyncConfig>, I>>(
    object: I,
  ): DeviceProps_HistorySyncConfig {
    const message = createBaseDeviceProps_HistorySyncConfig();
    message.fullSyncDaysLimit = object.fullSyncDaysLimit ?? undefined;
    message.fullSyncSizeMbLimit = object.fullSyncSizeMbLimit ?? undefined;
    message.storageQuotaMb = object.storageQuotaMb ?? undefined;
    message.inlineInitialPayloadInE2EeMsg = object.inlineInitialPayloadInE2EeMsg ?? undefined;
    message.recentSyncDaysLimit = object.recentSyncDaysLimit ?? undefined;
    message.supportCallLogHistory = object.supportCallLogHistory ?? undefined;
    message.supportBotUserAgentChatHistory = object.supportBotUserAgentChatHistory ?? undefined;
    message.supportCagReactionsAndPolls = object.supportCagReactionsAndPolls ?? undefined;
    message.supportBizHostedMsg = object.supportBizHostedMsg ?? undefined;
    message.supportRecentSyncChunkMessageCountTuning = object.supportRecentSyncChunkMessageCountTuning ?? undefined;
    message.supportHostedGroupMsg = object.supportHostedGroupMsg ?? undefined;
    message.supportFbidBotChatHistory = object.supportFbidBotChatHistory ?? undefined;
    message.supportAddOnHistorySyncMigration = object.supportAddOnHistorySyncMigration ?? undefined;
    message.supportMessageAssociation = object.supportMessageAssociation ?? undefined;
    return message;
  },
};

function createBaseDisappearingMode(): DisappearingMode {
  return { initiator: undefined, trigger: undefined, initiatorDeviceJid: undefined, initiatedByMe: undefined };
}

export const DisappearingMode: MessageFns<DisappearingMode> = {
  encode(message: DisappearingMode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.initiator !== undefined) {
      writer.uint32(8).int32(message.initiator);
    }
    if (message.trigger !== undefined) {
      writer.uint32(16).int32(message.trigger);
    }
    if (message.initiatorDeviceJid !== undefined) {
      writer.uint32(26).string(message.initiatorDeviceJid);
    }
    if (message.initiatedByMe !== undefined) {
      writer.uint32(32).bool(message.initiatedByMe);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisappearingMode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisappearingMode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.initiator = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.trigger = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.initiatorDeviceJid = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.initiatedByMe = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisappearingMode {
    return {
      initiator: isSet(object.initiator) ? disappearingMode_InitiatorFromJSON(object.initiator) : undefined,
      trigger: isSet(object.trigger) ? disappearingMode_TriggerFromJSON(object.trigger) : undefined,
      initiatorDeviceJid: isSet(object.initiatorDeviceJid) ? globalThis.String(object.initiatorDeviceJid) : undefined,
      initiatedByMe: isSet(object.initiatedByMe) ? globalThis.Boolean(object.initiatedByMe) : undefined,
    };
  },

  toJSON(message: DisappearingMode): unknown {
    const obj: any = {};
    if (message.initiator !== undefined) {
      obj.initiator = disappearingMode_InitiatorToJSON(message.initiator);
    }
    if (message.trigger !== undefined) {
      obj.trigger = disappearingMode_TriggerToJSON(message.trigger);
    }
    if (message.initiatorDeviceJid !== undefined) {
      obj.initiatorDeviceJid = message.initiatorDeviceJid;
    }
    if (message.initiatedByMe !== undefined) {
      obj.initiatedByMe = message.initiatedByMe;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DisappearingMode>, I>>(base?: I): DisappearingMode {
    return DisappearingMode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DisappearingMode>, I>>(object: I): DisappearingMode {
    const message = createBaseDisappearingMode();
    message.initiator = object.initiator ?? undefined;
    message.trigger = object.trigger ?? undefined;
    message.initiatorDeviceJid = object.initiatorDeviceJid ?? undefined;
    message.initiatedByMe = object.initiatedByMe ?? undefined;
    return message;
  },
};

function createBaseEmbeddedContent(): EmbeddedContent {
  return { embeddedMessage: undefined, embeddedMusic: undefined };
}

export const EmbeddedContent: MessageFns<EmbeddedContent> = {
  encode(message: EmbeddedContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.embeddedMessage !== undefined) {
      EmbeddedMessage.encode(message.embeddedMessage, writer.uint32(10).fork()).join();
    }
    if (message.embeddedMusic !== undefined) {
      EmbeddedMusic.encode(message.embeddedMusic, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EmbeddedContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmbeddedContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.embeddedMessage = EmbeddedMessage.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.embeddedMusic = EmbeddedMusic.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EmbeddedContent {
    return {
      embeddedMessage: isSet(object.embeddedMessage) ? EmbeddedMessage.fromJSON(object.embeddedMessage) : undefined,
      embeddedMusic: isSet(object.embeddedMusic) ? EmbeddedMusic.fromJSON(object.embeddedMusic) : undefined,
    };
  },

  toJSON(message: EmbeddedContent): unknown {
    const obj: any = {};
    if (message.embeddedMessage !== undefined) {
      obj.embeddedMessage = EmbeddedMessage.toJSON(message.embeddedMessage);
    }
    if (message.embeddedMusic !== undefined) {
      obj.embeddedMusic = EmbeddedMusic.toJSON(message.embeddedMusic);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EmbeddedContent>, I>>(base?: I): EmbeddedContent {
    return EmbeddedContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EmbeddedContent>, I>>(object: I): EmbeddedContent {
    const message = createBaseEmbeddedContent();
    message.embeddedMessage = (object.embeddedMessage !== undefined && object.embeddedMessage !== null)
      ? EmbeddedMessage.fromPartial(object.embeddedMessage)
      : undefined;
    message.embeddedMusic = (object.embeddedMusic !== undefined && object.embeddedMusic !== null)
      ? EmbeddedMusic.fromPartial(object.embeddedMusic)
      : undefined;
    return message;
  },
};

function createBaseEmbeddedMessage(): EmbeddedMessage {
  return { stanzaId: undefined, message: undefined };
}

export const EmbeddedMessage: MessageFns<EmbeddedMessage> = {
  encode(message: EmbeddedMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stanzaId !== undefined) {
      writer.uint32(10).string(message.stanzaId);
    }
    if (message.message !== undefined) {
      Message.encode(message.message, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EmbeddedMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmbeddedMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stanzaId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = Message.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EmbeddedMessage {
    return {
      stanzaId: isSet(object.stanzaId) ? globalThis.String(object.stanzaId) : undefined,
      message: isSet(object.message) ? Message.fromJSON(object.message) : undefined,
    };
  },

  toJSON(message: EmbeddedMessage): unknown {
    const obj: any = {};
    if (message.stanzaId !== undefined) {
      obj.stanzaId = message.stanzaId;
    }
    if (message.message !== undefined) {
      obj.message = Message.toJSON(message.message);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EmbeddedMessage>, I>>(base?: I): EmbeddedMessage {
    return EmbeddedMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EmbeddedMessage>, I>>(object: I): EmbeddedMessage {
    const message = createBaseEmbeddedMessage();
    message.stanzaId = object.stanzaId ?? undefined;
    message.message = (object.message !== undefined && object.message !== null)
      ? Message.fromPartial(object.message)
      : undefined;
    return message;
  },
};

function createBaseEmbeddedMusic(): EmbeddedMusic {
  return {
    musicContentMediaId: undefined,
    songId: undefined,
    author: undefined,
    title: undefined,
    artworkDirectPath: undefined,
    artworkSha256: undefined,
    artworkEncSha256: undefined,
    artworkMediaKey: undefined,
    artistAttribution: undefined,
    countryBlocklist: undefined,
    isExplicit: undefined,
  };
}

export const EmbeddedMusic: MessageFns<EmbeddedMusic> = {
  encode(message: EmbeddedMusic, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.musicContentMediaId !== undefined) {
      writer.uint32(10).string(message.musicContentMediaId);
    }
    if (message.songId !== undefined) {
      writer.uint32(18).string(message.songId);
    }
    if (message.author !== undefined) {
      writer.uint32(26).string(message.author);
    }
    if (message.title !== undefined) {
      writer.uint32(34).string(message.title);
    }
    if (message.artworkDirectPath !== undefined) {
      writer.uint32(42).string(message.artworkDirectPath);
    }
    if (message.artworkSha256 !== undefined) {
      writer.uint32(50).bytes(message.artworkSha256);
    }
    if (message.artworkEncSha256 !== undefined) {
      writer.uint32(58).bytes(message.artworkEncSha256);
    }
    if (message.artworkMediaKey !== undefined) {
      writer.uint32(90).bytes(message.artworkMediaKey);
    }
    if (message.artistAttribution !== undefined) {
      writer.uint32(66).string(message.artistAttribution);
    }
    if (message.countryBlocklist !== undefined) {
      writer.uint32(74).bytes(message.countryBlocklist);
    }
    if (message.isExplicit !== undefined) {
      writer.uint32(80).bool(message.isExplicit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EmbeddedMusic {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmbeddedMusic();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.musicContentMediaId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.songId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.author = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.artworkDirectPath = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.artworkSha256 = reader.bytes();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.artworkEncSha256 = reader.bytes();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.artworkMediaKey = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.artistAttribution = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.countryBlocklist = reader.bytes();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.isExplicit = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EmbeddedMusic {
    return {
      musicContentMediaId: isSet(object.musicContentMediaId)
        ? globalThis.String(object.musicContentMediaId)
        : undefined,
      songId: isSet(object.songId) ? globalThis.String(object.songId) : undefined,
      author: isSet(object.author) ? globalThis.String(object.author) : undefined,
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      artworkDirectPath: isSet(object.artworkDirectPath) ? globalThis.String(object.artworkDirectPath) : undefined,
      artworkSha256: isSet(object.artworkSha256) ? bytesFromBase64(object.artworkSha256) : undefined,
      artworkEncSha256: isSet(object.artworkEncSha256) ? bytesFromBase64(object.artworkEncSha256) : undefined,
      artworkMediaKey: isSet(object.artworkMediaKey) ? bytesFromBase64(object.artworkMediaKey) : undefined,
      artistAttribution: isSet(object.artistAttribution) ? globalThis.String(object.artistAttribution) : undefined,
      countryBlocklist: isSet(object.countryBlocklist) ? bytesFromBase64(object.countryBlocklist) : undefined,
      isExplicit: isSet(object.isExplicit) ? globalThis.Boolean(object.isExplicit) : undefined,
    };
  },

  toJSON(message: EmbeddedMusic): unknown {
    const obj: any = {};
    if (message.musicContentMediaId !== undefined) {
      obj.musicContentMediaId = message.musicContentMediaId;
    }
    if (message.songId !== undefined) {
      obj.songId = message.songId;
    }
    if (message.author !== undefined) {
      obj.author = message.author;
    }
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.artworkDirectPath !== undefined) {
      obj.artworkDirectPath = message.artworkDirectPath;
    }
    if (message.artworkSha256 !== undefined) {
      obj.artworkSha256 = base64FromBytes(message.artworkSha256);
    }
    if (message.artworkEncSha256 !== undefined) {
      obj.artworkEncSha256 = base64FromBytes(message.artworkEncSha256);
    }
    if (message.artworkMediaKey !== undefined) {
      obj.artworkMediaKey = base64FromBytes(message.artworkMediaKey);
    }
    if (message.artistAttribution !== undefined) {
      obj.artistAttribution = message.artistAttribution;
    }
    if (message.countryBlocklist !== undefined) {
      obj.countryBlocklist = base64FromBytes(message.countryBlocklist);
    }
    if (message.isExplicit !== undefined) {
      obj.isExplicit = message.isExplicit;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EmbeddedMusic>, I>>(base?: I): EmbeddedMusic {
    return EmbeddedMusic.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EmbeddedMusic>, I>>(object: I): EmbeddedMusic {
    const message = createBaseEmbeddedMusic();
    message.musicContentMediaId = object.musicContentMediaId ?? undefined;
    message.songId = object.songId ?? undefined;
    message.author = object.author ?? undefined;
    message.title = object.title ?? undefined;
    message.artworkDirectPath = object.artworkDirectPath ?? undefined;
    message.artworkSha256 = object.artworkSha256 ?? undefined;
    message.artworkEncSha256 = object.artworkEncSha256 ?? undefined;
    message.artworkMediaKey = object.artworkMediaKey ?? undefined;
    message.artistAttribution = object.artistAttribution ?? undefined;
    message.countryBlocklist = object.countryBlocklist ?? undefined;
    message.isExplicit = object.isExplicit ?? undefined;
    return message;
  },
};

function createBaseEncryptedPairingRequest(): EncryptedPairingRequest {
  return { encryptedPayload: undefined, iv: undefined };
}

export const EncryptedPairingRequest: MessageFns<EncryptedPairingRequest> = {
  encode(message: EncryptedPairingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.encryptedPayload !== undefined) {
      writer.uint32(10).bytes(message.encryptedPayload);
    }
    if (message.iv !== undefined) {
      writer.uint32(18).bytes(message.iv);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EncryptedPairingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEncryptedPairingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.encryptedPayload = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.iv = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EncryptedPairingRequest {
    return {
      encryptedPayload: isSet(object.encryptedPayload) ? bytesFromBase64(object.encryptedPayload) : undefined,
      iv: isSet(object.iv) ? bytesFromBase64(object.iv) : undefined,
    };
  },

  toJSON(message: EncryptedPairingRequest): unknown {
    const obj: any = {};
    if (message.encryptedPayload !== undefined) {
      obj.encryptedPayload = base64FromBytes(message.encryptedPayload);
    }
    if (message.iv !== undefined) {
      obj.iv = base64FromBytes(message.iv);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EncryptedPairingRequest>, I>>(base?: I): EncryptedPairingRequest {
    return EncryptedPairingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EncryptedPairingRequest>, I>>(object: I): EncryptedPairingRequest {
    const message = createBaseEncryptedPairingRequest();
    message.encryptedPayload = object.encryptedPayload ?? undefined;
    message.iv = object.iv ?? undefined;
    return message;
  },
};

function createBaseEphemeralSetting(): EphemeralSetting {
  return { duration: undefined, timestamp: undefined };
}

export const EphemeralSetting: MessageFns<EphemeralSetting> = {
  encode(message: EphemeralSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.duration !== undefined) {
      writer.uint32(13).sfixed32(message.duration);
    }
    if (message.timestamp !== undefined) {
      writer.uint32(17).sfixed64(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EphemeralSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEphemeralSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.duration = reader.sfixed32();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.timestamp = longToNumber(reader.sfixed64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EphemeralSetting {
    return {
      duration: isSet(object.duration) ? globalThis.Number(object.duration) : undefined,
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : undefined,
    };
  },

  toJSON(message: EphemeralSetting): unknown {
    const obj: any = {};
    if (message.duration !== undefined) {
      obj.duration = Math.round(message.duration);
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = Math.round(message.timestamp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EphemeralSetting>, I>>(base?: I): EphemeralSetting {
    return EphemeralSetting.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EphemeralSetting>, I>>(object: I): EphemeralSetting {
    const message = createBaseEphemeralSetting();
    message.duration = object.duration ?? undefined;
    message.timestamp = object.timestamp ?? undefined;
    return message;
  },
};

function createBaseEventAdditionalMetadata(): EventAdditionalMetadata {
  return { isStale: undefined };
}

export const EventAdditionalMetadata: MessageFns<EventAdditionalMetadata> = {
  encode(message: EventAdditionalMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isStale !== undefined) {
      writer.uint32(8).bool(message.isStale);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventAdditionalMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventAdditionalMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isStale = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventAdditionalMetadata {
    return { isStale: isSet(object.isStale) ? globalThis.Boolean(object.isStale) : undefined };
  },

  toJSON(message: EventAdditionalMetadata): unknown {
    const obj: any = {};
    if (message.isStale !== undefined) {
      obj.isStale = message.isStale;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventAdditionalMetadata>, I>>(base?: I): EventAdditionalMetadata {
    return EventAdditionalMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventAdditionalMetadata>, I>>(object: I): EventAdditionalMetadata {
    const message = createBaseEventAdditionalMetadata();
    message.isStale = object.isStale ?? undefined;
    return message;
  },
};

function createBaseEventResponse(): EventResponse {
  return {
    eventResponseMessageKey: undefined,
    timestampMs: undefined,
    eventResponseMessage: undefined,
    unread: undefined,
  };
}

export const EventResponse: MessageFns<EventResponse> = {
  encode(message: EventResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventResponseMessageKey !== undefined) {
      MessageKey.encode(message.eventResponseMessageKey, writer.uint32(10).fork()).join();
    }
    if (message.timestampMs !== undefined) {
      writer.uint32(16).int64(message.timestampMs);
    }
    if (message.eventResponseMessage !== undefined) {
      Message_EventResponseMessage.encode(message.eventResponseMessage, writer.uint32(26).fork()).join();
    }
    if (message.unread !== undefined) {
      writer.uint32(32).bool(message.unread);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventResponseMessageKey = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.timestampMs = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.eventResponseMessage = Message_EventResponseMessage.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.unread = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventResponse {
    return {
      eventResponseMessageKey: isSet(object.eventResponseMessageKey)
        ? MessageKey.fromJSON(object.eventResponseMessageKey)
        : undefined,
      timestampMs: isSet(object.timestampMs) ? globalThis.Number(object.timestampMs) : undefined,
      eventResponseMessage: isSet(object.eventResponseMessage)
        ? Message_EventResponseMessage.fromJSON(object.eventResponseMessage)
        : undefined,
      unread: isSet(object.unread) ? globalThis.Boolean(object.unread) : undefined,
    };
  },

  toJSON(message: EventResponse): unknown {
    const obj: any = {};
    if (message.eventResponseMessageKey !== undefined) {
      obj.eventResponseMessageKey = MessageKey.toJSON(message.eventResponseMessageKey);
    }
    if (message.timestampMs !== undefined) {
      obj.timestampMs = Math.round(message.timestampMs);
    }
    if (message.eventResponseMessage !== undefined) {
      obj.eventResponseMessage = Message_EventResponseMessage.toJSON(message.eventResponseMessage);
    }
    if (message.unread !== undefined) {
      obj.unread = message.unread;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventResponse>, I>>(base?: I): EventResponse {
    return EventResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventResponse>, I>>(object: I): EventResponse {
    const message = createBaseEventResponse();
    message.eventResponseMessageKey =
      (object.eventResponseMessageKey !== undefined && object.eventResponseMessageKey !== null)
        ? MessageKey.fromPartial(object.eventResponseMessageKey)
        : undefined;
    message.timestampMs = object.timestampMs ?? undefined;
    message.eventResponseMessage = (object.eventResponseMessage !== undefined && object.eventResponseMessage !== null)
      ? Message_EventResponseMessage.fromPartial(object.eventResponseMessage)
      : undefined;
    message.unread = object.unread ?? undefined;
    return message;
  },
};

function createBaseExitCode(): ExitCode {
  return { code: undefined, text: undefined };
}

export const ExitCode: MessageFns<ExitCode> = {
  encode(message: ExitCode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== undefined) {
      writer.uint32(8).uint64(message.code);
    }
    if (message.text !== undefined) {
      writer.uint32(18).string(message.text);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExitCode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExitCode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExitCode {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : undefined,
      text: isSet(object.text) ? globalThis.String(object.text) : undefined,
    };
  },

  toJSON(message: ExitCode): unknown {
    const obj: any = {};
    if (message.code !== undefined) {
      obj.code = Math.round(message.code);
    }
    if (message.text !== undefined) {
      obj.text = message.text;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExitCode>, I>>(base?: I): ExitCode {
    return ExitCode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExitCode>, I>>(object: I): ExitCode {
    const message = createBaseExitCode();
    message.code = object.code ?? undefined;
    message.text = object.text ?? undefined;
    return message;
  },
};

function createBaseExternalBlobReference(): ExternalBlobReference {
  return {
    mediaKey: undefined,
    directPath: undefined,
    handle: undefined,
    fileSizeBytes: undefined,
    fileSha256: undefined,
    fileEncSha256: undefined,
  };
}

export const ExternalBlobReference: MessageFns<ExternalBlobReference> = {
  encode(message: ExternalBlobReference, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mediaKey !== undefined) {
      writer.uint32(10).bytes(message.mediaKey);
    }
    if (message.directPath !== undefined) {
      writer.uint32(18).string(message.directPath);
    }
    if (message.handle !== undefined) {
      writer.uint32(26).string(message.handle);
    }
    if (message.fileSizeBytes !== undefined) {
      writer.uint32(32).uint64(message.fileSizeBytes);
    }
    if (message.fileSha256 !== undefined) {
      writer.uint32(42).bytes(message.fileSha256);
    }
    if (message.fileEncSha256 !== undefined) {
      writer.uint32(50).bytes(message.fileEncSha256);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExternalBlobReference {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExternalBlobReference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mediaKey = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.directPath = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.handle = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.fileSizeBytes = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.fileSha256 = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.fileEncSha256 = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExternalBlobReference {
    return {
      mediaKey: isSet(object.mediaKey) ? bytesFromBase64(object.mediaKey) : undefined,
      directPath: isSet(object.directPath) ? globalThis.String(object.directPath) : undefined,
      handle: isSet(object.handle) ? globalThis.String(object.handle) : undefined,
      fileSizeBytes: isSet(object.fileSizeBytes) ? globalThis.Number(object.fileSizeBytes) : undefined,
      fileSha256: isSet(object.fileSha256) ? bytesFromBase64(object.fileSha256) : undefined,
      fileEncSha256: isSet(object.fileEncSha256) ? bytesFromBase64(object.fileEncSha256) : undefined,
    };
  },

  toJSON(message: ExternalBlobReference): unknown {
    const obj: any = {};
    if (message.mediaKey !== undefined) {
      obj.mediaKey = base64FromBytes(message.mediaKey);
    }
    if (message.directPath !== undefined) {
      obj.directPath = message.directPath;
    }
    if (message.handle !== undefined) {
      obj.handle = message.handle;
    }
    if (message.fileSizeBytes !== undefined) {
      obj.fileSizeBytes = Math.round(message.fileSizeBytes);
    }
    if (message.fileSha256 !== undefined) {
      obj.fileSha256 = base64FromBytes(message.fileSha256);
    }
    if (message.fileEncSha256 !== undefined) {
      obj.fileEncSha256 = base64FromBytes(message.fileEncSha256);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExternalBlobReference>, I>>(base?: I): ExternalBlobReference {
    return ExternalBlobReference.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExternalBlobReference>, I>>(object: I): ExternalBlobReference {
    const message = createBaseExternalBlobReference();
    message.mediaKey = object.mediaKey ?? undefined;
    message.directPath = object.directPath ?? undefined;
    message.handle = object.handle ?? undefined;
    message.fileSizeBytes = object.fileSizeBytes ?? undefined;
    message.fileSha256 = object.fileSha256 ?? undefined;
    message.fileEncSha256 = object.fileEncSha256 ?? undefined;
    return message;
  },
};

function createBaseField(): Field {
  return {
    minVersion: undefined,
    maxVersion: undefined,
    notReportableMinVersion: undefined,
    isMessage: undefined,
    subfield: {},
  };
}

export const Field: MessageFns<Field> = {
  encode(message: Field, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.minVersion !== undefined) {
      writer.uint32(8).uint32(message.minVersion);
    }
    if (message.maxVersion !== undefined) {
      writer.uint32(16).uint32(message.maxVersion);
    }
    if (message.notReportableMinVersion !== undefined) {
      writer.uint32(24).uint32(message.notReportableMinVersion);
    }
    if (message.isMessage !== undefined) {
      writer.uint32(32).bool(message.isMessage);
    }
    Object.entries(message.subfield).forEach(([key, value]) => {
      Field_SubfieldEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Field {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseField();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.minVersion = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.maxVersion = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.notReportableMinVersion = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isMessage = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          const entry5 = Field_SubfieldEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.subfield[entry5.key] = entry5.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Field {
    return {
      minVersion: isSet(object.minVersion) ? globalThis.Number(object.minVersion) : undefined,
      maxVersion: isSet(object.maxVersion) ? globalThis.Number(object.maxVersion) : undefined,
      notReportableMinVersion: isSet(object.notReportableMinVersion)
        ? globalThis.Number(object.notReportableMinVersion)
        : undefined,
      isMessage: isSet(object.isMessage) ? globalThis.Boolean(object.isMessage) : undefined,
      subfield: isObject(object.subfield)
        ? Object.entries(object.subfield).reduce<{ [key: number]: Field }>((acc, [key, value]) => {
          acc[globalThis.Number(key)] = Field.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: Field): unknown {
    const obj: any = {};
    if (message.minVersion !== undefined) {
      obj.minVersion = Math.round(message.minVersion);
    }
    if (message.maxVersion !== undefined) {
      obj.maxVersion = Math.round(message.maxVersion);
    }
    if (message.notReportableMinVersion !== undefined) {
      obj.notReportableMinVersion = Math.round(message.notReportableMinVersion);
    }
    if (message.isMessage !== undefined) {
      obj.isMessage = message.isMessage;
    }
    if (message.subfield) {
      const entries = Object.entries(message.subfield);
      if (entries.length > 0) {
        obj.subfield = {};
        entries.forEach(([k, v]) => {
          obj.subfield[k] = Field.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Field>, I>>(base?: I): Field {
    return Field.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Field>, I>>(object: I): Field {
    const message = createBaseField();
    message.minVersion = object.minVersion ?? undefined;
    message.maxVersion = object.maxVersion ?? undefined;
    message.notReportableMinVersion = object.notReportableMinVersion ?? undefined;
    message.isMessage = object.isMessage ?? undefined;
    message.subfield = Object.entries(object.subfield ?? {}).reduce<{ [key: number]: Field }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[globalThis.Number(key)] = Field.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseField_SubfieldEntry(): Field_SubfieldEntry {
  return { key: 0, value: undefined };
}

export const Field_SubfieldEntry: MessageFns<Field_SubfieldEntry> = {
  encode(message: Field_SubfieldEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).uint32(message.key);
    }
    if (message.value !== undefined) {
      Field.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Field_SubfieldEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseField_SubfieldEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Field.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Field_SubfieldEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? Field.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: Field_SubfieldEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = Field.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Field_SubfieldEntry>, I>>(base?: I): Field_SubfieldEntry {
    return Field_SubfieldEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Field_SubfieldEntry>, I>>(object: I): Field_SubfieldEntry {
    const message = createBaseField_SubfieldEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null) ? Field.fromPartial(object.value) : undefined;
    return message;
  },
};

function createBaseGlobalSettings(): GlobalSettings {
  return {
    lightThemeWallpaper: undefined,
    mediaVisibility: undefined,
    darkThemeWallpaper: undefined,
    autoDownloadWiFi: undefined,
    autoDownloadCellular: undefined,
    autoDownloadRoaming: undefined,
    showIndividualNotificationsPreview: undefined,
    showGroupNotificationsPreview: undefined,
    disappearingModeDuration: undefined,
    disappearingModeTimestamp: undefined,
    avatarUserSettings: undefined,
    fontSize: undefined,
    securityNotifications: undefined,
    autoUnarchiveChats: undefined,
    videoQualityMode: undefined,
    photoQualityMode: undefined,
    individualNotificationSettings: undefined,
    groupNotificationSettings: undefined,
    chatLockSettings: undefined,
    chatDbLidMigrationTimestamp: undefined,
  };
}

export const GlobalSettings: MessageFns<GlobalSettings> = {
  encode(message: GlobalSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lightThemeWallpaper !== undefined) {
      WallpaperSettings.encode(message.lightThemeWallpaper, writer.uint32(10).fork()).join();
    }
    if (message.mediaVisibility !== undefined) {
      writer.uint32(16).int32(message.mediaVisibility);
    }
    if (message.darkThemeWallpaper !== undefined) {
      WallpaperSettings.encode(message.darkThemeWallpaper, writer.uint32(26).fork()).join();
    }
    if (message.autoDownloadWiFi !== undefined) {
      AutoDownloadSettings.encode(message.autoDownloadWiFi, writer.uint32(34).fork()).join();
    }
    if (message.autoDownloadCellular !== undefined) {
      AutoDownloadSettings.encode(message.autoDownloadCellular, writer.uint32(42).fork()).join();
    }
    if (message.autoDownloadRoaming !== undefined) {
      AutoDownloadSettings.encode(message.autoDownloadRoaming, writer.uint32(50).fork()).join();
    }
    if (message.showIndividualNotificationsPreview !== undefined) {
      writer.uint32(56).bool(message.showIndividualNotificationsPreview);
    }
    if (message.showGroupNotificationsPreview !== undefined) {
      writer.uint32(64).bool(message.showGroupNotificationsPreview);
    }
    if (message.disappearingModeDuration !== undefined) {
      writer.uint32(72).int32(message.disappearingModeDuration);
    }
    if (message.disappearingModeTimestamp !== undefined) {
      writer.uint32(80).int64(message.disappearingModeTimestamp);
    }
    if (message.avatarUserSettings !== undefined) {
      AvatarUserSettings.encode(message.avatarUserSettings, writer.uint32(90).fork()).join();
    }
    if (message.fontSize !== undefined) {
      writer.uint32(96).int32(message.fontSize);
    }
    if (message.securityNotifications !== undefined) {
      writer.uint32(104).bool(message.securityNotifications);
    }
    if (message.autoUnarchiveChats !== undefined) {
      writer.uint32(112).bool(message.autoUnarchiveChats);
    }
    if (message.videoQualityMode !== undefined) {
      writer.uint32(120).int32(message.videoQualityMode);
    }
    if (message.photoQualityMode !== undefined) {
      writer.uint32(128).int32(message.photoQualityMode);
    }
    if (message.individualNotificationSettings !== undefined) {
      NotificationSettings.encode(message.individualNotificationSettings, writer.uint32(138).fork()).join();
    }
    if (message.groupNotificationSettings !== undefined) {
      NotificationSettings.encode(message.groupNotificationSettings, writer.uint32(146).fork()).join();
    }
    if (message.chatLockSettings !== undefined) {
      ChatLockSettings.encode(message.chatLockSettings, writer.uint32(154).fork()).join();
    }
    if (message.chatDbLidMigrationTimestamp !== undefined) {
      writer.uint32(160).int64(message.chatDbLidMigrationTimestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GlobalSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGlobalSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.lightThemeWallpaper = WallpaperSettings.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.mediaVisibility = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.darkThemeWallpaper = WallpaperSettings.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.autoDownloadWiFi = AutoDownloadSettings.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.autoDownloadCellular = AutoDownloadSettings.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.autoDownloadRoaming = AutoDownloadSettings.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.showIndividualNotificationsPreview = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.showGroupNotificationsPreview = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.disappearingModeDuration = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.disappearingModeTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.avatarUserSettings = AvatarUserSettings.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.fontSize = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.securityNotifications = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.autoUnarchiveChats = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.videoQualityMode = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.photoQualityMode = reader.int32();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.individualNotificationSettings = NotificationSettings.decode(reader, reader.uint32());
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.groupNotificationSettings = NotificationSettings.decode(reader, reader.uint32());
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.chatLockSettings = ChatLockSettings.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.chatDbLidMigrationTimestamp = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GlobalSettings {
    return {
      lightThemeWallpaper: isSet(object.lightThemeWallpaper)
        ? WallpaperSettings.fromJSON(object.lightThemeWallpaper)
        : undefined,
      mediaVisibility: isSet(object.mediaVisibility) ? mediaVisibilityFromJSON(object.mediaVisibility) : undefined,
      darkThemeWallpaper: isSet(object.darkThemeWallpaper)
        ? WallpaperSettings.fromJSON(object.darkThemeWallpaper)
        : undefined,
      autoDownloadWiFi: isSet(object.autoDownloadWiFi)
        ? AutoDownloadSettings.fromJSON(object.autoDownloadWiFi)
        : undefined,
      autoDownloadCellular: isSet(object.autoDownloadCellular)
        ? AutoDownloadSettings.fromJSON(object.autoDownloadCellular)
        : undefined,
      autoDownloadRoaming: isSet(object.autoDownloadRoaming)
        ? AutoDownloadSettings.fromJSON(object.autoDownloadRoaming)
        : undefined,
      showIndividualNotificationsPreview: isSet(object.showIndividualNotificationsPreview)
        ? globalThis.Boolean(object.showIndividualNotificationsPreview)
        : undefined,
      showGroupNotificationsPreview: isSet(object.showGroupNotificationsPreview)
        ? globalThis.Boolean(object.showGroupNotificationsPreview)
        : undefined,
      disappearingModeDuration: isSet(object.disappearingModeDuration)
        ? globalThis.Number(object.disappearingModeDuration)
        : undefined,
      disappearingModeTimestamp: isSet(object.disappearingModeTimestamp)
        ? globalThis.Number(object.disappearingModeTimestamp)
        : undefined,
      avatarUserSettings: isSet(object.avatarUserSettings)
        ? AvatarUserSettings.fromJSON(object.avatarUserSettings)
        : undefined,
      fontSize: isSet(object.fontSize) ? globalThis.Number(object.fontSize) : undefined,
      securityNotifications: isSet(object.securityNotifications)
        ? globalThis.Boolean(object.securityNotifications)
        : undefined,
      autoUnarchiveChats: isSet(object.autoUnarchiveChats) ? globalThis.Boolean(object.autoUnarchiveChats) : undefined,
      videoQualityMode: isSet(object.videoQualityMode) ? globalThis.Number(object.videoQualityMode) : undefined,
      photoQualityMode: isSet(object.photoQualityMode) ? globalThis.Number(object.photoQualityMode) : undefined,
      individualNotificationSettings: isSet(object.individualNotificationSettings)
        ? NotificationSettings.fromJSON(object.individualNotificationSettings)
        : undefined,
      groupNotificationSettings: isSet(object.groupNotificationSettings)
        ? NotificationSettings.fromJSON(object.groupNotificationSettings)
        : undefined,
      chatLockSettings: isSet(object.chatLockSettings) ? ChatLockSettings.fromJSON(object.chatLockSettings) : undefined,
      chatDbLidMigrationTimestamp: isSet(object.chatDbLidMigrationTimestamp)
        ? globalThis.Number(object.chatDbLidMigrationTimestamp)
        : undefined,
    };
  },

  toJSON(message: GlobalSettings): unknown {
    const obj: any = {};
    if (message.lightThemeWallpaper !== undefined) {
      obj.lightThemeWallpaper = WallpaperSettings.toJSON(message.lightThemeWallpaper);
    }
    if (message.mediaVisibility !== undefined) {
      obj.mediaVisibility = mediaVisibilityToJSON(message.mediaVisibility);
    }
    if (message.darkThemeWallpaper !== undefined) {
      obj.darkThemeWallpaper = WallpaperSettings.toJSON(message.darkThemeWallpaper);
    }
    if (message.autoDownloadWiFi !== undefined) {
      obj.autoDownloadWiFi = AutoDownloadSettings.toJSON(message.autoDownloadWiFi);
    }
    if (message.autoDownloadCellular !== undefined) {
      obj.autoDownloadCellular = AutoDownloadSettings.toJSON(message.autoDownloadCellular);
    }
    if (message.autoDownloadRoaming !== undefined) {
      obj.autoDownloadRoaming = AutoDownloadSettings.toJSON(message.autoDownloadRoaming);
    }
    if (message.showIndividualNotificationsPreview !== undefined) {
      obj.showIndividualNotificationsPreview = message.showIndividualNotificationsPreview;
    }
    if (message.showGroupNotificationsPreview !== undefined) {
      obj.showGroupNotificationsPreview = message.showGroupNotificationsPreview;
    }
    if (message.disappearingModeDuration !== undefined) {
      obj.disappearingModeDuration = Math.round(message.disappearingModeDuration);
    }
    if (message.disappearingModeTimestamp !== undefined) {
      obj.disappearingModeTimestamp = Math.round(message.disappearingModeTimestamp);
    }
    if (message.avatarUserSettings !== undefined) {
      obj.avatarUserSettings = AvatarUserSettings.toJSON(message.avatarUserSettings);
    }
    if (message.fontSize !== undefined) {
      obj.fontSize = Math.round(message.fontSize);
    }
    if (message.securityNotifications !== undefined) {
      obj.securityNotifications = message.securityNotifications;
    }
    if (message.autoUnarchiveChats !== undefined) {
      obj.autoUnarchiveChats = message.autoUnarchiveChats;
    }
    if (message.videoQualityMode !== undefined) {
      obj.videoQualityMode = Math.round(message.videoQualityMode);
    }
    if (message.photoQualityMode !== undefined) {
      obj.photoQualityMode = Math.round(message.photoQualityMode);
    }
    if (message.individualNotificationSettings !== undefined) {
      obj.individualNotificationSettings = NotificationSettings.toJSON(message.individualNotificationSettings);
    }
    if (message.groupNotificationSettings !== undefined) {
      obj.groupNotificationSettings = NotificationSettings.toJSON(message.groupNotificationSettings);
    }
    if (message.chatLockSettings !== undefined) {
      obj.chatLockSettings = ChatLockSettings.toJSON(message.chatLockSettings);
    }
    if (message.chatDbLidMigrationTimestamp !== undefined) {
      obj.chatDbLidMigrationTimestamp = Math.round(message.chatDbLidMigrationTimestamp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GlobalSettings>, I>>(base?: I): GlobalSettings {
    return GlobalSettings.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GlobalSettings>, I>>(object: I): GlobalSettings {
    const message = createBaseGlobalSettings();
    message.lightThemeWallpaper = (object.lightThemeWallpaper !== undefined && object.lightThemeWallpaper !== null)
      ? WallpaperSettings.fromPartial(object.lightThemeWallpaper)
      : undefined;
    message.mediaVisibility = object.mediaVisibility ?? undefined;
    message.darkThemeWallpaper = (object.darkThemeWallpaper !== undefined && object.darkThemeWallpaper !== null)
      ? WallpaperSettings.fromPartial(object.darkThemeWallpaper)
      : undefined;
    message.autoDownloadWiFi = (object.autoDownloadWiFi !== undefined && object.autoDownloadWiFi !== null)
      ? AutoDownloadSettings.fromPartial(object.autoDownloadWiFi)
      : undefined;
    message.autoDownloadCellular = (object.autoDownloadCellular !== undefined && object.autoDownloadCellular !== null)
      ? AutoDownloadSettings.fromPartial(object.autoDownloadCellular)
      : undefined;
    message.autoDownloadRoaming = (object.autoDownloadRoaming !== undefined && object.autoDownloadRoaming !== null)
      ? AutoDownloadSettings.fromPartial(object.autoDownloadRoaming)
      : undefined;
    message.showIndividualNotificationsPreview = object.showIndividualNotificationsPreview ?? undefined;
    message.showGroupNotificationsPreview = object.showGroupNotificationsPreview ?? undefined;
    message.disappearingModeDuration = object.disappearingModeDuration ?? undefined;
    message.disappearingModeTimestamp = object.disappearingModeTimestamp ?? undefined;
    message.avatarUserSettings = (object.avatarUserSettings !== undefined && object.avatarUserSettings !== null)
      ? AvatarUserSettings.fromPartial(object.avatarUserSettings)
      : undefined;
    message.fontSize = object.fontSize ?? undefined;
    message.securityNotifications = object.securityNotifications ?? undefined;
    message.autoUnarchiveChats = object.autoUnarchiveChats ?? undefined;
    message.videoQualityMode = object.videoQualityMode ?? undefined;
    message.photoQualityMode = object.photoQualityMode ?? undefined;
    message.individualNotificationSettings =
      (object.individualNotificationSettings !== undefined && object.individualNotificationSettings !== null)
        ? NotificationSettings.fromPartial(object.individualNotificationSettings)
        : undefined;
    message.groupNotificationSettings =
      (object.groupNotificationSettings !== undefined && object.groupNotificationSettings !== null)
        ? NotificationSettings.fromPartial(object.groupNotificationSettings)
        : undefined;
    message.chatLockSettings = (object.chatLockSettings !== undefined && object.chatLockSettings !== null)
      ? ChatLockSettings.fromPartial(object.chatLockSettings)
      : undefined;
    message.chatDbLidMigrationTimestamp = object.chatDbLidMigrationTimestamp ?? undefined;
    return message;
  },
};

function createBaseGroupMention(): GroupMention {
  return { groupJid: undefined, groupSubject: undefined };
}

export const GroupMention: MessageFns<GroupMention> = {
  encode(message: GroupMention, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.groupJid !== undefined) {
      writer.uint32(10).string(message.groupJid);
    }
    if (message.groupSubject !== undefined) {
      writer.uint32(18).string(message.groupSubject);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GroupMention {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroupMention();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.groupJid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.groupSubject = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GroupMention {
    return {
      groupJid: isSet(object.groupJid) ? globalThis.String(object.groupJid) : undefined,
      groupSubject: isSet(object.groupSubject) ? globalThis.String(object.groupSubject) : undefined,
    };
  },

  toJSON(message: GroupMention): unknown {
    const obj: any = {};
    if (message.groupJid !== undefined) {
      obj.groupJid = message.groupJid;
    }
    if (message.groupSubject !== undefined) {
      obj.groupSubject = message.groupSubject;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GroupMention>, I>>(base?: I): GroupMention {
    return GroupMention.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GroupMention>, I>>(object: I): GroupMention {
    const message = createBaseGroupMention();
    message.groupJid = object.groupJid ?? undefined;
    message.groupSubject = object.groupSubject ?? undefined;
    return message;
  },
};

function createBaseGroupParticipant(): GroupParticipant {
  return { userJid: "", rank: undefined };
}

export const GroupParticipant: MessageFns<GroupParticipant> = {
  encode(message: GroupParticipant, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userJid !== "") {
      writer.uint32(10).string(message.userJid);
    }
    if (message.rank !== undefined) {
      writer.uint32(16).int32(message.rank);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GroupParticipant {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroupParticipant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userJid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.rank = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GroupParticipant {
    return {
      userJid: isSet(object.userJid) ? globalThis.String(object.userJid) : "",
      rank: isSet(object.rank) ? groupParticipant_RankFromJSON(object.rank) : undefined,
    };
  },

  toJSON(message: GroupParticipant): unknown {
    const obj: any = {};
    if (message.userJid !== "") {
      obj.userJid = message.userJid;
    }
    if (message.rank !== undefined) {
      obj.rank = groupParticipant_RankToJSON(message.rank);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GroupParticipant>, I>>(base?: I): GroupParticipant {
    return GroupParticipant.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GroupParticipant>, I>>(object: I): GroupParticipant {
    const message = createBaseGroupParticipant();
    message.userJid = object.userJid ?? "";
    message.rank = object.rank ?? undefined;
    return message;
  },
};

function createBaseHandshakeMessage(): HandshakeMessage {
  return { clientHello: undefined, serverHello: undefined, clientFinish: undefined };
}

export const HandshakeMessage: MessageFns<HandshakeMessage> = {
  encode(message: HandshakeMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientHello !== undefined) {
      HandshakeMessage_ClientHello.encode(message.clientHello, writer.uint32(18).fork()).join();
    }
    if (message.serverHello !== undefined) {
      HandshakeMessage_ServerHello.encode(message.serverHello, writer.uint32(26).fork()).join();
    }
    if (message.clientFinish !== undefined) {
      HandshakeMessage_ClientFinish.encode(message.clientFinish, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HandshakeMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHandshakeMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.clientHello = HandshakeMessage_ClientHello.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.serverHello = HandshakeMessage_ServerHello.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.clientFinish = HandshakeMessage_ClientFinish.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HandshakeMessage {
    return {
      clientHello: isSet(object.clientHello) ? HandshakeMessage_ClientHello.fromJSON(object.clientHello) : undefined,
      serverHello: isSet(object.serverHello) ? HandshakeMessage_ServerHello.fromJSON(object.serverHello) : undefined,
      clientFinish: isSet(object.clientFinish)
        ? HandshakeMessage_ClientFinish.fromJSON(object.clientFinish)
        : undefined,
    };
  },

  toJSON(message: HandshakeMessage): unknown {
    const obj: any = {};
    if (message.clientHello !== undefined) {
      obj.clientHello = HandshakeMessage_ClientHello.toJSON(message.clientHello);
    }
    if (message.serverHello !== undefined) {
      obj.serverHello = HandshakeMessage_ServerHello.toJSON(message.serverHello);
    }
    if (message.clientFinish !== undefined) {
      obj.clientFinish = HandshakeMessage_ClientFinish.toJSON(message.clientFinish);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HandshakeMessage>, I>>(base?: I): HandshakeMessage {
    return HandshakeMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HandshakeMessage>, I>>(object: I): HandshakeMessage {
    const message = createBaseHandshakeMessage();
    message.clientHello = (object.clientHello !== undefined && object.clientHello !== null)
      ? HandshakeMessage_ClientHello.fromPartial(object.clientHello)
      : undefined;
    message.serverHello = (object.serverHello !== undefined && object.serverHello !== null)
      ? HandshakeMessage_ServerHello.fromPartial(object.serverHello)
      : undefined;
    message.clientFinish = (object.clientFinish !== undefined && object.clientFinish !== null)
      ? HandshakeMessage_ClientFinish.fromPartial(object.clientFinish)
      : undefined;
    return message;
  },
};

function createBaseHandshakeMessage_ClientFinish(): HandshakeMessage_ClientFinish {
  return { static: undefined, payload: undefined };
}

export const HandshakeMessage_ClientFinish: MessageFns<HandshakeMessage_ClientFinish> = {
  encode(message: HandshakeMessage_ClientFinish, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.static !== undefined) {
      writer.uint32(10).bytes(message.static);
    }
    if (message.payload !== undefined) {
      writer.uint32(18).bytes(message.payload);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HandshakeMessage_ClientFinish {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHandshakeMessage_ClientFinish();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.static = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.payload = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HandshakeMessage_ClientFinish {
    return {
      static: isSet(object.static) ? bytesFromBase64(object.static) : undefined,
      payload: isSet(object.payload) ? bytesFromBase64(object.payload) : undefined,
    };
  },

  toJSON(message: HandshakeMessage_ClientFinish): unknown {
    const obj: any = {};
    if (message.static !== undefined) {
      obj.static = base64FromBytes(message.static);
    }
    if (message.payload !== undefined) {
      obj.payload = base64FromBytes(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HandshakeMessage_ClientFinish>, I>>(base?: I): HandshakeMessage_ClientFinish {
    return HandshakeMessage_ClientFinish.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HandshakeMessage_ClientFinish>, I>>(
    object: I,
  ): HandshakeMessage_ClientFinish {
    const message = createBaseHandshakeMessage_ClientFinish();
    message.static = object.static ?? undefined;
    message.payload = object.payload ?? undefined;
    return message;
  },
};

function createBaseHandshakeMessage_ClientHello(): HandshakeMessage_ClientHello {
  return { ephemeral: undefined, static: undefined, payload: undefined };
}

export const HandshakeMessage_ClientHello: MessageFns<HandshakeMessage_ClientHello> = {
  encode(message: HandshakeMessage_ClientHello, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ephemeral !== undefined) {
      writer.uint32(10).bytes(message.ephemeral);
    }
    if (message.static !== undefined) {
      writer.uint32(18).bytes(message.static);
    }
    if (message.payload !== undefined) {
      writer.uint32(26).bytes(message.payload);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HandshakeMessage_ClientHello {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHandshakeMessage_ClientHello();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ephemeral = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.static = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.payload = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HandshakeMessage_ClientHello {
    return {
      ephemeral: isSet(object.ephemeral) ? bytesFromBase64(object.ephemeral) : undefined,
      static: isSet(object.static) ? bytesFromBase64(object.static) : undefined,
      payload: isSet(object.payload) ? bytesFromBase64(object.payload) : undefined,
    };
  },

  toJSON(message: HandshakeMessage_ClientHello): unknown {
    const obj: any = {};
    if (message.ephemeral !== undefined) {
      obj.ephemeral = base64FromBytes(message.ephemeral);
    }
    if (message.static !== undefined) {
      obj.static = base64FromBytes(message.static);
    }
    if (message.payload !== undefined) {
      obj.payload = base64FromBytes(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HandshakeMessage_ClientHello>, I>>(base?: I): HandshakeMessage_ClientHello {
    return HandshakeMessage_ClientHello.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HandshakeMessage_ClientHello>, I>>(object: I): HandshakeMessage_ClientHello {
    const message = createBaseHandshakeMessage_ClientHello();
    message.ephemeral = object.ephemeral ?? undefined;
    message.static = object.static ?? undefined;
    message.payload = object.payload ?? undefined;
    return message;
  },
};

function createBaseHandshakeMessage_ServerHello(): HandshakeMessage_ServerHello {
  return { ephemeral: undefined, static: undefined, payload: undefined };
}

export const HandshakeMessage_ServerHello: MessageFns<HandshakeMessage_ServerHello> = {
  encode(message: HandshakeMessage_ServerHello, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ephemeral !== undefined) {
      writer.uint32(10).bytes(message.ephemeral);
    }
    if (message.static !== undefined) {
      writer.uint32(18).bytes(message.static);
    }
    if (message.payload !== undefined) {
      writer.uint32(26).bytes(message.payload);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HandshakeMessage_ServerHello {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHandshakeMessage_ServerHello();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ephemeral = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.static = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.payload = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HandshakeMessage_ServerHello {
    return {
      ephemeral: isSet(object.ephemeral) ? bytesFromBase64(object.ephemeral) : undefined,
      static: isSet(object.static) ? bytesFromBase64(object.static) : undefined,
      payload: isSet(object.payload) ? bytesFromBase64(object.payload) : undefined,
    };
  },

  toJSON(message: HandshakeMessage_ServerHello): unknown {
    const obj: any = {};
    if (message.ephemeral !== undefined) {
      obj.ephemeral = base64FromBytes(message.ephemeral);
    }
    if (message.static !== undefined) {
      obj.static = base64FromBytes(message.static);
    }
    if (message.payload !== undefined) {
      obj.payload = base64FromBytes(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HandshakeMessage_ServerHello>, I>>(base?: I): HandshakeMessage_ServerHello {
    return HandshakeMessage_ServerHello.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HandshakeMessage_ServerHello>, I>>(object: I): HandshakeMessage_ServerHello {
    const message = createBaseHandshakeMessage_ServerHello();
    message.ephemeral = object.ephemeral ?? undefined;
    message.static = object.static ?? undefined;
    message.payload = object.payload ?? undefined;
    return message;
  },
};

function createBaseHistorySync(): HistorySync {
  return {
    syncType: 0,
    conversations: [],
    statusV3Messages: [],
    chunkOrder: undefined,
    progress: undefined,
    pushnames: [],
    globalSettings: undefined,
    threadIdUserSecret: undefined,
    threadDsTimeframeOffset: undefined,
    recentStickers: [],
    pastParticipants: [],
    callLogRecords: [],
    aiWaitListState: undefined,
    phoneNumberToLidMappings: [],
    companionMetaNonce: undefined,
    shareableChatIdentifierEncryptionKey: undefined,
    accounts: [],
  };
}

export const HistorySync: MessageFns<HistorySync> = {
  encode(message: HistorySync, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.syncType !== 0) {
      writer.uint32(8).int32(message.syncType);
    }
    for (const v of message.conversations) {
      Conversation.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.statusV3Messages) {
      WebMessageInfo.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.chunkOrder !== undefined) {
      writer.uint32(40).uint32(message.chunkOrder);
    }
    if (message.progress !== undefined) {
      writer.uint32(48).uint32(message.progress);
    }
    for (const v of message.pushnames) {
      Pushname.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.globalSettings !== undefined) {
      GlobalSettings.encode(message.globalSettings, writer.uint32(66).fork()).join();
    }
    if (message.threadIdUserSecret !== undefined) {
      writer.uint32(74).bytes(message.threadIdUserSecret);
    }
    if (message.threadDsTimeframeOffset !== undefined) {
      writer.uint32(80).uint32(message.threadDsTimeframeOffset);
    }
    for (const v of message.recentStickers) {
      StickerMetadata.encode(v!, writer.uint32(90).fork()).join();
    }
    for (const v of message.pastParticipants) {
      PastParticipants.encode(v!, writer.uint32(98).fork()).join();
    }
    for (const v of message.callLogRecords) {
      CallLogRecord.encode(v!, writer.uint32(106).fork()).join();
    }
    if (message.aiWaitListState !== undefined) {
      writer.uint32(112).int32(message.aiWaitListState);
    }
    for (const v of message.phoneNumberToLidMappings) {
      PhoneNumberToLIDMapping.encode(v!, writer.uint32(122).fork()).join();
    }
    if (message.companionMetaNonce !== undefined) {
      writer.uint32(130).string(message.companionMetaNonce);
    }
    if (message.shareableChatIdentifierEncryptionKey !== undefined) {
      writer.uint32(138).bytes(message.shareableChatIdentifierEncryptionKey);
    }
    for (const v of message.accounts) {
      Account.encode(v!, writer.uint32(146).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HistorySync {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHistorySync();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.syncType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.conversations.push(Conversation.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.statusV3Messages.push(WebMessageInfo.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.chunkOrder = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.progress = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.pushnames.push(Pushname.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.globalSettings = GlobalSettings.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.threadIdUserSecret = reader.bytes();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.threadDsTimeframeOffset = reader.uint32();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.recentStickers.push(StickerMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.pastParticipants.push(PastParticipants.decode(reader, reader.uint32()));
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.callLogRecords.push(CallLogRecord.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.aiWaitListState = reader.int32() as any;
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.phoneNumberToLidMappings.push(PhoneNumberToLIDMapping.decode(reader, reader.uint32()));
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.companionMetaNonce = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.shareableChatIdentifierEncryptionKey = reader.bytes();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.accounts.push(Account.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HistorySync {
    return {
      syncType: isSet(object.syncType) ? historySync_HistorySyncTypeFromJSON(object.syncType) : 0,
      conversations: globalThis.Array.isArray(object?.conversations)
        ? object.conversations.map((e: any) => Conversation.fromJSON(e))
        : [],
      statusV3Messages: globalThis.Array.isArray(object?.statusV3Messages)
        ? object.statusV3Messages.map((e: any) => WebMessageInfo.fromJSON(e))
        : [],
      chunkOrder: isSet(object.chunkOrder) ? globalThis.Number(object.chunkOrder) : undefined,
      progress: isSet(object.progress) ? globalThis.Number(object.progress) : undefined,
      pushnames: globalThis.Array.isArray(object?.pushnames)
        ? object.pushnames.map((e: any) => Pushname.fromJSON(e))
        : [],
      globalSettings: isSet(object.globalSettings) ? GlobalSettings.fromJSON(object.globalSettings) : undefined,
      threadIdUserSecret: isSet(object.threadIdUserSecret) ? bytesFromBase64(object.threadIdUserSecret) : undefined,
      threadDsTimeframeOffset: isSet(object.threadDsTimeframeOffset)
        ? globalThis.Number(object.threadDsTimeframeOffset)
        : undefined,
      recentStickers: globalThis.Array.isArray(object?.recentStickers)
        ? object.recentStickers.map((e: any) => StickerMetadata.fromJSON(e))
        : [],
      pastParticipants: globalThis.Array.isArray(object?.pastParticipants)
        ? object.pastParticipants.map((e: any) => PastParticipants.fromJSON(e))
        : [],
      callLogRecords: globalThis.Array.isArray(object?.callLogRecords)
        ? object.callLogRecords.map((e: any) => CallLogRecord.fromJSON(e))
        : [],
      aiWaitListState: isSet(object.aiWaitListState)
        ? historySync_BotAIWaitListStateFromJSON(object.aiWaitListState)
        : undefined,
      phoneNumberToLidMappings: globalThis.Array.isArray(object?.phoneNumberToLidMappings)
        ? object.phoneNumberToLidMappings.map((e: any) => PhoneNumberToLIDMapping.fromJSON(e))
        : [],
      companionMetaNonce: isSet(object.companionMetaNonce) ? globalThis.String(object.companionMetaNonce) : undefined,
      shareableChatIdentifierEncryptionKey: isSet(object.shareableChatIdentifierEncryptionKey)
        ? bytesFromBase64(object.shareableChatIdentifierEncryptionKey)
        : undefined,
      accounts: globalThis.Array.isArray(object?.accounts) ? object.accounts.map((e: any) => Account.fromJSON(e)) : [],
    };
  },

  toJSON(message: HistorySync): unknown {
    const obj: any = {};
    if (message.syncType !== 0) {
      obj.syncType = historySync_HistorySyncTypeToJSON(message.syncType);
    }
    if (message.conversations?.length) {
      obj.conversations = message.conversations.map((e) => Conversation.toJSON(e));
    }
    if (message.statusV3Messages?.length) {
      obj.statusV3Messages = message.statusV3Messages.map((e) => WebMessageInfo.toJSON(e));
    }
    if (message.chunkOrder !== undefined) {
      obj.chunkOrder = Math.round(message.chunkOrder);
    }
    if (message.progress !== undefined) {
      obj.progress = Math.round(message.progress);
    }
    if (message.pushnames?.length) {
      obj.pushnames = message.pushnames.map((e) => Pushname.toJSON(e));
    }
    if (message.globalSettings !== undefined) {
      obj.globalSettings = GlobalSettings.toJSON(message.globalSettings);
    }
    if (message.threadIdUserSecret !== undefined) {
      obj.threadIdUserSecret = base64FromBytes(message.threadIdUserSecret);
    }
    if (message.threadDsTimeframeOffset !== undefined) {
      obj.threadDsTimeframeOffset = Math.round(message.threadDsTimeframeOffset);
    }
    if (message.recentStickers?.length) {
      obj.recentStickers = message.recentStickers.map((e) => StickerMetadata.toJSON(e));
    }
    if (message.pastParticipants?.length) {
      obj.pastParticipants = message.pastParticipants.map((e) => PastParticipants.toJSON(e));
    }
    if (message.callLogRecords?.length) {
      obj.callLogRecords = message.callLogRecords.map((e) => CallLogRecord.toJSON(e));
    }
    if (message.aiWaitListState !== undefined) {
      obj.aiWaitListState = historySync_BotAIWaitListStateToJSON(message.aiWaitListState);
    }
    if (message.phoneNumberToLidMappings?.length) {
      obj.phoneNumberToLidMappings = message.phoneNumberToLidMappings.map((e) => PhoneNumberToLIDMapping.toJSON(e));
    }
    if (message.companionMetaNonce !== undefined) {
      obj.companionMetaNonce = message.companionMetaNonce;
    }
    if (message.shareableChatIdentifierEncryptionKey !== undefined) {
      obj.shareableChatIdentifierEncryptionKey = base64FromBytes(message.shareableChatIdentifierEncryptionKey);
    }
    if (message.accounts?.length) {
      obj.accounts = message.accounts.map((e) => Account.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HistorySync>, I>>(base?: I): HistorySync {
    return HistorySync.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HistorySync>, I>>(object: I): HistorySync {
    const message = createBaseHistorySync();
    message.syncType = object.syncType ?? 0;
    message.conversations = object.conversations?.map((e) => Conversation.fromPartial(e)) || [];
    message.statusV3Messages = object.statusV3Messages?.map((e) => WebMessageInfo.fromPartial(e)) || [];
    message.chunkOrder = object.chunkOrder ?? undefined;
    message.progress = object.progress ?? undefined;
    message.pushnames = object.pushnames?.map((e) => Pushname.fromPartial(e)) || [];
    message.globalSettings = (object.globalSettings !== undefined && object.globalSettings !== null)
      ? GlobalSettings.fromPartial(object.globalSettings)
      : undefined;
    message.threadIdUserSecret = object.threadIdUserSecret ?? undefined;
    message.threadDsTimeframeOffset = object.threadDsTimeframeOffset ?? undefined;
    message.recentStickers = object.recentStickers?.map((e) => StickerMetadata.fromPartial(e)) || [];
    message.pastParticipants = object.pastParticipants?.map((e) => PastParticipants.fromPartial(e)) || [];
    message.callLogRecords = object.callLogRecords?.map((e) => CallLogRecord.fromPartial(e)) || [];
    message.aiWaitListState = object.aiWaitListState ?? undefined;
    message.phoneNumberToLidMappings =
      object.phoneNumberToLidMappings?.map((e) => PhoneNumberToLIDMapping.fromPartial(e)) || [];
    message.companionMetaNonce = object.companionMetaNonce ?? undefined;
    message.shareableChatIdentifierEncryptionKey = object.shareableChatIdentifierEncryptionKey ?? undefined;
    message.accounts = object.accounts?.map((e) => Account.fromPartial(e)) || [];
    return message;
  },
};

function createBaseHistorySyncMsg(): HistorySyncMsg {
  return { message: undefined, msgOrderId: undefined };
}

export const HistorySyncMsg: MessageFns<HistorySyncMsg> = {
  encode(message: HistorySyncMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== undefined) {
      WebMessageInfo.encode(message.message, writer.uint32(10).fork()).join();
    }
    if (message.msgOrderId !== undefined) {
      writer.uint32(16).uint64(message.msgOrderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HistorySyncMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHistorySyncMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = WebMessageInfo.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.msgOrderId = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HistorySyncMsg {
    return {
      message: isSet(object.message) ? WebMessageInfo.fromJSON(object.message) : undefined,
      msgOrderId: isSet(object.msgOrderId) ? globalThis.Number(object.msgOrderId) : undefined,
    };
  },

  toJSON(message: HistorySyncMsg): unknown {
    const obj: any = {};
    if (message.message !== undefined) {
      obj.message = WebMessageInfo.toJSON(message.message);
    }
    if (message.msgOrderId !== undefined) {
      obj.msgOrderId = Math.round(message.msgOrderId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HistorySyncMsg>, I>>(base?: I): HistorySyncMsg {
    return HistorySyncMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HistorySyncMsg>, I>>(object: I): HistorySyncMsg {
    const message = createBaseHistorySyncMsg();
    message.message = (object.message !== undefined && object.message !== null)
      ? WebMessageInfo.fromPartial(object.message)
      : undefined;
    message.msgOrderId = object.msgOrderId ?? undefined;
    return message;
  },
};

function createBaseHydratedTemplateButton(): HydratedTemplateButton {
  return { index: undefined, quickReplyButton: undefined, urlButton: undefined, callButton: undefined };
}

export const HydratedTemplateButton: MessageFns<HydratedTemplateButton> = {
  encode(message: HydratedTemplateButton, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== undefined) {
      writer.uint32(32).uint32(message.index);
    }
    if (message.quickReplyButton !== undefined) {
      HydratedTemplateButton_HydratedQuickReplyButton.encode(message.quickReplyButton, writer.uint32(10).fork()).join();
    }
    if (message.urlButton !== undefined) {
      HydratedTemplateButton_HydratedURLButton.encode(message.urlButton, writer.uint32(18).fork()).join();
    }
    if (message.callButton !== undefined) {
      HydratedTemplateButton_HydratedCallButton.encode(message.callButton, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HydratedTemplateButton {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHydratedTemplateButton();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.index = reader.uint32();
          continue;
        }
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.quickReplyButton = HydratedTemplateButton_HydratedQuickReplyButton.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.urlButton = HydratedTemplateButton_HydratedURLButton.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.callButton = HydratedTemplateButton_HydratedCallButton.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HydratedTemplateButton {
    return {
      index: isSet(object.index) ? globalThis.Number(object.index) : undefined,
      quickReplyButton: isSet(object.quickReplyButton)
        ? HydratedTemplateButton_HydratedQuickReplyButton.fromJSON(object.quickReplyButton)
        : undefined,
      urlButton: isSet(object.urlButton)
        ? HydratedTemplateButton_HydratedURLButton.fromJSON(object.urlButton)
        : undefined,
      callButton: isSet(object.callButton)
        ? HydratedTemplateButton_HydratedCallButton.fromJSON(object.callButton)
        : undefined,
    };
  },

  toJSON(message: HydratedTemplateButton): unknown {
    const obj: any = {};
    if (message.index !== undefined) {
      obj.index = Math.round(message.index);
    }
    if (message.quickReplyButton !== undefined) {
      obj.quickReplyButton = HydratedTemplateButton_HydratedQuickReplyButton.toJSON(message.quickReplyButton);
    }
    if (message.urlButton !== undefined) {
      obj.urlButton = HydratedTemplateButton_HydratedURLButton.toJSON(message.urlButton);
    }
    if (message.callButton !== undefined) {
      obj.callButton = HydratedTemplateButton_HydratedCallButton.toJSON(message.callButton);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HydratedTemplateButton>, I>>(base?: I): HydratedTemplateButton {
    return HydratedTemplateButton.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HydratedTemplateButton>, I>>(object: I): HydratedTemplateButton {
    const message = createBaseHydratedTemplateButton();
    message.index = object.index ?? undefined;
    message.quickReplyButton = (object.quickReplyButton !== undefined && object.quickReplyButton !== null)
      ? HydratedTemplateButton_HydratedQuickReplyButton.fromPartial(object.quickReplyButton)
      : undefined;
    message.urlButton = (object.urlButton !== undefined && object.urlButton !== null)
      ? HydratedTemplateButton_HydratedURLButton.fromPartial(object.urlButton)
      : undefined;
    message.callButton = (object.callButton !== undefined && object.callButton !== null)
      ? HydratedTemplateButton_HydratedCallButton.fromPartial(object.callButton)
      : undefined;
    return message;
  },
};

function createBaseHydratedTemplateButton_HydratedCallButton(): HydratedTemplateButton_HydratedCallButton {
  return { displayText: undefined, phoneNumber: undefined };
}

export const HydratedTemplateButton_HydratedCallButton: MessageFns<HydratedTemplateButton_HydratedCallButton> = {
  encode(message: HydratedTemplateButton_HydratedCallButton, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayText !== undefined) {
      writer.uint32(10).string(message.displayText);
    }
    if (message.phoneNumber !== undefined) {
      writer.uint32(18).string(message.phoneNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HydratedTemplateButton_HydratedCallButton {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHydratedTemplateButton_HydratedCallButton();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.displayText = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HydratedTemplateButton_HydratedCallButton {
    return {
      displayText: isSet(object.displayText) ? globalThis.String(object.displayText) : undefined,
      phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : undefined,
    };
  },

  toJSON(message: HydratedTemplateButton_HydratedCallButton): unknown {
    const obj: any = {};
    if (message.displayText !== undefined) {
      obj.displayText = message.displayText;
    }
    if (message.phoneNumber !== undefined) {
      obj.phoneNumber = message.phoneNumber;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HydratedTemplateButton_HydratedCallButton>, I>>(
    base?: I,
  ): HydratedTemplateButton_HydratedCallButton {
    return HydratedTemplateButton_HydratedCallButton.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HydratedTemplateButton_HydratedCallButton>, I>>(
    object: I,
  ): HydratedTemplateButton_HydratedCallButton {
    const message = createBaseHydratedTemplateButton_HydratedCallButton();
    message.displayText = object.displayText ?? undefined;
    message.phoneNumber = object.phoneNumber ?? undefined;
    return message;
  },
};

function createBaseHydratedTemplateButton_HydratedQuickReplyButton(): HydratedTemplateButton_HydratedQuickReplyButton {
  return { displayText: undefined, id: undefined };
}

export const HydratedTemplateButton_HydratedQuickReplyButton: MessageFns<
  HydratedTemplateButton_HydratedQuickReplyButton
> = {
  encode(
    message: HydratedTemplateButton_HydratedQuickReplyButton,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.displayText !== undefined) {
      writer.uint32(10).string(message.displayText);
    }
    if (message.id !== undefined) {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HydratedTemplateButton_HydratedQuickReplyButton {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHydratedTemplateButton_HydratedQuickReplyButton();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.displayText = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HydratedTemplateButton_HydratedQuickReplyButton {
    return {
      displayText: isSet(object.displayText) ? globalThis.String(object.displayText) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
    };
  },

  toJSON(message: HydratedTemplateButton_HydratedQuickReplyButton): unknown {
    const obj: any = {};
    if (message.displayText !== undefined) {
      obj.displayText = message.displayText;
    }
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HydratedTemplateButton_HydratedQuickReplyButton>, I>>(
    base?: I,
  ): HydratedTemplateButton_HydratedQuickReplyButton {
    return HydratedTemplateButton_HydratedQuickReplyButton.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HydratedTemplateButton_HydratedQuickReplyButton>, I>>(
    object: I,
  ): HydratedTemplateButton_HydratedQuickReplyButton {
    const message = createBaseHydratedTemplateButton_HydratedQuickReplyButton();
    message.displayText = object.displayText ?? undefined;
    message.id = object.id ?? undefined;
    return message;
  },
};

function createBaseHydratedTemplateButton_HydratedURLButton(): HydratedTemplateButton_HydratedURLButton {
  return { displayText: undefined, url: undefined, consentedUsersUrl: undefined, webviewPresentation: undefined };
}

export const HydratedTemplateButton_HydratedURLButton: MessageFns<HydratedTemplateButton_HydratedURLButton> = {
  encode(message: HydratedTemplateButton_HydratedURLButton, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayText !== undefined) {
      writer.uint32(10).string(message.displayText);
    }
    if (message.url !== undefined) {
      writer.uint32(18).string(message.url);
    }
    if (message.consentedUsersUrl !== undefined) {
      writer.uint32(26).string(message.consentedUsersUrl);
    }
    if (message.webviewPresentation !== undefined) {
      writer.uint32(32).int32(message.webviewPresentation);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HydratedTemplateButton_HydratedURLButton {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHydratedTemplateButton_HydratedURLButton();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.displayText = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.consentedUsersUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.webviewPresentation = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HydratedTemplateButton_HydratedURLButton {
    return {
      displayText: isSet(object.displayText) ? globalThis.String(object.displayText) : undefined,
      url: isSet(object.url) ? globalThis.String(object.url) : undefined,
      consentedUsersUrl: isSet(object.consentedUsersUrl) ? globalThis.String(object.consentedUsersUrl) : undefined,
      webviewPresentation: isSet(object.webviewPresentation)
        ? hydratedTemplateButton_HydratedURLButton_WebviewPresentationTypeFromJSON(object.webviewPresentation)
        : undefined,
    };
  },

  toJSON(message: HydratedTemplateButton_HydratedURLButton): unknown {
    const obj: any = {};
    if (message.displayText !== undefined) {
      obj.displayText = message.displayText;
    }
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    if (message.consentedUsersUrl !== undefined) {
      obj.consentedUsersUrl = message.consentedUsersUrl;
    }
    if (message.webviewPresentation !== undefined) {
      obj.webviewPresentation = hydratedTemplateButton_HydratedURLButton_WebviewPresentationTypeToJSON(
        message.webviewPresentation,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HydratedTemplateButton_HydratedURLButton>, I>>(
    base?: I,
  ): HydratedTemplateButton_HydratedURLButton {
    return HydratedTemplateButton_HydratedURLButton.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HydratedTemplateButton_HydratedURLButton>, I>>(
    object: I,
  ): HydratedTemplateButton_HydratedURLButton {
    const message = createBaseHydratedTemplateButton_HydratedURLButton();
    message.displayText = object.displayText ?? undefined;
    message.url = object.url ?? undefined;
    message.consentedUsersUrl = object.consentedUsersUrl ?? undefined;
    message.webviewPresentation = object.webviewPresentation ?? undefined;
    return message;
  },
};

function createBaseIdentityKeyPairStructure(): IdentityKeyPairStructure {
  return { publicKey: undefined, privateKey: undefined };
}

export const IdentityKeyPairStructure: MessageFns<IdentityKeyPairStructure> = {
  encode(message: IdentityKeyPairStructure, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.publicKey !== undefined) {
      writer.uint32(10).bytes(message.publicKey);
    }
    if (message.privateKey !== undefined) {
      writer.uint32(18).bytes(message.privateKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IdentityKeyPairStructure {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdentityKeyPairStructure();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.publicKey = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.privateKey = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IdentityKeyPairStructure {
    return {
      publicKey: isSet(object.publicKey) ? bytesFromBase64(object.publicKey) : undefined,
      privateKey: isSet(object.privateKey) ? bytesFromBase64(object.privateKey) : undefined,
    };
  },

  toJSON(message: IdentityKeyPairStructure): unknown {
    const obj: any = {};
    if (message.publicKey !== undefined) {
      obj.publicKey = base64FromBytes(message.publicKey);
    }
    if (message.privateKey !== undefined) {
      obj.privateKey = base64FromBytes(message.privateKey);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IdentityKeyPairStructure>, I>>(base?: I): IdentityKeyPairStructure {
    return IdentityKeyPairStructure.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IdentityKeyPairStructure>, I>>(object: I): IdentityKeyPairStructure {
    const message = createBaseIdentityKeyPairStructure();
    message.publicKey = object.publicKey ?? undefined;
    message.privateKey = object.privateKey ?? undefined;
    return message;
  },
};

function createBaseInteractiveAnnotation(): InteractiveAnnotation {
  return {
    polygonVertices: [],
    shouldSkipConfirmation: undefined,
    embeddedContent: undefined,
    statusLinkType: undefined,
    location: undefined,
    newsletter: undefined,
    embeddedAction: undefined,
    tapAction: undefined,
  };
}

export const InteractiveAnnotation: MessageFns<InteractiveAnnotation> = {
  encode(message: InteractiveAnnotation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.polygonVertices) {
      Point.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.shouldSkipConfirmation !== undefined) {
      writer.uint32(32).bool(message.shouldSkipConfirmation);
    }
    if (message.embeddedContent !== undefined) {
      EmbeddedContent.encode(message.embeddedContent, writer.uint32(42).fork()).join();
    }
    if (message.statusLinkType !== undefined) {
      writer.uint32(64).int32(message.statusLinkType);
    }
    if (message.location !== undefined) {
      Location.encode(message.location, writer.uint32(18).fork()).join();
    }
    if (message.newsletter !== undefined) {
      ContextInfo_ForwardedNewsletterMessageInfo.encode(message.newsletter, writer.uint32(26).fork()).join();
    }
    if (message.embeddedAction !== undefined) {
      writer.uint32(48).bool(message.embeddedAction);
    }
    if (message.tapAction !== undefined) {
      TapLinkAction.encode(message.tapAction, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InteractiveAnnotation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInteractiveAnnotation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.polygonVertices.push(Point.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.shouldSkipConfirmation = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.embeddedContent = EmbeddedContent.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.statusLinkType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.location = Location.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.newsletter = ContextInfo_ForwardedNewsletterMessageInfo.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.embeddedAction = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.tapAction = TapLinkAction.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InteractiveAnnotation {
    return {
      polygonVertices: globalThis.Array.isArray(object?.polygonVertices)
        ? object.polygonVertices.map((e: any) => Point.fromJSON(e))
        : [],
      shouldSkipConfirmation: isSet(object.shouldSkipConfirmation)
        ? globalThis.Boolean(object.shouldSkipConfirmation)
        : undefined,
      embeddedContent: isSet(object.embeddedContent) ? EmbeddedContent.fromJSON(object.embeddedContent) : undefined,
      statusLinkType: isSet(object.statusLinkType)
        ? interactiveAnnotation_StatusLinkTypeFromJSON(object.statusLinkType)
        : undefined,
      location: isSet(object.location) ? Location.fromJSON(object.location) : undefined,
      newsletter: isSet(object.newsletter)
        ? ContextInfo_ForwardedNewsletterMessageInfo.fromJSON(object.newsletter)
        : undefined,
      embeddedAction: isSet(object.embeddedAction) ? globalThis.Boolean(object.embeddedAction) : undefined,
      tapAction: isSet(object.tapAction) ? TapLinkAction.fromJSON(object.tapAction) : undefined,
    };
  },

  toJSON(message: InteractiveAnnotation): unknown {
    const obj: any = {};
    if (message.polygonVertices?.length) {
      obj.polygonVertices = message.polygonVertices.map((e) => Point.toJSON(e));
    }
    if (message.shouldSkipConfirmation !== undefined) {
      obj.shouldSkipConfirmation = message.shouldSkipConfirmation;
    }
    if (message.embeddedContent !== undefined) {
      obj.embeddedContent = EmbeddedContent.toJSON(message.embeddedContent);
    }
    if (message.statusLinkType !== undefined) {
      obj.statusLinkType = interactiveAnnotation_StatusLinkTypeToJSON(message.statusLinkType);
    }
    if (message.location !== undefined) {
      obj.location = Location.toJSON(message.location);
    }
    if (message.newsletter !== undefined) {
      obj.newsletter = ContextInfo_ForwardedNewsletterMessageInfo.toJSON(message.newsletter);
    }
    if (message.embeddedAction !== undefined) {
      obj.embeddedAction = message.embeddedAction;
    }
    if (message.tapAction !== undefined) {
      obj.tapAction = TapLinkAction.toJSON(message.tapAction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InteractiveAnnotation>, I>>(base?: I): InteractiveAnnotation {
    return InteractiveAnnotation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InteractiveAnnotation>, I>>(object: I): InteractiveAnnotation {
    const message = createBaseInteractiveAnnotation();
    message.polygonVertices = object.polygonVertices?.map((e) => Point.fromPartial(e)) || [];
    message.shouldSkipConfirmation = object.shouldSkipConfirmation ?? undefined;
    message.embeddedContent = (object.embeddedContent !== undefined && object.embeddedContent !== null)
      ? EmbeddedContent.fromPartial(object.embeddedContent)
      : undefined;
    message.statusLinkType = object.statusLinkType ?? undefined;
    message.location = (object.location !== undefined && object.location !== null)
      ? Location.fromPartial(object.location)
      : undefined;
    message.newsletter = (object.newsletter !== undefined && object.newsletter !== null)
      ? ContextInfo_ForwardedNewsletterMessageInfo.fromPartial(object.newsletter)
      : undefined;
    message.embeddedAction = object.embeddedAction ?? undefined;
    message.tapAction = (object.tapAction !== undefined && object.tapAction !== null)
      ? TapLinkAction.fromPartial(object.tapAction)
      : undefined;
    return message;
  },
};

function createBaseKeepInChat(): KeepInChat {
  return {
    keepType: undefined,
    serverTimestamp: undefined,
    key: undefined,
    deviceJid: undefined,
    clientTimestampMs: undefined,
    serverTimestampMs: undefined,
  };
}

export const KeepInChat: MessageFns<KeepInChat> = {
  encode(message: KeepInChat, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keepType !== undefined) {
      writer.uint32(8).int32(message.keepType);
    }
    if (message.serverTimestamp !== undefined) {
      writer.uint32(16).int64(message.serverTimestamp);
    }
    if (message.key !== undefined) {
      MessageKey.encode(message.key, writer.uint32(26).fork()).join();
    }
    if (message.deviceJid !== undefined) {
      writer.uint32(34).string(message.deviceJid);
    }
    if (message.clientTimestampMs !== undefined) {
      writer.uint32(40).int64(message.clientTimestampMs);
    }
    if (message.serverTimestampMs !== undefined) {
      writer.uint32(48).int64(message.serverTimestampMs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KeepInChat {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKeepInChat();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.keepType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.serverTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.key = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.deviceJid = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.clientTimestampMs = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.serverTimestampMs = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KeepInChat {
    return {
      keepType: isSet(object.keepType) ? keepTypeFromJSON(object.keepType) : undefined,
      serverTimestamp: isSet(object.serverTimestamp) ? globalThis.Number(object.serverTimestamp) : undefined,
      key: isSet(object.key) ? MessageKey.fromJSON(object.key) : undefined,
      deviceJid: isSet(object.deviceJid) ? globalThis.String(object.deviceJid) : undefined,
      clientTimestampMs: isSet(object.clientTimestampMs) ? globalThis.Number(object.clientTimestampMs) : undefined,
      serverTimestampMs: isSet(object.serverTimestampMs) ? globalThis.Number(object.serverTimestampMs) : undefined,
    };
  },

  toJSON(message: KeepInChat): unknown {
    const obj: any = {};
    if (message.keepType !== undefined) {
      obj.keepType = keepTypeToJSON(message.keepType);
    }
    if (message.serverTimestamp !== undefined) {
      obj.serverTimestamp = Math.round(message.serverTimestamp);
    }
    if (message.key !== undefined) {
      obj.key = MessageKey.toJSON(message.key);
    }
    if (message.deviceJid !== undefined) {
      obj.deviceJid = message.deviceJid;
    }
    if (message.clientTimestampMs !== undefined) {
      obj.clientTimestampMs = Math.round(message.clientTimestampMs);
    }
    if (message.serverTimestampMs !== undefined) {
      obj.serverTimestampMs = Math.round(message.serverTimestampMs);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KeepInChat>, I>>(base?: I): KeepInChat {
    return KeepInChat.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KeepInChat>, I>>(object: I): KeepInChat {
    const message = createBaseKeepInChat();
    message.keepType = object.keepType ?? undefined;
    message.serverTimestamp = object.serverTimestamp ?? undefined;
    message.key = (object.key !== undefined && object.key !== null) ? MessageKey.fromPartial(object.key) : undefined;
    message.deviceJid = object.deviceJid ?? undefined;
    message.clientTimestampMs = object.clientTimestampMs ?? undefined;
    message.serverTimestampMs = object.serverTimestampMs ?? undefined;
    return message;
  },
};

function createBaseKeyExchangeMessage(): KeyExchangeMessage {
  return {
    id: undefined,
    baseKey: undefined,
    ratchetKey: undefined,
    identityKey: undefined,
    baseKeySignature: undefined,
  };
}

export const KeyExchangeMessage: MessageFns<KeyExchangeMessage> = {
  encode(message: KeyExchangeMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.baseKey !== undefined) {
      writer.uint32(18).bytes(message.baseKey);
    }
    if (message.ratchetKey !== undefined) {
      writer.uint32(26).bytes(message.ratchetKey);
    }
    if (message.identityKey !== undefined) {
      writer.uint32(34).bytes(message.identityKey);
    }
    if (message.baseKeySignature !== undefined) {
      writer.uint32(42).bytes(message.baseKeySignature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KeyExchangeMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKeyExchangeMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.baseKey = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ratchetKey = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.identityKey = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.baseKeySignature = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KeyExchangeMessage {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : undefined,
      baseKey: isSet(object.baseKey) ? bytesFromBase64(object.baseKey) : undefined,
      ratchetKey: isSet(object.ratchetKey) ? bytesFromBase64(object.ratchetKey) : undefined,
      identityKey: isSet(object.identityKey) ? bytesFromBase64(object.identityKey) : undefined,
      baseKeySignature: isSet(object.baseKeySignature) ? bytesFromBase64(object.baseKeySignature) : undefined,
    };
  },

  toJSON(message: KeyExchangeMessage): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = Math.round(message.id);
    }
    if (message.baseKey !== undefined) {
      obj.baseKey = base64FromBytes(message.baseKey);
    }
    if (message.ratchetKey !== undefined) {
      obj.ratchetKey = base64FromBytes(message.ratchetKey);
    }
    if (message.identityKey !== undefined) {
      obj.identityKey = base64FromBytes(message.identityKey);
    }
    if (message.baseKeySignature !== undefined) {
      obj.baseKeySignature = base64FromBytes(message.baseKeySignature);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KeyExchangeMessage>, I>>(base?: I): KeyExchangeMessage {
    return KeyExchangeMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KeyExchangeMessage>, I>>(object: I): KeyExchangeMessage {
    const message = createBaseKeyExchangeMessage();
    message.id = object.id ?? undefined;
    message.baseKey = object.baseKey ?? undefined;
    message.ratchetKey = object.ratchetKey ?? undefined;
    message.identityKey = object.identityKey ?? undefined;
    message.baseKeySignature = object.baseKeySignature ?? undefined;
    return message;
  },
};

function createBaseKeyId(): KeyId {
  return { id: undefined };
}

export const KeyId: MessageFns<KeyId> = {
  encode(message: KeyId, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).bytes(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KeyId {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKeyId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KeyId {
    return { id: isSet(object.id) ? bytesFromBase64(object.id) : undefined };
  },

  toJSON(message: KeyId): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = base64FromBytes(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KeyId>, I>>(base?: I): KeyId {
    return KeyId.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KeyId>, I>>(object: I): KeyId {
    const message = createBaseKeyId();
    message.id = object.id ?? undefined;
    return message;
  },
};

function createBaseLIDMigrationMapping(): LIDMigrationMapping {
  return { pn: 0, assignedLid: 0, latestLid: undefined };
}

export const LIDMigrationMapping: MessageFns<LIDMigrationMapping> = {
  encode(message: LIDMigrationMapping, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pn !== 0) {
      writer.uint32(8).uint64(message.pn);
    }
    if (message.assignedLid !== 0) {
      writer.uint32(16).uint64(message.assignedLid);
    }
    if (message.latestLid !== undefined) {
      writer.uint32(24).uint64(message.latestLid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LIDMigrationMapping {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLIDMigrationMapping();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pn = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.assignedLid = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.latestLid = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LIDMigrationMapping {
    return {
      pn: isSet(object.pn) ? globalThis.Number(object.pn) : 0,
      assignedLid: isSet(object.assignedLid) ? globalThis.Number(object.assignedLid) : 0,
      latestLid: isSet(object.latestLid) ? globalThis.Number(object.latestLid) : undefined,
    };
  },

  toJSON(message: LIDMigrationMapping): unknown {
    const obj: any = {};
    if (message.pn !== 0) {
      obj.pn = Math.round(message.pn);
    }
    if (message.assignedLid !== 0) {
      obj.assignedLid = Math.round(message.assignedLid);
    }
    if (message.latestLid !== undefined) {
      obj.latestLid = Math.round(message.latestLid);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LIDMigrationMapping>, I>>(base?: I): LIDMigrationMapping {
    return LIDMigrationMapping.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LIDMigrationMapping>, I>>(object: I): LIDMigrationMapping {
    const message = createBaseLIDMigrationMapping();
    message.pn = object.pn ?? 0;
    message.assignedLid = object.assignedLid ?? 0;
    message.latestLid = object.latestLid ?? undefined;
    return message;
  },
};

function createBaseLIDMigrationMappingSyncMessage(): LIDMigrationMappingSyncMessage {
  return { encodedMappingPayload: undefined };
}

export const LIDMigrationMappingSyncMessage: MessageFns<LIDMigrationMappingSyncMessage> = {
  encode(message: LIDMigrationMappingSyncMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.encodedMappingPayload !== undefined) {
      writer.uint32(10).bytes(message.encodedMappingPayload);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LIDMigrationMappingSyncMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLIDMigrationMappingSyncMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.encodedMappingPayload = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LIDMigrationMappingSyncMessage {
    return {
      encodedMappingPayload: isSet(object.encodedMappingPayload)
        ? bytesFromBase64(object.encodedMappingPayload)
        : undefined,
    };
  },

  toJSON(message: LIDMigrationMappingSyncMessage): unknown {
    const obj: any = {};
    if (message.encodedMappingPayload !== undefined) {
      obj.encodedMappingPayload = base64FromBytes(message.encodedMappingPayload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LIDMigrationMappingSyncMessage>, I>>(base?: I): LIDMigrationMappingSyncMessage {
    return LIDMigrationMappingSyncMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LIDMigrationMappingSyncMessage>, I>>(
    object: I,
  ): LIDMigrationMappingSyncMessage {
    const message = createBaseLIDMigrationMappingSyncMessage();
    message.encodedMappingPayload = object.encodedMappingPayload ?? undefined;
    return message;
  },
};

function createBaseLIDMigrationMappingSyncPayload(): LIDMigrationMappingSyncPayload {
  return { pnToLidMappings: [], chatDbMigrationTimestamp: undefined };
}

export const LIDMigrationMappingSyncPayload: MessageFns<LIDMigrationMappingSyncPayload> = {
  encode(message: LIDMigrationMappingSyncPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.pnToLidMappings) {
      LIDMigrationMapping.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.chatDbMigrationTimestamp !== undefined) {
      writer.uint32(16).uint64(message.chatDbMigrationTimestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LIDMigrationMappingSyncPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLIDMigrationMappingSyncPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pnToLidMappings.push(LIDMigrationMapping.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.chatDbMigrationTimestamp = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LIDMigrationMappingSyncPayload {
    return {
      pnToLidMappings: globalThis.Array.isArray(object?.pnToLidMappings)
        ? object.pnToLidMappings.map((e: any) => LIDMigrationMapping.fromJSON(e))
        : [],
      chatDbMigrationTimestamp: isSet(object.chatDbMigrationTimestamp)
        ? globalThis.Number(object.chatDbMigrationTimestamp)
        : undefined,
    };
  },

  toJSON(message: LIDMigrationMappingSyncPayload): unknown {
    const obj: any = {};
    if (message.pnToLidMappings?.length) {
      obj.pnToLidMappings = message.pnToLidMappings.map((e) => LIDMigrationMapping.toJSON(e));
    }
    if (message.chatDbMigrationTimestamp !== undefined) {
      obj.chatDbMigrationTimestamp = Math.round(message.chatDbMigrationTimestamp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LIDMigrationMappingSyncPayload>, I>>(base?: I): LIDMigrationMappingSyncPayload {
    return LIDMigrationMappingSyncPayload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LIDMigrationMappingSyncPayload>, I>>(
    object: I,
  ): LIDMigrationMappingSyncPayload {
    const message = createBaseLIDMigrationMappingSyncPayload();
    message.pnToLidMappings = object.pnToLidMappings?.map((e) => LIDMigrationMapping.fromPartial(e)) || [];
    message.chatDbMigrationTimestamp = object.chatDbMigrationTimestamp ?? undefined;
    return message;
  },
};

function createBaseLegacyMessage(): LegacyMessage {
  return { eventResponseMessage: undefined, pollVote: undefined };
}

export const LegacyMessage: MessageFns<LegacyMessage> = {
  encode(message: LegacyMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventResponseMessage !== undefined) {
      Message_EventResponseMessage.encode(message.eventResponseMessage, writer.uint32(10).fork()).join();
    }
    if (message.pollVote !== undefined) {
      Message_PollVoteMessage.encode(message.pollVote, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LegacyMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLegacyMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventResponseMessage = Message_EventResponseMessage.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pollVote = Message_PollVoteMessage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LegacyMessage {
    return {
      eventResponseMessage: isSet(object.eventResponseMessage)
        ? Message_EventResponseMessage.fromJSON(object.eventResponseMessage)
        : undefined,
      pollVote: isSet(object.pollVote) ? Message_PollVoteMessage.fromJSON(object.pollVote) : undefined,
    };
  },

  toJSON(message: LegacyMessage): unknown {
    const obj: any = {};
    if (message.eventResponseMessage !== undefined) {
      obj.eventResponseMessage = Message_EventResponseMessage.toJSON(message.eventResponseMessage);
    }
    if (message.pollVote !== undefined) {
      obj.pollVote = Message_PollVoteMessage.toJSON(message.pollVote);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LegacyMessage>, I>>(base?: I): LegacyMessage {
    return LegacyMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LegacyMessage>, I>>(object: I): LegacyMessage {
    const message = createBaseLegacyMessage();
    message.eventResponseMessage = (object.eventResponseMessage !== undefined && object.eventResponseMessage !== null)
      ? Message_EventResponseMessage.fromPartial(object.eventResponseMessage)
      : undefined;
    message.pollVote = (object.pollVote !== undefined && object.pollVote !== null)
      ? Message_PollVoteMessage.fromPartial(object.pollVote)
      : undefined;
    return message;
  },
};

function createBaseLimitSharing(): LimitSharing {
  return {
    sharingLimited: undefined,
    trigger: undefined,
    limitSharingSettingTimestamp: undefined,
    initiatedByMe: undefined,
  };
}

export const LimitSharing: MessageFns<LimitSharing> = {
  encode(message: LimitSharing, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sharingLimited !== undefined) {
      writer.uint32(8).bool(message.sharingLimited);
    }
    if (message.trigger !== undefined) {
      writer.uint32(16).int32(message.trigger);
    }
    if (message.limitSharingSettingTimestamp !== undefined) {
      writer.uint32(24).int64(message.limitSharingSettingTimestamp);
    }
    if (message.initiatedByMe !== undefined) {
      writer.uint32(32).bool(message.initiatedByMe);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LimitSharing {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLimitSharing();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.sharingLimited = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.trigger = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.limitSharingSettingTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.initiatedByMe = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LimitSharing {
    return {
      sharingLimited: isSet(object.sharingLimited) ? globalThis.Boolean(object.sharingLimited) : undefined,
      trigger: isSet(object.trigger) ? limitSharing_TriggerTypeFromJSON(object.trigger) : undefined,
      limitSharingSettingTimestamp: isSet(object.limitSharingSettingTimestamp)
        ? globalThis.Number(object.limitSharingSettingTimestamp)
        : undefined,
      initiatedByMe: isSet(object.initiatedByMe) ? globalThis.Boolean(object.initiatedByMe) : undefined,
    };
  },

  toJSON(message: LimitSharing): unknown {
    const obj: any = {};
    if (message.sharingLimited !== undefined) {
      obj.sharingLimited = message.sharingLimited;
    }
    if (message.trigger !== undefined) {
      obj.trigger = limitSharing_TriggerTypeToJSON(message.trigger);
    }
    if (message.limitSharingSettingTimestamp !== undefined) {
      obj.limitSharingSettingTimestamp = Math.round(message.limitSharingSettingTimestamp);
    }
    if (message.initiatedByMe !== undefined) {
      obj.initiatedByMe = message.initiatedByMe;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LimitSharing>, I>>(base?: I): LimitSharing {
    return LimitSharing.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LimitSharing>, I>>(object: I): LimitSharing {
    const message = createBaseLimitSharing();
    message.sharingLimited = object.sharingLimited ?? undefined;
    message.trigger = object.trigger ?? undefined;
    message.limitSharingSettingTimestamp = object.limitSharingSettingTimestamp ?? undefined;
    message.initiatedByMe = object.initiatedByMe ?? undefined;
    return message;
  },
};

function createBaseLocalizedName(): LocalizedName {
  return { lg: undefined, lc: undefined, verifiedName: undefined };
}

export const LocalizedName: MessageFns<LocalizedName> = {
  encode(message: LocalizedName, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lg !== undefined) {
      writer.uint32(10).string(message.lg);
    }
    if (message.lc !== undefined) {
      writer.uint32(18).string(message.lc);
    }
    if (message.verifiedName !== undefined) {
      writer.uint32(26).string(message.verifiedName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocalizedName {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocalizedName();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.lg = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.lc = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.verifiedName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocalizedName {
    return {
      lg: isSet(object.lg) ? globalThis.String(object.lg) : undefined,
      lc: isSet(object.lc) ? globalThis.String(object.lc) : undefined,
      verifiedName: isSet(object.verifiedName) ? globalThis.String(object.verifiedName) : undefined,
    };
  },

  toJSON(message: LocalizedName): unknown {
    const obj: any = {};
    if (message.lg !== undefined) {
      obj.lg = message.lg;
    }
    if (message.lc !== undefined) {
      obj.lc = message.lc;
    }
    if (message.verifiedName !== undefined) {
      obj.verifiedName = message.verifiedName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LocalizedName>, I>>(base?: I): LocalizedName {
    return LocalizedName.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LocalizedName>, I>>(object: I): LocalizedName {
    const message = createBaseLocalizedName();
    message.lg = object.lg ?? undefined;
    message.lc = object.lc ?? undefined;
    message.verifiedName = object.verifiedName ?? undefined;
    return message;
  },
};

function createBaseLocation(): Location {
  return { degreesLatitude: undefined, degreesLongitude: undefined, name: undefined };
}

export const Location: MessageFns<Location> = {
  encode(message: Location, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.degreesLatitude !== undefined) {
      writer.uint32(9).double(message.degreesLatitude);
    }
    if (message.degreesLongitude !== undefined) {
      writer.uint32(17).double(message.degreesLongitude);
    }
    if (message.name !== undefined) {
      writer.uint32(26).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Location {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.degreesLatitude = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.degreesLongitude = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Location {
    return {
      degreesLatitude: isSet(object.degreesLatitude) ? globalThis.Number(object.degreesLatitude) : undefined,
      degreesLongitude: isSet(object.degreesLongitude) ? globalThis.Number(object.degreesLongitude) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
    };
  },

  toJSON(message: Location): unknown {
    const obj: any = {};
    if (message.degreesLatitude !== undefined) {
      obj.degreesLatitude = message.degreesLatitude;
    }
    if (message.degreesLongitude !== undefined) {
      obj.degreesLongitude = message.degreesLongitude;
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Location>, I>>(base?: I): Location {
    return Location.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Location>, I>>(object: I): Location {
    const message = createBaseLocation();
    message.degreesLatitude = object.degreesLatitude ?? undefined;
    message.degreesLongitude = object.degreesLongitude ?? undefined;
    message.name = object.name ?? undefined;
    return message;
  },
};

function createBaseMediaData(): MediaData {
  return { localPath: undefined };
}

export const MediaData: MessageFns<MediaData> = {
  encode(message: MediaData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.localPath !== undefined) {
      writer.uint32(10).string(message.localPath);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.localPath = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaData {
    return { localPath: isSet(object.localPath) ? globalThis.String(object.localPath) : undefined };
  },

  toJSON(message: MediaData): unknown {
    const obj: any = {};
    if (message.localPath !== undefined) {
      obj.localPath = message.localPath;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaData>, I>>(base?: I): MediaData {
    return MediaData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaData>, I>>(object: I): MediaData {
    const message = createBaseMediaData();
    message.localPath = object.localPath ?? undefined;
    return message;
  },
};

function createBaseMediaNotifyMessage(): MediaNotifyMessage {
  return { expressPathUrl: undefined, fileEncSha256: undefined, fileLength: undefined };
}

export const MediaNotifyMessage: MessageFns<MediaNotifyMessage> = {
  encode(message: MediaNotifyMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.expressPathUrl !== undefined) {
      writer.uint32(10).string(message.expressPathUrl);
    }
    if (message.fileEncSha256 !== undefined) {
      writer.uint32(18).bytes(message.fileEncSha256);
    }
    if (message.fileLength !== undefined) {
      writer.uint32(24).uint64(message.fileLength);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaNotifyMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaNotifyMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.expressPathUrl = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fileEncSha256 = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.fileLength = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaNotifyMessage {
    return {
      expressPathUrl: isSet(object.expressPathUrl) ? globalThis.String(object.expressPathUrl) : undefined,
      fileEncSha256: isSet(object.fileEncSha256) ? bytesFromBase64(object.fileEncSha256) : undefined,
      fileLength: isSet(object.fileLength) ? globalThis.Number(object.fileLength) : undefined,
    };
  },

  toJSON(message: MediaNotifyMessage): unknown {
    const obj: any = {};
    if (message.expressPathUrl !== undefined) {
      obj.expressPathUrl = message.expressPathUrl;
    }
    if (message.fileEncSha256 !== undefined) {
      obj.fileEncSha256 = base64FromBytes(message.fileEncSha256);
    }
    if (message.fileLength !== undefined) {
      obj.fileLength = Math.round(message.fileLength);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaNotifyMessage>, I>>(base?: I): MediaNotifyMessage {
    return MediaNotifyMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaNotifyMessage>, I>>(object: I): MediaNotifyMessage {
    const message = createBaseMediaNotifyMessage();
    message.expressPathUrl = object.expressPathUrl ?? undefined;
    message.fileEncSha256 = object.fileEncSha256 ?? undefined;
    message.fileLength = object.fileLength ?? undefined;
    return message;
  },
};

function createBaseMediaRetryNotification(): MediaRetryNotification {
  return { stanzaId: undefined, directPath: undefined, result: undefined, messageSecret: undefined };
}

export const MediaRetryNotification: MessageFns<MediaRetryNotification> = {
  encode(message: MediaRetryNotification, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stanzaId !== undefined) {
      writer.uint32(10).string(message.stanzaId);
    }
    if (message.directPath !== undefined) {
      writer.uint32(18).string(message.directPath);
    }
    if (message.result !== undefined) {
      writer.uint32(24).int32(message.result);
    }
    if (message.messageSecret !== undefined) {
      writer.uint32(34).bytes(message.messageSecret);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaRetryNotification {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaRetryNotification();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stanzaId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.directPath = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.result = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.messageSecret = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaRetryNotification {
    return {
      stanzaId: isSet(object.stanzaId) ? globalThis.String(object.stanzaId) : undefined,
      directPath: isSet(object.directPath) ? globalThis.String(object.directPath) : undefined,
      result: isSet(object.result) ? mediaRetryNotification_ResultTypeFromJSON(object.result) : undefined,
      messageSecret: isSet(object.messageSecret) ? bytesFromBase64(object.messageSecret) : undefined,
    };
  },

  toJSON(message: MediaRetryNotification): unknown {
    const obj: any = {};
    if (message.stanzaId !== undefined) {
      obj.stanzaId = message.stanzaId;
    }
    if (message.directPath !== undefined) {
      obj.directPath = message.directPath;
    }
    if (message.result !== undefined) {
      obj.result = mediaRetryNotification_ResultTypeToJSON(message.result);
    }
    if (message.messageSecret !== undefined) {
      obj.messageSecret = base64FromBytes(message.messageSecret);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaRetryNotification>, I>>(base?: I): MediaRetryNotification {
    return MediaRetryNotification.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaRetryNotification>, I>>(object: I): MediaRetryNotification {
    const message = createBaseMediaRetryNotification();
    message.stanzaId = object.stanzaId ?? undefined;
    message.directPath = object.directPath ?? undefined;
    message.result = object.result ?? undefined;
    message.messageSecret = object.messageSecret ?? undefined;
    return message;
  },
};

function createBaseMemberLabel(): MemberLabel {
  return { label: undefined, labelTimestamp: undefined };
}

export const MemberLabel: MessageFns<MemberLabel> = {
  encode(message: MemberLabel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.label !== undefined) {
      writer.uint32(10).string(message.label);
    }
    if (message.labelTimestamp !== undefined) {
      writer.uint32(16).int64(message.labelTimestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MemberLabel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMemberLabel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.label = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.labelTimestamp = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MemberLabel {
    return {
      label: isSet(object.label) ? globalThis.String(object.label) : undefined,
      labelTimestamp: isSet(object.labelTimestamp) ? globalThis.Number(object.labelTimestamp) : undefined,
    };
  },

  toJSON(message: MemberLabel): unknown {
    const obj: any = {};
    if (message.label !== undefined) {
      obj.label = message.label;
    }
    if (message.labelTimestamp !== undefined) {
      obj.labelTimestamp = Math.round(message.labelTimestamp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MemberLabel>, I>>(base?: I): MemberLabel {
    return MemberLabel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MemberLabel>, I>>(object: I): MemberLabel {
    const message = createBaseMemberLabel();
    message.label = object.label ?? undefined;
    message.labelTimestamp = object.labelTimestamp ?? undefined;
    return message;
  },
};

function createBaseMessage(): Message {
  return {
    conversation: undefined,
    senderKeyDistributionMessage: undefined,
    imageMessage: undefined,
    contactMessage: undefined,
    locationMessage: undefined,
    extendedTextMessage: undefined,
    documentMessage: undefined,
    audioMessage: undefined,
    videoMessage: undefined,
    call: undefined,
    chat: undefined,
    protocolMessage: undefined,
    contactsArrayMessage: undefined,
    highlyStructuredMessage: undefined,
    fastRatchetKeySenderKeyDistributionMessage: undefined,
    sendPaymentMessage: undefined,
    liveLocationMessage: undefined,
    requestPaymentMessage: undefined,
    declinePaymentRequestMessage: undefined,
    cancelPaymentRequestMessage: undefined,
    templateMessage: undefined,
    stickerMessage: undefined,
    groupInviteMessage: undefined,
    templateButtonReplyMessage: undefined,
    productMessage: undefined,
    deviceSentMessage: undefined,
    messageContextInfo: undefined,
    listMessage: undefined,
    viewOnceMessage: undefined,
    orderMessage: undefined,
    listResponseMessage: undefined,
    ephemeralMessage: undefined,
    invoiceMessage: undefined,
    buttonsMessage: undefined,
    buttonsResponseMessage: undefined,
    paymentInviteMessage: undefined,
    interactiveMessage: undefined,
    reactionMessage: undefined,
    stickerSyncRmrMessage: undefined,
    interactiveResponseMessage: undefined,
    pollCreationMessage: undefined,
    pollUpdateMessage: undefined,
    keepInChatMessage: undefined,
    documentWithCaptionMessage: undefined,
    requestPhoneNumberMessage: undefined,
    viewOnceMessageV2: undefined,
    encReactionMessage: undefined,
    editedMessage: undefined,
    viewOnceMessageV2Extension: undefined,
    pollCreationMessageV2: undefined,
    scheduledCallCreationMessage: undefined,
    groupMentionedMessage: undefined,
    pinInChatMessage: undefined,
    pollCreationMessageV3: undefined,
    scheduledCallEditMessage: undefined,
    ptvMessage: undefined,
    botInvokeMessage: undefined,
    callLogMesssage: undefined,
    messageHistoryBundle: undefined,
    encCommentMessage: undefined,
    bcallMessage: undefined,
    lottieStickerMessage: undefined,
    eventMessage: undefined,
    encEventResponseMessage: undefined,
    commentMessage: undefined,
    newsletterAdminInviteMessage: undefined,
    placeholderMessage: undefined,
    secretEncryptedMessage: undefined,
    albumMessage: undefined,
    eventCoverImage: undefined,
    stickerPackMessage: undefined,
    statusMentionMessage: undefined,
    pollResultSnapshotMessage: undefined,
    pollCreationOptionImageMessage: undefined,
    associatedChildMessage: undefined,
    groupStatusMentionMessage: undefined,
    pollCreationMessageV4: undefined,
    pollCreationMessageV5: undefined,
    statusAddYours: undefined,
    groupStatusMessage: undefined,
    richResponseMessage: undefined,
    statusNotificationMessage: undefined,
    limitSharingMessage: undefined,
    botTaskMessage: undefined,
    questionMessage: undefined,
    messageHistoryNotice: undefined,
  };
}

export const Message: MessageFns<Message> = {
  encode(message: Message, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.conversation !== undefined) {
      writer.uint32(10).string(message.conversation);
    }
    if (message.senderKeyDistributionMessage !== undefined) {
      Message_SenderKeyDistributionMessage.encode(message.senderKeyDistributionMessage, writer.uint32(18).fork())
        .join();
    }
    if (message.imageMessage !== undefined) {
      Message_ImageMessage.encode(message.imageMessage, writer.uint32(26).fork()).join();
    }
    if (message.contactMessage !== undefined) {
      Message_ContactMessage.encode(message.contactMessage, writer.uint32(34).fork()).join();
    }
    if (message.locationMessage !== undefined) {
      Message_LocationMessage.encode(message.locationMessage, writer.uint32(42).fork()).join();
    }
    if (message.extendedTextMessage !== undefined) {
      Message_ExtendedTextMessage.encode(message.extendedTextMessage, writer.uint32(50).fork()).join();
    }
    if (message.documentMessage !== undefined) {
      Message_DocumentMessage.encode(message.documentMessage, writer.uint32(58).fork()).join();
    }
    if (message.audioMessage !== undefined) {
      Message_AudioMessage.encode(message.audioMessage, writer.uint32(66).fork()).join();
    }
    if (message.videoMessage !== undefined) {
      Message_VideoMessage.encode(message.videoMessage, writer.uint32(74).fork()).join();
    }
    if (message.call !== undefined) {
      Message_Call.encode(message.call, writer.uint32(82).fork()).join();
    }
    if (message.chat !== undefined) {
      Message_Chat.encode(message.chat, writer.uint32(90).fork()).join();
    }
    if (message.protocolMessage !== undefined) {
      Message_ProtocolMessage.encode(message.protocolMessage, writer.uint32(98).fork()).join();
    }
    if (message.contactsArrayMessage !== undefined) {
      Message_ContactsArrayMessage.encode(message.contactsArrayMessage, writer.uint32(106).fork()).join();
    }
    if (message.highlyStructuredMessage !== undefined) {
      Message_HighlyStructuredMessage.encode(message.highlyStructuredMessage, writer.uint32(114).fork()).join();
    }
    if (message.fastRatchetKeySenderKeyDistributionMessage !== undefined) {
      Message_SenderKeyDistributionMessage.encode(
        message.fastRatchetKeySenderKeyDistributionMessage,
        writer.uint32(122).fork(),
      ).join();
    }
    if (message.sendPaymentMessage !== undefined) {
      Message_SendPaymentMessage.encode(message.sendPaymentMessage, writer.uint32(130).fork()).join();
    }
    if (message.liveLocationMessage !== undefined) {
      Message_LiveLocationMessage.encode(message.liveLocationMessage, writer.uint32(146).fork()).join();
    }
    if (message.requestPaymentMessage !== undefined) {
      Message_RequestPaymentMessage.encode(message.requestPaymentMessage, writer.uint32(178).fork()).join();
    }
    if (message.declinePaymentRequestMessage !== undefined) {
      Message_DeclinePaymentRequestMessage.encode(message.declinePaymentRequestMessage, writer.uint32(186).fork())
        .join();
    }
    if (message.cancelPaymentRequestMessage !== undefined) {
      Message_CancelPaymentRequestMessage.encode(message.cancelPaymentRequestMessage, writer.uint32(194).fork()).join();
    }
    if (message.templateMessage !== undefined) {
      Message_TemplateMessage.encode(message.templateMessage, writer.uint32(202).fork()).join();
    }
    if (message.stickerMessage !== undefined) {
      Message_StickerMessage.encode(message.stickerMessage, writer.uint32(210).fork()).join();
    }
    if (message.groupInviteMessage !== undefined) {
      Message_GroupInviteMessage.encode(message.groupInviteMessage, writer.uint32(226).fork()).join();
    }
    if (message.templateButtonReplyMessage !== undefined) {
      Message_TemplateButtonReplyMessage.encode(message.templateButtonReplyMessage, writer.uint32(234).fork()).join();
    }
    if (message.productMessage !== undefined) {
      Message_ProductMessage.encode(message.productMessage, writer.uint32(242).fork()).join();
    }
    if (message.deviceSentMessage !== undefined) {
      Message_DeviceSentMessage.encode(message.deviceSentMessage, writer.uint32(250).fork()).join();
    }
    if (message.messageContextInfo !== undefined) {
      MessageContextInfo.encode(message.messageContextInfo, writer.uint32(282).fork()).join();
    }
    if (message.listMessage !== undefined) {
      Message_ListMessage.encode(message.listMessage, writer.uint32(290).fork()).join();
    }
    if (message.viewOnceMessage !== undefined) {
      Message_FutureProofMessage.encode(message.viewOnceMessage, writer.uint32(298).fork()).join();
    }
    if (message.orderMessage !== undefined) {
      Message_OrderMessage.encode(message.orderMessage, writer.uint32(306).fork()).join();
    }
    if (message.listResponseMessage !== undefined) {
      Message_ListResponseMessage.encode(message.listResponseMessage, writer.uint32(314).fork()).join();
    }
    if (message.ephemeralMessage !== undefined) {
      Message_FutureProofMessage.encode(message.ephemeralMessage, writer.uint32(322).fork()).join();
    }
    if (message.invoiceMessage !== undefined) {
      Message_InvoiceMessage.encode(message.invoiceMessage, writer.uint32(330).fork()).join();
    }
    if (message.buttonsMessage !== undefined) {
      Message_ButtonsMessage.encode(message.buttonsMessage, writer.uint32(338).fork()).join();
    }
    if (message.buttonsResponseMessage !== undefined) {
      Message_ButtonsResponseMessage.encode(message.buttonsResponseMessage, writer.uint32(346).fork()).join();
    }
    if (message.paymentInviteMessage !== undefined) {
      Message_PaymentInviteMessage.encode(message.paymentInviteMessage, writer.uint32(354).fork()).join();
    }
    if (message.interactiveMessage !== undefined) {
      Message_InteractiveMessage.encode(message.interactiveMessage, writer.uint32(362).fork()).join();
    }
    if (message.reactionMessage !== undefined) {
      Message_ReactionMessage.encode(message.reactionMessage, writer.uint32(370).fork()).join();
    }
    if (message.stickerSyncRmrMessage !== undefined) {
      Message_StickerSyncRMRMessage.encode(message.stickerSyncRmrMessage, writer.uint32(378).fork()).join();
    }
    if (message.interactiveResponseMessage !== undefined) {
      Message_InteractiveResponseMessage.encode(message.interactiveResponseMessage, writer.uint32(386).fork()).join();
    }
    if (message.pollCreationMessage !== undefined) {
      Message_PollCreationMessage.encode(message.pollCreationMessage, writer.uint32(394).fork()).join();
    }
    if (message.pollUpdateMessage !== undefined) {
      Message_PollUpdateMessage.encode(message.pollUpdateMessage, writer.uint32(402).fork()).join();
    }
    if (message.keepInChatMessage !== undefined) {
      Message_KeepInChatMessage.encode(message.keepInChatMessage, writer.uint32(410).fork()).join();
    }
    if (message.documentWithCaptionMessage !== undefined) {
      Message_FutureProofMessage.encode(message.documentWithCaptionMessage, writer.uint32(426).fork()).join();
    }
    if (message.requestPhoneNumberMessage !== undefined) {
      Message_RequestPhoneNumberMessage.encode(message.requestPhoneNumberMessage, writer.uint32(434).fork()).join();
    }
    if (message.viewOnceMessageV2 !== undefined) {
      Message_FutureProofMessage.encode(message.viewOnceMessageV2, writer.uint32(442).fork()).join();
    }
    if (message.encReactionMessage !== undefined) {
      Message_EncReactionMessage.encode(message.encReactionMessage, writer.uint32(450).fork()).join();
    }
    if (message.editedMessage !== undefined) {
      Message_FutureProofMessage.encode(message.editedMessage, writer.uint32(466).fork()).join();
    }
    if (message.viewOnceMessageV2Extension !== undefined) {
      Message_FutureProofMessage.encode(message.viewOnceMessageV2Extension, writer.uint32(474).fork()).join();
    }
    if (message.pollCreationMessageV2 !== undefined) {
      Message_PollCreationMessage.encode(message.pollCreationMessageV2, writer.uint32(482).fork()).join();
    }
    if (message.scheduledCallCreationMessage !== undefined) {
      Message_ScheduledCallCreationMessage.encode(message.scheduledCallCreationMessage, writer.uint32(490).fork())
        .join();
    }
    if (message.groupMentionedMessage !== undefined) {
      Message_FutureProofMessage.encode(message.groupMentionedMessage, writer.uint32(498).fork()).join();
    }
    if (message.pinInChatMessage !== undefined) {
      Message_PinInChatMessage.encode(message.pinInChatMessage, writer.uint32(506).fork()).join();
    }
    if (message.pollCreationMessageV3 !== undefined) {
      Message_PollCreationMessage.encode(message.pollCreationMessageV3, writer.uint32(514).fork()).join();
    }
    if (message.scheduledCallEditMessage !== undefined) {
      Message_ScheduledCallEditMessage.encode(message.scheduledCallEditMessage, writer.uint32(522).fork()).join();
    }
    if (message.ptvMessage !== undefined) {
      Message_VideoMessage.encode(message.ptvMessage, writer.uint32(530).fork()).join();
    }
    if (message.botInvokeMessage !== undefined) {
      Message_FutureProofMessage.encode(message.botInvokeMessage, writer.uint32(538).fork()).join();
    }
    if (message.callLogMesssage !== undefined) {
      Message_CallLogMessage.encode(message.callLogMesssage, writer.uint32(554).fork()).join();
    }
    if (message.messageHistoryBundle !== undefined) {
      Message_MessageHistoryBundle.encode(message.messageHistoryBundle, writer.uint32(562).fork()).join();
    }
    if (message.encCommentMessage !== undefined) {
      Message_EncCommentMessage.encode(message.encCommentMessage, writer.uint32(570).fork()).join();
    }
    if (message.bcallMessage !== undefined) {
      Message_BCallMessage.encode(message.bcallMessage, writer.uint32(578).fork()).join();
    }
    if (message.lottieStickerMessage !== undefined) {
      Message_FutureProofMessage.encode(message.lottieStickerMessage, writer.uint32(594).fork()).join();
    }
    if (message.eventMessage !== undefined) {
      Message_EventMessage.encode(message.eventMessage, writer.uint32(602).fork()).join();
    }
    if (message.encEventResponseMessage !== undefined) {
      Message_EncEventResponseMessage.encode(message.encEventResponseMessage, writer.uint32(610).fork()).join();
    }
    if (message.commentMessage !== undefined) {
      Message_CommentMessage.encode(message.commentMessage, writer.uint32(618).fork()).join();
    }
    if (message.newsletterAdminInviteMessage !== undefined) {
      Message_NewsletterAdminInviteMessage.encode(message.newsletterAdminInviteMessage, writer.uint32(626).fork())
        .join();
    }
    if (message.placeholderMessage !== undefined) {
      Message_PlaceholderMessage.encode(message.placeholderMessage, writer.uint32(642).fork()).join();
    }
    if (message.secretEncryptedMessage !== undefined) {
      Message_SecretEncryptedMessage.encode(message.secretEncryptedMessage, writer.uint32(658).fork()).join();
    }
    if (message.albumMessage !== undefined) {
      Message_AlbumMessage.encode(message.albumMessage, writer.uint32(666).fork()).join();
    }
    if (message.eventCoverImage !== undefined) {
      Message_FutureProofMessage.encode(message.eventCoverImage, writer.uint32(682).fork()).join();
    }
    if (message.stickerPackMessage !== undefined) {
      Message_StickerPackMessage.encode(message.stickerPackMessage, writer.uint32(690).fork()).join();
    }
    if (message.statusMentionMessage !== undefined) {
      Message_FutureProofMessage.encode(message.statusMentionMessage, writer.uint32(698).fork()).join();
    }
    if (message.pollResultSnapshotMessage !== undefined) {
      Message_PollResultSnapshotMessage.encode(message.pollResultSnapshotMessage, writer.uint32(706).fork()).join();
    }
    if (message.pollCreationOptionImageMessage !== undefined) {
      Message_FutureProofMessage.encode(message.pollCreationOptionImageMessage, writer.uint32(722).fork()).join();
    }
    if (message.associatedChildMessage !== undefined) {
      Message_FutureProofMessage.encode(message.associatedChildMessage, writer.uint32(730).fork()).join();
    }
    if (message.groupStatusMentionMessage !== undefined) {
      Message_FutureProofMessage.encode(message.groupStatusMentionMessage, writer.uint32(738).fork()).join();
    }
    if (message.pollCreationMessageV4 !== undefined) {
      Message_FutureProofMessage.encode(message.pollCreationMessageV4, writer.uint32(746).fork()).join();
    }
    if (message.pollCreationMessageV5 !== undefined) {
      Message_FutureProofMessage.encode(message.pollCreationMessageV5, writer.uint32(754).fork()).join();
    }
    if (message.statusAddYours !== undefined) {
      Message_FutureProofMessage.encode(message.statusAddYours, writer.uint32(762).fork()).join();
    }
    if (message.groupStatusMessage !== undefined) {
      Message_FutureProofMessage.encode(message.groupStatusMessage, writer.uint32(770).fork()).join();
    }
    if (message.richResponseMessage !== undefined) {
      AIRichResponseMessage.encode(message.richResponseMessage, writer.uint32(778).fork()).join();
    }
    if (message.statusNotificationMessage !== undefined) {
      Message_StatusNotificationMessage.encode(message.statusNotificationMessage, writer.uint32(786).fork()).join();
    }
    if (message.limitSharingMessage !== undefined) {
      Message_FutureProofMessage.encode(message.limitSharingMessage, writer.uint32(794).fork()).join();
    }
    if (message.botTaskMessage !== undefined) {
      Message_FutureProofMessage.encode(message.botTaskMessage, writer.uint32(802).fork()).join();
    }
    if (message.questionMessage !== undefined) {
      Message_FutureProofMessage.encode(message.questionMessage, writer.uint32(810).fork()).join();
    }
    if (message.messageHistoryNotice !== undefined) {
      Message_MessageHistoryNotice.encode(message.messageHistoryNotice, writer.uint32(818).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.conversation = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.senderKeyDistributionMessage = Message_SenderKeyDistributionMessage.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.imageMessage = Message_ImageMessage.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.contactMessage = Message_ContactMessage.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.locationMessage = Message_LocationMessage.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.extendedTextMessage = Message_ExtendedTextMessage.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.documentMessage = Message_DocumentMessage.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.audioMessage = Message_AudioMessage.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.videoMessage = Message_VideoMessage.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.call = Message_Call.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.chat = Message_Chat.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.protocolMessage = Message_ProtocolMessage.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.contactsArrayMessage = Message_ContactsArrayMessage.decode(reader, reader.uint32());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.highlyStructuredMessage = Message_HighlyStructuredMessage.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.fastRatchetKeySenderKeyDistributionMessage = Message_SenderKeyDistributionMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.sendPaymentMessage = Message_SendPaymentMessage.decode(reader, reader.uint32());
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.liveLocationMessage = Message_LiveLocationMessage.decode(reader, reader.uint32());
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.requestPaymentMessage = Message_RequestPaymentMessage.decode(reader, reader.uint32());
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.declinePaymentRequestMessage = Message_DeclinePaymentRequestMessage.decode(reader, reader.uint32());
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.cancelPaymentRequestMessage = Message_CancelPaymentRequestMessage.decode(reader, reader.uint32());
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.templateMessage = Message_TemplateMessage.decode(reader, reader.uint32());
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.stickerMessage = Message_StickerMessage.decode(reader, reader.uint32());
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.groupInviteMessage = Message_GroupInviteMessage.decode(reader, reader.uint32());
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.templateButtonReplyMessage = Message_TemplateButtonReplyMessage.decode(reader, reader.uint32());
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.productMessage = Message_ProductMessage.decode(reader, reader.uint32());
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.deviceSentMessage = Message_DeviceSentMessage.decode(reader, reader.uint32());
          continue;
        }
        case 35: {
          if (tag !== 282) {
            break;
          }

          message.messageContextInfo = MessageContextInfo.decode(reader, reader.uint32());
          continue;
        }
        case 36: {
          if (tag !== 290) {
            break;
          }

          message.listMessage = Message_ListMessage.decode(reader, reader.uint32());
          continue;
        }
        case 37: {
          if (tag !== 298) {
            break;
          }

          message.viewOnceMessage = Message_FutureProofMessage.decode(reader, reader.uint32());
          continue;
        }
        case 38: {
          if (tag !== 306) {
            break;
          }

          message.orderMessage = Message_OrderMessage.decode(reader, reader.uint32());
          continue;
        }
        case 39: {
          if (tag !== 314) {
            break;
          }

          message.listResponseMessage = Message_ListResponseMessage.decode(reader, reader.uint32());
          continue;
        }
        case 40: {
          if (tag !== 322) {
            break;
          }

          message.ephemeralMessage = Message_FutureProofMessage.decode(reader, reader.uint32());
          continue;
        }
        case 41: {
          if (tag !== 330) {
            break;
          }

          message.invoiceMessage = Message_InvoiceMessage.decode(reader, reader.uint32());
          continue;
        }
        case 42: {
          if (tag !== 338) {
            break;
          }

          message.buttonsMessage = Message_ButtonsMessage.decode(reader, reader.uint32());
          continue;
        }
        case 43: {
          if (tag !== 346) {
            break;
          }

          message.buttonsResponseMessage = Message_ButtonsResponseMessage.decode(reader, reader.uint32());
          continue;
        }
        case 44: {
          if (tag !== 354) {
            break;
          }

          message.paymentInviteMessage = Message_PaymentInviteMessage.decode(reader, reader.uint32());
          continue;
        }
        case 45: {
          if (tag !== 362) {
            break;
          }

          message.interactiveMessage = Message_InteractiveMessage.decode(reader, reader.uint32());
          continue;
        }
        case 46: {
          if (tag !== 370) {
            break;
          }

          message.reactionMessage = Message_ReactionMessage.decode(reader, reader.uint32());
          continue;
        }
        case 47: {
          if (tag !== 378) {
            break;
          }

          message.stickerSyncRmrMessage = Message_StickerSyncRMRMessage.decode(reader, reader.uint32());
          continue;
        }
        case 48: {
          if (tag !== 386) {
            break;
          }

          message.interactiveResponseMessage = Message_InteractiveResponseMessage.decode(reader, reader.uint32());
          continue;
        }
        case 49: {
          if (tag !== 394) {
            break;
          }

          message.pollCreationMessage = Message_PollCreationMessage.decode(reader, reader.uint32());
          continue;
        }
        case 50: {
          if (tag !== 402) {
            break;
          }

          message.pollUpdateMessage = Message_PollUpdateMessage.decode(reader, reader.uint32());
          continue;
        }
        case 51: {
          if (tag !== 410) {
            break;
          }

          message.keepInChatMessage = Message_KeepInChatMessage.decode(reader, reader.uint32());
          continue;
        }
        case 53: {
          if (tag !== 426) {
            break;
          }

          message.documentWithCaptionMessage = Message_FutureProofMessage.decode(reader, reader.uint32());
          continue;
        }
        case 54: {
          if (tag !== 434) {
            break;
          }

          message.requestPhoneNumberMessage = Message_RequestPhoneNumberMessage.decode(reader, reader.uint32());
          continue;
        }
        case 55: {
          if (tag !== 442) {
            break;
          }

          message.viewOnceMessageV2 = Message_FutureProofMessage.decode(reader, reader.uint32());
          continue;
        }
        case 56: {
          if (tag !== 450) {
            break;
          }

          message.encReactionMessage = Message_EncReactionMessage.decode(reader, reader.uint32());
          continue;
        }
        case 58: {
          if (tag !== 466) {
            break;
          }

          message.editedMessage = Message_FutureProofMessage.decode(reader, reader.uint32());
          continue;
        }
        case 59: {
          if (tag !== 474) {
            break;
          }

          message.viewOnceMessageV2Extension = Message_FutureProofMessage.decode(reader, reader.uint32());
          continue;
        }
        case 60: {
          if (tag !== 482) {
            break;
          }

          message.pollCreationMessageV2 = Message_PollCreationMessage.decode(reader, reader.uint32());
          continue;
        }
        case 61: {
          if (tag !== 490) {
            break;
          }

          message.scheduledCallCreationMessage = Message_ScheduledCallCreationMessage.decode(reader, reader.uint32());
          continue;
        }
        case 62: {
          if (tag !== 498) {
            break;
          }

          message.groupMentionedMessage = Message_FutureProofMessage.decode(reader, reader.uint32());
          continue;
        }
        case 63: {
          if (tag !== 506) {
            break;
          }

          message.pinInChatMessage = Message_PinInChatMessage.decode(reader, reader.uint32());
          continue;
        }
        case 64: {
          if (tag !== 514) {
            break;
          }

          message.pollCreationMessageV3 = Message_PollCreationMessage.decode(reader, reader.uint32());
          continue;
        }
        case 65: {
          if (tag !== 522) {
            break;
          }

          message.scheduledCallEditMessage = Message_ScheduledCallEditMessage.decode(reader, reader.uint32());
          continue;
        }
        case 66: {
          if (tag !== 530) {
            break;
          }

          message.ptvMessage = Message_VideoMessage.decode(reader, reader.uint32());
          continue;
        }
        case 67: {
          if (tag !== 538) {
            break;
          }

          message.botInvokeMessage = Message_FutureProofMessage.decode(reader, reader.uint32());
          continue;
        }
        case 69: {
          if (tag !== 554) {
            break;
          }

          message.callLogMesssage = Message_CallLogMessage.decode(reader, reader.uint32());
          continue;
        }
        case 70: {
          if (tag !== 562) {
            break;
          }

          message.messageHistoryBundle = Message_MessageHistoryBundle.decode(reader, reader.uint32());
          continue;
        }
        case 71: {
          if (tag !== 570) {
            break;
          }

          message.encCommentMessage = Message_EncCommentMessage.decode(reader, reader.uint32());
          continue;
        }
        case 72: {
          if (tag !== 578) {
            break;
          }

          message.bcallMessage = Message_BCallMessage.decode(reader, reader.uint32());
          continue;
        }
        case 74: {
          if (tag !== 594) {
            break;
          }

          message.lottieStickerMessage = Message_FutureProofMessage.decode(reader, reader.uint32());
          continue;
        }
        case 75: {
          if (tag !== 602) {
            break;
          }

          message.eventMessage = Message_EventMessage.decode(reader, reader.uint32());
          continue;
        }
        case 76: {
          if (tag !== 610) {
            break;
          }

          message.encEventResponseMessage = Message_EncEventResponseMessage.decode(reader, reader.uint32());
          continue;
        }
        case 77: {
          if (tag !== 618) {
            break;
          }

          message.commentMessage = Message_CommentMessage.decode(reader, reader.uint32());
          continue;
        }
        case 78: {
          if (tag !== 626) {
            break;
          }

          message.newsletterAdminInviteMessage = Message_NewsletterAdminInviteMessage.decode(reader, reader.uint32());
          continue;
        }
        case 80: {
          if (tag !== 642) {
            break;
          }

          message.placeholderMessage = Message_PlaceholderMessage.decode(reader, reader.uint32());
          continue;
        }
        case 82: {
          if (tag !== 658) {
            break;
          }

          message.secretEncryptedMessage = Message_SecretEncryptedMessage.decode(reader, reader.uint32());
          continue;
        }
        case 83: {
          if (tag !== 666) {
            break;
          }

          message.albumMessage = Message_AlbumMessage.decode(reader, reader.uint32());
          continue;
        }
        case 85: {
          if (tag !== 682) {
            break;
          }

          message.eventCoverImage = Message_FutureProofMessage.decode(reader, reader.uint32());
          continue;
        }
        case 86: {
          if (tag !== 690) {
            break;
          }

          message.stickerPackMessage = Message_StickerPackMessage.decode(reader, reader.uint32());
          continue;
        }
        case 87: {
          if (tag !== 698) {
            break;
          }

          message.statusMentionMessage = Message_FutureProofMessage.decode(reader, reader.uint32());
          continue;
        }
        case 88: {
          if (tag !== 706) {
            break;
          }

          message.pollResultSnapshotMessage = Message_PollResultSnapshotMessage.decode(reader, reader.uint32());
          continue;
        }
        case 90: {
          if (tag !== 722) {
            break;
          }

          message.pollCreationOptionImageMessage = Message_FutureProofMessage.decode(reader, reader.uint32());
          continue;
        }
        case 91: {
          if (tag !== 730) {
            break;
          }

          message.associatedChildMessage = Message_FutureProofMessage.decode(reader, reader.uint32());
          continue;
        }
        case 92: {
          if (tag !== 738) {
            break;
          }

          message.groupStatusMentionMessage = Message_FutureProofMessage.decode(reader, reader.uint32());
          continue;
        }
        case 93: {
          if (tag !== 746) {
            break;
          }

          message.pollCreationMessageV4 = Message_FutureProofMessage.decode(reader, reader.uint32());
          continue;
        }
        case 94: {
          if (tag !== 754) {
            break;
          }

          message.pollCreationMessageV5 = Message_FutureProofMessage.decode(reader, reader.uint32());
          continue;
        }
        case 95: {
          if (tag !== 762) {
            break;
          }

          message.statusAddYours = Message_FutureProofMessage.decode(reader, reader.uint32());
          continue;
        }
        case 96: {
          if (tag !== 770) {
            break;
          }

          message.groupStatusMessage = Message_FutureProofMessage.decode(reader, reader.uint32());
          continue;
        }
        case 97: {
          if (tag !== 778) {
            break;
          }

          message.richResponseMessage = AIRichResponseMessage.decode(reader, reader.uint32());
          continue;
        }
        case 98: {
          if (tag !== 786) {
            break;
          }

          message.statusNotificationMessage = Message_StatusNotificationMessage.decode(reader, reader.uint32());
          continue;
        }
        case 99: {
          if (tag !== 794) {
            break;
          }

          message.limitSharingMessage = Message_FutureProofMessage.decode(reader, reader.uint32());
          continue;
        }
        case 100: {
          if (tag !== 802) {
            break;
          }

          message.botTaskMessage = Message_FutureProofMessage.decode(reader, reader.uint32());
          continue;
        }
        case 101: {
          if (tag !== 810) {
            break;
          }

          message.questionMessage = Message_FutureProofMessage.decode(reader, reader.uint32());
          continue;
        }
        case 102: {
          if (tag !== 818) {
            break;
          }

          message.messageHistoryNotice = Message_MessageHistoryNotice.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message {
    return {
      conversation: isSet(object.conversation) ? globalThis.String(object.conversation) : undefined,
      senderKeyDistributionMessage: isSet(object.senderKeyDistributionMessage)
        ? Message_SenderKeyDistributionMessage.fromJSON(object.senderKeyDistributionMessage)
        : undefined,
      imageMessage: isSet(object.imageMessage) ? Message_ImageMessage.fromJSON(object.imageMessage) : undefined,
      contactMessage: isSet(object.contactMessage) ? Message_ContactMessage.fromJSON(object.contactMessage) : undefined,
      locationMessage: isSet(object.locationMessage)
        ? Message_LocationMessage.fromJSON(object.locationMessage)
        : undefined,
      extendedTextMessage: isSet(object.extendedTextMessage)
        ? Message_ExtendedTextMessage.fromJSON(object.extendedTextMessage)
        : undefined,
      documentMessage: isSet(object.documentMessage)
        ? Message_DocumentMessage.fromJSON(object.documentMessage)
        : undefined,
      audioMessage: isSet(object.audioMessage) ? Message_AudioMessage.fromJSON(object.audioMessage) : undefined,
      videoMessage: isSet(object.videoMessage) ? Message_VideoMessage.fromJSON(object.videoMessage) : undefined,
      call: isSet(object.call) ? Message_Call.fromJSON(object.call) : undefined,
      chat: isSet(object.chat) ? Message_Chat.fromJSON(object.chat) : undefined,
      protocolMessage: isSet(object.protocolMessage)
        ? Message_ProtocolMessage.fromJSON(object.protocolMessage)
        : undefined,
      contactsArrayMessage: isSet(object.contactsArrayMessage)
        ? Message_ContactsArrayMessage.fromJSON(object.contactsArrayMessage)
        : undefined,
      highlyStructuredMessage: isSet(object.highlyStructuredMessage)
        ? Message_HighlyStructuredMessage.fromJSON(object.highlyStructuredMessage)
        : undefined,
      fastRatchetKeySenderKeyDistributionMessage: isSet(object.fastRatchetKeySenderKeyDistributionMessage)
        ? Message_SenderKeyDistributionMessage.fromJSON(object.fastRatchetKeySenderKeyDistributionMessage)
        : undefined,
      sendPaymentMessage: isSet(object.sendPaymentMessage)
        ? Message_SendPaymentMessage.fromJSON(object.sendPaymentMessage)
        : undefined,
      liveLocationMessage: isSet(object.liveLocationMessage)
        ? Message_LiveLocationMessage.fromJSON(object.liveLocationMessage)
        : undefined,
      requestPaymentMessage: isSet(object.requestPaymentMessage)
        ? Message_RequestPaymentMessage.fromJSON(object.requestPaymentMessage)
        : undefined,
      declinePaymentRequestMessage: isSet(object.declinePaymentRequestMessage)
        ? Message_DeclinePaymentRequestMessage.fromJSON(object.declinePaymentRequestMessage)
        : undefined,
      cancelPaymentRequestMessage: isSet(object.cancelPaymentRequestMessage)
        ? Message_CancelPaymentRequestMessage.fromJSON(object.cancelPaymentRequestMessage)
        : undefined,
      templateMessage: isSet(object.templateMessage)
        ? Message_TemplateMessage.fromJSON(object.templateMessage)
        : undefined,
      stickerMessage: isSet(object.stickerMessage) ? Message_StickerMessage.fromJSON(object.stickerMessage) : undefined,
      groupInviteMessage: isSet(object.groupInviteMessage)
        ? Message_GroupInviteMessage.fromJSON(object.groupInviteMessage)
        : undefined,
      templateButtonReplyMessage: isSet(object.templateButtonReplyMessage)
        ? Message_TemplateButtonReplyMessage.fromJSON(object.templateButtonReplyMessage)
        : undefined,
      productMessage: isSet(object.productMessage) ? Message_ProductMessage.fromJSON(object.productMessage) : undefined,
      deviceSentMessage: isSet(object.deviceSentMessage)
        ? Message_DeviceSentMessage.fromJSON(object.deviceSentMessage)
        : undefined,
      messageContextInfo: isSet(object.messageContextInfo)
        ? MessageContextInfo.fromJSON(object.messageContextInfo)
        : undefined,
      listMessage: isSet(object.listMessage) ? Message_ListMessage.fromJSON(object.listMessage) : undefined,
      viewOnceMessage: isSet(object.viewOnceMessage)
        ? Message_FutureProofMessage.fromJSON(object.viewOnceMessage)
        : undefined,
      orderMessage: isSet(object.orderMessage) ? Message_OrderMessage.fromJSON(object.orderMessage) : undefined,
      listResponseMessage: isSet(object.listResponseMessage)
        ? Message_ListResponseMessage.fromJSON(object.listResponseMessage)
        : undefined,
      ephemeralMessage: isSet(object.ephemeralMessage)
        ? Message_FutureProofMessage.fromJSON(object.ephemeralMessage)
        : undefined,
      invoiceMessage: isSet(object.invoiceMessage) ? Message_InvoiceMessage.fromJSON(object.invoiceMessage) : undefined,
      buttonsMessage: isSet(object.buttonsMessage) ? Message_ButtonsMessage.fromJSON(object.buttonsMessage) : undefined,
      buttonsResponseMessage: isSet(object.buttonsResponseMessage)
        ? Message_ButtonsResponseMessage.fromJSON(object.buttonsResponseMessage)
        : undefined,
      paymentInviteMessage: isSet(object.paymentInviteMessage)
        ? Message_PaymentInviteMessage.fromJSON(object.paymentInviteMessage)
        : undefined,
      interactiveMessage: isSet(object.interactiveMessage)
        ? Message_InteractiveMessage.fromJSON(object.interactiveMessage)
        : undefined,
      reactionMessage: isSet(object.reactionMessage)
        ? Message_ReactionMessage.fromJSON(object.reactionMessage)
        : undefined,
      stickerSyncRmrMessage: isSet(object.stickerSyncRmrMessage)
        ? Message_StickerSyncRMRMessage.fromJSON(object.stickerSyncRmrMessage)
        : undefined,
      interactiveResponseMessage: isSet(object.interactiveResponseMessage)
        ? Message_InteractiveResponseMessage.fromJSON(object.interactiveResponseMessage)
        : undefined,
      pollCreationMessage: isSet(object.pollCreationMessage)
        ? Message_PollCreationMessage.fromJSON(object.pollCreationMessage)
        : undefined,
      pollUpdateMessage: isSet(object.pollUpdateMessage)
        ? Message_PollUpdateMessage.fromJSON(object.pollUpdateMessage)
        : undefined,
      keepInChatMessage: isSet(object.keepInChatMessage)
        ? Message_KeepInChatMessage.fromJSON(object.keepInChatMessage)
        : undefined,
      documentWithCaptionMessage: isSet(object.documentWithCaptionMessage)
        ? Message_FutureProofMessage.fromJSON(object.documentWithCaptionMessage)
        : undefined,
      requestPhoneNumberMessage: isSet(object.requestPhoneNumberMessage)
        ? Message_RequestPhoneNumberMessage.fromJSON(object.requestPhoneNumberMessage)
        : undefined,
      viewOnceMessageV2: isSet(object.viewOnceMessageV2)
        ? Message_FutureProofMessage.fromJSON(object.viewOnceMessageV2)
        : undefined,
      encReactionMessage: isSet(object.encReactionMessage)
        ? Message_EncReactionMessage.fromJSON(object.encReactionMessage)
        : undefined,
      editedMessage: isSet(object.editedMessage)
        ? Message_FutureProofMessage.fromJSON(object.editedMessage)
        : undefined,
      viewOnceMessageV2Extension: isSet(object.viewOnceMessageV2Extension)
        ? Message_FutureProofMessage.fromJSON(object.viewOnceMessageV2Extension)
        : undefined,
      pollCreationMessageV2: isSet(object.pollCreationMessageV2)
        ? Message_PollCreationMessage.fromJSON(object.pollCreationMessageV2)
        : undefined,
      scheduledCallCreationMessage: isSet(object.scheduledCallCreationMessage)
        ? Message_ScheduledCallCreationMessage.fromJSON(object.scheduledCallCreationMessage)
        : undefined,
      groupMentionedMessage: isSet(object.groupMentionedMessage)
        ? Message_FutureProofMessage.fromJSON(object.groupMentionedMessage)
        : undefined,
      pinInChatMessage: isSet(object.pinInChatMessage)
        ? Message_PinInChatMessage.fromJSON(object.pinInChatMessage)
        : undefined,
      pollCreationMessageV3: isSet(object.pollCreationMessageV3)
        ? Message_PollCreationMessage.fromJSON(object.pollCreationMessageV3)
        : undefined,
      scheduledCallEditMessage: isSet(object.scheduledCallEditMessage)
        ? Message_ScheduledCallEditMessage.fromJSON(object.scheduledCallEditMessage)
        : undefined,
      ptvMessage: isSet(object.ptvMessage) ? Message_VideoMessage.fromJSON(object.ptvMessage) : undefined,
      botInvokeMessage: isSet(object.botInvokeMessage)
        ? Message_FutureProofMessage.fromJSON(object.botInvokeMessage)
        : undefined,
      callLogMesssage: isSet(object.callLogMesssage)
        ? Message_CallLogMessage.fromJSON(object.callLogMesssage)
        : undefined,
      messageHistoryBundle: isSet(object.messageHistoryBundle)
        ? Message_MessageHistoryBundle.fromJSON(object.messageHistoryBundle)
        : undefined,
      encCommentMessage: isSet(object.encCommentMessage)
        ? Message_EncCommentMessage.fromJSON(object.encCommentMessage)
        : undefined,
      bcallMessage: isSet(object.bcallMessage) ? Message_BCallMessage.fromJSON(object.bcallMessage) : undefined,
      lottieStickerMessage: isSet(object.lottieStickerMessage)
        ? Message_FutureProofMessage.fromJSON(object.lottieStickerMessage)
        : undefined,
      eventMessage: isSet(object.eventMessage) ? Message_EventMessage.fromJSON(object.eventMessage) : undefined,
      encEventResponseMessage: isSet(object.encEventResponseMessage)
        ? Message_EncEventResponseMessage.fromJSON(object.encEventResponseMessage)
        : undefined,
      commentMessage: isSet(object.commentMessage) ? Message_CommentMessage.fromJSON(object.commentMessage) : undefined,
      newsletterAdminInviteMessage: isSet(object.newsletterAdminInviteMessage)
        ? Message_NewsletterAdminInviteMessage.fromJSON(object.newsletterAdminInviteMessage)
        : undefined,
      placeholderMessage: isSet(object.placeholderMessage)
        ? Message_PlaceholderMessage.fromJSON(object.placeholderMessage)
        : undefined,
      secretEncryptedMessage: isSet(object.secretEncryptedMessage)
        ? Message_SecretEncryptedMessage.fromJSON(object.secretEncryptedMessage)
        : undefined,
      albumMessage: isSet(object.albumMessage) ? Message_AlbumMessage.fromJSON(object.albumMessage) : undefined,
      eventCoverImage: isSet(object.eventCoverImage)
        ? Message_FutureProofMessage.fromJSON(object.eventCoverImage)
        : undefined,
      stickerPackMessage: isSet(object.stickerPackMessage)
        ? Message_StickerPackMessage.fromJSON(object.stickerPackMessage)
        : undefined,
      statusMentionMessage: isSet(object.statusMentionMessage)
        ? Message_FutureProofMessage.fromJSON(object.statusMentionMessage)
        : undefined,
      pollResultSnapshotMessage: isSet(object.pollResultSnapshotMessage)
        ? Message_PollResultSnapshotMessage.fromJSON(object.pollResultSnapshotMessage)
        : undefined,
      pollCreationOptionImageMessage: isSet(object.pollCreationOptionImageMessage)
        ? Message_FutureProofMessage.fromJSON(object.pollCreationOptionImageMessage)
        : undefined,
      associatedChildMessage: isSet(object.associatedChildMessage)
        ? Message_FutureProofMessage.fromJSON(object.associatedChildMessage)
        : undefined,
      groupStatusMentionMessage: isSet(object.groupStatusMentionMessage)
        ? Message_FutureProofMessage.fromJSON(object.groupStatusMentionMessage)
        : undefined,
      pollCreationMessageV4: isSet(object.pollCreationMessageV4)
        ? Message_FutureProofMessage.fromJSON(object.pollCreationMessageV4)
        : undefined,
      pollCreationMessageV5: isSet(object.pollCreationMessageV5)
        ? Message_FutureProofMessage.fromJSON(object.pollCreationMessageV5)
        : undefined,
      statusAddYours: isSet(object.statusAddYours)
        ? Message_FutureProofMessage.fromJSON(object.statusAddYours)
        : undefined,
      groupStatusMessage: isSet(object.groupStatusMessage)
        ? Message_FutureProofMessage.fromJSON(object.groupStatusMessage)
        : undefined,
      richResponseMessage: isSet(object.richResponseMessage)
        ? AIRichResponseMessage.fromJSON(object.richResponseMessage)
        : undefined,
      statusNotificationMessage: isSet(object.statusNotificationMessage)
        ? Message_StatusNotificationMessage.fromJSON(object.statusNotificationMessage)
        : undefined,
      limitSharingMessage: isSet(object.limitSharingMessage)
        ? Message_FutureProofMessage.fromJSON(object.limitSharingMessage)
        : undefined,
      botTaskMessage: isSet(object.botTaskMessage)
        ? Message_FutureProofMessage.fromJSON(object.botTaskMessage)
        : undefined,
      questionMessage: isSet(object.questionMessage)
        ? Message_FutureProofMessage.fromJSON(object.questionMessage)
        : undefined,
      messageHistoryNotice: isSet(object.messageHistoryNotice)
        ? Message_MessageHistoryNotice.fromJSON(object.messageHistoryNotice)
        : undefined,
    };
  },

  toJSON(message: Message): unknown {
    const obj: any = {};
    if (message.conversation !== undefined) {
      obj.conversation = message.conversation;
    }
    if (message.senderKeyDistributionMessage !== undefined) {
      obj.senderKeyDistributionMessage = Message_SenderKeyDistributionMessage.toJSON(
        message.senderKeyDistributionMessage,
      );
    }
    if (message.imageMessage !== undefined) {
      obj.imageMessage = Message_ImageMessage.toJSON(message.imageMessage);
    }
    if (message.contactMessage !== undefined) {
      obj.contactMessage = Message_ContactMessage.toJSON(message.contactMessage);
    }
    if (message.locationMessage !== undefined) {
      obj.locationMessage = Message_LocationMessage.toJSON(message.locationMessage);
    }
    if (message.extendedTextMessage !== undefined) {
      obj.extendedTextMessage = Message_ExtendedTextMessage.toJSON(message.extendedTextMessage);
    }
    if (message.documentMessage !== undefined) {
      obj.documentMessage = Message_DocumentMessage.toJSON(message.documentMessage);
    }
    if (message.audioMessage !== undefined) {
      obj.audioMessage = Message_AudioMessage.toJSON(message.audioMessage);
    }
    if (message.videoMessage !== undefined) {
      obj.videoMessage = Message_VideoMessage.toJSON(message.videoMessage);
    }
    if (message.call !== undefined) {
      obj.call = Message_Call.toJSON(message.call);
    }
    if (message.chat !== undefined) {
      obj.chat = Message_Chat.toJSON(message.chat);
    }
    if (message.protocolMessage !== undefined) {
      obj.protocolMessage = Message_ProtocolMessage.toJSON(message.protocolMessage);
    }
    if (message.contactsArrayMessage !== undefined) {
      obj.contactsArrayMessage = Message_ContactsArrayMessage.toJSON(message.contactsArrayMessage);
    }
    if (message.highlyStructuredMessage !== undefined) {
      obj.highlyStructuredMessage = Message_HighlyStructuredMessage.toJSON(message.highlyStructuredMessage);
    }
    if (message.fastRatchetKeySenderKeyDistributionMessage !== undefined) {
      obj.fastRatchetKeySenderKeyDistributionMessage = Message_SenderKeyDistributionMessage.toJSON(
        message.fastRatchetKeySenderKeyDistributionMessage,
      );
    }
    if (message.sendPaymentMessage !== undefined) {
      obj.sendPaymentMessage = Message_SendPaymentMessage.toJSON(message.sendPaymentMessage);
    }
    if (message.liveLocationMessage !== undefined) {
      obj.liveLocationMessage = Message_LiveLocationMessage.toJSON(message.liveLocationMessage);
    }
    if (message.requestPaymentMessage !== undefined) {
      obj.requestPaymentMessage = Message_RequestPaymentMessage.toJSON(message.requestPaymentMessage);
    }
    if (message.declinePaymentRequestMessage !== undefined) {
      obj.declinePaymentRequestMessage = Message_DeclinePaymentRequestMessage.toJSON(
        message.declinePaymentRequestMessage,
      );
    }
    if (message.cancelPaymentRequestMessage !== undefined) {
      obj.cancelPaymentRequestMessage = Message_CancelPaymentRequestMessage.toJSON(message.cancelPaymentRequestMessage);
    }
    if (message.templateMessage !== undefined) {
      obj.templateMessage = Message_TemplateMessage.toJSON(message.templateMessage);
    }
    if (message.stickerMessage !== undefined) {
      obj.stickerMessage = Message_StickerMessage.toJSON(message.stickerMessage);
    }
    if (message.groupInviteMessage !== undefined) {
      obj.groupInviteMessage = Message_GroupInviteMessage.toJSON(message.groupInviteMessage);
    }
    if (message.templateButtonReplyMessage !== undefined) {
      obj.templateButtonReplyMessage = Message_TemplateButtonReplyMessage.toJSON(message.templateButtonReplyMessage);
    }
    if (message.productMessage !== undefined) {
      obj.productMessage = Message_ProductMessage.toJSON(message.productMessage);
    }
    if (message.deviceSentMessage !== undefined) {
      obj.deviceSentMessage = Message_DeviceSentMessage.toJSON(message.deviceSentMessage);
    }
    if (message.messageContextInfo !== undefined) {
      obj.messageContextInfo = MessageContextInfo.toJSON(message.messageContextInfo);
    }
    if (message.listMessage !== undefined) {
      obj.listMessage = Message_ListMessage.toJSON(message.listMessage);
    }
    if (message.viewOnceMessage !== undefined) {
      obj.viewOnceMessage = Message_FutureProofMessage.toJSON(message.viewOnceMessage);
    }
    if (message.orderMessage !== undefined) {
      obj.orderMessage = Message_OrderMessage.toJSON(message.orderMessage);
    }
    if (message.listResponseMessage !== undefined) {
      obj.listResponseMessage = Message_ListResponseMessage.toJSON(message.listResponseMessage);
    }
    if (message.ephemeralMessage !== undefined) {
      obj.ephemeralMessage = Message_FutureProofMessage.toJSON(message.ephemeralMessage);
    }
    if (message.invoiceMessage !== undefined) {
      obj.invoiceMessage = Message_InvoiceMessage.toJSON(message.invoiceMessage);
    }
    if (message.buttonsMessage !== undefined) {
      obj.buttonsMessage = Message_ButtonsMessage.toJSON(message.buttonsMessage);
    }
    if (message.buttonsResponseMessage !== undefined) {
      obj.buttonsResponseMessage = Message_ButtonsResponseMessage.toJSON(message.buttonsResponseMessage);
    }
    if (message.paymentInviteMessage !== undefined) {
      obj.paymentInviteMessage = Message_PaymentInviteMessage.toJSON(message.paymentInviteMessage);
    }
    if (message.interactiveMessage !== undefined) {
      obj.interactiveMessage = Message_InteractiveMessage.toJSON(message.interactiveMessage);
    }
    if (message.reactionMessage !== undefined) {
      obj.reactionMessage = Message_ReactionMessage.toJSON(message.reactionMessage);
    }
    if (message.stickerSyncRmrMessage !== undefined) {
      obj.stickerSyncRmrMessage = Message_StickerSyncRMRMessage.toJSON(message.stickerSyncRmrMessage);
    }
    if (message.interactiveResponseMessage !== undefined) {
      obj.interactiveResponseMessage = Message_InteractiveResponseMessage.toJSON(message.interactiveResponseMessage);
    }
    if (message.pollCreationMessage !== undefined) {
      obj.pollCreationMessage = Message_PollCreationMessage.toJSON(message.pollCreationMessage);
    }
    if (message.pollUpdateMessage !== undefined) {
      obj.pollUpdateMessage = Message_PollUpdateMessage.toJSON(message.pollUpdateMessage);
    }
    if (message.keepInChatMessage !== undefined) {
      obj.keepInChatMessage = Message_KeepInChatMessage.toJSON(message.keepInChatMessage);
    }
    if (message.documentWithCaptionMessage !== undefined) {
      obj.documentWithCaptionMessage = Message_FutureProofMessage.toJSON(message.documentWithCaptionMessage);
    }
    if (message.requestPhoneNumberMessage !== undefined) {
      obj.requestPhoneNumberMessage = Message_RequestPhoneNumberMessage.toJSON(message.requestPhoneNumberMessage);
    }
    if (message.viewOnceMessageV2 !== undefined) {
      obj.viewOnceMessageV2 = Message_FutureProofMessage.toJSON(message.viewOnceMessageV2);
    }
    if (message.encReactionMessage !== undefined) {
      obj.encReactionMessage = Message_EncReactionMessage.toJSON(message.encReactionMessage);
    }
    if (message.editedMessage !== undefined) {
      obj.editedMessage = Message_FutureProofMessage.toJSON(message.editedMessage);
    }
    if (message.viewOnceMessageV2Extension !== undefined) {
      obj.viewOnceMessageV2Extension = Message_FutureProofMessage.toJSON(message.viewOnceMessageV2Extension);
    }
    if (message.pollCreationMessageV2 !== undefined) {
      obj.pollCreationMessageV2 = Message_PollCreationMessage.toJSON(message.pollCreationMessageV2);
    }
    if (message.scheduledCallCreationMessage !== undefined) {
      obj.scheduledCallCreationMessage = Message_ScheduledCallCreationMessage.toJSON(
        message.scheduledCallCreationMessage,
      );
    }
    if (message.groupMentionedMessage !== undefined) {
      obj.groupMentionedMessage = Message_FutureProofMessage.toJSON(message.groupMentionedMessage);
    }
    if (message.pinInChatMessage !== undefined) {
      obj.pinInChatMessage = Message_PinInChatMessage.toJSON(message.pinInChatMessage);
    }
    if (message.pollCreationMessageV3 !== undefined) {
      obj.pollCreationMessageV3 = Message_PollCreationMessage.toJSON(message.pollCreationMessageV3);
    }
    if (message.scheduledCallEditMessage !== undefined) {
      obj.scheduledCallEditMessage = Message_ScheduledCallEditMessage.toJSON(message.scheduledCallEditMessage);
    }
    if (message.ptvMessage !== undefined) {
      obj.ptvMessage = Message_VideoMessage.toJSON(message.ptvMessage);
    }
    if (message.botInvokeMessage !== undefined) {
      obj.botInvokeMessage = Message_FutureProofMessage.toJSON(message.botInvokeMessage);
    }
    if (message.callLogMesssage !== undefined) {
      obj.callLogMesssage = Message_CallLogMessage.toJSON(message.callLogMesssage);
    }
    if (message.messageHistoryBundle !== undefined) {
      obj.messageHistoryBundle = Message_MessageHistoryBundle.toJSON(message.messageHistoryBundle);
    }
    if (message.encCommentMessage !== undefined) {
      obj.encCommentMessage = Message_EncCommentMessage.toJSON(message.encCommentMessage);
    }
    if (message.bcallMessage !== undefined) {
      obj.bcallMessage = Message_BCallMessage.toJSON(message.bcallMessage);
    }
    if (message.lottieStickerMessage !== undefined) {
      obj.lottieStickerMessage = Message_FutureProofMessage.toJSON(message.lottieStickerMessage);
    }
    if (message.eventMessage !== undefined) {
      obj.eventMessage = Message_EventMessage.toJSON(message.eventMessage);
    }
    if (message.encEventResponseMessage !== undefined) {
      obj.encEventResponseMessage = Message_EncEventResponseMessage.toJSON(message.encEventResponseMessage);
    }
    if (message.commentMessage !== undefined) {
      obj.commentMessage = Message_CommentMessage.toJSON(message.commentMessage);
    }
    if (message.newsletterAdminInviteMessage !== undefined) {
      obj.newsletterAdminInviteMessage = Message_NewsletterAdminInviteMessage.toJSON(
        message.newsletterAdminInviteMessage,
      );
    }
    if (message.placeholderMessage !== undefined) {
      obj.placeholderMessage = Message_PlaceholderMessage.toJSON(message.placeholderMessage);
    }
    if (message.secretEncryptedMessage !== undefined) {
      obj.secretEncryptedMessage = Message_SecretEncryptedMessage.toJSON(message.secretEncryptedMessage);
    }
    if (message.albumMessage !== undefined) {
      obj.albumMessage = Message_AlbumMessage.toJSON(message.albumMessage);
    }
    if (message.eventCoverImage !== undefined) {
      obj.eventCoverImage = Message_FutureProofMessage.toJSON(message.eventCoverImage);
    }
    if (message.stickerPackMessage !== undefined) {
      obj.stickerPackMessage = Message_StickerPackMessage.toJSON(message.stickerPackMessage);
    }
    if (message.statusMentionMessage !== undefined) {
      obj.statusMentionMessage = Message_FutureProofMessage.toJSON(message.statusMentionMessage);
    }
    if (message.pollResultSnapshotMessage !== undefined) {
      obj.pollResultSnapshotMessage = Message_PollResultSnapshotMessage.toJSON(message.pollResultSnapshotMessage);
    }
    if (message.pollCreationOptionImageMessage !== undefined) {
      obj.pollCreationOptionImageMessage = Message_FutureProofMessage.toJSON(message.pollCreationOptionImageMessage);
    }
    if (message.associatedChildMessage !== undefined) {
      obj.associatedChildMessage = Message_FutureProofMessage.toJSON(message.associatedChildMessage);
    }
    if (message.groupStatusMentionMessage !== undefined) {
      obj.groupStatusMentionMessage = Message_FutureProofMessage.toJSON(message.groupStatusMentionMessage);
    }
    if (message.pollCreationMessageV4 !== undefined) {
      obj.pollCreationMessageV4 = Message_FutureProofMessage.toJSON(message.pollCreationMessageV4);
    }
    if (message.pollCreationMessageV5 !== undefined) {
      obj.pollCreationMessageV5 = Message_FutureProofMessage.toJSON(message.pollCreationMessageV5);
    }
    if (message.statusAddYours !== undefined) {
      obj.statusAddYours = Message_FutureProofMessage.toJSON(message.statusAddYours);
    }
    if (message.groupStatusMessage !== undefined) {
      obj.groupStatusMessage = Message_FutureProofMessage.toJSON(message.groupStatusMessage);
    }
    if (message.richResponseMessage !== undefined) {
      obj.richResponseMessage = AIRichResponseMessage.toJSON(message.richResponseMessage);
    }
    if (message.statusNotificationMessage !== undefined) {
      obj.statusNotificationMessage = Message_StatusNotificationMessage.toJSON(message.statusNotificationMessage);
    }
    if (message.limitSharingMessage !== undefined) {
      obj.limitSharingMessage = Message_FutureProofMessage.toJSON(message.limitSharingMessage);
    }
    if (message.botTaskMessage !== undefined) {
      obj.botTaskMessage = Message_FutureProofMessage.toJSON(message.botTaskMessage);
    }
    if (message.questionMessage !== undefined) {
      obj.questionMessage = Message_FutureProofMessage.toJSON(message.questionMessage);
    }
    if (message.messageHistoryNotice !== undefined) {
      obj.messageHistoryNotice = Message_MessageHistoryNotice.toJSON(message.messageHistoryNotice);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message>, I>>(base?: I): Message {
    return Message.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message>, I>>(object: I): Message {
    const message = createBaseMessage();
    message.conversation = object.conversation ?? undefined;
    message.senderKeyDistributionMessage =
      (object.senderKeyDistributionMessage !== undefined && object.senderKeyDistributionMessage !== null)
        ? Message_SenderKeyDistributionMessage.fromPartial(object.senderKeyDistributionMessage)
        : undefined;
    message.imageMessage = (object.imageMessage !== undefined && object.imageMessage !== null)
      ? Message_ImageMessage.fromPartial(object.imageMessage)
      : undefined;
    message.contactMessage = (object.contactMessage !== undefined && object.contactMessage !== null)
      ? Message_ContactMessage.fromPartial(object.contactMessage)
      : undefined;
    message.locationMessage = (object.locationMessage !== undefined && object.locationMessage !== null)
      ? Message_LocationMessage.fromPartial(object.locationMessage)
      : undefined;
    message.extendedTextMessage = (object.extendedTextMessage !== undefined && object.extendedTextMessage !== null)
      ? Message_ExtendedTextMessage.fromPartial(object.extendedTextMessage)
      : undefined;
    message.documentMessage = (object.documentMessage !== undefined && object.documentMessage !== null)
      ? Message_DocumentMessage.fromPartial(object.documentMessage)
      : undefined;
    message.audioMessage = (object.audioMessage !== undefined && object.audioMessage !== null)
      ? Message_AudioMessage.fromPartial(object.audioMessage)
      : undefined;
    message.videoMessage = (object.videoMessage !== undefined && object.videoMessage !== null)
      ? Message_VideoMessage.fromPartial(object.videoMessage)
      : undefined;
    message.call = (object.call !== undefined && object.call !== null)
      ? Message_Call.fromPartial(object.call)
      : undefined;
    message.chat = (object.chat !== undefined && object.chat !== null)
      ? Message_Chat.fromPartial(object.chat)
      : undefined;
    message.protocolMessage = (object.protocolMessage !== undefined && object.protocolMessage !== null)
      ? Message_ProtocolMessage.fromPartial(object.protocolMessage)
      : undefined;
    message.contactsArrayMessage = (object.contactsArrayMessage !== undefined && object.contactsArrayMessage !== null)
      ? Message_ContactsArrayMessage.fromPartial(object.contactsArrayMessage)
      : undefined;
    message.highlyStructuredMessage =
      (object.highlyStructuredMessage !== undefined && object.highlyStructuredMessage !== null)
        ? Message_HighlyStructuredMessage.fromPartial(object.highlyStructuredMessage)
        : undefined;
    message.fastRatchetKeySenderKeyDistributionMessage =
      (object.fastRatchetKeySenderKeyDistributionMessage !== undefined &&
          object.fastRatchetKeySenderKeyDistributionMessage !== null)
        ? Message_SenderKeyDistributionMessage.fromPartial(object.fastRatchetKeySenderKeyDistributionMessage)
        : undefined;
    message.sendPaymentMessage = (object.sendPaymentMessage !== undefined && object.sendPaymentMessage !== null)
      ? Message_SendPaymentMessage.fromPartial(object.sendPaymentMessage)
      : undefined;
    message.liveLocationMessage = (object.liveLocationMessage !== undefined && object.liveLocationMessage !== null)
      ? Message_LiveLocationMessage.fromPartial(object.liveLocationMessage)
      : undefined;
    message.requestPaymentMessage =
      (object.requestPaymentMessage !== undefined && object.requestPaymentMessage !== null)
        ? Message_RequestPaymentMessage.fromPartial(object.requestPaymentMessage)
        : undefined;
    message.declinePaymentRequestMessage =
      (object.declinePaymentRequestMessage !== undefined && object.declinePaymentRequestMessage !== null)
        ? Message_DeclinePaymentRequestMessage.fromPartial(object.declinePaymentRequestMessage)
        : undefined;
    message.cancelPaymentRequestMessage =
      (object.cancelPaymentRequestMessage !== undefined && object.cancelPaymentRequestMessage !== null)
        ? Message_CancelPaymentRequestMessage.fromPartial(object.cancelPaymentRequestMessage)
        : undefined;
    message.templateMessage = (object.templateMessage !== undefined && object.templateMessage !== null)
      ? Message_TemplateMessage.fromPartial(object.templateMessage)
      : undefined;
    message.stickerMessage = (object.stickerMessage !== undefined && object.stickerMessage !== null)
      ? Message_StickerMessage.fromPartial(object.stickerMessage)
      : undefined;
    message.groupInviteMessage = (object.groupInviteMessage !== undefined && object.groupInviteMessage !== null)
      ? Message_GroupInviteMessage.fromPartial(object.groupInviteMessage)
      : undefined;
    message.templateButtonReplyMessage =
      (object.templateButtonReplyMessage !== undefined && object.templateButtonReplyMessage !== null)
        ? Message_TemplateButtonReplyMessage.fromPartial(object.templateButtonReplyMessage)
        : undefined;
    message.productMessage = (object.productMessage !== undefined && object.productMessage !== null)
      ? Message_ProductMessage.fromPartial(object.productMessage)
      : undefined;
    message.deviceSentMessage = (object.deviceSentMessage !== undefined && object.deviceSentMessage !== null)
      ? Message_DeviceSentMessage.fromPartial(object.deviceSentMessage)
      : undefined;
    message.messageContextInfo = (object.messageContextInfo !== undefined && object.messageContextInfo !== null)
      ? MessageContextInfo.fromPartial(object.messageContextInfo)
      : undefined;
    message.listMessage = (object.listMessage !== undefined && object.listMessage !== null)
      ? Message_ListMessage.fromPartial(object.listMessage)
      : undefined;
    message.viewOnceMessage = (object.viewOnceMessage !== undefined && object.viewOnceMessage !== null)
      ? Message_FutureProofMessage.fromPartial(object.viewOnceMessage)
      : undefined;
    message.orderMessage = (object.orderMessage !== undefined && object.orderMessage !== null)
      ? Message_OrderMessage.fromPartial(object.orderMessage)
      : undefined;
    message.listResponseMessage = (object.listResponseMessage !== undefined && object.listResponseMessage !== null)
      ? Message_ListResponseMessage.fromPartial(object.listResponseMessage)
      : undefined;
    message.ephemeralMessage = (object.ephemeralMessage !== undefined && object.ephemeralMessage !== null)
      ? Message_FutureProofMessage.fromPartial(object.ephemeralMessage)
      : undefined;
    message.invoiceMessage = (object.invoiceMessage !== undefined && object.invoiceMessage !== null)
      ? Message_InvoiceMessage.fromPartial(object.invoiceMessage)
      : undefined;
    message.buttonsMessage = (object.buttonsMessage !== undefined && object.buttonsMessage !== null)
      ? Message_ButtonsMessage.fromPartial(object.buttonsMessage)
      : undefined;
    message.buttonsResponseMessage =
      (object.buttonsResponseMessage !== undefined && object.buttonsResponseMessage !== null)
        ? Message_ButtonsResponseMessage.fromPartial(object.buttonsResponseMessage)
        : undefined;
    message.paymentInviteMessage = (object.paymentInviteMessage !== undefined && object.paymentInviteMessage !== null)
      ? Message_PaymentInviteMessage.fromPartial(object.paymentInviteMessage)
      : undefined;
    message.interactiveMessage = (object.interactiveMessage !== undefined && object.interactiveMessage !== null)
      ? Message_InteractiveMessage.fromPartial(object.interactiveMessage)
      : undefined;
    message.reactionMessage = (object.reactionMessage !== undefined && object.reactionMessage !== null)
      ? Message_ReactionMessage.fromPartial(object.reactionMessage)
      : undefined;
    message.stickerSyncRmrMessage =
      (object.stickerSyncRmrMessage !== undefined && object.stickerSyncRmrMessage !== null)
        ? Message_StickerSyncRMRMessage.fromPartial(object.stickerSyncRmrMessage)
        : undefined;
    message.interactiveResponseMessage =
      (object.interactiveResponseMessage !== undefined && object.interactiveResponseMessage !== null)
        ? Message_InteractiveResponseMessage.fromPartial(object.interactiveResponseMessage)
        : undefined;
    message.pollCreationMessage = (object.pollCreationMessage !== undefined && object.pollCreationMessage !== null)
      ? Message_PollCreationMessage.fromPartial(object.pollCreationMessage)
      : undefined;
    message.pollUpdateMessage = (object.pollUpdateMessage !== undefined && object.pollUpdateMessage !== null)
      ? Message_PollUpdateMessage.fromPartial(object.pollUpdateMessage)
      : undefined;
    message.keepInChatMessage = (object.keepInChatMessage !== undefined && object.keepInChatMessage !== null)
      ? Message_KeepInChatMessage.fromPartial(object.keepInChatMessage)
      : undefined;
    message.documentWithCaptionMessage =
      (object.documentWithCaptionMessage !== undefined && object.documentWithCaptionMessage !== null)
        ? Message_FutureProofMessage.fromPartial(object.documentWithCaptionMessage)
        : undefined;
    message.requestPhoneNumberMessage =
      (object.requestPhoneNumberMessage !== undefined && object.requestPhoneNumberMessage !== null)
        ? Message_RequestPhoneNumberMessage.fromPartial(object.requestPhoneNumberMessage)
        : undefined;
    message.viewOnceMessageV2 = (object.viewOnceMessageV2 !== undefined && object.viewOnceMessageV2 !== null)
      ? Message_FutureProofMessage.fromPartial(object.viewOnceMessageV2)
      : undefined;
    message.encReactionMessage = (object.encReactionMessage !== undefined && object.encReactionMessage !== null)
      ? Message_EncReactionMessage.fromPartial(object.encReactionMessage)
      : undefined;
    message.editedMessage = (object.editedMessage !== undefined && object.editedMessage !== null)
      ? Message_FutureProofMessage.fromPartial(object.editedMessage)
      : undefined;
    message.viewOnceMessageV2Extension =
      (object.viewOnceMessageV2Extension !== undefined && object.viewOnceMessageV2Extension !== null)
        ? Message_FutureProofMessage.fromPartial(object.viewOnceMessageV2Extension)
        : undefined;
    message.pollCreationMessageV2 =
      (object.pollCreationMessageV2 !== undefined && object.pollCreationMessageV2 !== null)
        ? Message_PollCreationMessage.fromPartial(object.pollCreationMessageV2)
        : undefined;
    message.scheduledCallCreationMessage =
      (object.scheduledCallCreationMessage !== undefined && object.scheduledCallCreationMessage !== null)
        ? Message_ScheduledCallCreationMessage.fromPartial(object.scheduledCallCreationMessage)
        : undefined;
    message.groupMentionedMessage =
      (object.groupMentionedMessage !== undefined && object.groupMentionedMessage !== null)
        ? Message_FutureProofMessage.fromPartial(object.groupMentionedMessage)
        : undefined;
    message.pinInChatMessage = (object.pinInChatMessage !== undefined && object.pinInChatMessage !== null)
      ? Message_PinInChatMessage.fromPartial(object.pinInChatMessage)
      : undefined;
    message.pollCreationMessageV3 =
      (object.pollCreationMessageV3 !== undefined && object.pollCreationMessageV3 !== null)
        ? Message_PollCreationMessage.fromPartial(object.pollCreationMessageV3)
        : undefined;
    message.scheduledCallEditMessage =
      (object.scheduledCallEditMessage !== undefined && object.scheduledCallEditMessage !== null)
        ? Message_ScheduledCallEditMessage.fromPartial(object.scheduledCallEditMessage)
        : undefined;
    message.ptvMessage = (object.ptvMessage !== undefined && object.ptvMessage !== null)
      ? Message_VideoMessage.fromPartial(object.ptvMessage)
      : undefined;
    message.botInvokeMessage = (object.botInvokeMessage !== undefined && object.botInvokeMessage !== null)
      ? Message_FutureProofMessage.fromPartial(object.botInvokeMessage)
      : undefined;
    message.callLogMesssage = (object.callLogMesssage !== undefined && object.callLogMesssage !== null)
      ? Message_CallLogMessage.fromPartial(object.callLogMesssage)
      : undefined;
    message.messageHistoryBundle = (object.messageHistoryBundle !== undefined && object.messageHistoryBundle !== null)
      ? Message_MessageHistoryBundle.fromPartial(object.messageHistoryBundle)
      : undefined;
    message.encCommentMessage = (object.encCommentMessage !== undefined && object.encCommentMessage !== null)
      ? Message_EncCommentMessage.fromPartial(object.encCommentMessage)
      : undefined;
    message.bcallMessage = (object.bcallMessage !== undefined && object.bcallMessage !== null)
      ? Message_BCallMessage.fromPartial(object.bcallMessage)
      : undefined;
    message.lottieStickerMessage = (object.lottieStickerMessage !== undefined && object.lottieStickerMessage !== null)
      ? Message_FutureProofMessage.fromPartial(object.lottieStickerMessage)
      : undefined;
    message.eventMessage = (object.eventMessage !== undefined && object.eventMessage !== null)
      ? Message_EventMessage.fromPartial(object.eventMessage)
      : undefined;
    message.encEventResponseMessage =
      (object.encEventResponseMessage !== undefined && object.encEventResponseMessage !== null)
        ? Message_EncEventResponseMessage.fromPartial(object.encEventResponseMessage)
        : undefined;
    message.commentMessage = (object.commentMessage !== undefined && object.commentMessage !== null)
      ? Message_CommentMessage.fromPartial(object.commentMessage)
      : undefined;
    message.newsletterAdminInviteMessage =
      (object.newsletterAdminInviteMessage !== undefined && object.newsletterAdminInviteMessage !== null)
        ? Message_NewsletterAdminInviteMessage.fromPartial(object.newsletterAdminInviteMessage)
        : undefined;
    message.placeholderMessage = (object.placeholderMessage !== undefined && object.placeholderMessage !== null)
      ? Message_PlaceholderMessage.fromPartial(object.placeholderMessage)
      : undefined;
    message.secretEncryptedMessage =
      (object.secretEncryptedMessage !== undefined && object.secretEncryptedMessage !== null)
        ? Message_SecretEncryptedMessage.fromPartial(object.secretEncryptedMessage)
        : undefined;
    message.albumMessage = (object.albumMessage !== undefined && object.albumMessage !== null)
      ? Message_AlbumMessage.fromPartial(object.albumMessage)
      : undefined;
    message.eventCoverImage = (object.eventCoverImage !== undefined && object.eventCoverImage !== null)
      ? Message_FutureProofMessage.fromPartial(object.eventCoverImage)
      : undefined;
    message.stickerPackMessage = (object.stickerPackMessage !== undefined && object.stickerPackMessage !== null)
      ? Message_StickerPackMessage.fromPartial(object.stickerPackMessage)
      : undefined;
    message.statusMentionMessage = (object.statusMentionMessage !== undefined && object.statusMentionMessage !== null)
      ? Message_FutureProofMessage.fromPartial(object.statusMentionMessage)
      : undefined;
    message.pollResultSnapshotMessage =
      (object.pollResultSnapshotMessage !== undefined && object.pollResultSnapshotMessage !== null)
        ? Message_PollResultSnapshotMessage.fromPartial(object.pollResultSnapshotMessage)
        : undefined;
    message.pollCreationOptionImageMessage =
      (object.pollCreationOptionImageMessage !== undefined && object.pollCreationOptionImageMessage !== null)
        ? Message_FutureProofMessage.fromPartial(object.pollCreationOptionImageMessage)
        : undefined;
    message.associatedChildMessage =
      (object.associatedChildMessage !== undefined && object.associatedChildMessage !== null)
        ? Message_FutureProofMessage.fromPartial(object.associatedChildMessage)
        : undefined;
    message.groupStatusMentionMessage =
      (object.groupStatusMentionMessage !== undefined && object.groupStatusMentionMessage !== null)
        ? Message_FutureProofMessage.fromPartial(object.groupStatusMentionMessage)
        : undefined;
    message.pollCreationMessageV4 =
      (object.pollCreationMessageV4 !== undefined && object.pollCreationMessageV4 !== null)
        ? Message_FutureProofMessage.fromPartial(object.pollCreationMessageV4)
        : undefined;
    message.pollCreationMessageV5 =
      (object.pollCreationMessageV5 !== undefined && object.pollCreationMessageV5 !== null)
        ? Message_FutureProofMessage.fromPartial(object.pollCreationMessageV5)
        : undefined;
    message.statusAddYours = (object.statusAddYours !== undefined && object.statusAddYours !== null)
      ? Message_FutureProofMessage.fromPartial(object.statusAddYours)
      : undefined;
    message.groupStatusMessage = (object.groupStatusMessage !== undefined && object.groupStatusMessage !== null)
      ? Message_FutureProofMessage.fromPartial(object.groupStatusMessage)
      : undefined;
    message.richResponseMessage = (object.richResponseMessage !== undefined && object.richResponseMessage !== null)
      ? AIRichResponseMessage.fromPartial(object.richResponseMessage)
      : undefined;
    message.statusNotificationMessage =
      (object.statusNotificationMessage !== undefined && object.statusNotificationMessage !== null)
        ? Message_StatusNotificationMessage.fromPartial(object.statusNotificationMessage)
        : undefined;
    message.limitSharingMessage = (object.limitSharingMessage !== undefined && object.limitSharingMessage !== null)
      ? Message_FutureProofMessage.fromPartial(object.limitSharingMessage)
      : undefined;
    message.botTaskMessage = (object.botTaskMessage !== undefined && object.botTaskMessage !== null)
      ? Message_FutureProofMessage.fromPartial(object.botTaskMessage)
      : undefined;
    message.questionMessage = (object.questionMessage !== undefined && object.questionMessage !== null)
      ? Message_FutureProofMessage.fromPartial(object.questionMessage)
      : undefined;
    message.messageHistoryNotice = (object.messageHistoryNotice !== undefined && object.messageHistoryNotice !== null)
      ? Message_MessageHistoryNotice.fromPartial(object.messageHistoryNotice)
      : undefined;
    return message;
  },
};

function createBaseMessage_AlbumMessage(): Message_AlbumMessage {
  return { expectedImageCount: undefined, expectedVideoCount: undefined, contextInfo: undefined };
}

export const Message_AlbumMessage: MessageFns<Message_AlbumMessage> = {
  encode(message: Message_AlbumMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.expectedImageCount !== undefined) {
      writer.uint32(16).uint32(message.expectedImageCount);
    }
    if (message.expectedVideoCount !== undefined) {
      writer.uint32(24).uint32(message.expectedVideoCount);
    }
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(138).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_AlbumMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_AlbumMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.expectedImageCount = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.expectedVideoCount = reader.uint32();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_AlbumMessage {
    return {
      expectedImageCount: isSet(object.expectedImageCount) ? globalThis.Number(object.expectedImageCount) : undefined,
      expectedVideoCount: isSet(object.expectedVideoCount) ? globalThis.Number(object.expectedVideoCount) : undefined,
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
    };
  },

  toJSON(message: Message_AlbumMessage): unknown {
    const obj: any = {};
    if (message.expectedImageCount !== undefined) {
      obj.expectedImageCount = Math.round(message.expectedImageCount);
    }
    if (message.expectedVideoCount !== undefined) {
      obj.expectedVideoCount = Math.round(message.expectedVideoCount);
    }
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_AlbumMessage>, I>>(base?: I): Message_AlbumMessage {
    return Message_AlbumMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_AlbumMessage>, I>>(object: I): Message_AlbumMessage {
    const message = createBaseMessage_AlbumMessage();
    message.expectedImageCount = object.expectedImageCount ?? undefined;
    message.expectedVideoCount = object.expectedVideoCount ?? undefined;
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    return message;
  },
};

function createBaseMessage_AppStateFatalExceptionNotification(): Message_AppStateFatalExceptionNotification {
  return { collectionNames: [], timestamp: undefined };
}

export const Message_AppStateFatalExceptionNotification: MessageFns<Message_AppStateFatalExceptionNotification> = {
  encode(message: Message_AppStateFatalExceptionNotification, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.collectionNames) {
      writer.uint32(10).string(v!);
    }
    if (message.timestamp !== undefined) {
      writer.uint32(16).int64(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_AppStateFatalExceptionNotification {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_AppStateFatalExceptionNotification();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.collectionNames.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_AppStateFatalExceptionNotification {
    return {
      collectionNames: globalThis.Array.isArray(object?.collectionNames)
        ? object.collectionNames.map((e: any) => globalThis.String(e))
        : [],
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : undefined,
    };
  },

  toJSON(message: Message_AppStateFatalExceptionNotification): unknown {
    const obj: any = {};
    if (message.collectionNames?.length) {
      obj.collectionNames = message.collectionNames;
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = Math.round(message.timestamp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_AppStateFatalExceptionNotification>, I>>(
    base?: I,
  ): Message_AppStateFatalExceptionNotification {
    return Message_AppStateFatalExceptionNotification.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_AppStateFatalExceptionNotification>, I>>(
    object: I,
  ): Message_AppStateFatalExceptionNotification {
    const message = createBaseMessage_AppStateFatalExceptionNotification();
    message.collectionNames = object.collectionNames?.map((e) => e) || [];
    message.timestamp = object.timestamp ?? undefined;
    return message;
  },
};

function createBaseMessage_AppStateSyncKey(): Message_AppStateSyncKey {
  return { keyId: undefined, keyData: undefined };
}

export const Message_AppStateSyncKey: MessageFns<Message_AppStateSyncKey> = {
  encode(message: Message_AppStateSyncKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyId !== undefined) {
      Message_AppStateSyncKeyId.encode(message.keyId, writer.uint32(10).fork()).join();
    }
    if (message.keyData !== undefined) {
      Message_AppStateSyncKeyData.encode(message.keyData, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_AppStateSyncKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_AppStateSyncKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.keyId = Message_AppStateSyncKeyId.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.keyData = Message_AppStateSyncKeyData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_AppStateSyncKey {
    return {
      keyId: isSet(object.keyId) ? Message_AppStateSyncKeyId.fromJSON(object.keyId) : undefined,
      keyData: isSet(object.keyData) ? Message_AppStateSyncKeyData.fromJSON(object.keyData) : undefined,
    };
  },

  toJSON(message: Message_AppStateSyncKey): unknown {
    const obj: any = {};
    if (message.keyId !== undefined) {
      obj.keyId = Message_AppStateSyncKeyId.toJSON(message.keyId);
    }
    if (message.keyData !== undefined) {
      obj.keyData = Message_AppStateSyncKeyData.toJSON(message.keyData);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_AppStateSyncKey>, I>>(base?: I): Message_AppStateSyncKey {
    return Message_AppStateSyncKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_AppStateSyncKey>, I>>(object: I): Message_AppStateSyncKey {
    const message = createBaseMessage_AppStateSyncKey();
    message.keyId = (object.keyId !== undefined && object.keyId !== null)
      ? Message_AppStateSyncKeyId.fromPartial(object.keyId)
      : undefined;
    message.keyData = (object.keyData !== undefined && object.keyData !== null)
      ? Message_AppStateSyncKeyData.fromPartial(object.keyData)
      : undefined;
    return message;
  },
};

function createBaseMessage_AppStateSyncKeyData(): Message_AppStateSyncKeyData {
  return { keyData: undefined, fingerprint: undefined, timestamp: undefined };
}

export const Message_AppStateSyncKeyData: MessageFns<Message_AppStateSyncKeyData> = {
  encode(message: Message_AppStateSyncKeyData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyData !== undefined) {
      writer.uint32(10).bytes(message.keyData);
    }
    if (message.fingerprint !== undefined) {
      Message_AppStateSyncKeyFingerprint.encode(message.fingerprint, writer.uint32(18).fork()).join();
    }
    if (message.timestamp !== undefined) {
      writer.uint32(24).int64(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_AppStateSyncKeyData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_AppStateSyncKeyData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.keyData = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fingerprint = Message_AppStateSyncKeyFingerprint.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_AppStateSyncKeyData {
    return {
      keyData: isSet(object.keyData) ? bytesFromBase64(object.keyData) : undefined,
      fingerprint: isSet(object.fingerprint)
        ? Message_AppStateSyncKeyFingerprint.fromJSON(object.fingerprint)
        : undefined,
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : undefined,
    };
  },

  toJSON(message: Message_AppStateSyncKeyData): unknown {
    const obj: any = {};
    if (message.keyData !== undefined) {
      obj.keyData = base64FromBytes(message.keyData);
    }
    if (message.fingerprint !== undefined) {
      obj.fingerprint = Message_AppStateSyncKeyFingerprint.toJSON(message.fingerprint);
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = Math.round(message.timestamp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_AppStateSyncKeyData>, I>>(base?: I): Message_AppStateSyncKeyData {
    return Message_AppStateSyncKeyData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_AppStateSyncKeyData>, I>>(object: I): Message_AppStateSyncKeyData {
    const message = createBaseMessage_AppStateSyncKeyData();
    message.keyData = object.keyData ?? undefined;
    message.fingerprint = (object.fingerprint !== undefined && object.fingerprint !== null)
      ? Message_AppStateSyncKeyFingerprint.fromPartial(object.fingerprint)
      : undefined;
    message.timestamp = object.timestamp ?? undefined;
    return message;
  },
};

function createBaseMessage_AppStateSyncKeyFingerprint(): Message_AppStateSyncKeyFingerprint {
  return { rawId: undefined, currentIndex: undefined, deviceIndexes: [] };
}

export const Message_AppStateSyncKeyFingerprint: MessageFns<Message_AppStateSyncKeyFingerprint> = {
  encode(message: Message_AppStateSyncKeyFingerprint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rawId !== undefined) {
      writer.uint32(8).uint32(message.rawId);
    }
    if (message.currentIndex !== undefined) {
      writer.uint32(16).uint32(message.currentIndex);
    }
    writer.uint32(26).fork();
    for (const v of message.deviceIndexes) {
      writer.uint32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_AppStateSyncKeyFingerprint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_AppStateSyncKeyFingerprint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.rawId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.currentIndex = reader.uint32();
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.deviceIndexes.push(reader.uint32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.deviceIndexes.push(reader.uint32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_AppStateSyncKeyFingerprint {
    return {
      rawId: isSet(object.rawId) ? globalThis.Number(object.rawId) : undefined,
      currentIndex: isSet(object.currentIndex) ? globalThis.Number(object.currentIndex) : undefined,
      deviceIndexes: globalThis.Array.isArray(object?.deviceIndexes)
        ? object.deviceIndexes.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: Message_AppStateSyncKeyFingerprint): unknown {
    const obj: any = {};
    if (message.rawId !== undefined) {
      obj.rawId = Math.round(message.rawId);
    }
    if (message.currentIndex !== undefined) {
      obj.currentIndex = Math.round(message.currentIndex);
    }
    if (message.deviceIndexes?.length) {
      obj.deviceIndexes = message.deviceIndexes.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_AppStateSyncKeyFingerprint>, I>>(
    base?: I,
  ): Message_AppStateSyncKeyFingerprint {
    return Message_AppStateSyncKeyFingerprint.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_AppStateSyncKeyFingerprint>, I>>(
    object: I,
  ): Message_AppStateSyncKeyFingerprint {
    const message = createBaseMessage_AppStateSyncKeyFingerprint();
    message.rawId = object.rawId ?? undefined;
    message.currentIndex = object.currentIndex ?? undefined;
    message.deviceIndexes = object.deviceIndexes?.map((e) => e) || [];
    return message;
  },
};

function createBaseMessage_AppStateSyncKeyId(): Message_AppStateSyncKeyId {
  return { keyId: undefined };
}

export const Message_AppStateSyncKeyId: MessageFns<Message_AppStateSyncKeyId> = {
  encode(message: Message_AppStateSyncKeyId, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.keyId !== undefined) {
      writer.uint32(10).bytes(message.keyId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_AppStateSyncKeyId {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_AppStateSyncKeyId();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.keyId = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_AppStateSyncKeyId {
    return { keyId: isSet(object.keyId) ? bytesFromBase64(object.keyId) : undefined };
  },

  toJSON(message: Message_AppStateSyncKeyId): unknown {
    const obj: any = {};
    if (message.keyId !== undefined) {
      obj.keyId = base64FromBytes(message.keyId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_AppStateSyncKeyId>, I>>(base?: I): Message_AppStateSyncKeyId {
    return Message_AppStateSyncKeyId.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_AppStateSyncKeyId>, I>>(object: I): Message_AppStateSyncKeyId {
    const message = createBaseMessage_AppStateSyncKeyId();
    message.keyId = object.keyId ?? undefined;
    return message;
  },
};

function createBaseMessage_AppStateSyncKeyRequest(): Message_AppStateSyncKeyRequest {
  return { keyIds: [] };
}

export const Message_AppStateSyncKeyRequest: MessageFns<Message_AppStateSyncKeyRequest> = {
  encode(message: Message_AppStateSyncKeyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.keyIds) {
      Message_AppStateSyncKeyId.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_AppStateSyncKeyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_AppStateSyncKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.keyIds.push(Message_AppStateSyncKeyId.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_AppStateSyncKeyRequest {
    return {
      keyIds: globalThis.Array.isArray(object?.keyIds)
        ? object.keyIds.map((e: any) => Message_AppStateSyncKeyId.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Message_AppStateSyncKeyRequest): unknown {
    const obj: any = {};
    if (message.keyIds?.length) {
      obj.keyIds = message.keyIds.map((e) => Message_AppStateSyncKeyId.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_AppStateSyncKeyRequest>, I>>(base?: I): Message_AppStateSyncKeyRequest {
    return Message_AppStateSyncKeyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_AppStateSyncKeyRequest>, I>>(
    object: I,
  ): Message_AppStateSyncKeyRequest {
    const message = createBaseMessage_AppStateSyncKeyRequest();
    message.keyIds = object.keyIds?.map((e) => Message_AppStateSyncKeyId.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMessage_AppStateSyncKeyShare(): Message_AppStateSyncKeyShare {
  return { keys: [] };
}

export const Message_AppStateSyncKeyShare: MessageFns<Message_AppStateSyncKeyShare> = {
  encode(message: Message_AppStateSyncKeyShare, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.keys) {
      Message_AppStateSyncKey.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_AppStateSyncKeyShare {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_AppStateSyncKeyShare();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.keys.push(Message_AppStateSyncKey.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_AppStateSyncKeyShare {
    return {
      keys: globalThis.Array.isArray(object?.keys)
        ? object.keys.map((e: any) => Message_AppStateSyncKey.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Message_AppStateSyncKeyShare): unknown {
    const obj: any = {};
    if (message.keys?.length) {
      obj.keys = message.keys.map((e) => Message_AppStateSyncKey.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_AppStateSyncKeyShare>, I>>(base?: I): Message_AppStateSyncKeyShare {
    return Message_AppStateSyncKeyShare.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_AppStateSyncKeyShare>, I>>(object: I): Message_AppStateSyncKeyShare {
    const message = createBaseMessage_AppStateSyncKeyShare();
    message.keys = object.keys?.map((e) => Message_AppStateSyncKey.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMessage_AudioMessage(): Message_AudioMessage {
  return {
    url: undefined,
    mimetype: undefined,
    fileSha256: undefined,
    fileLength: undefined,
    seconds: undefined,
    ptt: undefined,
    mediaKey: undefined,
    fileEncSha256: undefined,
    directPath: undefined,
    mediaKeyTimestamp: undefined,
    contextInfo: undefined,
    streamingSidecar: undefined,
    waveform: undefined,
    backgroundArgb: undefined,
    viewOnce: undefined,
    accessibilityLabel: undefined,
  };
}

export const Message_AudioMessage: MessageFns<Message_AudioMessage> = {
  encode(message: Message_AudioMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== undefined) {
      writer.uint32(10).string(message.url);
    }
    if (message.mimetype !== undefined) {
      writer.uint32(18).string(message.mimetype);
    }
    if (message.fileSha256 !== undefined) {
      writer.uint32(26).bytes(message.fileSha256);
    }
    if (message.fileLength !== undefined) {
      writer.uint32(32).uint64(message.fileLength);
    }
    if (message.seconds !== undefined) {
      writer.uint32(40).uint32(message.seconds);
    }
    if (message.ptt !== undefined) {
      writer.uint32(48).bool(message.ptt);
    }
    if (message.mediaKey !== undefined) {
      writer.uint32(58).bytes(message.mediaKey);
    }
    if (message.fileEncSha256 !== undefined) {
      writer.uint32(66).bytes(message.fileEncSha256);
    }
    if (message.directPath !== undefined) {
      writer.uint32(74).string(message.directPath);
    }
    if (message.mediaKeyTimestamp !== undefined) {
      writer.uint32(80).int64(message.mediaKeyTimestamp);
    }
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(138).fork()).join();
    }
    if (message.streamingSidecar !== undefined) {
      writer.uint32(146).bytes(message.streamingSidecar);
    }
    if (message.waveform !== undefined) {
      writer.uint32(154).bytes(message.waveform);
    }
    if (message.backgroundArgb !== undefined) {
      writer.uint32(165).fixed32(message.backgroundArgb);
    }
    if (message.viewOnce !== undefined) {
      writer.uint32(168).bool(message.viewOnce);
    }
    if (message.accessibilityLabel !== undefined) {
      writer.uint32(178).string(message.accessibilityLabel);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_AudioMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_AudioMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.mimetype = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fileSha256 = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.fileLength = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.seconds = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.ptt = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.mediaKey = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.fileEncSha256 = reader.bytes();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.directPath = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.mediaKeyTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.streamingSidecar = reader.bytes();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.waveform = reader.bytes();
          continue;
        }
        case 20: {
          if (tag !== 165) {
            break;
          }

          message.backgroundArgb = reader.fixed32();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.viewOnce = reader.bool();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.accessibilityLabel = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_AudioMessage {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : undefined,
      mimetype: isSet(object.mimetype) ? globalThis.String(object.mimetype) : undefined,
      fileSha256: isSet(object.fileSha256) ? bytesFromBase64(object.fileSha256) : undefined,
      fileLength: isSet(object.fileLength) ? globalThis.Number(object.fileLength) : undefined,
      seconds: isSet(object.seconds) ? globalThis.Number(object.seconds) : undefined,
      ptt: isSet(object.ptt) ? globalThis.Boolean(object.ptt) : undefined,
      mediaKey: isSet(object.mediaKey) ? bytesFromBase64(object.mediaKey) : undefined,
      fileEncSha256: isSet(object.fileEncSha256) ? bytesFromBase64(object.fileEncSha256) : undefined,
      directPath: isSet(object.directPath) ? globalThis.String(object.directPath) : undefined,
      mediaKeyTimestamp: isSet(object.mediaKeyTimestamp) ? globalThis.Number(object.mediaKeyTimestamp) : undefined,
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
      streamingSidecar: isSet(object.streamingSidecar) ? bytesFromBase64(object.streamingSidecar) : undefined,
      waveform: isSet(object.waveform) ? bytesFromBase64(object.waveform) : undefined,
      backgroundArgb: isSet(object.backgroundArgb) ? globalThis.Number(object.backgroundArgb) : undefined,
      viewOnce: isSet(object.viewOnce) ? globalThis.Boolean(object.viewOnce) : undefined,
      accessibilityLabel: isSet(object.accessibilityLabel) ? globalThis.String(object.accessibilityLabel) : undefined,
    };
  },

  toJSON(message: Message_AudioMessage): unknown {
    const obj: any = {};
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    if (message.mimetype !== undefined) {
      obj.mimetype = message.mimetype;
    }
    if (message.fileSha256 !== undefined) {
      obj.fileSha256 = base64FromBytes(message.fileSha256);
    }
    if (message.fileLength !== undefined) {
      obj.fileLength = Math.round(message.fileLength);
    }
    if (message.seconds !== undefined) {
      obj.seconds = Math.round(message.seconds);
    }
    if (message.ptt !== undefined) {
      obj.ptt = message.ptt;
    }
    if (message.mediaKey !== undefined) {
      obj.mediaKey = base64FromBytes(message.mediaKey);
    }
    if (message.fileEncSha256 !== undefined) {
      obj.fileEncSha256 = base64FromBytes(message.fileEncSha256);
    }
    if (message.directPath !== undefined) {
      obj.directPath = message.directPath;
    }
    if (message.mediaKeyTimestamp !== undefined) {
      obj.mediaKeyTimestamp = Math.round(message.mediaKeyTimestamp);
    }
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    if (message.streamingSidecar !== undefined) {
      obj.streamingSidecar = base64FromBytes(message.streamingSidecar);
    }
    if (message.waveform !== undefined) {
      obj.waveform = base64FromBytes(message.waveform);
    }
    if (message.backgroundArgb !== undefined) {
      obj.backgroundArgb = Math.round(message.backgroundArgb);
    }
    if (message.viewOnce !== undefined) {
      obj.viewOnce = message.viewOnce;
    }
    if (message.accessibilityLabel !== undefined) {
      obj.accessibilityLabel = message.accessibilityLabel;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_AudioMessage>, I>>(base?: I): Message_AudioMessage {
    return Message_AudioMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_AudioMessage>, I>>(object: I): Message_AudioMessage {
    const message = createBaseMessage_AudioMessage();
    message.url = object.url ?? undefined;
    message.mimetype = object.mimetype ?? undefined;
    message.fileSha256 = object.fileSha256 ?? undefined;
    message.fileLength = object.fileLength ?? undefined;
    message.seconds = object.seconds ?? undefined;
    message.ptt = object.ptt ?? undefined;
    message.mediaKey = object.mediaKey ?? undefined;
    message.fileEncSha256 = object.fileEncSha256 ?? undefined;
    message.directPath = object.directPath ?? undefined;
    message.mediaKeyTimestamp = object.mediaKeyTimestamp ?? undefined;
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    message.streamingSidecar = object.streamingSidecar ?? undefined;
    message.waveform = object.waveform ?? undefined;
    message.backgroundArgb = object.backgroundArgb ?? undefined;
    message.viewOnce = object.viewOnce ?? undefined;
    message.accessibilityLabel = object.accessibilityLabel ?? undefined;
    return message;
  },
};

function createBaseMessage_BCallMessage(): Message_BCallMessage {
  return { sessionId: undefined, mediaType: undefined, masterKey: undefined, caption: undefined };
}

export const Message_BCallMessage: MessageFns<Message_BCallMessage> = {
  encode(message: Message_BCallMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionId !== undefined) {
      writer.uint32(10).string(message.sessionId);
    }
    if (message.mediaType !== undefined) {
      writer.uint32(16).int32(message.mediaType);
    }
    if (message.masterKey !== undefined) {
      writer.uint32(26).bytes(message.masterKey);
    }
    if (message.caption !== undefined) {
      writer.uint32(34).string(message.caption);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_BCallMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_BCallMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.mediaType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.masterKey = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.caption = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_BCallMessage {
    return {
      sessionId: isSet(object.sessionId) ? globalThis.String(object.sessionId) : undefined,
      mediaType: isSet(object.mediaType) ? message_BCallMessage_MediaTypeFromJSON(object.mediaType) : undefined,
      masterKey: isSet(object.masterKey) ? bytesFromBase64(object.masterKey) : undefined,
      caption: isSet(object.caption) ? globalThis.String(object.caption) : undefined,
    };
  },

  toJSON(message: Message_BCallMessage): unknown {
    const obj: any = {};
    if (message.sessionId !== undefined) {
      obj.sessionId = message.sessionId;
    }
    if (message.mediaType !== undefined) {
      obj.mediaType = message_BCallMessage_MediaTypeToJSON(message.mediaType);
    }
    if (message.masterKey !== undefined) {
      obj.masterKey = base64FromBytes(message.masterKey);
    }
    if (message.caption !== undefined) {
      obj.caption = message.caption;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_BCallMessage>, I>>(base?: I): Message_BCallMessage {
    return Message_BCallMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_BCallMessage>, I>>(object: I): Message_BCallMessage {
    const message = createBaseMessage_BCallMessage();
    message.sessionId = object.sessionId ?? undefined;
    message.mediaType = object.mediaType ?? undefined;
    message.masterKey = object.masterKey ?? undefined;
    message.caption = object.caption ?? undefined;
    return message;
  },
};

function createBaseMessage_BotFeedbackMessage(): Message_BotFeedbackMessage {
  return {
    messageKey: undefined,
    kind: undefined,
    text: undefined,
    kindNegative: undefined,
    kindPositive: undefined,
    kindReport: undefined,
  };
}

export const Message_BotFeedbackMessage: MessageFns<Message_BotFeedbackMessage> = {
  encode(message: Message_BotFeedbackMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.messageKey !== undefined) {
      MessageKey.encode(message.messageKey, writer.uint32(10).fork()).join();
    }
    if (message.kind !== undefined) {
      writer.uint32(16).int32(message.kind);
    }
    if (message.text !== undefined) {
      writer.uint32(26).string(message.text);
    }
    if (message.kindNegative !== undefined) {
      writer.uint32(32).uint64(message.kindNegative);
    }
    if (message.kindPositive !== undefined) {
      writer.uint32(40).uint64(message.kindPositive);
    }
    if (message.kindReport !== undefined) {
      writer.uint32(48).int32(message.kindReport);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_BotFeedbackMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_BotFeedbackMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.messageKey = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.kind = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.kindNegative = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.kindPositive = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.kindReport = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_BotFeedbackMessage {
    return {
      messageKey: isSet(object.messageKey) ? MessageKey.fromJSON(object.messageKey) : undefined,
      kind: isSet(object.kind) ? message_BotFeedbackMessage_BotFeedbackKindFromJSON(object.kind) : undefined,
      text: isSet(object.text) ? globalThis.String(object.text) : undefined,
      kindNegative: isSet(object.kindNegative) ? globalThis.Number(object.kindNegative) : undefined,
      kindPositive: isSet(object.kindPositive) ? globalThis.Number(object.kindPositive) : undefined,
      kindReport: isSet(object.kindReport)
        ? message_BotFeedbackMessage_ReportKindFromJSON(object.kindReport)
        : undefined,
    };
  },

  toJSON(message: Message_BotFeedbackMessage): unknown {
    const obj: any = {};
    if (message.messageKey !== undefined) {
      obj.messageKey = MessageKey.toJSON(message.messageKey);
    }
    if (message.kind !== undefined) {
      obj.kind = message_BotFeedbackMessage_BotFeedbackKindToJSON(message.kind);
    }
    if (message.text !== undefined) {
      obj.text = message.text;
    }
    if (message.kindNegative !== undefined) {
      obj.kindNegative = Math.round(message.kindNegative);
    }
    if (message.kindPositive !== undefined) {
      obj.kindPositive = Math.round(message.kindPositive);
    }
    if (message.kindReport !== undefined) {
      obj.kindReport = message_BotFeedbackMessage_ReportKindToJSON(message.kindReport);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_BotFeedbackMessage>, I>>(base?: I): Message_BotFeedbackMessage {
    return Message_BotFeedbackMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_BotFeedbackMessage>, I>>(object: I): Message_BotFeedbackMessage {
    const message = createBaseMessage_BotFeedbackMessage();
    message.messageKey = (object.messageKey !== undefined && object.messageKey !== null)
      ? MessageKey.fromPartial(object.messageKey)
      : undefined;
    message.kind = object.kind ?? undefined;
    message.text = object.text ?? undefined;
    message.kindNegative = object.kindNegative ?? undefined;
    message.kindPositive = object.kindPositive ?? undefined;
    message.kindReport = object.kindReport ?? undefined;
    return message;
  },
};

function createBaseMessage_ButtonsMessage(): Message_ButtonsMessage {
  return {
    contentText: undefined,
    footerText: undefined,
    contextInfo: undefined,
    buttons: [],
    headerType: undefined,
    text: undefined,
    documentMessage: undefined,
    imageMessage: undefined,
    videoMessage: undefined,
    locationMessage: undefined,
  };
}

export const Message_ButtonsMessage: MessageFns<Message_ButtonsMessage> = {
  encode(message: Message_ButtonsMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.contentText !== undefined) {
      writer.uint32(50).string(message.contentText);
    }
    if (message.footerText !== undefined) {
      writer.uint32(58).string(message.footerText);
    }
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(66).fork()).join();
    }
    for (const v of message.buttons) {
      Message_ButtonsMessage_Button.encode(v!, writer.uint32(74).fork()).join();
    }
    if (message.headerType !== undefined) {
      writer.uint32(80).int32(message.headerType);
    }
    if (message.text !== undefined) {
      writer.uint32(10).string(message.text);
    }
    if (message.documentMessage !== undefined) {
      Message_DocumentMessage.encode(message.documentMessage, writer.uint32(18).fork()).join();
    }
    if (message.imageMessage !== undefined) {
      Message_ImageMessage.encode(message.imageMessage, writer.uint32(26).fork()).join();
    }
    if (message.videoMessage !== undefined) {
      Message_VideoMessage.encode(message.videoMessage, writer.uint32(34).fork()).join();
    }
    if (message.locationMessage !== undefined) {
      Message_LocationMessage.encode(message.locationMessage, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_ButtonsMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_ButtonsMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.contentText = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.footerText = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.buttons.push(Message_ButtonsMessage_Button.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.headerType = reader.int32() as any;
          continue;
        }
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.documentMessage = Message_DocumentMessage.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.imageMessage = Message_ImageMessage.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.videoMessage = Message_VideoMessage.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.locationMessage = Message_LocationMessage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_ButtonsMessage {
    return {
      contentText: isSet(object.contentText) ? globalThis.String(object.contentText) : undefined,
      footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : undefined,
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
      buttons: globalThis.Array.isArray(object?.buttons)
        ? object.buttons.map((e: any) => Message_ButtonsMessage_Button.fromJSON(e))
        : [],
      headerType: isSet(object.headerType) ? message_ButtonsMessage_HeaderTypeFromJSON(object.headerType) : undefined,
      text: isSet(object.text) ? globalThis.String(object.text) : undefined,
      documentMessage: isSet(object.documentMessage)
        ? Message_DocumentMessage.fromJSON(object.documentMessage)
        : undefined,
      imageMessage: isSet(object.imageMessage) ? Message_ImageMessage.fromJSON(object.imageMessage) : undefined,
      videoMessage: isSet(object.videoMessage) ? Message_VideoMessage.fromJSON(object.videoMessage) : undefined,
      locationMessage: isSet(object.locationMessage)
        ? Message_LocationMessage.fromJSON(object.locationMessage)
        : undefined,
    };
  },

  toJSON(message: Message_ButtonsMessage): unknown {
    const obj: any = {};
    if (message.contentText !== undefined) {
      obj.contentText = message.contentText;
    }
    if (message.footerText !== undefined) {
      obj.footerText = message.footerText;
    }
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    if (message.buttons?.length) {
      obj.buttons = message.buttons.map((e) => Message_ButtonsMessage_Button.toJSON(e));
    }
    if (message.headerType !== undefined) {
      obj.headerType = message_ButtonsMessage_HeaderTypeToJSON(message.headerType);
    }
    if (message.text !== undefined) {
      obj.text = message.text;
    }
    if (message.documentMessage !== undefined) {
      obj.documentMessage = Message_DocumentMessage.toJSON(message.documentMessage);
    }
    if (message.imageMessage !== undefined) {
      obj.imageMessage = Message_ImageMessage.toJSON(message.imageMessage);
    }
    if (message.videoMessage !== undefined) {
      obj.videoMessage = Message_VideoMessage.toJSON(message.videoMessage);
    }
    if (message.locationMessage !== undefined) {
      obj.locationMessage = Message_LocationMessage.toJSON(message.locationMessage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_ButtonsMessage>, I>>(base?: I): Message_ButtonsMessage {
    return Message_ButtonsMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_ButtonsMessage>, I>>(object: I): Message_ButtonsMessage {
    const message = createBaseMessage_ButtonsMessage();
    message.contentText = object.contentText ?? undefined;
    message.footerText = object.footerText ?? undefined;
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    message.buttons = object.buttons?.map((e) => Message_ButtonsMessage_Button.fromPartial(e)) || [];
    message.headerType = object.headerType ?? undefined;
    message.text = object.text ?? undefined;
    message.documentMessage = (object.documentMessage !== undefined && object.documentMessage !== null)
      ? Message_DocumentMessage.fromPartial(object.documentMessage)
      : undefined;
    message.imageMessage = (object.imageMessage !== undefined && object.imageMessage !== null)
      ? Message_ImageMessage.fromPartial(object.imageMessage)
      : undefined;
    message.videoMessage = (object.videoMessage !== undefined && object.videoMessage !== null)
      ? Message_VideoMessage.fromPartial(object.videoMessage)
      : undefined;
    message.locationMessage = (object.locationMessage !== undefined && object.locationMessage !== null)
      ? Message_LocationMessage.fromPartial(object.locationMessage)
      : undefined;
    return message;
  },
};

function createBaseMessage_ButtonsMessage_Button(): Message_ButtonsMessage_Button {
  return { buttonId: undefined, buttonText: undefined, type: undefined, nativeFlowInfo: undefined };
}

export const Message_ButtonsMessage_Button: MessageFns<Message_ButtonsMessage_Button> = {
  encode(message: Message_ButtonsMessage_Button, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.buttonId !== undefined) {
      writer.uint32(10).string(message.buttonId);
    }
    if (message.buttonText !== undefined) {
      Message_ButtonsMessage_Button_ButtonText.encode(message.buttonText, writer.uint32(18).fork()).join();
    }
    if (message.type !== undefined) {
      writer.uint32(24).int32(message.type);
    }
    if (message.nativeFlowInfo !== undefined) {
      Message_ButtonsMessage_Button_NativeFlowInfo.encode(message.nativeFlowInfo, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_ButtonsMessage_Button {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_ButtonsMessage_Button();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.buttonId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.buttonText = Message_ButtonsMessage_Button_ButtonText.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.nativeFlowInfo = Message_ButtonsMessage_Button_NativeFlowInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_ButtonsMessage_Button {
    return {
      buttonId: isSet(object.buttonId) ? globalThis.String(object.buttonId) : undefined,
      buttonText: isSet(object.buttonText)
        ? Message_ButtonsMessage_Button_ButtonText.fromJSON(object.buttonText)
        : undefined,
      type: isSet(object.type) ? message_ButtonsMessage_Button_TypeFromJSON(object.type) : undefined,
      nativeFlowInfo: isSet(object.nativeFlowInfo)
        ? Message_ButtonsMessage_Button_NativeFlowInfo.fromJSON(object.nativeFlowInfo)
        : undefined,
    };
  },

  toJSON(message: Message_ButtonsMessage_Button): unknown {
    const obj: any = {};
    if (message.buttonId !== undefined) {
      obj.buttonId = message.buttonId;
    }
    if (message.buttonText !== undefined) {
      obj.buttonText = Message_ButtonsMessage_Button_ButtonText.toJSON(message.buttonText);
    }
    if (message.type !== undefined) {
      obj.type = message_ButtonsMessage_Button_TypeToJSON(message.type);
    }
    if (message.nativeFlowInfo !== undefined) {
      obj.nativeFlowInfo = Message_ButtonsMessage_Button_NativeFlowInfo.toJSON(message.nativeFlowInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_ButtonsMessage_Button>, I>>(base?: I): Message_ButtonsMessage_Button {
    return Message_ButtonsMessage_Button.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_ButtonsMessage_Button>, I>>(
    object: I,
  ): Message_ButtonsMessage_Button {
    const message = createBaseMessage_ButtonsMessage_Button();
    message.buttonId = object.buttonId ?? undefined;
    message.buttonText = (object.buttonText !== undefined && object.buttonText !== null)
      ? Message_ButtonsMessage_Button_ButtonText.fromPartial(object.buttonText)
      : undefined;
    message.type = object.type ?? undefined;
    message.nativeFlowInfo = (object.nativeFlowInfo !== undefined && object.nativeFlowInfo !== null)
      ? Message_ButtonsMessage_Button_NativeFlowInfo.fromPartial(object.nativeFlowInfo)
      : undefined;
    return message;
  },
};

function createBaseMessage_ButtonsMessage_Button_ButtonText(): Message_ButtonsMessage_Button_ButtonText {
  return { displayText: undefined };
}

export const Message_ButtonsMessage_Button_ButtonText: MessageFns<Message_ButtonsMessage_Button_ButtonText> = {
  encode(message: Message_ButtonsMessage_Button_ButtonText, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayText !== undefined) {
      writer.uint32(10).string(message.displayText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_ButtonsMessage_Button_ButtonText {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_ButtonsMessage_Button_ButtonText();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.displayText = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_ButtonsMessage_Button_ButtonText {
    return { displayText: isSet(object.displayText) ? globalThis.String(object.displayText) : undefined };
  },

  toJSON(message: Message_ButtonsMessage_Button_ButtonText): unknown {
    const obj: any = {};
    if (message.displayText !== undefined) {
      obj.displayText = message.displayText;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_ButtonsMessage_Button_ButtonText>, I>>(
    base?: I,
  ): Message_ButtonsMessage_Button_ButtonText {
    return Message_ButtonsMessage_Button_ButtonText.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_ButtonsMessage_Button_ButtonText>, I>>(
    object: I,
  ): Message_ButtonsMessage_Button_ButtonText {
    const message = createBaseMessage_ButtonsMessage_Button_ButtonText();
    message.displayText = object.displayText ?? undefined;
    return message;
  },
};

function createBaseMessage_ButtonsMessage_Button_NativeFlowInfo(): Message_ButtonsMessage_Button_NativeFlowInfo {
  return { name: undefined, paramsJson: undefined };
}

export const Message_ButtonsMessage_Button_NativeFlowInfo: MessageFns<Message_ButtonsMessage_Button_NativeFlowInfo> = {
  encode(
    message: Message_ButtonsMessage_Button_NativeFlowInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.paramsJson !== undefined) {
      writer.uint32(18).string(message.paramsJson);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_ButtonsMessage_Button_NativeFlowInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_ButtonsMessage_Button_NativeFlowInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.paramsJson = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_ButtonsMessage_Button_NativeFlowInfo {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      paramsJson: isSet(object.paramsJson) ? globalThis.String(object.paramsJson) : undefined,
    };
  },

  toJSON(message: Message_ButtonsMessage_Button_NativeFlowInfo): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.paramsJson !== undefined) {
      obj.paramsJson = message.paramsJson;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_ButtonsMessage_Button_NativeFlowInfo>, I>>(
    base?: I,
  ): Message_ButtonsMessage_Button_NativeFlowInfo {
    return Message_ButtonsMessage_Button_NativeFlowInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_ButtonsMessage_Button_NativeFlowInfo>, I>>(
    object: I,
  ): Message_ButtonsMessage_Button_NativeFlowInfo {
    const message = createBaseMessage_ButtonsMessage_Button_NativeFlowInfo();
    message.name = object.name ?? undefined;
    message.paramsJson = object.paramsJson ?? undefined;
    return message;
  },
};

function createBaseMessage_ButtonsResponseMessage(): Message_ButtonsResponseMessage {
  return { selectedButtonId: undefined, contextInfo: undefined, type: undefined, selectedDisplayText: undefined };
}

export const Message_ButtonsResponseMessage: MessageFns<Message_ButtonsResponseMessage> = {
  encode(message: Message_ButtonsResponseMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.selectedButtonId !== undefined) {
      writer.uint32(10).string(message.selectedButtonId);
    }
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(26).fork()).join();
    }
    if (message.type !== undefined) {
      writer.uint32(32).int32(message.type);
    }
    if (message.selectedDisplayText !== undefined) {
      writer.uint32(18).string(message.selectedDisplayText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_ButtonsResponseMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_ButtonsResponseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.selectedButtonId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.selectedDisplayText = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_ButtonsResponseMessage {
    return {
      selectedButtonId: isSet(object.selectedButtonId) ? globalThis.String(object.selectedButtonId) : undefined,
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
      type: isSet(object.type) ? message_ButtonsResponseMessage_TypeFromJSON(object.type) : undefined,
      selectedDisplayText: isSet(object.selectedDisplayText)
        ? globalThis.String(object.selectedDisplayText)
        : undefined,
    };
  },

  toJSON(message: Message_ButtonsResponseMessage): unknown {
    const obj: any = {};
    if (message.selectedButtonId !== undefined) {
      obj.selectedButtonId = message.selectedButtonId;
    }
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    if (message.type !== undefined) {
      obj.type = message_ButtonsResponseMessage_TypeToJSON(message.type);
    }
    if (message.selectedDisplayText !== undefined) {
      obj.selectedDisplayText = message.selectedDisplayText;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_ButtonsResponseMessage>, I>>(base?: I): Message_ButtonsResponseMessage {
    return Message_ButtonsResponseMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_ButtonsResponseMessage>, I>>(
    object: I,
  ): Message_ButtonsResponseMessage {
    const message = createBaseMessage_ButtonsResponseMessage();
    message.selectedButtonId = object.selectedButtonId ?? undefined;
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    message.type = object.type ?? undefined;
    message.selectedDisplayText = object.selectedDisplayText ?? undefined;
    return message;
  },
};

function createBaseMessage_Call(): Message_Call {
  return {
    callKey: undefined,
    conversionSource: undefined,
    conversionData: undefined,
    conversionDelaySeconds: undefined,
    ctwaSignals: undefined,
    ctwaPayload: undefined,
    contextInfo: undefined,
  };
}

export const Message_Call: MessageFns<Message_Call> = {
  encode(message: Message_Call, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.callKey !== undefined) {
      writer.uint32(10).bytes(message.callKey);
    }
    if (message.conversionSource !== undefined) {
      writer.uint32(18).string(message.conversionSource);
    }
    if (message.conversionData !== undefined) {
      writer.uint32(26).bytes(message.conversionData);
    }
    if (message.conversionDelaySeconds !== undefined) {
      writer.uint32(32).uint32(message.conversionDelaySeconds);
    }
    if (message.ctwaSignals !== undefined) {
      writer.uint32(42).string(message.ctwaSignals);
    }
    if (message.ctwaPayload !== undefined) {
      writer.uint32(50).bytes(message.ctwaPayload);
    }
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_Call {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_Call();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.callKey = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.conversionSource = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.conversionData = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.conversionDelaySeconds = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.ctwaSignals = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.ctwaPayload = reader.bytes();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_Call {
    return {
      callKey: isSet(object.callKey) ? bytesFromBase64(object.callKey) : undefined,
      conversionSource: isSet(object.conversionSource) ? globalThis.String(object.conversionSource) : undefined,
      conversionData: isSet(object.conversionData) ? bytesFromBase64(object.conversionData) : undefined,
      conversionDelaySeconds: isSet(object.conversionDelaySeconds)
        ? globalThis.Number(object.conversionDelaySeconds)
        : undefined,
      ctwaSignals: isSet(object.ctwaSignals) ? globalThis.String(object.ctwaSignals) : undefined,
      ctwaPayload: isSet(object.ctwaPayload) ? bytesFromBase64(object.ctwaPayload) : undefined,
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
    };
  },

  toJSON(message: Message_Call): unknown {
    const obj: any = {};
    if (message.callKey !== undefined) {
      obj.callKey = base64FromBytes(message.callKey);
    }
    if (message.conversionSource !== undefined) {
      obj.conversionSource = message.conversionSource;
    }
    if (message.conversionData !== undefined) {
      obj.conversionData = base64FromBytes(message.conversionData);
    }
    if (message.conversionDelaySeconds !== undefined) {
      obj.conversionDelaySeconds = Math.round(message.conversionDelaySeconds);
    }
    if (message.ctwaSignals !== undefined) {
      obj.ctwaSignals = message.ctwaSignals;
    }
    if (message.ctwaPayload !== undefined) {
      obj.ctwaPayload = base64FromBytes(message.ctwaPayload);
    }
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_Call>, I>>(base?: I): Message_Call {
    return Message_Call.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_Call>, I>>(object: I): Message_Call {
    const message = createBaseMessage_Call();
    message.callKey = object.callKey ?? undefined;
    message.conversionSource = object.conversionSource ?? undefined;
    message.conversionData = object.conversionData ?? undefined;
    message.conversionDelaySeconds = object.conversionDelaySeconds ?? undefined;
    message.ctwaSignals = object.ctwaSignals ?? undefined;
    message.ctwaPayload = object.ctwaPayload ?? undefined;
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    return message;
  },
};

function createBaseMessage_CallLogMessage(): Message_CallLogMessage {
  return { isVideo: undefined, callOutcome: undefined, durationSecs: undefined, callType: undefined, participants: [] };
}

export const Message_CallLogMessage: MessageFns<Message_CallLogMessage> = {
  encode(message: Message_CallLogMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isVideo !== undefined) {
      writer.uint32(8).bool(message.isVideo);
    }
    if (message.callOutcome !== undefined) {
      writer.uint32(16).int32(message.callOutcome);
    }
    if (message.durationSecs !== undefined) {
      writer.uint32(24).int64(message.durationSecs);
    }
    if (message.callType !== undefined) {
      writer.uint32(32).int32(message.callType);
    }
    for (const v of message.participants) {
      Message_CallLogMessage_CallParticipant.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_CallLogMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_CallLogMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isVideo = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.callOutcome = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.durationSecs = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.callType = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.participants.push(Message_CallLogMessage_CallParticipant.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_CallLogMessage {
    return {
      isVideo: isSet(object.isVideo) ? globalThis.Boolean(object.isVideo) : undefined,
      callOutcome: isSet(object.callOutcome)
        ? message_CallLogMessage_CallOutcomeFromJSON(object.callOutcome)
        : undefined,
      durationSecs: isSet(object.durationSecs) ? globalThis.Number(object.durationSecs) : undefined,
      callType: isSet(object.callType) ? message_CallLogMessage_CallTypeFromJSON(object.callType) : undefined,
      participants: globalThis.Array.isArray(object?.participants)
        ? object.participants.map((e: any) => Message_CallLogMessage_CallParticipant.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Message_CallLogMessage): unknown {
    const obj: any = {};
    if (message.isVideo !== undefined) {
      obj.isVideo = message.isVideo;
    }
    if (message.callOutcome !== undefined) {
      obj.callOutcome = message_CallLogMessage_CallOutcomeToJSON(message.callOutcome);
    }
    if (message.durationSecs !== undefined) {
      obj.durationSecs = Math.round(message.durationSecs);
    }
    if (message.callType !== undefined) {
      obj.callType = message_CallLogMessage_CallTypeToJSON(message.callType);
    }
    if (message.participants?.length) {
      obj.participants = message.participants.map((e) => Message_CallLogMessage_CallParticipant.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_CallLogMessage>, I>>(base?: I): Message_CallLogMessage {
    return Message_CallLogMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_CallLogMessage>, I>>(object: I): Message_CallLogMessage {
    const message = createBaseMessage_CallLogMessage();
    message.isVideo = object.isVideo ?? undefined;
    message.callOutcome = object.callOutcome ?? undefined;
    message.durationSecs = object.durationSecs ?? undefined;
    message.callType = object.callType ?? undefined;
    message.participants = object.participants?.map((e) => Message_CallLogMessage_CallParticipant.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMessage_CallLogMessage_CallParticipant(): Message_CallLogMessage_CallParticipant {
  return { jid: undefined, callOutcome: undefined };
}

export const Message_CallLogMessage_CallParticipant: MessageFns<Message_CallLogMessage_CallParticipant> = {
  encode(message: Message_CallLogMessage_CallParticipant, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jid !== undefined) {
      writer.uint32(10).string(message.jid);
    }
    if (message.callOutcome !== undefined) {
      writer.uint32(16).int32(message.callOutcome);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_CallLogMessage_CallParticipant {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_CallLogMessage_CallParticipant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.callOutcome = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_CallLogMessage_CallParticipant {
    return {
      jid: isSet(object.jid) ? globalThis.String(object.jid) : undefined,
      callOutcome: isSet(object.callOutcome)
        ? message_CallLogMessage_CallOutcomeFromJSON(object.callOutcome)
        : undefined,
    };
  },

  toJSON(message: Message_CallLogMessage_CallParticipant): unknown {
    const obj: any = {};
    if (message.jid !== undefined) {
      obj.jid = message.jid;
    }
    if (message.callOutcome !== undefined) {
      obj.callOutcome = message_CallLogMessage_CallOutcomeToJSON(message.callOutcome);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_CallLogMessage_CallParticipant>, I>>(
    base?: I,
  ): Message_CallLogMessage_CallParticipant {
    return Message_CallLogMessage_CallParticipant.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_CallLogMessage_CallParticipant>, I>>(
    object: I,
  ): Message_CallLogMessage_CallParticipant {
    const message = createBaseMessage_CallLogMessage_CallParticipant();
    message.jid = object.jid ?? undefined;
    message.callOutcome = object.callOutcome ?? undefined;
    return message;
  },
};

function createBaseMessage_CancelPaymentRequestMessage(): Message_CancelPaymentRequestMessage {
  return { key: undefined };
}

export const Message_CancelPaymentRequestMessage: MessageFns<Message_CancelPaymentRequestMessage> = {
  encode(message: Message_CancelPaymentRequestMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined) {
      MessageKey.encode(message.key, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_CancelPaymentRequestMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_CancelPaymentRequestMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = MessageKey.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_CancelPaymentRequestMessage {
    return { key: isSet(object.key) ? MessageKey.fromJSON(object.key) : undefined };
  },

  toJSON(message: Message_CancelPaymentRequestMessage): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = MessageKey.toJSON(message.key);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_CancelPaymentRequestMessage>, I>>(
    base?: I,
  ): Message_CancelPaymentRequestMessage {
    return Message_CancelPaymentRequestMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_CancelPaymentRequestMessage>, I>>(
    object: I,
  ): Message_CancelPaymentRequestMessage {
    const message = createBaseMessage_CancelPaymentRequestMessage();
    message.key = (object.key !== undefined && object.key !== null) ? MessageKey.fromPartial(object.key) : undefined;
    return message;
  },
};

function createBaseMessage_Chat(): Message_Chat {
  return { displayName: undefined, id: undefined };
}

export const Message_Chat: MessageFns<Message_Chat> = {
  encode(message: Message_Chat, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayName !== undefined) {
      writer.uint32(10).string(message.displayName);
    }
    if (message.id !== undefined) {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_Chat {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_Chat();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_Chat {
    return {
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
    };
  },

  toJSON(message: Message_Chat): unknown {
    const obj: any = {};
    if (message.displayName !== undefined) {
      obj.displayName = message.displayName;
    }
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_Chat>, I>>(base?: I): Message_Chat {
    return Message_Chat.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_Chat>, I>>(object: I): Message_Chat {
    const message = createBaseMessage_Chat();
    message.displayName = object.displayName ?? undefined;
    message.id = object.id ?? undefined;
    return message;
  },
};

function createBaseMessage_CloudAPIThreadControlNotification(): Message_CloudAPIThreadControlNotification {
  return {
    status: undefined,
    senderNotificationTimestampMs: undefined,
    consumerLid: undefined,
    consumerPhoneNumber: undefined,
    notificationContent: undefined,
  };
}

export const Message_CloudAPIThreadControlNotification: MessageFns<Message_CloudAPIThreadControlNotification> = {
  encode(message: Message_CloudAPIThreadControlNotification, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      writer.uint32(8).int32(message.status);
    }
    if (message.senderNotificationTimestampMs !== undefined) {
      writer.uint32(16).int64(message.senderNotificationTimestampMs);
    }
    if (message.consumerLid !== undefined) {
      writer.uint32(26).string(message.consumerLid);
    }
    if (message.consumerPhoneNumber !== undefined) {
      writer.uint32(34).string(message.consumerPhoneNumber);
    }
    if (message.notificationContent !== undefined) {
      Message_CloudAPIThreadControlNotification_CloudAPIThreadControlNotificationContent.encode(
        message.notificationContent,
        writer.uint32(42).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_CloudAPIThreadControlNotification {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_CloudAPIThreadControlNotification();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.senderNotificationTimestampMs = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.consumerLid = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.consumerPhoneNumber = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.notificationContent =
            Message_CloudAPIThreadControlNotification_CloudAPIThreadControlNotificationContent.decode(
              reader,
              reader.uint32(),
            );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_CloudAPIThreadControlNotification {
    return {
      status: isSet(object.status)
        ? message_CloudAPIThreadControlNotification_CloudAPIThreadControlFromJSON(object.status)
        : undefined,
      senderNotificationTimestampMs: isSet(object.senderNotificationTimestampMs)
        ? globalThis.Number(object.senderNotificationTimestampMs)
        : undefined,
      consumerLid: isSet(object.consumerLid) ? globalThis.String(object.consumerLid) : undefined,
      consumerPhoneNumber: isSet(object.consumerPhoneNumber)
        ? globalThis.String(object.consumerPhoneNumber)
        : undefined,
      notificationContent: isSet(object.notificationContent)
        ? Message_CloudAPIThreadControlNotification_CloudAPIThreadControlNotificationContent.fromJSON(
          object.notificationContent,
        )
        : undefined,
    };
  },

  toJSON(message: Message_CloudAPIThreadControlNotification): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = message_CloudAPIThreadControlNotification_CloudAPIThreadControlToJSON(message.status);
    }
    if (message.senderNotificationTimestampMs !== undefined) {
      obj.senderNotificationTimestampMs = Math.round(message.senderNotificationTimestampMs);
    }
    if (message.consumerLid !== undefined) {
      obj.consumerLid = message.consumerLid;
    }
    if (message.consumerPhoneNumber !== undefined) {
      obj.consumerPhoneNumber = message.consumerPhoneNumber;
    }
    if (message.notificationContent !== undefined) {
      obj.notificationContent = Message_CloudAPIThreadControlNotification_CloudAPIThreadControlNotificationContent
        .toJSON(message.notificationContent);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_CloudAPIThreadControlNotification>, I>>(
    base?: I,
  ): Message_CloudAPIThreadControlNotification {
    return Message_CloudAPIThreadControlNotification.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_CloudAPIThreadControlNotification>, I>>(
    object: I,
  ): Message_CloudAPIThreadControlNotification {
    const message = createBaseMessage_CloudAPIThreadControlNotification();
    message.status = object.status ?? undefined;
    message.senderNotificationTimestampMs = object.senderNotificationTimestampMs ?? undefined;
    message.consumerLid = object.consumerLid ?? undefined;
    message.consumerPhoneNumber = object.consumerPhoneNumber ?? undefined;
    message.notificationContent = (object.notificationContent !== undefined && object.notificationContent !== null)
      ? Message_CloudAPIThreadControlNotification_CloudAPIThreadControlNotificationContent.fromPartial(
        object.notificationContent,
      )
      : undefined;
    return message;
  },
};

function createBaseMessage_CloudAPIThreadControlNotification_CloudAPIThreadControlNotificationContent(): Message_CloudAPIThreadControlNotification_CloudAPIThreadControlNotificationContent {
  return { handoffNotificationText: undefined, extraJson: undefined };
}

export const Message_CloudAPIThreadControlNotification_CloudAPIThreadControlNotificationContent: MessageFns<
  Message_CloudAPIThreadControlNotification_CloudAPIThreadControlNotificationContent
> = {
  encode(
    message: Message_CloudAPIThreadControlNotification_CloudAPIThreadControlNotificationContent,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.handoffNotificationText !== undefined) {
      writer.uint32(10).string(message.handoffNotificationText);
    }
    if (message.extraJson !== undefined) {
      writer.uint32(18).string(message.extraJson);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): Message_CloudAPIThreadControlNotification_CloudAPIThreadControlNotificationContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_CloudAPIThreadControlNotification_CloudAPIThreadControlNotificationContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.handoffNotificationText = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.extraJson = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_CloudAPIThreadControlNotification_CloudAPIThreadControlNotificationContent {
    return {
      handoffNotificationText: isSet(object.handoffNotificationText)
        ? globalThis.String(object.handoffNotificationText)
        : undefined,
      extraJson: isSet(object.extraJson) ? globalThis.String(object.extraJson) : undefined,
    };
  },

  toJSON(message: Message_CloudAPIThreadControlNotification_CloudAPIThreadControlNotificationContent): unknown {
    const obj: any = {};
    if (message.handoffNotificationText !== undefined) {
      obj.handoffNotificationText = message.handoffNotificationText;
    }
    if (message.extraJson !== undefined) {
      obj.extraJson = message.extraJson;
    }
    return obj;
  },

  create<
    I extends Exact<DeepPartial<Message_CloudAPIThreadControlNotification_CloudAPIThreadControlNotificationContent>, I>,
  >(base?: I): Message_CloudAPIThreadControlNotification_CloudAPIThreadControlNotificationContent {
    return Message_CloudAPIThreadControlNotification_CloudAPIThreadControlNotificationContent.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<DeepPartial<Message_CloudAPIThreadControlNotification_CloudAPIThreadControlNotificationContent>, I>,
  >(object: I): Message_CloudAPIThreadControlNotification_CloudAPIThreadControlNotificationContent {
    const message = createBaseMessage_CloudAPIThreadControlNotification_CloudAPIThreadControlNotificationContent();
    message.handoffNotificationText = object.handoffNotificationText ?? undefined;
    message.extraJson = object.extraJson ?? undefined;
    return message;
  },
};

function createBaseMessage_CommentMessage(): Message_CommentMessage {
  return { message: undefined, targetMessageKey: undefined };
}

export const Message_CommentMessage: MessageFns<Message_CommentMessage> = {
  encode(message: Message_CommentMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== undefined) {
      Message.encode(message.message, writer.uint32(10).fork()).join();
    }
    if (message.targetMessageKey !== undefined) {
      MessageKey.encode(message.targetMessageKey, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_CommentMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_CommentMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = Message.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.targetMessageKey = MessageKey.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_CommentMessage {
    return {
      message: isSet(object.message) ? Message.fromJSON(object.message) : undefined,
      targetMessageKey: isSet(object.targetMessageKey) ? MessageKey.fromJSON(object.targetMessageKey) : undefined,
    };
  },

  toJSON(message: Message_CommentMessage): unknown {
    const obj: any = {};
    if (message.message !== undefined) {
      obj.message = Message.toJSON(message.message);
    }
    if (message.targetMessageKey !== undefined) {
      obj.targetMessageKey = MessageKey.toJSON(message.targetMessageKey);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_CommentMessage>, I>>(base?: I): Message_CommentMessage {
    return Message_CommentMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_CommentMessage>, I>>(object: I): Message_CommentMessage {
    const message = createBaseMessage_CommentMessage();
    message.message = (object.message !== undefined && object.message !== null)
      ? Message.fromPartial(object.message)
      : undefined;
    message.targetMessageKey = (object.targetMessageKey !== undefined && object.targetMessageKey !== null)
      ? MessageKey.fromPartial(object.targetMessageKey)
      : undefined;
    return message;
  },
};

function createBaseMessage_ContactMessage(): Message_ContactMessage {
  return { displayName: undefined, vcard: undefined, contextInfo: undefined };
}

export const Message_ContactMessage: MessageFns<Message_ContactMessage> = {
  encode(message: Message_ContactMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayName !== undefined) {
      writer.uint32(10).string(message.displayName);
    }
    if (message.vcard !== undefined) {
      writer.uint32(130).string(message.vcard);
    }
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(138).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_ContactMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_ContactMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.vcard = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_ContactMessage {
    return {
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : undefined,
      vcard: isSet(object.vcard) ? globalThis.String(object.vcard) : undefined,
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
    };
  },

  toJSON(message: Message_ContactMessage): unknown {
    const obj: any = {};
    if (message.displayName !== undefined) {
      obj.displayName = message.displayName;
    }
    if (message.vcard !== undefined) {
      obj.vcard = message.vcard;
    }
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_ContactMessage>, I>>(base?: I): Message_ContactMessage {
    return Message_ContactMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_ContactMessage>, I>>(object: I): Message_ContactMessage {
    const message = createBaseMessage_ContactMessage();
    message.displayName = object.displayName ?? undefined;
    message.vcard = object.vcard ?? undefined;
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    return message;
  },
};

function createBaseMessage_ContactsArrayMessage(): Message_ContactsArrayMessage {
  return { displayName: undefined, contacts: [], contextInfo: undefined };
}

export const Message_ContactsArrayMessage: MessageFns<Message_ContactsArrayMessage> = {
  encode(message: Message_ContactsArrayMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayName !== undefined) {
      writer.uint32(10).string(message.displayName);
    }
    for (const v of message.contacts) {
      Message_ContactMessage.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(138).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_ContactsArrayMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_ContactsArrayMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.contacts.push(Message_ContactMessage.decode(reader, reader.uint32()));
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_ContactsArrayMessage {
    return {
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : undefined,
      contacts: globalThis.Array.isArray(object?.contacts)
        ? object.contacts.map((e: any) => Message_ContactMessage.fromJSON(e))
        : [],
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
    };
  },

  toJSON(message: Message_ContactsArrayMessage): unknown {
    const obj: any = {};
    if (message.displayName !== undefined) {
      obj.displayName = message.displayName;
    }
    if (message.contacts?.length) {
      obj.contacts = message.contacts.map((e) => Message_ContactMessage.toJSON(e));
    }
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_ContactsArrayMessage>, I>>(base?: I): Message_ContactsArrayMessage {
    return Message_ContactsArrayMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_ContactsArrayMessage>, I>>(object: I): Message_ContactsArrayMessage {
    const message = createBaseMessage_ContactsArrayMessage();
    message.displayName = object.displayName ?? undefined;
    message.contacts = object.contacts?.map((e) => Message_ContactMessage.fromPartial(e)) || [];
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    return message;
  },
};

function createBaseMessage_DeclinePaymentRequestMessage(): Message_DeclinePaymentRequestMessage {
  return { key: undefined };
}

export const Message_DeclinePaymentRequestMessage: MessageFns<Message_DeclinePaymentRequestMessage> = {
  encode(message: Message_DeclinePaymentRequestMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined) {
      MessageKey.encode(message.key, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_DeclinePaymentRequestMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_DeclinePaymentRequestMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = MessageKey.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_DeclinePaymentRequestMessage {
    return { key: isSet(object.key) ? MessageKey.fromJSON(object.key) : undefined };
  },

  toJSON(message: Message_DeclinePaymentRequestMessage): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = MessageKey.toJSON(message.key);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_DeclinePaymentRequestMessage>, I>>(
    base?: I,
  ): Message_DeclinePaymentRequestMessage {
    return Message_DeclinePaymentRequestMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_DeclinePaymentRequestMessage>, I>>(
    object: I,
  ): Message_DeclinePaymentRequestMessage {
    const message = createBaseMessage_DeclinePaymentRequestMessage();
    message.key = (object.key !== undefined && object.key !== null) ? MessageKey.fromPartial(object.key) : undefined;
    return message;
  },
};

function createBaseMessage_DeviceSentMessage(): Message_DeviceSentMessage {
  return { destinationJid: undefined, message: undefined, phash: undefined };
}

export const Message_DeviceSentMessage: MessageFns<Message_DeviceSentMessage> = {
  encode(message: Message_DeviceSentMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.destinationJid !== undefined) {
      writer.uint32(10).string(message.destinationJid);
    }
    if (message.message !== undefined) {
      Message.encode(message.message, writer.uint32(18).fork()).join();
    }
    if (message.phash !== undefined) {
      writer.uint32(26).string(message.phash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_DeviceSentMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_DeviceSentMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.destinationJid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = Message.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.phash = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_DeviceSentMessage {
    return {
      destinationJid: isSet(object.destinationJid) ? globalThis.String(object.destinationJid) : undefined,
      message: isSet(object.message) ? Message.fromJSON(object.message) : undefined,
      phash: isSet(object.phash) ? globalThis.String(object.phash) : undefined,
    };
  },

  toJSON(message: Message_DeviceSentMessage): unknown {
    const obj: any = {};
    if (message.destinationJid !== undefined) {
      obj.destinationJid = message.destinationJid;
    }
    if (message.message !== undefined) {
      obj.message = Message.toJSON(message.message);
    }
    if (message.phash !== undefined) {
      obj.phash = message.phash;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_DeviceSentMessage>, I>>(base?: I): Message_DeviceSentMessage {
    return Message_DeviceSentMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_DeviceSentMessage>, I>>(object: I): Message_DeviceSentMessage {
    const message = createBaseMessage_DeviceSentMessage();
    message.destinationJid = object.destinationJid ?? undefined;
    message.message = (object.message !== undefined && object.message !== null)
      ? Message.fromPartial(object.message)
      : undefined;
    message.phash = object.phash ?? undefined;
    return message;
  },
};

function createBaseMessage_DocumentMessage(): Message_DocumentMessage {
  return {
    url: undefined,
    mimetype: undefined,
    title: undefined,
    fileSha256: undefined,
    fileLength: undefined,
    pageCount: undefined,
    mediaKey: undefined,
    fileName: undefined,
    fileEncSha256: undefined,
    directPath: undefined,
    mediaKeyTimestamp: undefined,
    contactVcard: undefined,
    thumbnailDirectPath: undefined,
    thumbnailSha256: undefined,
    thumbnailEncSha256: undefined,
    jpegThumbnail: undefined,
    contextInfo: undefined,
    thumbnailHeight: undefined,
    thumbnailWidth: undefined,
    caption: undefined,
    accessibilityLabel: undefined,
  };
}

export const Message_DocumentMessage: MessageFns<Message_DocumentMessage> = {
  encode(message: Message_DocumentMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== undefined) {
      writer.uint32(10).string(message.url);
    }
    if (message.mimetype !== undefined) {
      writer.uint32(18).string(message.mimetype);
    }
    if (message.title !== undefined) {
      writer.uint32(26).string(message.title);
    }
    if (message.fileSha256 !== undefined) {
      writer.uint32(34).bytes(message.fileSha256);
    }
    if (message.fileLength !== undefined) {
      writer.uint32(40).uint64(message.fileLength);
    }
    if (message.pageCount !== undefined) {
      writer.uint32(48).uint32(message.pageCount);
    }
    if (message.mediaKey !== undefined) {
      writer.uint32(58).bytes(message.mediaKey);
    }
    if (message.fileName !== undefined) {
      writer.uint32(66).string(message.fileName);
    }
    if (message.fileEncSha256 !== undefined) {
      writer.uint32(74).bytes(message.fileEncSha256);
    }
    if (message.directPath !== undefined) {
      writer.uint32(82).string(message.directPath);
    }
    if (message.mediaKeyTimestamp !== undefined) {
      writer.uint32(88).int64(message.mediaKeyTimestamp);
    }
    if (message.contactVcard !== undefined) {
      writer.uint32(96).bool(message.contactVcard);
    }
    if (message.thumbnailDirectPath !== undefined) {
      writer.uint32(106).string(message.thumbnailDirectPath);
    }
    if (message.thumbnailSha256 !== undefined) {
      writer.uint32(114).bytes(message.thumbnailSha256);
    }
    if (message.thumbnailEncSha256 !== undefined) {
      writer.uint32(122).bytes(message.thumbnailEncSha256);
    }
    if (message.jpegThumbnail !== undefined) {
      writer.uint32(130).bytes(message.jpegThumbnail);
    }
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(138).fork()).join();
    }
    if (message.thumbnailHeight !== undefined) {
      writer.uint32(144).uint32(message.thumbnailHeight);
    }
    if (message.thumbnailWidth !== undefined) {
      writer.uint32(152).uint32(message.thumbnailWidth);
    }
    if (message.caption !== undefined) {
      writer.uint32(162).string(message.caption);
    }
    if (message.accessibilityLabel !== undefined) {
      writer.uint32(170).string(message.accessibilityLabel);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_DocumentMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_DocumentMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.mimetype = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.fileSha256 = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.fileLength = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.pageCount = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.mediaKey = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.fileName = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.fileEncSha256 = reader.bytes();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.directPath = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.mediaKeyTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.contactVcard = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.thumbnailDirectPath = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.thumbnailSha256 = reader.bytes();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.thumbnailEncSha256 = reader.bytes();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.jpegThumbnail = reader.bytes();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.thumbnailHeight = reader.uint32();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.thumbnailWidth = reader.uint32();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.caption = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.accessibilityLabel = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_DocumentMessage {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : undefined,
      mimetype: isSet(object.mimetype) ? globalThis.String(object.mimetype) : undefined,
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      fileSha256: isSet(object.fileSha256) ? bytesFromBase64(object.fileSha256) : undefined,
      fileLength: isSet(object.fileLength) ? globalThis.Number(object.fileLength) : undefined,
      pageCount: isSet(object.pageCount) ? globalThis.Number(object.pageCount) : undefined,
      mediaKey: isSet(object.mediaKey) ? bytesFromBase64(object.mediaKey) : undefined,
      fileName: isSet(object.fileName) ? globalThis.String(object.fileName) : undefined,
      fileEncSha256: isSet(object.fileEncSha256) ? bytesFromBase64(object.fileEncSha256) : undefined,
      directPath: isSet(object.directPath) ? globalThis.String(object.directPath) : undefined,
      mediaKeyTimestamp: isSet(object.mediaKeyTimestamp) ? globalThis.Number(object.mediaKeyTimestamp) : undefined,
      contactVcard: isSet(object.contactVcard) ? globalThis.Boolean(object.contactVcard) : undefined,
      thumbnailDirectPath: isSet(object.thumbnailDirectPath)
        ? globalThis.String(object.thumbnailDirectPath)
        : undefined,
      thumbnailSha256: isSet(object.thumbnailSha256) ? bytesFromBase64(object.thumbnailSha256) : undefined,
      thumbnailEncSha256: isSet(object.thumbnailEncSha256) ? bytesFromBase64(object.thumbnailEncSha256) : undefined,
      jpegThumbnail: isSet(object.jpegThumbnail) ? bytesFromBase64(object.jpegThumbnail) : undefined,
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
      thumbnailHeight: isSet(object.thumbnailHeight) ? globalThis.Number(object.thumbnailHeight) : undefined,
      thumbnailWidth: isSet(object.thumbnailWidth) ? globalThis.Number(object.thumbnailWidth) : undefined,
      caption: isSet(object.caption) ? globalThis.String(object.caption) : undefined,
      accessibilityLabel: isSet(object.accessibilityLabel) ? globalThis.String(object.accessibilityLabel) : undefined,
    };
  },

  toJSON(message: Message_DocumentMessage): unknown {
    const obj: any = {};
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    if (message.mimetype !== undefined) {
      obj.mimetype = message.mimetype;
    }
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.fileSha256 !== undefined) {
      obj.fileSha256 = base64FromBytes(message.fileSha256);
    }
    if (message.fileLength !== undefined) {
      obj.fileLength = Math.round(message.fileLength);
    }
    if (message.pageCount !== undefined) {
      obj.pageCount = Math.round(message.pageCount);
    }
    if (message.mediaKey !== undefined) {
      obj.mediaKey = base64FromBytes(message.mediaKey);
    }
    if (message.fileName !== undefined) {
      obj.fileName = message.fileName;
    }
    if (message.fileEncSha256 !== undefined) {
      obj.fileEncSha256 = base64FromBytes(message.fileEncSha256);
    }
    if (message.directPath !== undefined) {
      obj.directPath = message.directPath;
    }
    if (message.mediaKeyTimestamp !== undefined) {
      obj.mediaKeyTimestamp = Math.round(message.mediaKeyTimestamp);
    }
    if (message.contactVcard !== undefined) {
      obj.contactVcard = message.contactVcard;
    }
    if (message.thumbnailDirectPath !== undefined) {
      obj.thumbnailDirectPath = message.thumbnailDirectPath;
    }
    if (message.thumbnailSha256 !== undefined) {
      obj.thumbnailSha256 = base64FromBytes(message.thumbnailSha256);
    }
    if (message.thumbnailEncSha256 !== undefined) {
      obj.thumbnailEncSha256 = base64FromBytes(message.thumbnailEncSha256);
    }
    if (message.jpegThumbnail !== undefined) {
      obj.jpegThumbnail = base64FromBytes(message.jpegThumbnail);
    }
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    if (message.thumbnailHeight !== undefined) {
      obj.thumbnailHeight = Math.round(message.thumbnailHeight);
    }
    if (message.thumbnailWidth !== undefined) {
      obj.thumbnailWidth = Math.round(message.thumbnailWidth);
    }
    if (message.caption !== undefined) {
      obj.caption = message.caption;
    }
    if (message.accessibilityLabel !== undefined) {
      obj.accessibilityLabel = message.accessibilityLabel;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_DocumentMessage>, I>>(base?: I): Message_DocumentMessage {
    return Message_DocumentMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_DocumentMessage>, I>>(object: I): Message_DocumentMessage {
    const message = createBaseMessage_DocumentMessage();
    message.url = object.url ?? undefined;
    message.mimetype = object.mimetype ?? undefined;
    message.title = object.title ?? undefined;
    message.fileSha256 = object.fileSha256 ?? undefined;
    message.fileLength = object.fileLength ?? undefined;
    message.pageCount = object.pageCount ?? undefined;
    message.mediaKey = object.mediaKey ?? undefined;
    message.fileName = object.fileName ?? undefined;
    message.fileEncSha256 = object.fileEncSha256 ?? undefined;
    message.directPath = object.directPath ?? undefined;
    message.mediaKeyTimestamp = object.mediaKeyTimestamp ?? undefined;
    message.contactVcard = object.contactVcard ?? undefined;
    message.thumbnailDirectPath = object.thumbnailDirectPath ?? undefined;
    message.thumbnailSha256 = object.thumbnailSha256 ?? undefined;
    message.thumbnailEncSha256 = object.thumbnailEncSha256 ?? undefined;
    message.jpegThumbnail = object.jpegThumbnail ?? undefined;
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    message.thumbnailHeight = object.thumbnailHeight ?? undefined;
    message.thumbnailWidth = object.thumbnailWidth ?? undefined;
    message.caption = object.caption ?? undefined;
    message.accessibilityLabel = object.accessibilityLabel ?? undefined;
    return message;
  },
};

function createBaseMessage_EncCommentMessage(): Message_EncCommentMessage {
  return { targetMessageKey: undefined, encPayload: undefined, encIv: undefined };
}

export const Message_EncCommentMessage: MessageFns<Message_EncCommentMessage> = {
  encode(message: Message_EncCommentMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.targetMessageKey !== undefined) {
      MessageKey.encode(message.targetMessageKey, writer.uint32(10).fork()).join();
    }
    if (message.encPayload !== undefined) {
      writer.uint32(18).bytes(message.encPayload);
    }
    if (message.encIv !== undefined) {
      writer.uint32(26).bytes(message.encIv);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_EncCommentMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_EncCommentMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.targetMessageKey = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.encPayload = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.encIv = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_EncCommentMessage {
    return {
      targetMessageKey: isSet(object.targetMessageKey) ? MessageKey.fromJSON(object.targetMessageKey) : undefined,
      encPayload: isSet(object.encPayload) ? bytesFromBase64(object.encPayload) : undefined,
      encIv: isSet(object.encIv) ? bytesFromBase64(object.encIv) : undefined,
    };
  },

  toJSON(message: Message_EncCommentMessage): unknown {
    const obj: any = {};
    if (message.targetMessageKey !== undefined) {
      obj.targetMessageKey = MessageKey.toJSON(message.targetMessageKey);
    }
    if (message.encPayload !== undefined) {
      obj.encPayload = base64FromBytes(message.encPayload);
    }
    if (message.encIv !== undefined) {
      obj.encIv = base64FromBytes(message.encIv);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_EncCommentMessage>, I>>(base?: I): Message_EncCommentMessage {
    return Message_EncCommentMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_EncCommentMessage>, I>>(object: I): Message_EncCommentMessage {
    const message = createBaseMessage_EncCommentMessage();
    message.targetMessageKey = (object.targetMessageKey !== undefined && object.targetMessageKey !== null)
      ? MessageKey.fromPartial(object.targetMessageKey)
      : undefined;
    message.encPayload = object.encPayload ?? undefined;
    message.encIv = object.encIv ?? undefined;
    return message;
  },
};

function createBaseMessage_EncEventResponseMessage(): Message_EncEventResponseMessage {
  return { eventCreationMessageKey: undefined, encPayload: undefined, encIv: undefined };
}

export const Message_EncEventResponseMessage: MessageFns<Message_EncEventResponseMessage> = {
  encode(message: Message_EncEventResponseMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventCreationMessageKey !== undefined) {
      MessageKey.encode(message.eventCreationMessageKey, writer.uint32(10).fork()).join();
    }
    if (message.encPayload !== undefined) {
      writer.uint32(18).bytes(message.encPayload);
    }
    if (message.encIv !== undefined) {
      writer.uint32(26).bytes(message.encIv);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_EncEventResponseMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_EncEventResponseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventCreationMessageKey = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.encPayload = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.encIv = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_EncEventResponseMessage {
    return {
      eventCreationMessageKey: isSet(object.eventCreationMessageKey)
        ? MessageKey.fromJSON(object.eventCreationMessageKey)
        : undefined,
      encPayload: isSet(object.encPayload) ? bytesFromBase64(object.encPayload) : undefined,
      encIv: isSet(object.encIv) ? bytesFromBase64(object.encIv) : undefined,
    };
  },

  toJSON(message: Message_EncEventResponseMessage): unknown {
    const obj: any = {};
    if (message.eventCreationMessageKey !== undefined) {
      obj.eventCreationMessageKey = MessageKey.toJSON(message.eventCreationMessageKey);
    }
    if (message.encPayload !== undefined) {
      obj.encPayload = base64FromBytes(message.encPayload);
    }
    if (message.encIv !== undefined) {
      obj.encIv = base64FromBytes(message.encIv);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_EncEventResponseMessage>, I>>(base?: I): Message_EncEventResponseMessage {
    return Message_EncEventResponseMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_EncEventResponseMessage>, I>>(
    object: I,
  ): Message_EncEventResponseMessage {
    const message = createBaseMessage_EncEventResponseMessage();
    message.eventCreationMessageKey =
      (object.eventCreationMessageKey !== undefined && object.eventCreationMessageKey !== null)
        ? MessageKey.fromPartial(object.eventCreationMessageKey)
        : undefined;
    message.encPayload = object.encPayload ?? undefined;
    message.encIv = object.encIv ?? undefined;
    return message;
  },
};

function createBaseMessage_EncReactionMessage(): Message_EncReactionMessage {
  return { targetMessageKey: undefined, encPayload: undefined, encIv: undefined };
}

export const Message_EncReactionMessage: MessageFns<Message_EncReactionMessage> = {
  encode(message: Message_EncReactionMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.targetMessageKey !== undefined) {
      MessageKey.encode(message.targetMessageKey, writer.uint32(10).fork()).join();
    }
    if (message.encPayload !== undefined) {
      writer.uint32(18).bytes(message.encPayload);
    }
    if (message.encIv !== undefined) {
      writer.uint32(26).bytes(message.encIv);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_EncReactionMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_EncReactionMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.targetMessageKey = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.encPayload = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.encIv = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_EncReactionMessage {
    return {
      targetMessageKey: isSet(object.targetMessageKey) ? MessageKey.fromJSON(object.targetMessageKey) : undefined,
      encPayload: isSet(object.encPayload) ? bytesFromBase64(object.encPayload) : undefined,
      encIv: isSet(object.encIv) ? bytesFromBase64(object.encIv) : undefined,
    };
  },

  toJSON(message: Message_EncReactionMessage): unknown {
    const obj: any = {};
    if (message.targetMessageKey !== undefined) {
      obj.targetMessageKey = MessageKey.toJSON(message.targetMessageKey);
    }
    if (message.encPayload !== undefined) {
      obj.encPayload = base64FromBytes(message.encPayload);
    }
    if (message.encIv !== undefined) {
      obj.encIv = base64FromBytes(message.encIv);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_EncReactionMessage>, I>>(base?: I): Message_EncReactionMessage {
    return Message_EncReactionMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_EncReactionMessage>, I>>(object: I): Message_EncReactionMessage {
    const message = createBaseMessage_EncReactionMessage();
    message.targetMessageKey = (object.targetMessageKey !== undefined && object.targetMessageKey !== null)
      ? MessageKey.fromPartial(object.targetMessageKey)
      : undefined;
    message.encPayload = object.encPayload ?? undefined;
    message.encIv = object.encIv ?? undefined;
    return message;
  },
};

function createBaseMessage_EventMessage(): Message_EventMessage {
  return {
    contextInfo: undefined,
    isCanceled: undefined,
    name: undefined,
    description: undefined,
    location: undefined,
    joinLink: undefined,
    startTime: undefined,
    endTime: undefined,
    extraGuestsAllowed: undefined,
    isScheduleCall: undefined,
  };
}

export const Message_EventMessage: MessageFns<Message_EventMessage> = {
  encode(message: Message_EventMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(10).fork()).join();
    }
    if (message.isCanceled !== undefined) {
      writer.uint32(16).bool(message.isCanceled);
    }
    if (message.name !== undefined) {
      writer.uint32(26).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(34).string(message.description);
    }
    if (message.location !== undefined) {
      Message_LocationMessage.encode(message.location, writer.uint32(42).fork()).join();
    }
    if (message.joinLink !== undefined) {
      writer.uint32(50).string(message.joinLink);
    }
    if (message.startTime !== undefined) {
      writer.uint32(56).int64(message.startTime);
    }
    if (message.endTime !== undefined) {
      writer.uint32(64).int64(message.endTime);
    }
    if (message.extraGuestsAllowed !== undefined) {
      writer.uint32(72).bool(message.extraGuestsAllowed);
    }
    if (message.isScheduleCall !== undefined) {
      writer.uint32(80).bool(message.isScheduleCall);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_EventMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_EventMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isCanceled = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.location = Message_LocationMessage.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.joinLink = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.startTime = longToNumber(reader.int64());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.endTime = longToNumber(reader.int64());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.extraGuestsAllowed = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.isScheduleCall = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_EventMessage {
    return {
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
      isCanceled: isSet(object.isCanceled) ? globalThis.Boolean(object.isCanceled) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      location: isSet(object.location) ? Message_LocationMessage.fromJSON(object.location) : undefined,
      joinLink: isSet(object.joinLink) ? globalThis.String(object.joinLink) : undefined,
      startTime: isSet(object.startTime) ? globalThis.Number(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? globalThis.Number(object.endTime) : undefined,
      extraGuestsAllowed: isSet(object.extraGuestsAllowed) ? globalThis.Boolean(object.extraGuestsAllowed) : undefined,
      isScheduleCall: isSet(object.isScheduleCall) ? globalThis.Boolean(object.isScheduleCall) : undefined,
    };
  },

  toJSON(message: Message_EventMessage): unknown {
    const obj: any = {};
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    if (message.isCanceled !== undefined) {
      obj.isCanceled = message.isCanceled;
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.location !== undefined) {
      obj.location = Message_LocationMessage.toJSON(message.location);
    }
    if (message.joinLink !== undefined) {
      obj.joinLink = message.joinLink;
    }
    if (message.startTime !== undefined) {
      obj.startTime = Math.round(message.startTime);
    }
    if (message.endTime !== undefined) {
      obj.endTime = Math.round(message.endTime);
    }
    if (message.extraGuestsAllowed !== undefined) {
      obj.extraGuestsAllowed = message.extraGuestsAllowed;
    }
    if (message.isScheduleCall !== undefined) {
      obj.isScheduleCall = message.isScheduleCall;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_EventMessage>, I>>(base?: I): Message_EventMessage {
    return Message_EventMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_EventMessage>, I>>(object: I): Message_EventMessage {
    const message = createBaseMessage_EventMessage();
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    message.isCanceled = object.isCanceled ?? undefined;
    message.name = object.name ?? undefined;
    message.description = object.description ?? undefined;
    message.location = (object.location !== undefined && object.location !== null)
      ? Message_LocationMessage.fromPartial(object.location)
      : undefined;
    message.joinLink = object.joinLink ?? undefined;
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.extraGuestsAllowed = object.extraGuestsAllowed ?? undefined;
    message.isScheduleCall = object.isScheduleCall ?? undefined;
    return message;
  },
};

function createBaseMessage_EventResponseMessage(): Message_EventResponseMessage {
  return { response: undefined, timestampMs: undefined, extraGuestCount: undefined };
}

export const Message_EventResponseMessage: MessageFns<Message_EventResponseMessage> = {
  encode(message: Message_EventResponseMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.response !== undefined) {
      writer.uint32(8).int32(message.response);
    }
    if (message.timestampMs !== undefined) {
      writer.uint32(16).int64(message.timestampMs);
    }
    if (message.extraGuestCount !== undefined) {
      writer.uint32(24).int32(message.extraGuestCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_EventResponseMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_EventResponseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.response = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.timestampMs = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.extraGuestCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_EventResponseMessage {
    return {
      response: isSet(object.response)
        ? message_EventResponseMessage_EventResponseTypeFromJSON(object.response)
        : undefined,
      timestampMs: isSet(object.timestampMs) ? globalThis.Number(object.timestampMs) : undefined,
      extraGuestCount: isSet(object.extraGuestCount) ? globalThis.Number(object.extraGuestCount) : undefined,
    };
  },

  toJSON(message: Message_EventResponseMessage): unknown {
    const obj: any = {};
    if (message.response !== undefined) {
      obj.response = message_EventResponseMessage_EventResponseTypeToJSON(message.response);
    }
    if (message.timestampMs !== undefined) {
      obj.timestampMs = Math.round(message.timestampMs);
    }
    if (message.extraGuestCount !== undefined) {
      obj.extraGuestCount = Math.round(message.extraGuestCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_EventResponseMessage>, I>>(base?: I): Message_EventResponseMessage {
    return Message_EventResponseMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_EventResponseMessage>, I>>(object: I): Message_EventResponseMessage {
    const message = createBaseMessage_EventResponseMessage();
    message.response = object.response ?? undefined;
    message.timestampMs = object.timestampMs ?? undefined;
    message.extraGuestCount = object.extraGuestCount ?? undefined;
    return message;
  },
};

function createBaseMessage_ExtendedTextMessage(): Message_ExtendedTextMessage {
  return {
    text: undefined,
    matchedText: undefined,
    description: undefined,
    title: undefined,
    textArgb: undefined,
    backgroundArgb: undefined,
    font: undefined,
    previewType: undefined,
    jpegThumbnail: undefined,
    contextInfo: undefined,
    doNotPlayInline: undefined,
    thumbnailDirectPath: undefined,
    thumbnailSha256: undefined,
    thumbnailEncSha256: undefined,
    mediaKey: undefined,
    mediaKeyTimestamp: undefined,
    thumbnailHeight: undefined,
    thumbnailWidth: undefined,
    inviteLinkGroupType: undefined,
    inviteLinkParentGroupSubjectV2: undefined,
    inviteLinkParentGroupThumbnailV2: undefined,
    inviteLinkGroupTypeV2: undefined,
    viewOnce: undefined,
    videoHeight: undefined,
    videoWidth: undefined,
    faviconMMSMetadata: undefined,
    linkPreviewMetadata: undefined,
    paymentLinkMetadata: undefined,
  };
}

export const Message_ExtendedTextMessage: MessageFns<Message_ExtendedTextMessage> = {
  encode(message: Message_ExtendedTextMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== undefined) {
      writer.uint32(10).string(message.text);
    }
    if (message.matchedText !== undefined) {
      writer.uint32(18).string(message.matchedText);
    }
    if (message.description !== undefined) {
      writer.uint32(42).string(message.description);
    }
    if (message.title !== undefined) {
      writer.uint32(50).string(message.title);
    }
    if (message.textArgb !== undefined) {
      writer.uint32(61).fixed32(message.textArgb);
    }
    if (message.backgroundArgb !== undefined) {
      writer.uint32(69).fixed32(message.backgroundArgb);
    }
    if (message.font !== undefined) {
      writer.uint32(72).int32(message.font);
    }
    if (message.previewType !== undefined) {
      writer.uint32(80).int32(message.previewType);
    }
    if (message.jpegThumbnail !== undefined) {
      writer.uint32(130).bytes(message.jpegThumbnail);
    }
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(138).fork()).join();
    }
    if (message.doNotPlayInline !== undefined) {
      writer.uint32(144).bool(message.doNotPlayInline);
    }
    if (message.thumbnailDirectPath !== undefined) {
      writer.uint32(154).string(message.thumbnailDirectPath);
    }
    if (message.thumbnailSha256 !== undefined) {
      writer.uint32(162).bytes(message.thumbnailSha256);
    }
    if (message.thumbnailEncSha256 !== undefined) {
      writer.uint32(170).bytes(message.thumbnailEncSha256);
    }
    if (message.mediaKey !== undefined) {
      writer.uint32(178).bytes(message.mediaKey);
    }
    if (message.mediaKeyTimestamp !== undefined) {
      writer.uint32(184).int64(message.mediaKeyTimestamp);
    }
    if (message.thumbnailHeight !== undefined) {
      writer.uint32(192).uint32(message.thumbnailHeight);
    }
    if (message.thumbnailWidth !== undefined) {
      writer.uint32(200).uint32(message.thumbnailWidth);
    }
    if (message.inviteLinkGroupType !== undefined) {
      writer.uint32(208).int32(message.inviteLinkGroupType);
    }
    if (message.inviteLinkParentGroupSubjectV2 !== undefined) {
      writer.uint32(218).string(message.inviteLinkParentGroupSubjectV2);
    }
    if (message.inviteLinkParentGroupThumbnailV2 !== undefined) {
      writer.uint32(226).bytes(message.inviteLinkParentGroupThumbnailV2);
    }
    if (message.inviteLinkGroupTypeV2 !== undefined) {
      writer.uint32(232).int32(message.inviteLinkGroupTypeV2);
    }
    if (message.viewOnce !== undefined) {
      writer.uint32(240).bool(message.viewOnce);
    }
    if (message.videoHeight !== undefined) {
      writer.uint32(248).uint32(message.videoHeight);
    }
    if (message.videoWidth !== undefined) {
      writer.uint32(256).uint32(message.videoWidth);
    }
    if (message.faviconMMSMetadata !== undefined) {
      Message_MMSThumbnailMetadata.encode(message.faviconMMSMetadata, writer.uint32(266).fork()).join();
    }
    if (message.linkPreviewMetadata !== undefined) {
      Message_LinkPreviewMetadata.encode(message.linkPreviewMetadata, writer.uint32(274).fork()).join();
    }
    if (message.paymentLinkMetadata !== undefined) {
      Message_PaymentLinkMetadata.encode(message.paymentLinkMetadata, writer.uint32(282).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_ExtendedTextMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_ExtendedTextMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.matchedText = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 61) {
            break;
          }

          message.textArgb = reader.fixed32();
          continue;
        }
        case 8: {
          if (tag !== 69) {
            break;
          }

          message.backgroundArgb = reader.fixed32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.font = reader.int32() as any;
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.previewType = reader.int32() as any;
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.jpegThumbnail = reader.bytes();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.doNotPlayInline = reader.bool();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.thumbnailDirectPath = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.thumbnailSha256 = reader.bytes();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.thumbnailEncSha256 = reader.bytes();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.mediaKey = reader.bytes();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.mediaKeyTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.thumbnailHeight = reader.uint32();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.thumbnailWidth = reader.uint32();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.inviteLinkGroupType = reader.int32() as any;
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.inviteLinkParentGroupSubjectV2 = reader.string();
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.inviteLinkParentGroupThumbnailV2 = reader.bytes();
          continue;
        }
        case 29: {
          if (tag !== 232) {
            break;
          }

          message.inviteLinkGroupTypeV2 = reader.int32() as any;
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.viewOnce = reader.bool();
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.videoHeight = reader.uint32();
          continue;
        }
        case 32: {
          if (tag !== 256) {
            break;
          }

          message.videoWidth = reader.uint32();
          continue;
        }
        case 33: {
          if (tag !== 266) {
            break;
          }

          message.faviconMMSMetadata = Message_MMSThumbnailMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.linkPreviewMetadata = Message_LinkPreviewMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 35: {
          if (tag !== 282) {
            break;
          }

          message.paymentLinkMetadata = Message_PaymentLinkMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_ExtendedTextMessage {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : undefined,
      matchedText: isSet(object.matchedText) ? globalThis.String(object.matchedText) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      textArgb: isSet(object.textArgb) ? globalThis.Number(object.textArgb) : undefined,
      backgroundArgb: isSet(object.backgroundArgb) ? globalThis.Number(object.backgroundArgb) : undefined,
      font: isSet(object.font) ? message_ExtendedTextMessage_FontTypeFromJSON(object.font) : undefined,
      previewType: isSet(object.previewType)
        ? message_ExtendedTextMessage_PreviewTypeFromJSON(object.previewType)
        : undefined,
      jpegThumbnail: isSet(object.jpegThumbnail) ? bytesFromBase64(object.jpegThumbnail) : undefined,
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
      doNotPlayInline: isSet(object.doNotPlayInline) ? globalThis.Boolean(object.doNotPlayInline) : undefined,
      thumbnailDirectPath: isSet(object.thumbnailDirectPath)
        ? globalThis.String(object.thumbnailDirectPath)
        : undefined,
      thumbnailSha256: isSet(object.thumbnailSha256) ? bytesFromBase64(object.thumbnailSha256) : undefined,
      thumbnailEncSha256: isSet(object.thumbnailEncSha256) ? bytesFromBase64(object.thumbnailEncSha256) : undefined,
      mediaKey: isSet(object.mediaKey) ? bytesFromBase64(object.mediaKey) : undefined,
      mediaKeyTimestamp: isSet(object.mediaKeyTimestamp) ? globalThis.Number(object.mediaKeyTimestamp) : undefined,
      thumbnailHeight: isSet(object.thumbnailHeight) ? globalThis.Number(object.thumbnailHeight) : undefined,
      thumbnailWidth: isSet(object.thumbnailWidth) ? globalThis.Number(object.thumbnailWidth) : undefined,
      inviteLinkGroupType: isSet(object.inviteLinkGroupType)
        ? message_ExtendedTextMessage_InviteLinkGroupTypeFromJSON(object.inviteLinkGroupType)
        : undefined,
      inviteLinkParentGroupSubjectV2: isSet(object.inviteLinkParentGroupSubjectV2)
        ? globalThis.String(object.inviteLinkParentGroupSubjectV2)
        : undefined,
      inviteLinkParentGroupThumbnailV2: isSet(object.inviteLinkParentGroupThumbnailV2)
        ? bytesFromBase64(object.inviteLinkParentGroupThumbnailV2)
        : undefined,
      inviteLinkGroupTypeV2: isSet(object.inviteLinkGroupTypeV2)
        ? message_ExtendedTextMessage_InviteLinkGroupTypeFromJSON(object.inviteLinkGroupTypeV2)
        : undefined,
      viewOnce: isSet(object.viewOnce) ? globalThis.Boolean(object.viewOnce) : undefined,
      videoHeight: isSet(object.videoHeight) ? globalThis.Number(object.videoHeight) : undefined,
      videoWidth: isSet(object.videoWidth) ? globalThis.Number(object.videoWidth) : undefined,
      faviconMMSMetadata: isSet(object.faviconMMSMetadata)
        ? Message_MMSThumbnailMetadata.fromJSON(object.faviconMMSMetadata)
        : undefined,
      linkPreviewMetadata: isSet(object.linkPreviewMetadata)
        ? Message_LinkPreviewMetadata.fromJSON(object.linkPreviewMetadata)
        : undefined,
      paymentLinkMetadata: isSet(object.paymentLinkMetadata)
        ? Message_PaymentLinkMetadata.fromJSON(object.paymentLinkMetadata)
        : undefined,
    };
  },

  toJSON(message: Message_ExtendedTextMessage): unknown {
    const obj: any = {};
    if (message.text !== undefined) {
      obj.text = message.text;
    }
    if (message.matchedText !== undefined) {
      obj.matchedText = message.matchedText;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.textArgb !== undefined) {
      obj.textArgb = Math.round(message.textArgb);
    }
    if (message.backgroundArgb !== undefined) {
      obj.backgroundArgb = Math.round(message.backgroundArgb);
    }
    if (message.font !== undefined) {
      obj.font = message_ExtendedTextMessage_FontTypeToJSON(message.font);
    }
    if (message.previewType !== undefined) {
      obj.previewType = message_ExtendedTextMessage_PreviewTypeToJSON(message.previewType);
    }
    if (message.jpegThumbnail !== undefined) {
      obj.jpegThumbnail = base64FromBytes(message.jpegThumbnail);
    }
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    if (message.doNotPlayInline !== undefined) {
      obj.doNotPlayInline = message.doNotPlayInline;
    }
    if (message.thumbnailDirectPath !== undefined) {
      obj.thumbnailDirectPath = message.thumbnailDirectPath;
    }
    if (message.thumbnailSha256 !== undefined) {
      obj.thumbnailSha256 = base64FromBytes(message.thumbnailSha256);
    }
    if (message.thumbnailEncSha256 !== undefined) {
      obj.thumbnailEncSha256 = base64FromBytes(message.thumbnailEncSha256);
    }
    if (message.mediaKey !== undefined) {
      obj.mediaKey = base64FromBytes(message.mediaKey);
    }
    if (message.mediaKeyTimestamp !== undefined) {
      obj.mediaKeyTimestamp = Math.round(message.mediaKeyTimestamp);
    }
    if (message.thumbnailHeight !== undefined) {
      obj.thumbnailHeight = Math.round(message.thumbnailHeight);
    }
    if (message.thumbnailWidth !== undefined) {
      obj.thumbnailWidth = Math.round(message.thumbnailWidth);
    }
    if (message.inviteLinkGroupType !== undefined) {
      obj.inviteLinkGroupType = message_ExtendedTextMessage_InviteLinkGroupTypeToJSON(message.inviteLinkGroupType);
    }
    if (message.inviteLinkParentGroupSubjectV2 !== undefined) {
      obj.inviteLinkParentGroupSubjectV2 = message.inviteLinkParentGroupSubjectV2;
    }
    if (message.inviteLinkParentGroupThumbnailV2 !== undefined) {
      obj.inviteLinkParentGroupThumbnailV2 = base64FromBytes(message.inviteLinkParentGroupThumbnailV2);
    }
    if (message.inviteLinkGroupTypeV2 !== undefined) {
      obj.inviteLinkGroupTypeV2 = message_ExtendedTextMessage_InviteLinkGroupTypeToJSON(message.inviteLinkGroupTypeV2);
    }
    if (message.viewOnce !== undefined) {
      obj.viewOnce = message.viewOnce;
    }
    if (message.videoHeight !== undefined) {
      obj.videoHeight = Math.round(message.videoHeight);
    }
    if (message.videoWidth !== undefined) {
      obj.videoWidth = Math.round(message.videoWidth);
    }
    if (message.faviconMMSMetadata !== undefined) {
      obj.faviconMMSMetadata = Message_MMSThumbnailMetadata.toJSON(message.faviconMMSMetadata);
    }
    if (message.linkPreviewMetadata !== undefined) {
      obj.linkPreviewMetadata = Message_LinkPreviewMetadata.toJSON(message.linkPreviewMetadata);
    }
    if (message.paymentLinkMetadata !== undefined) {
      obj.paymentLinkMetadata = Message_PaymentLinkMetadata.toJSON(message.paymentLinkMetadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_ExtendedTextMessage>, I>>(base?: I): Message_ExtendedTextMessage {
    return Message_ExtendedTextMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_ExtendedTextMessage>, I>>(object: I): Message_ExtendedTextMessage {
    const message = createBaseMessage_ExtendedTextMessage();
    message.text = object.text ?? undefined;
    message.matchedText = object.matchedText ?? undefined;
    message.description = object.description ?? undefined;
    message.title = object.title ?? undefined;
    message.textArgb = object.textArgb ?? undefined;
    message.backgroundArgb = object.backgroundArgb ?? undefined;
    message.font = object.font ?? undefined;
    message.previewType = object.previewType ?? undefined;
    message.jpegThumbnail = object.jpegThumbnail ?? undefined;
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    message.doNotPlayInline = object.doNotPlayInline ?? undefined;
    message.thumbnailDirectPath = object.thumbnailDirectPath ?? undefined;
    message.thumbnailSha256 = object.thumbnailSha256 ?? undefined;
    message.thumbnailEncSha256 = object.thumbnailEncSha256 ?? undefined;
    message.mediaKey = object.mediaKey ?? undefined;
    message.mediaKeyTimestamp = object.mediaKeyTimestamp ?? undefined;
    message.thumbnailHeight = object.thumbnailHeight ?? undefined;
    message.thumbnailWidth = object.thumbnailWidth ?? undefined;
    message.inviteLinkGroupType = object.inviteLinkGroupType ?? undefined;
    message.inviteLinkParentGroupSubjectV2 = object.inviteLinkParentGroupSubjectV2 ?? undefined;
    message.inviteLinkParentGroupThumbnailV2 = object.inviteLinkParentGroupThumbnailV2 ?? undefined;
    message.inviteLinkGroupTypeV2 = object.inviteLinkGroupTypeV2 ?? undefined;
    message.viewOnce = object.viewOnce ?? undefined;
    message.videoHeight = object.videoHeight ?? undefined;
    message.videoWidth = object.videoWidth ?? undefined;
    message.faviconMMSMetadata = (object.faviconMMSMetadata !== undefined && object.faviconMMSMetadata !== null)
      ? Message_MMSThumbnailMetadata.fromPartial(object.faviconMMSMetadata)
      : undefined;
    message.linkPreviewMetadata = (object.linkPreviewMetadata !== undefined && object.linkPreviewMetadata !== null)
      ? Message_LinkPreviewMetadata.fromPartial(object.linkPreviewMetadata)
      : undefined;
    message.paymentLinkMetadata = (object.paymentLinkMetadata !== undefined && object.paymentLinkMetadata !== null)
      ? Message_PaymentLinkMetadata.fromPartial(object.paymentLinkMetadata)
      : undefined;
    return message;
  },
};

function createBaseMessage_FullHistorySyncOnDemandRequestMetadata(): Message_FullHistorySyncOnDemandRequestMetadata {
  return { requestId: undefined };
}

export const Message_FullHistorySyncOnDemandRequestMetadata: MessageFns<
  Message_FullHistorySyncOnDemandRequestMetadata
> = {
  encode(
    message: Message_FullHistorySyncOnDemandRequestMetadata,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.requestId !== undefined) {
      writer.uint32(10).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_FullHistorySyncOnDemandRequestMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_FullHistorySyncOnDemandRequestMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_FullHistorySyncOnDemandRequestMetadata {
    return { requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : undefined };
  },

  toJSON(message: Message_FullHistorySyncOnDemandRequestMetadata): unknown {
    const obj: any = {};
    if (message.requestId !== undefined) {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_FullHistorySyncOnDemandRequestMetadata>, I>>(
    base?: I,
  ): Message_FullHistorySyncOnDemandRequestMetadata {
    return Message_FullHistorySyncOnDemandRequestMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_FullHistorySyncOnDemandRequestMetadata>, I>>(
    object: I,
  ): Message_FullHistorySyncOnDemandRequestMetadata {
    const message = createBaseMessage_FullHistorySyncOnDemandRequestMetadata();
    message.requestId = object.requestId ?? undefined;
    return message;
  },
};

function createBaseMessage_FutureProofMessage(): Message_FutureProofMessage {
  return { message: undefined };
}

export const Message_FutureProofMessage: MessageFns<Message_FutureProofMessage> = {
  encode(message: Message_FutureProofMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== undefined) {
      Message.encode(message.message, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_FutureProofMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_FutureProofMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = Message.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_FutureProofMessage {
    return { message: isSet(object.message) ? Message.fromJSON(object.message) : undefined };
  },

  toJSON(message: Message_FutureProofMessage): unknown {
    const obj: any = {};
    if (message.message !== undefined) {
      obj.message = Message.toJSON(message.message);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_FutureProofMessage>, I>>(base?: I): Message_FutureProofMessage {
    return Message_FutureProofMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_FutureProofMessage>, I>>(object: I): Message_FutureProofMessage {
    const message = createBaseMessage_FutureProofMessage();
    message.message = (object.message !== undefined && object.message !== null)
      ? Message.fromPartial(object.message)
      : undefined;
    return message;
  },
};

function createBaseMessage_GroupInviteMessage(): Message_GroupInviteMessage {
  return {
    groupJid: undefined,
    inviteCode: undefined,
    inviteExpiration: undefined,
    groupName: undefined,
    jpegThumbnail: undefined,
    caption: undefined,
    contextInfo: undefined,
    groupType: undefined,
  };
}

export const Message_GroupInviteMessage: MessageFns<Message_GroupInviteMessage> = {
  encode(message: Message_GroupInviteMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.groupJid !== undefined) {
      writer.uint32(10).string(message.groupJid);
    }
    if (message.inviteCode !== undefined) {
      writer.uint32(18).string(message.inviteCode);
    }
    if (message.inviteExpiration !== undefined) {
      writer.uint32(24).int64(message.inviteExpiration);
    }
    if (message.groupName !== undefined) {
      writer.uint32(34).string(message.groupName);
    }
    if (message.jpegThumbnail !== undefined) {
      writer.uint32(42).bytes(message.jpegThumbnail);
    }
    if (message.caption !== undefined) {
      writer.uint32(50).string(message.caption);
    }
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(58).fork()).join();
    }
    if (message.groupType !== undefined) {
      writer.uint32(64).int32(message.groupType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_GroupInviteMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_GroupInviteMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.groupJid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.inviteCode = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.inviteExpiration = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.groupName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.jpegThumbnail = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.caption = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.groupType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_GroupInviteMessage {
    return {
      groupJid: isSet(object.groupJid) ? globalThis.String(object.groupJid) : undefined,
      inviteCode: isSet(object.inviteCode) ? globalThis.String(object.inviteCode) : undefined,
      inviteExpiration: isSet(object.inviteExpiration) ? globalThis.Number(object.inviteExpiration) : undefined,
      groupName: isSet(object.groupName) ? globalThis.String(object.groupName) : undefined,
      jpegThumbnail: isSet(object.jpegThumbnail) ? bytesFromBase64(object.jpegThumbnail) : undefined,
      caption: isSet(object.caption) ? globalThis.String(object.caption) : undefined,
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
      groupType: isSet(object.groupType) ? message_GroupInviteMessage_GroupTypeFromJSON(object.groupType) : undefined,
    };
  },

  toJSON(message: Message_GroupInviteMessage): unknown {
    const obj: any = {};
    if (message.groupJid !== undefined) {
      obj.groupJid = message.groupJid;
    }
    if (message.inviteCode !== undefined) {
      obj.inviteCode = message.inviteCode;
    }
    if (message.inviteExpiration !== undefined) {
      obj.inviteExpiration = Math.round(message.inviteExpiration);
    }
    if (message.groupName !== undefined) {
      obj.groupName = message.groupName;
    }
    if (message.jpegThumbnail !== undefined) {
      obj.jpegThumbnail = base64FromBytes(message.jpegThumbnail);
    }
    if (message.caption !== undefined) {
      obj.caption = message.caption;
    }
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    if (message.groupType !== undefined) {
      obj.groupType = message_GroupInviteMessage_GroupTypeToJSON(message.groupType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_GroupInviteMessage>, I>>(base?: I): Message_GroupInviteMessage {
    return Message_GroupInviteMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_GroupInviteMessage>, I>>(object: I): Message_GroupInviteMessage {
    const message = createBaseMessage_GroupInviteMessage();
    message.groupJid = object.groupJid ?? undefined;
    message.inviteCode = object.inviteCode ?? undefined;
    message.inviteExpiration = object.inviteExpiration ?? undefined;
    message.groupName = object.groupName ?? undefined;
    message.jpegThumbnail = object.jpegThumbnail ?? undefined;
    message.caption = object.caption ?? undefined;
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    message.groupType = object.groupType ?? undefined;
    return message;
  },
};

function createBaseMessage_HighlyStructuredMessage(): Message_HighlyStructuredMessage {
  return {
    namespace: undefined,
    elementName: undefined,
    params: [],
    fallbackLg: undefined,
    fallbackLc: undefined,
    localizableParams: [],
    deterministicLg: undefined,
    deterministicLc: undefined,
    hydratedHsm: undefined,
  };
}

export const Message_HighlyStructuredMessage: MessageFns<Message_HighlyStructuredMessage> = {
  encode(message: Message_HighlyStructuredMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.namespace !== undefined) {
      writer.uint32(10).string(message.namespace);
    }
    if (message.elementName !== undefined) {
      writer.uint32(18).string(message.elementName);
    }
    for (const v of message.params) {
      writer.uint32(26).string(v!);
    }
    if (message.fallbackLg !== undefined) {
      writer.uint32(34).string(message.fallbackLg);
    }
    if (message.fallbackLc !== undefined) {
      writer.uint32(42).string(message.fallbackLc);
    }
    for (const v of message.localizableParams) {
      Message_HighlyStructuredMessage_HSMLocalizableParameter.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.deterministicLg !== undefined) {
      writer.uint32(58).string(message.deterministicLg);
    }
    if (message.deterministicLc !== undefined) {
      writer.uint32(66).string(message.deterministicLc);
    }
    if (message.hydratedHsm !== undefined) {
      Message_TemplateMessage.encode(message.hydratedHsm, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_HighlyStructuredMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_HighlyStructuredMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.namespace = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.elementName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.params.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.fallbackLg = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.fallbackLc = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.localizableParams.push(
            Message_HighlyStructuredMessage_HSMLocalizableParameter.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.deterministicLg = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.deterministicLc = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.hydratedHsm = Message_TemplateMessage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_HighlyStructuredMessage {
    return {
      namespace: isSet(object.namespace) ? globalThis.String(object.namespace) : undefined,
      elementName: isSet(object.elementName) ? globalThis.String(object.elementName) : undefined,
      params: globalThis.Array.isArray(object?.params) ? object.params.map((e: any) => globalThis.String(e)) : [],
      fallbackLg: isSet(object.fallbackLg) ? globalThis.String(object.fallbackLg) : undefined,
      fallbackLc: isSet(object.fallbackLc) ? globalThis.String(object.fallbackLc) : undefined,
      localizableParams: globalThis.Array.isArray(object?.localizableParams)
        ? object.localizableParams.map((e: any) => Message_HighlyStructuredMessage_HSMLocalizableParameter.fromJSON(e))
        : [],
      deterministicLg: isSet(object.deterministicLg) ? globalThis.String(object.deterministicLg) : undefined,
      deterministicLc: isSet(object.deterministicLc) ? globalThis.String(object.deterministicLc) : undefined,
      hydratedHsm: isSet(object.hydratedHsm) ? Message_TemplateMessage.fromJSON(object.hydratedHsm) : undefined,
    };
  },

  toJSON(message: Message_HighlyStructuredMessage): unknown {
    const obj: any = {};
    if (message.namespace !== undefined) {
      obj.namespace = message.namespace;
    }
    if (message.elementName !== undefined) {
      obj.elementName = message.elementName;
    }
    if (message.params?.length) {
      obj.params = message.params;
    }
    if (message.fallbackLg !== undefined) {
      obj.fallbackLg = message.fallbackLg;
    }
    if (message.fallbackLc !== undefined) {
      obj.fallbackLc = message.fallbackLc;
    }
    if (message.localizableParams?.length) {
      obj.localizableParams = message.localizableParams.map((e) =>
        Message_HighlyStructuredMessage_HSMLocalizableParameter.toJSON(e)
      );
    }
    if (message.deterministicLg !== undefined) {
      obj.deterministicLg = message.deterministicLg;
    }
    if (message.deterministicLc !== undefined) {
      obj.deterministicLc = message.deterministicLc;
    }
    if (message.hydratedHsm !== undefined) {
      obj.hydratedHsm = Message_TemplateMessage.toJSON(message.hydratedHsm);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_HighlyStructuredMessage>, I>>(base?: I): Message_HighlyStructuredMessage {
    return Message_HighlyStructuredMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_HighlyStructuredMessage>, I>>(
    object: I,
  ): Message_HighlyStructuredMessage {
    const message = createBaseMessage_HighlyStructuredMessage();
    message.namespace = object.namespace ?? undefined;
    message.elementName = object.elementName ?? undefined;
    message.params = object.params?.map((e) => e) || [];
    message.fallbackLg = object.fallbackLg ?? undefined;
    message.fallbackLc = object.fallbackLc ?? undefined;
    message.localizableParams =
      object.localizableParams?.map((e) => Message_HighlyStructuredMessage_HSMLocalizableParameter.fromPartial(e)) ||
      [];
    message.deterministicLg = object.deterministicLg ?? undefined;
    message.deterministicLc = object.deterministicLc ?? undefined;
    message.hydratedHsm = (object.hydratedHsm !== undefined && object.hydratedHsm !== null)
      ? Message_TemplateMessage.fromPartial(object.hydratedHsm)
      : undefined;
    return message;
  },
};

function createBaseMessage_HighlyStructuredMessage_HSMLocalizableParameter(): Message_HighlyStructuredMessage_HSMLocalizableParameter {
  return { default: undefined, currency: undefined, dateTime: undefined };
}

export const Message_HighlyStructuredMessage_HSMLocalizableParameter: MessageFns<
  Message_HighlyStructuredMessage_HSMLocalizableParameter
> = {
  encode(
    message: Message_HighlyStructuredMessage_HSMLocalizableParameter,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.default !== undefined) {
      writer.uint32(10).string(message.default);
    }
    if (message.currency !== undefined) {
      Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency.encode(
        message.currency,
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.dateTime !== undefined) {
      Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime.encode(
        message.dateTime,
        writer.uint32(26).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_HighlyStructuredMessage_HSMLocalizableParameter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_HighlyStructuredMessage_HSMLocalizableParameter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.default = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.currency = Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.dateTime = Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_HighlyStructuredMessage_HSMLocalizableParameter {
    return {
      default: isSet(object.default) ? globalThis.String(object.default) : undefined,
      currency: isSet(object.currency)
        ? Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency.fromJSON(object.currency)
        : undefined,
      dateTime: isSet(object.dateTime)
        ? Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime.fromJSON(object.dateTime)
        : undefined,
    };
  },

  toJSON(message: Message_HighlyStructuredMessage_HSMLocalizableParameter): unknown {
    const obj: any = {};
    if (message.default !== undefined) {
      obj.default = message.default;
    }
    if (message.currency !== undefined) {
      obj.currency = Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency.toJSON(message.currency);
    }
    if (message.dateTime !== undefined) {
      obj.dateTime = Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime.toJSON(message.dateTime);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_HighlyStructuredMessage_HSMLocalizableParameter>, I>>(
    base?: I,
  ): Message_HighlyStructuredMessage_HSMLocalizableParameter {
    return Message_HighlyStructuredMessage_HSMLocalizableParameter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_HighlyStructuredMessage_HSMLocalizableParameter>, I>>(
    object: I,
  ): Message_HighlyStructuredMessage_HSMLocalizableParameter {
    const message = createBaseMessage_HighlyStructuredMessage_HSMLocalizableParameter();
    message.default = object.default ?? undefined;
    message.currency = (object.currency !== undefined && object.currency !== null)
      ? Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency.fromPartial(object.currency)
      : undefined;
    message.dateTime = (object.dateTime !== undefined && object.dateTime !== null)
      ? Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime.fromPartial(object.dateTime)
      : undefined;
    return message;
  },
};

function createBaseMessage_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency(): Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency {
  return { currencyCode: undefined, amount1000: undefined };
}

export const Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency: MessageFns<
  Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency
> = {
  encode(
    message: Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.currencyCode !== undefined) {
      writer.uint32(10).string(message.currencyCode);
    }
    if (message.amount1000 !== undefined) {
      writer.uint32(16).int64(message.amount1000);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.currencyCode = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.amount1000 = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency {
    return {
      currencyCode: isSet(object.currencyCode) ? globalThis.String(object.currencyCode) : undefined,
      amount1000: isSet(object.amount1000) ? globalThis.Number(object.amount1000) : undefined,
    };
  },

  toJSON(message: Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency): unknown {
    const obj: any = {};
    if (message.currencyCode !== undefined) {
      obj.currencyCode = message.currencyCode;
    }
    if (message.amount1000 !== undefined) {
      obj.amount1000 = Math.round(message.amount1000);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency>, I>>(
    base?: I,
  ): Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency {
    return Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency>, I>>(
    object: I,
  ): Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency {
    const message = createBaseMessage_HighlyStructuredMessage_HSMLocalizableParameter_HSMCurrency();
    message.currencyCode = object.currencyCode ?? undefined;
    message.amount1000 = object.amount1000 ?? undefined;
    return message;
  },
};

function createBaseMessage_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime(): Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime {
  return { component: undefined, unixEpoch: undefined };
}

export const Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime: MessageFns<
  Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime
> = {
  encode(
    message: Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.component !== undefined) {
      Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent.encode(
        message.component,
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.unixEpoch !== undefined) {
      Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch.encode(
        message.unixEpoch,
        writer.uint32(18).fork(),
      ).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.component = Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent
            .decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.unixEpoch = Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch
            .decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime {
    return {
      component: isSet(object.component)
        ? Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent.fromJSON(
          object.component,
        )
        : undefined,
      unixEpoch: isSet(object.unixEpoch)
        ? Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch.fromJSON(
          object.unixEpoch,
        )
        : undefined,
    };
  },

  toJSON(message: Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime): unknown {
    const obj: any = {};
    if (message.component !== undefined) {
      obj.component = Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent.toJSON(
        message.component,
      );
    }
    if (message.unixEpoch !== undefined) {
      obj.unixEpoch = Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch.toJSON(
        message.unixEpoch,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime>, I>>(
    base?: I,
  ): Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime {
    return Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime>, I>>(
    object: I,
  ): Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime {
    const message = createBaseMessage_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime();
    message.component = (object.component !== undefined && object.component !== null)
      ? Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent.fromPartial(
        object.component,
      )
      : undefined;
    message.unixEpoch = (object.unixEpoch !== undefined && object.unixEpoch !== null)
      ? Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch.fromPartial(
        object.unixEpoch,
      )
      : undefined;
    return message;
  },
};

function createBaseMessage_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent(): Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent {
  return {
    dayOfWeek: undefined,
    year: undefined,
    month: undefined,
    dayOfMonth: undefined,
    hour: undefined,
    minute: undefined,
    calendar: undefined,
  };
}

export const Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent: MessageFns<
  Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent
> = {
  encode(
    message: Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.dayOfWeek !== undefined) {
      writer.uint32(8).int32(message.dayOfWeek);
    }
    if (message.year !== undefined) {
      writer.uint32(16).uint32(message.year);
    }
    if (message.month !== undefined) {
      writer.uint32(24).uint32(message.month);
    }
    if (message.dayOfMonth !== undefined) {
      writer.uint32(32).uint32(message.dayOfMonth);
    }
    if (message.hour !== undefined) {
      writer.uint32(40).uint32(message.hour);
    }
    if (message.minute !== undefined) {
      writer.uint32(48).uint32(message.minute);
    }
    if (message.calendar !== undefined) {
      writer.uint32(56).int32(message.calendar);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message =
      createBaseMessage_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.dayOfWeek = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.year = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.month = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.dayOfMonth = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.hour = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.minute = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.calendar = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent {
    return {
      dayOfWeek: isSet(object.dayOfWeek)
        ? message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekTypeFromJSON(
          object.dayOfWeek,
        )
        : undefined,
      year: isSet(object.year) ? globalThis.Number(object.year) : undefined,
      month: isSet(object.month) ? globalThis.Number(object.month) : undefined,
      dayOfMonth: isSet(object.dayOfMonth) ? globalThis.Number(object.dayOfMonth) : undefined,
      hour: isSet(object.hour) ? globalThis.Number(object.hour) : undefined,
      minute: isSet(object.minute) ? globalThis.Number(object.minute) : undefined,
      calendar: isSet(object.calendar)
        ? message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarTypeFromJSON(
          object.calendar,
        )
        : undefined,
    };
  },

  toJSON(message: Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent): unknown {
    const obj: any = {};
    if (message.dayOfWeek !== undefined) {
      obj.dayOfWeek =
        message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_DayOfWeekTypeToJSON(
          message.dayOfWeek,
        );
    }
    if (message.year !== undefined) {
      obj.year = Math.round(message.year);
    }
    if (message.month !== undefined) {
      obj.month = Math.round(message.month);
    }
    if (message.dayOfMonth !== undefined) {
      obj.dayOfMonth = Math.round(message.dayOfMonth);
    }
    if (message.hour !== undefined) {
      obj.hour = Math.round(message.hour);
    }
    if (message.minute !== undefined) {
      obj.minute = Math.round(message.minute);
    }
    if (message.calendar !== undefined) {
      obj.calendar =
        message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent_CalendarTypeToJSON(
          message.calendar,
        );
    }
    return obj;
  },

  create<
    I extends Exact<
      DeepPartial<Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent>,
      I
    >,
  >(base?: I): Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent {
    return Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<
      DeepPartial<Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent>,
      I
    >,
  >(object: I): Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent {
    const message =
      createBaseMessage_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeComponent();
    message.dayOfWeek = object.dayOfWeek ?? undefined;
    message.year = object.year ?? undefined;
    message.month = object.month ?? undefined;
    message.dayOfMonth = object.dayOfMonth ?? undefined;
    message.hour = object.hour ?? undefined;
    message.minute = object.minute ?? undefined;
    message.calendar = object.calendar ?? undefined;
    return message;
  },
};

function createBaseMessage_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch(): Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch {
  return { timestamp: undefined };
}

export const Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch: MessageFns<
  Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch
> = {
  encode(
    message: Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.timestamp !== undefined) {
      writer.uint32(8).int64(message.timestamp);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message =
      createBaseMessage_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch {
    return { timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : undefined };
  },

  toJSON(message: Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch): unknown {
    const obj: any = {};
    if (message.timestamp !== undefined) {
      obj.timestamp = Math.round(message.timestamp);
    }
    return obj;
  },

  create<
    I extends Exact<
      DeepPartial<Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch>,
      I
    >,
  >(base?: I): Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch {
    return Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<
      DeepPartial<Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch>,
      I
    >,
  >(object: I): Message_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch {
    const message =
      createBaseMessage_HighlyStructuredMessage_HSMLocalizableParameter_HSMDateTime_HSMDateTimeUnixEpoch();
    message.timestamp = object.timestamp ?? undefined;
    return message;
  },
};

function createBaseMessage_HistorySyncNotification(): Message_HistorySyncNotification {
  return {
    fileSha256: undefined,
    fileLength: undefined,
    mediaKey: undefined,
    fileEncSha256: undefined,
    directPath: undefined,
    syncType: undefined,
    chunkOrder: undefined,
    originalMessageId: undefined,
    progress: undefined,
    oldestMsgInChunkTimestampSec: undefined,
    initialHistBootstrapInlinePayload: undefined,
    peerDataRequestSessionId: undefined,
    fullHistorySyncOnDemandRequestMetadata: undefined,
    encHandle: undefined,
  };
}

export const Message_HistorySyncNotification: MessageFns<Message_HistorySyncNotification> = {
  encode(message: Message_HistorySyncNotification, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fileSha256 !== undefined) {
      writer.uint32(10).bytes(message.fileSha256);
    }
    if (message.fileLength !== undefined) {
      writer.uint32(16).uint64(message.fileLength);
    }
    if (message.mediaKey !== undefined) {
      writer.uint32(26).bytes(message.mediaKey);
    }
    if (message.fileEncSha256 !== undefined) {
      writer.uint32(34).bytes(message.fileEncSha256);
    }
    if (message.directPath !== undefined) {
      writer.uint32(42).string(message.directPath);
    }
    if (message.syncType !== undefined) {
      writer.uint32(48).int32(message.syncType);
    }
    if (message.chunkOrder !== undefined) {
      writer.uint32(56).uint32(message.chunkOrder);
    }
    if (message.originalMessageId !== undefined) {
      writer.uint32(66).string(message.originalMessageId);
    }
    if (message.progress !== undefined) {
      writer.uint32(72).uint32(message.progress);
    }
    if (message.oldestMsgInChunkTimestampSec !== undefined) {
      writer.uint32(80).int64(message.oldestMsgInChunkTimestampSec);
    }
    if (message.initialHistBootstrapInlinePayload !== undefined) {
      writer.uint32(90).bytes(message.initialHistBootstrapInlinePayload);
    }
    if (message.peerDataRequestSessionId !== undefined) {
      writer.uint32(98).string(message.peerDataRequestSessionId);
    }
    if (message.fullHistorySyncOnDemandRequestMetadata !== undefined) {
      Message_FullHistorySyncOnDemandRequestMetadata.encode(
        message.fullHistorySyncOnDemandRequestMetadata,
        writer.uint32(106).fork(),
      ).join();
    }
    if (message.encHandle !== undefined) {
      writer.uint32(114).string(message.encHandle);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_HistorySyncNotification {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_HistorySyncNotification();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fileSha256 = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.fileLength = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.mediaKey = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.fileEncSha256 = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.directPath = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.syncType = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.chunkOrder = reader.uint32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.originalMessageId = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.progress = reader.uint32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.oldestMsgInChunkTimestampSec = longToNumber(reader.int64());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.initialHistBootstrapInlinePayload = reader.bytes();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.peerDataRequestSessionId = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.fullHistorySyncOnDemandRequestMetadata = Message_FullHistorySyncOnDemandRequestMetadata.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.encHandle = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_HistorySyncNotification {
    return {
      fileSha256: isSet(object.fileSha256) ? bytesFromBase64(object.fileSha256) : undefined,
      fileLength: isSet(object.fileLength) ? globalThis.Number(object.fileLength) : undefined,
      mediaKey: isSet(object.mediaKey) ? bytesFromBase64(object.mediaKey) : undefined,
      fileEncSha256: isSet(object.fileEncSha256) ? bytesFromBase64(object.fileEncSha256) : undefined,
      directPath: isSet(object.directPath) ? globalThis.String(object.directPath) : undefined,
      syncType: isSet(object.syncType)
        ? message_HistorySyncNotification_HistorySyncTypeFromJSON(object.syncType)
        : undefined,
      chunkOrder: isSet(object.chunkOrder) ? globalThis.Number(object.chunkOrder) : undefined,
      originalMessageId: isSet(object.originalMessageId) ? globalThis.String(object.originalMessageId) : undefined,
      progress: isSet(object.progress) ? globalThis.Number(object.progress) : undefined,
      oldestMsgInChunkTimestampSec: isSet(object.oldestMsgInChunkTimestampSec)
        ? globalThis.Number(object.oldestMsgInChunkTimestampSec)
        : undefined,
      initialHistBootstrapInlinePayload: isSet(object.initialHistBootstrapInlinePayload)
        ? bytesFromBase64(object.initialHistBootstrapInlinePayload)
        : undefined,
      peerDataRequestSessionId: isSet(object.peerDataRequestSessionId)
        ? globalThis.String(object.peerDataRequestSessionId)
        : undefined,
      fullHistorySyncOnDemandRequestMetadata: isSet(object.fullHistorySyncOnDemandRequestMetadata)
        ? Message_FullHistorySyncOnDemandRequestMetadata.fromJSON(object.fullHistorySyncOnDemandRequestMetadata)
        : undefined,
      encHandle: isSet(object.encHandle) ? globalThis.String(object.encHandle) : undefined,
    };
  },

  toJSON(message: Message_HistorySyncNotification): unknown {
    const obj: any = {};
    if (message.fileSha256 !== undefined) {
      obj.fileSha256 = base64FromBytes(message.fileSha256);
    }
    if (message.fileLength !== undefined) {
      obj.fileLength = Math.round(message.fileLength);
    }
    if (message.mediaKey !== undefined) {
      obj.mediaKey = base64FromBytes(message.mediaKey);
    }
    if (message.fileEncSha256 !== undefined) {
      obj.fileEncSha256 = base64FromBytes(message.fileEncSha256);
    }
    if (message.directPath !== undefined) {
      obj.directPath = message.directPath;
    }
    if (message.syncType !== undefined) {
      obj.syncType = message_HistorySyncNotification_HistorySyncTypeToJSON(message.syncType);
    }
    if (message.chunkOrder !== undefined) {
      obj.chunkOrder = Math.round(message.chunkOrder);
    }
    if (message.originalMessageId !== undefined) {
      obj.originalMessageId = message.originalMessageId;
    }
    if (message.progress !== undefined) {
      obj.progress = Math.round(message.progress);
    }
    if (message.oldestMsgInChunkTimestampSec !== undefined) {
      obj.oldestMsgInChunkTimestampSec = Math.round(message.oldestMsgInChunkTimestampSec);
    }
    if (message.initialHistBootstrapInlinePayload !== undefined) {
      obj.initialHistBootstrapInlinePayload = base64FromBytes(message.initialHistBootstrapInlinePayload);
    }
    if (message.peerDataRequestSessionId !== undefined) {
      obj.peerDataRequestSessionId = message.peerDataRequestSessionId;
    }
    if (message.fullHistorySyncOnDemandRequestMetadata !== undefined) {
      obj.fullHistorySyncOnDemandRequestMetadata = Message_FullHistorySyncOnDemandRequestMetadata.toJSON(
        message.fullHistorySyncOnDemandRequestMetadata,
      );
    }
    if (message.encHandle !== undefined) {
      obj.encHandle = message.encHandle;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_HistorySyncNotification>, I>>(base?: I): Message_HistorySyncNotification {
    return Message_HistorySyncNotification.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_HistorySyncNotification>, I>>(
    object: I,
  ): Message_HistorySyncNotification {
    const message = createBaseMessage_HistorySyncNotification();
    message.fileSha256 = object.fileSha256 ?? undefined;
    message.fileLength = object.fileLength ?? undefined;
    message.mediaKey = object.mediaKey ?? undefined;
    message.fileEncSha256 = object.fileEncSha256 ?? undefined;
    message.directPath = object.directPath ?? undefined;
    message.syncType = object.syncType ?? undefined;
    message.chunkOrder = object.chunkOrder ?? undefined;
    message.originalMessageId = object.originalMessageId ?? undefined;
    message.progress = object.progress ?? undefined;
    message.oldestMsgInChunkTimestampSec = object.oldestMsgInChunkTimestampSec ?? undefined;
    message.initialHistBootstrapInlinePayload = object.initialHistBootstrapInlinePayload ?? undefined;
    message.peerDataRequestSessionId = object.peerDataRequestSessionId ?? undefined;
    message.fullHistorySyncOnDemandRequestMetadata =
      (object.fullHistorySyncOnDemandRequestMetadata !== undefined &&
          object.fullHistorySyncOnDemandRequestMetadata !== null)
        ? Message_FullHistorySyncOnDemandRequestMetadata.fromPartial(object.fullHistorySyncOnDemandRequestMetadata)
        : undefined;
    message.encHandle = object.encHandle ?? undefined;
    return message;
  },
};

function createBaseMessage_ImageMessage(): Message_ImageMessage {
  return {
    url: undefined,
    mimetype: undefined,
    caption: undefined,
    fileSha256: undefined,
    fileLength: undefined,
    height: undefined,
    width: undefined,
    mediaKey: undefined,
    fileEncSha256: undefined,
    interactiveAnnotations: [],
    directPath: undefined,
    mediaKeyTimestamp: undefined,
    jpegThumbnail: undefined,
    contextInfo: undefined,
    firstScanSidecar: undefined,
    firstScanLength: undefined,
    experimentGroupId: undefined,
    scansSidecar: undefined,
    scanLengths: [],
    midQualityFileSha256: undefined,
    midQualityFileEncSha256: undefined,
    viewOnce: undefined,
    thumbnailDirectPath: undefined,
    thumbnailSha256: undefined,
    thumbnailEncSha256: undefined,
    staticUrl: undefined,
    annotations: [],
    imageSourceType: undefined,
    accessibilityLabel: undefined,
  };
}

export const Message_ImageMessage: MessageFns<Message_ImageMessage> = {
  encode(message: Message_ImageMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== undefined) {
      writer.uint32(10).string(message.url);
    }
    if (message.mimetype !== undefined) {
      writer.uint32(18).string(message.mimetype);
    }
    if (message.caption !== undefined) {
      writer.uint32(26).string(message.caption);
    }
    if (message.fileSha256 !== undefined) {
      writer.uint32(34).bytes(message.fileSha256);
    }
    if (message.fileLength !== undefined) {
      writer.uint32(40).uint64(message.fileLength);
    }
    if (message.height !== undefined) {
      writer.uint32(48).uint32(message.height);
    }
    if (message.width !== undefined) {
      writer.uint32(56).uint32(message.width);
    }
    if (message.mediaKey !== undefined) {
      writer.uint32(66).bytes(message.mediaKey);
    }
    if (message.fileEncSha256 !== undefined) {
      writer.uint32(74).bytes(message.fileEncSha256);
    }
    for (const v of message.interactiveAnnotations) {
      InteractiveAnnotation.encode(v!, writer.uint32(82).fork()).join();
    }
    if (message.directPath !== undefined) {
      writer.uint32(90).string(message.directPath);
    }
    if (message.mediaKeyTimestamp !== undefined) {
      writer.uint32(96).int64(message.mediaKeyTimestamp);
    }
    if (message.jpegThumbnail !== undefined) {
      writer.uint32(130).bytes(message.jpegThumbnail);
    }
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(138).fork()).join();
    }
    if (message.firstScanSidecar !== undefined) {
      writer.uint32(146).bytes(message.firstScanSidecar);
    }
    if (message.firstScanLength !== undefined) {
      writer.uint32(152).uint32(message.firstScanLength);
    }
    if (message.experimentGroupId !== undefined) {
      writer.uint32(160).uint32(message.experimentGroupId);
    }
    if (message.scansSidecar !== undefined) {
      writer.uint32(170).bytes(message.scansSidecar);
    }
    writer.uint32(178).fork();
    for (const v of message.scanLengths) {
      writer.uint32(v);
    }
    writer.join();
    if (message.midQualityFileSha256 !== undefined) {
      writer.uint32(186).bytes(message.midQualityFileSha256);
    }
    if (message.midQualityFileEncSha256 !== undefined) {
      writer.uint32(194).bytes(message.midQualityFileEncSha256);
    }
    if (message.viewOnce !== undefined) {
      writer.uint32(200).bool(message.viewOnce);
    }
    if (message.thumbnailDirectPath !== undefined) {
      writer.uint32(210).string(message.thumbnailDirectPath);
    }
    if (message.thumbnailSha256 !== undefined) {
      writer.uint32(218).bytes(message.thumbnailSha256);
    }
    if (message.thumbnailEncSha256 !== undefined) {
      writer.uint32(226).bytes(message.thumbnailEncSha256);
    }
    if (message.staticUrl !== undefined) {
      writer.uint32(234).string(message.staticUrl);
    }
    for (const v of message.annotations) {
      InteractiveAnnotation.encode(v!, writer.uint32(242).fork()).join();
    }
    if (message.imageSourceType !== undefined) {
      writer.uint32(248).int32(message.imageSourceType);
    }
    if (message.accessibilityLabel !== undefined) {
      writer.uint32(258).string(message.accessibilityLabel);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_ImageMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_ImageMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.mimetype = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.caption = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.fileSha256 = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.fileLength = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.height = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.width = reader.uint32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.mediaKey = reader.bytes();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.fileEncSha256 = reader.bytes();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.interactiveAnnotations.push(InteractiveAnnotation.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.directPath = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.mediaKeyTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.jpegThumbnail = reader.bytes();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.firstScanSidecar = reader.bytes();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.firstScanLength = reader.uint32();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.experimentGroupId = reader.uint32();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.scansSidecar = reader.bytes();
          continue;
        }
        case 22: {
          if (tag === 176) {
            message.scanLengths.push(reader.uint32());

            continue;
          }

          if (tag === 178) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.scanLengths.push(reader.uint32());
            }

            continue;
          }

          break;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.midQualityFileSha256 = reader.bytes();
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.midQualityFileEncSha256 = reader.bytes();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.viewOnce = reader.bool();
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.thumbnailDirectPath = reader.string();
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.thumbnailSha256 = reader.bytes();
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.thumbnailEncSha256 = reader.bytes();
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.staticUrl = reader.string();
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.annotations.push(InteractiveAnnotation.decode(reader, reader.uint32()));
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.imageSourceType = reader.int32() as any;
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.accessibilityLabel = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_ImageMessage {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : undefined,
      mimetype: isSet(object.mimetype) ? globalThis.String(object.mimetype) : undefined,
      caption: isSet(object.caption) ? globalThis.String(object.caption) : undefined,
      fileSha256: isSet(object.fileSha256) ? bytesFromBase64(object.fileSha256) : undefined,
      fileLength: isSet(object.fileLength) ? globalThis.Number(object.fileLength) : undefined,
      height: isSet(object.height) ? globalThis.Number(object.height) : undefined,
      width: isSet(object.width) ? globalThis.Number(object.width) : undefined,
      mediaKey: isSet(object.mediaKey) ? bytesFromBase64(object.mediaKey) : undefined,
      fileEncSha256: isSet(object.fileEncSha256) ? bytesFromBase64(object.fileEncSha256) : undefined,
      interactiveAnnotations: globalThis.Array.isArray(object?.interactiveAnnotations)
        ? object.interactiveAnnotations.map((e: any) => InteractiveAnnotation.fromJSON(e))
        : [],
      directPath: isSet(object.directPath) ? globalThis.String(object.directPath) : undefined,
      mediaKeyTimestamp: isSet(object.mediaKeyTimestamp) ? globalThis.Number(object.mediaKeyTimestamp) : undefined,
      jpegThumbnail: isSet(object.jpegThumbnail) ? bytesFromBase64(object.jpegThumbnail) : undefined,
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
      firstScanSidecar: isSet(object.firstScanSidecar) ? bytesFromBase64(object.firstScanSidecar) : undefined,
      firstScanLength: isSet(object.firstScanLength) ? globalThis.Number(object.firstScanLength) : undefined,
      experimentGroupId: isSet(object.experimentGroupId) ? globalThis.Number(object.experimentGroupId) : undefined,
      scansSidecar: isSet(object.scansSidecar) ? bytesFromBase64(object.scansSidecar) : undefined,
      scanLengths: globalThis.Array.isArray(object?.scanLengths)
        ? object.scanLengths.map((e: any) => globalThis.Number(e))
        : [],
      midQualityFileSha256: isSet(object.midQualityFileSha256)
        ? bytesFromBase64(object.midQualityFileSha256)
        : undefined,
      midQualityFileEncSha256: isSet(object.midQualityFileEncSha256)
        ? bytesFromBase64(object.midQualityFileEncSha256)
        : undefined,
      viewOnce: isSet(object.viewOnce) ? globalThis.Boolean(object.viewOnce) : undefined,
      thumbnailDirectPath: isSet(object.thumbnailDirectPath)
        ? globalThis.String(object.thumbnailDirectPath)
        : undefined,
      thumbnailSha256: isSet(object.thumbnailSha256) ? bytesFromBase64(object.thumbnailSha256) : undefined,
      thumbnailEncSha256: isSet(object.thumbnailEncSha256) ? bytesFromBase64(object.thumbnailEncSha256) : undefined,
      staticUrl: isSet(object.staticUrl) ? globalThis.String(object.staticUrl) : undefined,
      annotations: globalThis.Array.isArray(object?.annotations)
        ? object.annotations.map((e: any) => InteractiveAnnotation.fromJSON(e))
        : [],
      imageSourceType: isSet(object.imageSourceType)
        ? message_ImageMessage_ImageSourceTypeFromJSON(object.imageSourceType)
        : undefined,
      accessibilityLabel: isSet(object.accessibilityLabel) ? globalThis.String(object.accessibilityLabel) : undefined,
    };
  },

  toJSON(message: Message_ImageMessage): unknown {
    const obj: any = {};
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    if (message.mimetype !== undefined) {
      obj.mimetype = message.mimetype;
    }
    if (message.caption !== undefined) {
      obj.caption = message.caption;
    }
    if (message.fileSha256 !== undefined) {
      obj.fileSha256 = base64FromBytes(message.fileSha256);
    }
    if (message.fileLength !== undefined) {
      obj.fileLength = Math.round(message.fileLength);
    }
    if (message.height !== undefined) {
      obj.height = Math.round(message.height);
    }
    if (message.width !== undefined) {
      obj.width = Math.round(message.width);
    }
    if (message.mediaKey !== undefined) {
      obj.mediaKey = base64FromBytes(message.mediaKey);
    }
    if (message.fileEncSha256 !== undefined) {
      obj.fileEncSha256 = base64FromBytes(message.fileEncSha256);
    }
    if (message.interactiveAnnotations?.length) {
      obj.interactiveAnnotations = message.interactiveAnnotations.map((e) => InteractiveAnnotation.toJSON(e));
    }
    if (message.directPath !== undefined) {
      obj.directPath = message.directPath;
    }
    if (message.mediaKeyTimestamp !== undefined) {
      obj.mediaKeyTimestamp = Math.round(message.mediaKeyTimestamp);
    }
    if (message.jpegThumbnail !== undefined) {
      obj.jpegThumbnail = base64FromBytes(message.jpegThumbnail);
    }
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    if (message.firstScanSidecar !== undefined) {
      obj.firstScanSidecar = base64FromBytes(message.firstScanSidecar);
    }
    if (message.firstScanLength !== undefined) {
      obj.firstScanLength = Math.round(message.firstScanLength);
    }
    if (message.experimentGroupId !== undefined) {
      obj.experimentGroupId = Math.round(message.experimentGroupId);
    }
    if (message.scansSidecar !== undefined) {
      obj.scansSidecar = base64FromBytes(message.scansSidecar);
    }
    if (message.scanLengths?.length) {
      obj.scanLengths = message.scanLengths.map((e) => Math.round(e));
    }
    if (message.midQualityFileSha256 !== undefined) {
      obj.midQualityFileSha256 = base64FromBytes(message.midQualityFileSha256);
    }
    if (message.midQualityFileEncSha256 !== undefined) {
      obj.midQualityFileEncSha256 = base64FromBytes(message.midQualityFileEncSha256);
    }
    if (message.viewOnce !== undefined) {
      obj.viewOnce = message.viewOnce;
    }
    if (message.thumbnailDirectPath !== undefined) {
      obj.thumbnailDirectPath = message.thumbnailDirectPath;
    }
    if (message.thumbnailSha256 !== undefined) {
      obj.thumbnailSha256 = base64FromBytes(message.thumbnailSha256);
    }
    if (message.thumbnailEncSha256 !== undefined) {
      obj.thumbnailEncSha256 = base64FromBytes(message.thumbnailEncSha256);
    }
    if (message.staticUrl !== undefined) {
      obj.staticUrl = message.staticUrl;
    }
    if (message.annotations?.length) {
      obj.annotations = message.annotations.map((e) => InteractiveAnnotation.toJSON(e));
    }
    if (message.imageSourceType !== undefined) {
      obj.imageSourceType = message_ImageMessage_ImageSourceTypeToJSON(message.imageSourceType);
    }
    if (message.accessibilityLabel !== undefined) {
      obj.accessibilityLabel = message.accessibilityLabel;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_ImageMessage>, I>>(base?: I): Message_ImageMessage {
    return Message_ImageMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_ImageMessage>, I>>(object: I): Message_ImageMessage {
    const message = createBaseMessage_ImageMessage();
    message.url = object.url ?? undefined;
    message.mimetype = object.mimetype ?? undefined;
    message.caption = object.caption ?? undefined;
    message.fileSha256 = object.fileSha256 ?? undefined;
    message.fileLength = object.fileLength ?? undefined;
    message.height = object.height ?? undefined;
    message.width = object.width ?? undefined;
    message.mediaKey = object.mediaKey ?? undefined;
    message.fileEncSha256 = object.fileEncSha256 ?? undefined;
    message.interactiveAnnotations = object.interactiveAnnotations?.map((e) => InteractiveAnnotation.fromPartial(e)) ||
      [];
    message.directPath = object.directPath ?? undefined;
    message.mediaKeyTimestamp = object.mediaKeyTimestamp ?? undefined;
    message.jpegThumbnail = object.jpegThumbnail ?? undefined;
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    message.firstScanSidecar = object.firstScanSidecar ?? undefined;
    message.firstScanLength = object.firstScanLength ?? undefined;
    message.experimentGroupId = object.experimentGroupId ?? undefined;
    message.scansSidecar = object.scansSidecar ?? undefined;
    message.scanLengths = object.scanLengths?.map((e) => e) || [];
    message.midQualityFileSha256 = object.midQualityFileSha256 ?? undefined;
    message.midQualityFileEncSha256 = object.midQualityFileEncSha256 ?? undefined;
    message.viewOnce = object.viewOnce ?? undefined;
    message.thumbnailDirectPath = object.thumbnailDirectPath ?? undefined;
    message.thumbnailSha256 = object.thumbnailSha256 ?? undefined;
    message.thumbnailEncSha256 = object.thumbnailEncSha256 ?? undefined;
    message.staticUrl = object.staticUrl ?? undefined;
    message.annotations = object.annotations?.map((e) => InteractiveAnnotation.fromPartial(e)) || [];
    message.imageSourceType = object.imageSourceType ?? undefined;
    message.accessibilityLabel = object.accessibilityLabel ?? undefined;
    return message;
  },
};

function createBaseMessage_InitialSecurityNotificationSettingSync(): Message_InitialSecurityNotificationSettingSync {
  return { securityNotificationEnabled: undefined };
}

export const Message_InitialSecurityNotificationSettingSync: MessageFns<
  Message_InitialSecurityNotificationSettingSync
> = {
  encode(
    message: Message_InitialSecurityNotificationSettingSync,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.securityNotificationEnabled !== undefined) {
      writer.uint32(8).bool(message.securityNotificationEnabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_InitialSecurityNotificationSettingSync {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_InitialSecurityNotificationSettingSync();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.securityNotificationEnabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_InitialSecurityNotificationSettingSync {
    return {
      securityNotificationEnabled: isSet(object.securityNotificationEnabled)
        ? globalThis.Boolean(object.securityNotificationEnabled)
        : undefined,
    };
  },

  toJSON(message: Message_InitialSecurityNotificationSettingSync): unknown {
    const obj: any = {};
    if (message.securityNotificationEnabled !== undefined) {
      obj.securityNotificationEnabled = message.securityNotificationEnabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_InitialSecurityNotificationSettingSync>, I>>(
    base?: I,
  ): Message_InitialSecurityNotificationSettingSync {
    return Message_InitialSecurityNotificationSettingSync.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_InitialSecurityNotificationSettingSync>, I>>(
    object: I,
  ): Message_InitialSecurityNotificationSettingSync {
    const message = createBaseMessage_InitialSecurityNotificationSettingSync();
    message.securityNotificationEnabled = object.securityNotificationEnabled ?? undefined;
    return message;
  },
};

function createBaseMessage_InteractiveMessage(): Message_InteractiveMessage {
  return {
    header: undefined,
    body: undefined,
    footer: undefined,
    contextInfo: undefined,
    urlTrackingMap: undefined,
    shopStorefrontMessage: undefined,
    collectionMessage: undefined,
    nativeFlowMessage: undefined,
    carouselMessage: undefined,
  };
}

export const Message_InteractiveMessage: MessageFns<Message_InteractiveMessage> = {
  encode(message: Message_InteractiveMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      Message_InteractiveMessage_Header.encode(message.header, writer.uint32(10).fork()).join();
    }
    if (message.body !== undefined) {
      Message_InteractiveMessage_Body.encode(message.body, writer.uint32(18).fork()).join();
    }
    if (message.footer !== undefined) {
      Message_InteractiveMessage_Footer.encode(message.footer, writer.uint32(26).fork()).join();
    }
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(122).fork()).join();
    }
    if (message.urlTrackingMap !== undefined) {
      UrlTrackingMap.encode(message.urlTrackingMap, writer.uint32(130).fork()).join();
    }
    if (message.shopStorefrontMessage !== undefined) {
      Message_InteractiveMessage_ShopMessage.encode(message.shopStorefrontMessage, writer.uint32(34).fork()).join();
    }
    if (message.collectionMessage !== undefined) {
      Message_InteractiveMessage_CollectionMessage.encode(message.collectionMessage, writer.uint32(42).fork()).join();
    }
    if (message.nativeFlowMessage !== undefined) {
      Message_InteractiveMessage_NativeFlowMessage.encode(message.nativeFlowMessage, writer.uint32(50).fork()).join();
    }
    if (message.carouselMessage !== undefined) {
      Message_InteractiveMessage_CarouselMessage.encode(message.carouselMessage, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_InteractiveMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_InteractiveMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = Message_InteractiveMessage_Header.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = Message_InteractiveMessage_Body.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.footer = Message_InteractiveMessage_Footer.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.urlTrackingMap = UrlTrackingMap.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.shopStorefrontMessage = Message_InteractiveMessage_ShopMessage.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.collectionMessage = Message_InteractiveMessage_CollectionMessage.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.nativeFlowMessage = Message_InteractiveMessage_NativeFlowMessage.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.carouselMessage = Message_InteractiveMessage_CarouselMessage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_InteractiveMessage {
    return {
      header: isSet(object.header) ? Message_InteractiveMessage_Header.fromJSON(object.header) : undefined,
      body: isSet(object.body) ? Message_InteractiveMessage_Body.fromJSON(object.body) : undefined,
      footer: isSet(object.footer) ? Message_InteractiveMessage_Footer.fromJSON(object.footer) : undefined,
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
      urlTrackingMap: isSet(object.urlTrackingMap) ? UrlTrackingMap.fromJSON(object.urlTrackingMap) : undefined,
      shopStorefrontMessage: isSet(object.shopStorefrontMessage)
        ? Message_InteractiveMessage_ShopMessage.fromJSON(object.shopStorefrontMessage)
        : undefined,
      collectionMessage: isSet(object.collectionMessage)
        ? Message_InteractiveMessage_CollectionMessage.fromJSON(object.collectionMessage)
        : undefined,
      nativeFlowMessage: isSet(object.nativeFlowMessage)
        ? Message_InteractiveMessage_NativeFlowMessage.fromJSON(object.nativeFlowMessage)
        : undefined,
      carouselMessage: isSet(object.carouselMessage)
        ? Message_InteractiveMessage_CarouselMessage.fromJSON(object.carouselMessage)
        : undefined,
    };
  },

  toJSON(message: Message_InteractiveMessage): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = Message_InteractiveMessage_Header.toJSON(message.header);
    }
    if (message.body !== undefined) {
      obj.body = Message_InteractiveMessage_Body.toJSON(message.body);
    }
    if (message.footer !== undefined) {
      obj.footer = Message_InteractiveMessage_Footer.toJSON(message.footer);
    }
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    if (message.urlTrackingMap !== undefined) {
      obj.urlTrackingMap = UrlTrackingMap.toJSON(message.urlTrackingMap);
    }
    if (message.shopStorefrontMessage !== undefined) {
      obj.shopStorefrontMessage = Message_InteractiveMessage_ShopMessage.toJSON(message.shopStorefrontMessage);
    }
    if (message.collectionMessage !== undefined) {
      obj.collectionMessage = Message_InteractiveMessage_CollectionMessage.toJSON(message.collectionMessage);
    }
    if (message.nativeFlowMessage !== undefined) {
      obj.nativeFlowMessage = Message_InteractiveMessage_NativeFlowMessage.toJSON(message.nativeFlowMessage);
    }
    if (message.carouselMessage !== undefined) {
      obj.carouselMessage = Message_InteractiveMessage_CarouselMessage.toJSON(message.carouselMessage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_InteractiveMessage>, I>>(base?: I): Message_InteractiveMessage {
    return Message_InteractiveMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_InteractiveMessage>, I>>(object: I): Message_InteractiveMessage {
    const message = createBaseMessage_InteractiveMessage();
    message.header = (object.header !== undefined && object.header !== null)
      ? Message_InteractiveMessage_Header.fromPartial(object.header)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null)
      ? Message_InteractiveMessage_Body.fromPartial(object.body)
      : undefined;
    message.footer = (object.footer !== undefined && object.footer !== null)
      ? Message_InteractiveMessage_Footer.fromPartial(object.footer)
      : undefined;
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    message.urlTrackingMap = (object.urlTrackingMap !== undefined && object.urlTrackingMap !== null)
      ? UrlTrackingMap.fromPartial(object.urlTrackingMap)
      : undefined;
    message.shopStorefrontMessage =
      (object.shopStorefrontMessage !== undefined && object.shopStorefrontMessage !== null)
        ? Message_InteractiveMessage_ShopMessage.fromPartial(object.shopStorefrontMessage)
        : undefined;
    message.collectionMessage = (object.collectionMessage !== undefined && object.collectionMessage !== null)
      ? Message_InteractiveMessage_CollectionMessage.fromPartial(object.collectionMessage)
      : undefined;
    message.nativeFlowMessage = (object.nativeFlowMessage !== undefined && object.nativeFlowMessage !== null)
      ? Message_InteractiveMessage_NativeFlowMessage.fromPartial(object.nativeFlowMessage)
      : undefined;
    message.carouselMessage = (object.carouselMessage !== undefined && object.carouselMessage !== null)
      ? Message_InteractiveMessage_CarouselMessage.fromPartial(object.carouselMessage)
      : undefined;
    return message;
  },
};

function createBaseMessage_InteractiveMessage_Body(): Message_InteractiveMessage_Body {
  return { text: undefined };
}

export const Message_InteractiveMessage_Body: MessageFns<Message_InteractiveMessage_Body> = {
  encode(message: Message_InteractiveMessage_Body, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== undefined) {
      writer.uint32(10).string(message.text);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_InteractiveMessage_Body {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_InteractiveMessage_Body();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_InteractiveMessage_Body {
    return { text: isSet(object.text) ? globalThis.String(object.text) : undefined };
  },

  toJSON(message: Message_InteractiveMessage_Body): unknown {
    const obj: any = {};
    if (message.text !== undefined) {
      obj.text = message.text;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_InteractiveMessage_Body>, I>>(base?: I): Message_InteractiveMessage_Body {
    return Message_InteractiveMessage_Body.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_InteractiveMessage_Body>, I>>(
    object: I,
  ): Message_InteractiveMessage_Body {
    const message = createBaseMessage_InteractiveMessage_Body();
    message.text = object.text ?? undefined;
    return message;
  },
};

function createBaseMessage_InteractiveMessage_CarouselMessage(): Message_InteractiveMessage_CarouselMessage {
  return { cards: [], messageVersion: undefined };
}

export const Message_InteractiveMessage_CarouselMessage: MessageFns<Message_InteractiveMessage_CarouselMessage> = {
  encode(message: Message_InteractiveMessage_CarouselMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.cards) {
      Message_InteractiveMessage.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.messageVersion !== undefined) {
      writer.uint32(16).int32(message.messageVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_InteractiveMessage_CarouselMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_InteractiveMessage_CarouselMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cards.push(Message_InteractiveMessage.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.messageVersion = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_InteractiveMessage_CarouselMessage {
    return {
      cards: globalThis.Array.isArray(object?.cards)
        ? object.cards.map((e: any) => Message_InteractiveMessage.fromJSON(e))
        : [],
      messageVersion: isSet(object.messageVersion) ? globalThis.Number(object.messageVersion) : undefined,
    };
  },

  toJSON(message: Message_InteractiveMessage_CarouselMessage): unknown {
    const obj: any = {};
    if (message.cards?.length) {
      obj.cards = message.cards.map((e) => Message_InteractiveMessage.toJSON(e));
    }
    if (message.messageVersion !== undefined) {
      obj.messageVersion = Math.round(message.messageVersion);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_InteractiveMessage_CarouselMessage>, I>>(
    base?: I,
  ): Message_InteractiveMessage_CarouselMessage {
    return Message_InteractiveMessage_CarouselMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_InteractiveMessage_CarouselMessage>, I>>(
    object: I,
  ): Message_InteractiveMessage_CarouselMessage {
    const message = createBaseMessage_InteractiveMessage_CarouselMessage();
    message.cards = object.cards?.map((e) => Message_InteractiveMessage.fromPartial(e)) || [];
    message.messageVersion = object.messageVersion ?? undefined;
    return message;
  },
};

function createBaseMessage_InteractiveMessage_CollectionMessage(): Message_InteractiveMessage_CollectionMessage {
  return { bizJid: undefined, id: undefined, messageVersion: undefined };
}

export const Message_InteractiveMessage_CollectionMessage: MessageFns<Message_InteractiveMessage_CollectionMessage> = {
  encode(
    message: Message_InteractiveMessage_CollectionMessage,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.bizJid !== undefined) {
      writer.uint32(10).string(message.bizJid);
    }
    if (message.id !== undefined) {
      writer.uint32(18).string(message.id);
    }
    if (message.messageVersion !== undefined) {
      writer.uint32(24).int32(message.messageVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_InteractiveMessage_CollectionMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_InteractiveMessage_CollectionMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bizJid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.messageVersion = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_InteractiveMessage_CollectionMessage {
    return {
      bizJid: isSet(object.bizJid) ? globalThis.String(object.bizJid) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      messageVersion: isSet(object.messageVersion) ? globalThis.Number(object.messageVersion) : undefined,
    };
  },

  toJSON(message: Message_InteractiveMessage_CollectionMessage): unknown {
    const obj: any = {};
    if (message.bizJid !== undefined) {
      obj.bizJid = message.bizJid;
    }
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.messageVersion !== undefined) {
      obj.messageVersion = Math.round(message.messageVersion);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_InteractiveMessage_CollectionMessage>, I>>(
    base?: I,
  ): Message_InteractiveMessage_CollectionMessage {
    return Message_InteractiveMessage_CollectionMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_InteractiveMessage_CollectionMessage>, I>>(
    object: I,
  ): Message_InteractiveMessage_CollectionMessage {
    const message = createBaseMessage_InteractiveMessage_CollectionMessage();
    message.bizJid = object.bizJid ?? undefined;
    message.id = object.id ?? undefined;
    message.messageVersion = object.messageVersion ?? undefined;
    return message;
  },
};

function createBaseMessage_InteractiveMessage_Footer(): Message_InteractiveMessage_Footer {
  return { text: undefined };
}

export const Message_InteractiveMessage_Footer: MessageFns<Message_InteractiveMessage_Footer> = {
  encode(message: Message_InteractiveMessage_Footer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== undefined) {
      writer.uint32(10).string(message.text);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_InteractiveMessage_Footer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_InteractiveMessage_Footer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_InteractiveMessage_Footer {
    return { text: isSet(object.text) ? globalThis.String(object.text) : undefined };
  },

  toJSON(message: Message_InteractiveMessage_Footer): unknown {
    const obj: any = {};
    if (message.text !== undefined) {
      obj.text = message.text;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_InteractiveMessage_Footer>, I>>(
    base?: I,
  ): Message_InteractiveMessage_Footer {
    return Message_InteractiveMessage_Footer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_InteractiveMessage_Footer>, I>>(
    object: I,
  ): Message_InteractiveMessage_Footer {
    const message = createBaseMessage_InteractiveMessage_Footer();
    message.text = object.text ?? undefined;
    return message;
  },
};

function createBaseMessage_InteractiveMessage_Header(): Message_InteractiveMessage_Header {
  return {
    title: undefined,
    subtitle: undefined,
    hasMediaAttachment: undefined,
    documentMessage: undefined,
    imageMessage: undefined,
    jpegThumbnail: undefined,
    videoMessage: undefined,
    locationMessage: undefined,
    productMessage: undefined,
  };
}

export const Message_InteractiveMessage_Header: MessageFns<Message_InteractiveMessage_Header> = {
  encode(message: Message_InteractiveMessage_Header, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== undefined) {
      writer.uint32(10).string(message.title);
    }
    if (message.subtitle !== undefined) {
      writer.uint32(18).string(message.subtitle);
    }
    if (message.hasMediaAttachment !== undefined) {
      writer.uint32(40).bool(message.hasMediaAttachment);
    }
    if (message.documentMessage !== undefined) {
      Message_DocumentMessage.encode(message.documentMessage, writer.uint32(26).fork()).join();
    }
    if (message.imageMessage !== undefined) {
      Message_ImageMessage.encode(message.imageMessage, writer.uint32(34).fork()).join();
    }
    if (message.jpegThumbnail !== undefined) {
      writer.uint32(50).bytes(message.jpegThumbnail);
    }
    if (message.videoMessage !== undefined) {
      Message_VideoMessage.encode(message.videoMessage, writer.uint32(58).fork()).join();
    }
    if (message.locationMessage !== undefined) {
      Message_LocationMessage.encode(message.locationMessage, writer.uint32(66).fork()).join();
    }
    if (message.productMessage !== undefined) {
      Message_ProductMessage.encode(message.productMessage, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_InteractiveMessage_Header {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_InteractiveMessage_Header();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.subtitle = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.hasMediaAttachment = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.documentMessage = Message_DocumentMessage.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.imageMessage = Message_ImageMessage.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.jpegThumbnail = reader.bytes();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.videoMessage = Message_VideoMessage.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.locationMessage = Message_LocationMessage.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.productMessage = Message_ProductMessage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_InteractiveMessage_Header {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      subtitle: isSet(object.subtitle) ? globalThis.String(object.subtitle) : undefined,
      hasMediaAttachment: isSet(object.hasMediaAttachment) ? globalThis.Boolean(object.hasMediaAttachment) : undefined,
      documentMessage: isSet(object.documentMessage)
        ? Message_DocumentMessage.fromJSON(object.documentMessage)
        : undefined,
      imageMessage: isSet(object.imageMessage) ? Message_ImageMessage.fromJSON(object.imageMessage) : undefined,
      jpegThumbnail: isSet(object.jpegThumbnail) ? bytesFromBase64(object.jpegThumbnail) : undefined,
      videoMessage: isSet(object.videoMessage) ? Message_VideoMessage.fromJSON(object.videoMessage) : undefined,
      locationMessage: isSet(object.locationMessage)
        ? Message_LocationMessage.fromJSON(object.locationMessage)
        : undefined,
      productMessage: isSet(object.productMessage) ? Message_ProductMessage.fromJSON(object.productMessage) : undefined,
    };
  },

  toJSON(message: Message_InteractiveMessage_Header): unknown {
    const obj: any = {};
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.subtitle !== undefined) {
      obj.subtitle = message.subtitle;
    }
    if (message.hasMediaAttachment !== undefined) {
      obj.hasMediaAttachment = message.hasMediaAttachment;
    }
    if (message.documentMessage !== undefined) {
      obj.documentMessage = Message_DocumentMessage.toJSON(message.documentMessage);
    }
    if (message.imageMessage !== undefined) {
      obj.imageMessage = Message_ImageMessage.toJSON(message.imageMessage);
    }
    if (message.jpegThumbnail !== undefined) {
      obj.jpegThumbnail = base64FromBytes(message.jpegThumbnail);
    }
    if (message.videoMessage !== undefined) {
      obj.videoMessage = Message_VideoMessage.toJSON(message.videoMessage);
    }
    if (message.locationMessage !== undefined) {
      obj.locationMessage = Message_LocationMessage.toJSON(message.locationMessage);
    }
    if (message.productMessage !== undefined) {
      obj.productMessage = Message_ProductMessage.toJSON(message.productMessage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_InteractiveMessage_Header>, I>>(
    base?: I,
  ): Message_InteractiveMessage_Header {
    return Message_InteractiveMessage_Header.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_InteractiveMessage_Header>, I>>(
    object: I,
  ): Message_InteractiveMessage_Header {
    const message = createBaseMessage_InteractiveMessage_Header();
    message.title = object.title ?? undefined;
    message.subtitle = object.subtitle ?? undefined;
    message.hasMediaAttachment = object.hasMediaAttachment ?? undefined;
    message.documentMessage = (object.documentMessage !== undefined && object.documentMessage !== null)
      ? Message_DocumentMessage.fromPartial(object.documentMessage)
      : undefined;
    message.imageMessage = (object.imageMessage !== undefined && object.imageMessage !== null)
      ? Message_ImageMessage.fromPartial(object.imageMessage)
      : undefined;
    message.jpegThumbnail = object.jpegThumbnail ?? undefined;
    message.videoMessage = (object.videoMessage !== undefined && object.videoMessage !== null)
      ? Message_VideoMessage.fromPartial(object.videoMessage)
      : undefined;
    message.locationMessage = (object.locationMessage !== undefined && object.locationMessage !== null)
      ? Message_LocationMessage.fromPartial(object.locationMessage)
      : undefined;
    message.productMessage = (object.productMessage !== undefined && object.productMessage !== null)
      ? Message_ProductMessage.fromPartial(object.productMessage)
      : undefined;
    return message;
  },
};

function createBaseMessage_InteractiveMessage_NativeFlowMessage(): Message_InteractiveMessage_NativeFlowMessage {
  return { buttons: [], messageParamsJson: undefined, messageVersion: undefined };
}

export const Message_InteractiveMessage_NativeFlowMessage: MessageFns<Message_InteractiveMessage_NativeFlowMessage> = {
  encode(
    message: Message_InteractiveMessage_NativeFlowMessage,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.buttons) {
      Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.messageParamsJson !== undefined) {
      writer.uint32(18).string(message.messageParamsJson);
    }
    if (message.messageVersion !== undefined) {
      writer.uint32(24).int32(message.messageVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_InteractiveMessage_NativeFlowMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_InteractiveMessage_NativeFlowMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.buttons.push(
            Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.messageParamsJson = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.messageVersion = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_InteractiveMessage_NativeFlowMessage {
    return {
      buttons: globalThis.Array.isArray(object?.buttons)
        ? object.buttons.map((e: any) => Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton.fromJSON(e))
        : [],
      messageParamsJson: isSet(object.messageParamsJson) ? globalThis.String(object.messageParamsJson) : undefined,
      messageVersion: isSet(object.messageVersion) ? globalThis.Number(object.messageVersion) : undefined,
    };
  },

  toJSON(message: Message_InteractiveMessage_NativeFlowMessage): unknown {
    const obj: any = {};
    if (message.buttons?.length) {
      obj.buttons = message.buttons.map((e) => Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton.toJSON(e));
    }
    if (message.messageParamsJson !== undefined) {
      obj.messageParamsJson = message.messageParamsJson;
    }
    if (message.messageVersion !== undefined) {
      obj.messageVersion = Math.round(message.messageVersion);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_InteractiveMessage_NativeFlowMessage>, I>>(
    base?: I,
  ): Message_InteractiveMessage_NativeFlowMessage {
    return Message_InteractiveMessage_NativeFlowMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_InteractiveMessage_NativeFlowMessage>, I>>(
    object: I,
  ): Message_InteractiveMessage_NativeFlowMessage {
    const message = createBaseMessage_InteractiveMessage_NativeFlowMessage();
    message.buttons =
      object.buttons?.map((e) => Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton.fromPartial(e)) || [];
    message.messageParamsJson = object.messageParamsJson ?? undefined;
    message.messageVersion = object.messageVersion ?? undefined;
    return message;
  },
};

function createBaseMessage_InteractiveMessage_NativeFlowMessage_NativeFlowButton(): Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton {
  return { name: undefined, buttonParamsJson: undefined };
}

export const Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton: MessageFns<
  Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton
> = {
  encode(
    message: Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.buttonParamsJson !== undefined) {
      writer.uint32(18).string(message.buttonParamsJson);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_InteractiveMessage_NativeFlowMessage_NativeFlowButton();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.buttonParamsJson = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      buttonParamsJson: isSet(object.buttonParamsJson) ? globalThis.String(object.buttonParamsJson) : undefined,
    };
  },

  toJSON(message: Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.buttonParamsJson !== undefined) {
      obj.buttonParamsJson = message.buttonParamsJson;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton>, I>>(
    base?: I,
  ): Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton {
    return Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton>, I>>(
    object: I,
  ): Message_InteractiveMessage_NativeFlowMessage_NativeFlowButton {
    const message = createBaseMessage_InteractiveMessage_NativeFlowMessage_NativeFlowButton();
    message.name = object.name ?? undefined;
    message.buttonParamsJson = object.buttonParamsJson ?? undefined;
    return message;
  },
};

function createBaseMessage_InteractiveMessage_ShopMessage(): Message_InteractiveMessage_ShopMessage {
  return { id: undefined, surface: undefined, messageVersion: undefined };
}

export const Message_InteractiveMessage_ShopMessage: MessageFns<Message_InteractiveMessage_ShopMessage> = {
  encode(message: Message_InteractiveMessage_ShopMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.surface !== undefined) {
      writer.uint32(16).int32(message.surface);
    }
    if (message.messageVersion !== undefined) {
      writer.uint32(24).int32(message.messageVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_InteractiveMessage_ShopMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_InteractiveMessage_ShopMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.surface = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.messageVersion = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_InteractiveMessage_ShopMessage {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      surface: isSet(object.surface)
        ? message_InteractiveMessage_ShopMessage_SurfaceFromJSON(object.surface)
        : undefined,
      messageVersion: isSet(object.messageVersion) ? globalThis.Number(object.messageVersion) : undefined,
    };
  },

  toJSON(message: Message_InteractiveMessage_ShopMessage): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.surface !== undefined) {
      obj.surface = message_InteractiveMessage_ShopMessage_SurfaceToJSON(message.surface);
    }
    if (message.messageVersion !== undefined) {
      obj.messageVersion = Math.round(message.messageVersion);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_InteractiveMessage_ShopMessage>, I>>(
    base?: I,
  ): Message_InteractiveMessage_ShopMessage {
    return Message_InteractiveMessage_ShopMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_InteractiveMessage_ShopMessage>, I>>(
    object: I,
  ): Message_InteractiveMessage_ShopMessage {
    const message = createBaseMessage_InteractiveMessage_ShopMessage();
    message.id = object.id ?? undefined;
    message.surface = object.surface ?? undefined;
    message.messageVersion = object.messageVersion ?? undefined;
    return message;
  },
};

function createBaseMessage_InteractiveResponseMessage(): Message_InteractiveResponseMessage {
  return { body: undefined, contextInfo: undefined, nativeFlowResponseMessage: undefined };
}

export const Message_InteractiveResponseMessage: MessageFns<Message_InteractiveResponseMessage> = {
  encode(message: Message_InteractiveResponseMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.body !== undefined) {
      Message_InteractiveResponseMessage_Body.encode(message.body, writer.uint32(10).fork()).join();
    }
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(122).fork()).join();
    }
    if (message.nativeFlowResponseMessage !== undefined) {
      Message_InteractiveResponseMessage_NativeFlowResponseMessage.encode(
        message.nativeFlowResponseMessage,
        writer.uint32(18).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_InteractiveResponseMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_InteractiveResponseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.body = Message_InteractiveResponseMessage_Body.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nativeFlowResponseMessage = Message_InteractiveResponseMessage_NativeFlowResponseMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_InteractiveResponseMessage {
    return {
      body: isSet(object.body) ? Message_InteractiveResponseMessage_Body.fromJSON(object.body) : undefined,
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
      nativeFlowResponseMessage: isSet(object.nativeFlowResponseMessage)
        ? Message_InteractiveResponseMessage_NativeFlowResponseMessage.fromJSON(object.nativeFlowResponseMessage)
        : undefined,
    };
  },

  toJSON(message: Message_InteractiveResponseMessage): unknown {
    const obj: any = {};
    if (message.body !== undefined) {
      obj.body = Message_InteractiveResponseMessage_Body.toJSON(message.body);
    }
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    if (message.nativeFlowResponseMessage !== undefined) {
      obj.nativeFlowResponseMessage = Message_InteractiveResponseMessage_NativeFlowResponseMessage.toJSON(
        message.nativeFlowResponseMessage,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_InteractiveResponseMessage>, I>>(
    base?: I,
  ): Message_InteractiveResponseMessage {
    return Message_InteractiveResponseMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_InteractiveResponseMessage>, I>>(
    object: I,
  ): Message_InteractiveResponseMessage {
    const message = createBaseMessage_InteractiveResponseMessage();
    message.body = (object.body !== undefined && object.body !== null)
      ? Message_InteractiveResponseMessage_Body.fromPartial(object.body)
      : undefined;
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    message.nativeFlowResponseMessage =
      (object.nativeFlowResponseMessage !== undefined && object.nativeFlowResponseMessage !== null)
        ? Message_InteractiveResponseMessage_NativeFlowResponseMessage.fromPartial(object.nativeFlowResponseMessage)
        : undefined;
    return message;
  },
};

function createBaseMessage_InteractiveResponseMessage_Body(): Message_InteractiveResponseMessage_Body {
  return { text: undefined, format: undefined };
}

export const Message_InteractiveResponseMessage_Body: MessageFns<Message_InteractiveResponseMessage_Body> = {
  encode(message: Message_InteractiveResponseMessage_Body, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== undefined) {
      writer.uint32(10).string(message.text);
    }
    if (message.format !== undefined) {
      writer.uint32(16).int32(message.format);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_InteractiveResponseMessage_Body {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_InteractiveResponseMessage_Body();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.format = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_InteractiveResponseMessage_Body {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : undefined,
      format: isSet(object.format) ? message_InteractiveResponseMessage_Body_FormatFromJSON(object.format) : undefined,
    };
  },

  toJSON(message: Message_InteractiveResponseMessage_Body): unknown {
    const obj: any = {};
    if (message.text !== undefined) {
      obj.text = message.text;
    }
    if (message.format !== undefined) {
      obj.format = message_InteractiveResponseMessage_Body_FormatToJSON(message.format);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_InteractiveResponseMessage_Body>, I>>(
    base?: I,
  ): Message_InteractiveResponseMessage_Body {
    return Message_InteractiveResponseMessage_Body.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_InteractiveResponseMessage_Body>, I>>(
    object: I,
  ): Message_InteractiveResponseMessage_Body {
    const message = createBaseMessage_InteractiveResponseMessage_Body();
    message.text = object.text ?? undefined;
    message.format = object.format ?? undefined;
    return message;
  },
};

function createBaseMessage_InteractiveResponseMessage_NativeFlowResponseMessage(): Message_InteractiveResponseMessage_NativeFlowResponseMessage {
  return { name: undefined, paramsJson: undefined, version: undefined };
}

export const Message_InteractiveResponseMessage_NativeFlowResponseMessage: MessageFns<
  Message_InteractiveResponseMessage_NativeFlowResponseMessage
> = {
  encode(
    message: Message_InteractiveResponseMessage_NativeFlowResponseMessage,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.paramsJson !== undefined) {
      writer.uint32(18).string(message.paramsJson);
    }
    if (message.version !== undefined) {
      writer.uint32(24).int32(message.version);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): Message_InteractiveResponseMessage_NativeFlowResponseMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_InteractiveResponseMessage_NativeFlowResponseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.paramsJson = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.version = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_InteractiveResponseMessage_NativeFlowResponseMessage {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      paramsJson: isSet(object.paramsJson) ? globalThis.String(object.paramsJson) : undefined,
      version: isSet(object.version) ? globalThis.Number(object.version) : undefined,
    };
  },

  toJSON(message: Message_InteractiveResponseMessage_NativeFlowResponseMessage): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.paramsJson !== undefined) {
      obj.paramsJson = message.paramsJson;
    }
    if (message.version !== undefined) {
      obj.version = Math.round(message.version);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_InteractiveResponseMessage_NativeFlowResponseMessage>, I>>(
    base?: I,
  ): Message_InteractiveResponseMessage_NativeFlowResponseMessage {
    return Message_InteractiveResponseMessage_NativeFlowResponseMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_InteractiveResponseMessage_NativeFlowResponseMessage>, I>>(
    object: I,
  ): Message_InteractiveResponseMessage_NativeFlowResponseMessage {
    const message = createBaseMessage_InteractiveResponseMessage_NativeFlowResponseMessage();
    message.name = object.name ?? undefined;
    message.paramsJson = object.paramsJson ?? undefined;
    message.version = object.version ?? undefined;
    return message;
  },
};

function createBaseMessage_InvoiceMessage(): Message_InvoiceMessage {
  return {
    note: undefined,
    token: undefined,
    attachmentType: undefined,
    attachmentMimetype: undefined,
    attachmentMediaKey: undefined,
    attachmentMediaKeyTimestamp: undefined,
    attachmentFileSha256: undefined,
    attachmentFileEncSha256: undefined,
    attachmentDirectPath: undefined,
    attachmentJpegThumbnail: undefined,
  };
}

export const Message_InvoiceMessage: MessageFns<Message_InvoiceMessage> = {
  encode(message: Message_InvoiceMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.note !== undefined) {
      writer.uint32(10).string(message.note);
    }
    if (message.token !== undefined) {
      writer.uint32(18).string(message.token);
    }
    if (message.attachmentType !== undefined) {
      writer.uint32(24).int32(message.attachmentType);
    }
    if (message.attachmentMimetype !== undefined) {
      writer.uint32(34).string(message.attachmentMimetype);
    }
    if (message.attachmentMediaKey !== undefined) {
      writer.uint32(42).bytes(message.attachmentMediaKey);
    }
    if (message.attachmentMediaKeyTimestamp !== undefined) {
      writer.uint32(48).int64(message.attachmentMediaKeyTimestamp);
    }
    if (message.attachmentFileSha256 !== undefined) {
      writer.uint32(58).bytes(message.attachmentFileSha256);
    }
    if (message.attachmentFileEncSha256 !== undefined) {
      writer.uint32(66).bytes(message.attachmentFileEncSha256);
    }
    if (message.attachmentDirectPath !== undefined) {
      writer.uint32(74).string(message.attachmentDirectPath);
    }
    if (message.attachmentJpegThumbnail !== undefined) {
      writer.uint32(82).bytes(message.attachmentJpegThumbnail);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_InvoiceMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_InvoiceMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.note = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.attachmentType = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.attachmentMimetype = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.attachmentMediaKey = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.attachmentMediaKeyTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.attachmentFileSha256 = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.attachmentFileEncSha256 = reader.bytes();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.attachmentDirectPath = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.attachmentJpegThumbnail = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_InvoiceMessage {
    return {
      note: isSet(object.note) ? globalThis.String(object.note) : undefined,
      token: isSet(object.token) ? globalThis.String(object.token) : undefined,
      attachmentType: isSet(object.attachmentType)
        ? message_InvoiceMessage_AttachmentTypeFromJSON(object.attachmentType)
        : undefined,
      attachmentMimetype: isSet(object.attachmentMimetype) ? globalThis.String(object.attachmentMimetype) : undefined,
      attachmentMediaKey: isSet(object.attachmentMediaKey) ? bytesFromBase64(object.attachmentMediaKey) : undefined,
      attachmentMediaKeyTimestamp: isSet(object.attachmentMediaKeyTimestamp)
        ? globalThis.Number(object.attachmentMediaKeyTimestamp)
        : undefined,
      attachmentFileSha256: isSet(object.attachmentFileSha256)
        ? bytesFromBase64(object.attachmentFileSha256)
        : undefined,
      attachmentFileEncSha256: isSet(object.attachmentFileEncSha256)
        ? bytesFromBase64(object.attachmentFileEncSha256)
        : undefined,
      attachmentDirectPath: isSet(object.attachmentDirectPath)
        ? globalThis.String(object.attachmentDirectPath)
        : undefined,
      attachmentJpegThumbnail: isSet(object.attachmentJpegThumbnail)
        ? bytesFromBase64(object.attachmentJpegThumbnail)
        : undefined,
    };
  },

  toJSON(message: Message_InvoiceMessage): unknown {
    const obj: any = {};
    if (message.note !== undefined) {
      obj.note = message.note;
    }
    if (message.token !== undefined) {
      obj.token = message.token;
    }
    if (message.attachmentType !== undefined) {
      obj.attachmentType = message_InvoiceMessage_AttachmentTypeToJSON(message.attachmentType);
    }
    if (message.attachmentMimetype !== undefined) {
      obj.attachmentMimetype = message.attachmentMimetype;
    }
    if (message.attachmentMediaKey !== undefined) {
      obj.attachmentMediaKey = base64FromBytes(message.attachmentMediaKey);
    }
    if (message.attachmentMediaKeyTimestamp !== undefined) {
      obj.attachmentMediaKeyTimestamp = Math.round(message.attachmentMediaKeyTimestamp);
    }
    if (message.attachmentFileSha256 !== undefined) {
      obj.attachmentFileSha256 = base64FromBytes(message.attachmentFileSha256);
    }
    if (message.attachmentFileEncSha256 !== undefined) {
      obj.attachmentFileEncSha256 = base64FromBytes(message.attachmentFileEncSha256);
    }
    if (message.attachmentDirectPath !== undefined) {
      obj.attachmentDirectPath = message.attachmentDirectPath;
    }
    if (message.attachmentJpegThumbnail !== undefined) {
      obj.attachmentJpegThumbnail = base64FromBytes(message.attachmentJpegThumbnail);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_InvoiceMessage>, I>>(base?: I): Message_InvoiceMessage {
    return Message_InvoiceMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_InvoiceMessage>, I>>(object: I): Message_InvoiceMessage {
    const message = createBaseMessage_InvoiceMessage();
    message.note = object.note ?? undefined;
    message.token = object.token ?? undefined;
    message.attachmentType = object.attachmentType ?? undefined;
    message.attachmentMimetype = object.attachmentMimetype ?? undefined;
    message.attachmentMediaKey = object.attachmentMediaKey ?? undefined;
    message.attachmentMediaKeyTimestamp = object.attachmentMediaKeyTimestamp ?? undefined;
    message.attachmentFileSha256 = object.attachmentFileSha256 ?? undefined;
    message.attachmentFileEncSha256 = object.attachmentFileEncSha256 ?? undefined;
    message.attachmentDirectPath = object.attachmentDirectPath ?? undefined;
    message.attachmentJpegThumbnail = object.attachmentJpegThumbnail ?? undefined;
    return message;
  },
};

function createBaseMessage_KeepInChatMessage(): Message_KeepInChatMessage {
  return { key: undefined, keepType: undefined, timestampMs: undefined };
}

export const Message_KeepInChatMessage: MessageFns<Message_KeepInChatMessage> = {
  encode(message: Message_KeepInChatMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined) {
      MessageKey.encode(message.key, writer.uint32(10).fork()).join();
    }
    if (message.keepType !== undefined) {
      writer.uint32(16).int32(message.keepType);
    }
    if (message.timestampMs !== undefined) {
      writer.uint32(24).int64(message.timestampMs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_KeepInChatMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_KeepInChatMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.keepType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.timestampMs = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_KeepInChatMessage {
    return {
      key: isSet(object.key) ? MessageKey.fromJSON(object.key) : undefined,
      keepType: isSet(object.keepType) ? keepTypeFromJSON(object.keepType) : undefined,
      timestampMs: isSet(object.timestampMs) ? globalThis.Number(object.timestampMs) : undefined,
    };
  },

  toJSON(message: Message_KeepInChatMessage): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = MessageKey.toJSON(message.key);
    }
    if (message.keepType !== undefined) {
      obj.keepType = keepTypeToJSON(message.keepType);
    }
    if (message.timestampMs !== undefined) {
      obj.timestampMs = Math.round(message.timestampMs);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_KeepInChatMessage>, I>>(base?: I): Message_KeepInChatMessage {
    return Message_KeepInChatMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_KeepInChatMessage>, I>>(object: I): Message_KeepInChatMessage {
    const message = createBaseMessage_KeepInChatMessage();
    message.key = (object.key !== undefined && object.key !== null) ? MessageKey.fromPartial(object.key) : undefined;
    message.keepType = object.keepType ?? undefined;
    message.timestampMs = object.timestampMs ?? undefined;
    return message;
  },
};

function createBaseMessage_LinkPreviewMetadata(): Message_LinkPreviewMetadata {
  return { paymentLinkMetadata: undefined, urlMetadata: undefined, fbExperimentId: undefined };
}

export const Message_LinkPreviewMetadata: MessageFns<Message_LinkPreviewMetadata> = {
  encode(message: Message_LinkPreviewMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.paymentLinkMetadata !== undefined) {
      Message_PaymentLinkMetadata.encode(message.paymentLinkMetadata, writer.uint32(10).fork()).join();
    }
    if (message.urlMetadata !== undefined) {
      Message_URLMetadata.encode(message.urlMetadata, writer.uint32(18).fork()).join();
    }
    if (message.fbExperimentId !== undefined) {
      writer.uint32(24).uint32(message.fbExperimentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_LinkPreviewMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_LinkPreviewMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.paymentLinkMetadata = Message_PaymentLinkMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.urlMetadata = Message_URLMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.fbExperimentId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_LinkPreviewMetadata {
    return {
      paymentLinkMetadata: isSet(object.paymentLinkMetadata)
        ? Message_PaymentLinkMetadata.fromJSON(object.paymentLinkMetadata)
        : undefined,
      urlMetadata: isSet(object.urlMetadata) ? Message_URLMetadata.fromJSON(object.urlMetadata) : undefined,
      fbExperimentId: isSet(object.fbExperimentId) ? globalThis.Number(object.fbExperimentId) : undefined,
    };
  },

  toJSON(message: Message_LinkPreviewMetadata): unknown {
    const obj: any = {};
    if (message.paymentLinkMetadata !== undefined) {
      obj.paymentLinkMetadata = Message_PaymentLinkMetadata.toJSON(message.paymentLinkMetadata);
    }
    if (message.urlMetadata !== undefined) {
      obj.urlMetadata = Message_URLMetadata.toJSON(message.urlMetadata);
    }
    if (message.fbExperimentId !== undefined) {
      obj.fbExperimentId = Math.round(message.fbExperimentId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_LinkPreviewMetadata>, I>>(base?: I): Message_LinkPreviewMetadata {
    return Message_LinkPreviewMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_LinkPreviewMetadata>, I>>(object: I): Message_LinkPreviewMetadata {
    const message = createBaseMessage_LinkPreviewMetadata();
    message.paymentLinkMetadata = (object.paymentLinkMetadata !== undefined && object.paymentLinkMetadata !== null)
      ? Message_PaymentLinkMetadata.fromPartial(object.paymentLinkMetadata)
      : undefined;
    message.urlMetadata = (object.urlMetadata !== undefined && object.urlMetadata !== null)
      ? Message_URLMetadata.fromPartial(object.urlMetadata)
      : undefined;
    message.fbExperimentId = object.fbExperimentId ?? undefined;
    return message;
  },
};

function createBaseMessage_ListMessage(): Message_ListMessage {
  return {
    title: undefined,
    description: undefined,
    buttonText: undefined,
    listType: undefined,
    sections: [],
    productListInfo: undefined,
    footerText: undefined,
    contextInfo: undefined,
  };
}

export const Message_ListMessage: MessageFns<Message_ListMessage> = {
  encode(message: Message_ListMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== undefined) {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== undefined) {
      writer.uint32(18).string(message.description);
    }
    if (message.buttonText !== undefined) {
      writer.uint32(26).string(message.buttonText);
    }
    if (message.listType !== undefined) {
      writer.uint32(32).int32(message.listType);
    }
    for (const v of message.sections) {
      Message_ListMessage_Section.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.productListInfo !== undefined) {
      Message_ListMessage_ProductListInfo.encode(message.productListInfo, writer.uint32(50).fork()).join();
    }
    if (message.footerText !== undefined) {
      writer.uint32(58).string(message.footerText);
    }
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_ListMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_ListMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.listType = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.sections.push(Message_ListMessage_Section.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.productListInfo = Message_ListMessage_ProductListInfo.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.footerText = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_ListMessage {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : undefined,
      listType: isSet(object.listType) ? message_ListMessage_ListTypeFromJSON(object.listType) : undefined,
      sections: globalThis.Array.isArray(object?.sections)
        ? object.sections.map((e: any) => Message_ListMessage_Section.fromJSON(e))
        : [],
      productListInfo: isSet(object.productListInfo)
        ? Message_ListMessage_ProductListInfo.fromJSON(object.productListInfo)
        : undefined,
      footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : undefined,
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
    };
  },

  toJSON(message: Message_ListMessage): unknown {
    const obj: any = {};
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.buttonText !== undefined) {
      obj.buttonText = message.buttonText;
    }
    if (message.listType !== undefined) {
      obj.listType = message_ListMessage_ListTypeToJSON(message.listType);
    }
    if (message.sections?.length) {
      obj.sections = message.sections.map((e) => Message_ListMessage_Section.toJSON(e));
    }
    if (message.productListInfo !== undefined) {
      obj.productListInfo = Message_ListMessage_ProductListInfo.toJSON(message.productListInfo);
    }
    if (message.footerText !== undefined) {
      obj.footerText = message.footerText;
    }
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_ListMessage>, I>>(base?: I): Message_ListMessage {
    return Message_ListMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_ListMessage>, I>>(object: I): Message_ListMessage {
    const message = createBaseMessage_ListMessage();
    message.title = object.title ?? undefined;
    message.description = object.description ?? undefined;
    message.buttonText = object.buttonText ?? undefined;
    message.listType = object.listType ?? undefined;
    message.sections = object.sections?.map((e) => Message_ListMessage_Section.fromPartial(e)) || [];
    message.productListInfo = (object.productListInfo !== undefined && object.productListInfo !== null)
      ? Message_ListMessage_ProductListInfo.fromPartial(object.productListInfo)
      : undefined;
    message.footerText = object.footerText ?? undefined;
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    return message;
  },
};

function createBaseMessage_ListMessage_Product(): Message_ListMessage_Product {
  return { productId: undefined };
}

export const Message_ListMessage_Product: MessageFns<Message_ListMessage_Product> = {
  encode(message: Message_ListMessage_Product, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productId !== undefined) {
      writer.uint32(10).string(message.productId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_ListMessage_Product {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_ListMessage_Product();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_ListMessage_Product {
    return { productId: isSet(object.productId) ? globalThis.String(object.productId) : undefined };
  },

  toJSON(message: Message_ListMessage_Product): unknown {
    const obj: any = {};
    if (message.productId !== undefined) {
      obj.productId = message.productId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_ListMessage_Product>, I>>(base?: I): Message_ListMessage_Product {
    return Message_ListMessage_Product.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_ListMessage_Product>, I>>(object: I): Message_ListMessage_Product {
    const message = createBaseMessage_ListMessage_Product();
    message.productId = object.productId ?? undefined;
    return message;
  },
};

function createBaseMessage_ListMessage_ProductListHeaderImage(): Message_ListMessage_ProductListHeaderImage {
  return { productId: undefined, jpegThumbnail: undefined };
}

export const Message_ListMessage_ProductListHeaderImage: MessageFns<Message_ListMessage_ProductListHeaderImage> = {
  encode(message: Message_ListMessage_ProductListHeaderImage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productId !== undefined) {
      writer.uint32(10).string(message.productId);
    }
    if (message.jpegThumbnail !== undefined) {
      writer.uint32(18).bytes(message.jpegThumbnail);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_ListMessage_ProductListHeaderImage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_ListMessage_ProductListHeaderImage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.jpegThumbnail = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_ListMessage_ProductListHeaderImage {
    return {
      productId: isSet(object.productId) ? globalThis.String(object.productId) : undefined,
      jpegThumbnail: isSet(object.jpegThumbnail) ? bytesFromBase64(object.jpegThumbnail) : undefined,
    };
  },

  toJSON(message: Message_ListMessage_ProductListHeaderImage): unknown {
    const obj: any = {};
    if (message.productId !== undefined) {
      obj.productId = message.productId;
    }
    if (message.jpegThumbnail !== undefined) {
      obj.jpegThumbnail = base64FromBytes(message.jpegThumbnail);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_ListMessage_ProductListHeaderImage>, I>>(
    base?: I,
  ): Message_ListMessage_ProductListHeaderImage {
    return Message_ListMessage_ProductListHeaderImage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_ListMessage_ProductListHeaderImage>, I>>(
    object: I,
  ): Message_ListMessage_ProductListHeaderImage {
    const message = createBaseMessage_ListMessage_ProductListHeaderImage();
    message.productId = object.productId ?? undefined;
    message.jpegThumbnail = object.jpegThumbnail ?? undefined;
    return message;
  },
};

function createBaseMessage_ListMessage_ProductListInfo(): Message_ListMessage_ProductListInfo {
  return { productSections: [], headerImage: undefined, businessOwnerJid: undefined };
}

export const Message_ListMessage_ProductListInfo: MessageFns<Message_ListMessage_ProductListInfo> = {
  encode(message: Message_ListMessage_ProductListInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.productSections) {
      Message_ListMessage_ProductSection.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.headerImage !== undefined) {
      Message_ListMessage_ProductListHeaderImage.encode(message.headerImage, writer.uint32(18).fork()).join();
    }
    if (message.businessOwnerJid !== undefined) {
      writer.uint32(26).string(message.businessOwnerJid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_ListMessage_ProductListInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_ListMessage_ProductListInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productSections.push(Message_ListMessage_ProductSection.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.headerImage = Message_ListMessage_ProductListHeaderImage.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.businessOwnerJid = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_ListMessage_ProductListInfo {
    return {
      productSections: globalThis.Array.isArray(object?.productSections)
        ? object.productSections.map((e: any) => Message_ListMessage_ProductSection.fromJSON(e))
        : [],
      headerImage: isSet(object.headerImage)
        ? Message_ListMessage_ProductListHeaderImage.fromJSON(object.headerImage)
        : undefined,
      businessOwnerJid: isSet(object.businessOwnerJid) ? globalThis.String(object.businessOwnerJid) : undefined,
    };
  },

  toJSON(message: Message_ListMessage_ProductListInfo): unknown {
    const obj: any = {};
    if (message.productSections?.length) {
      obj.productSections = message.productSections.map((e) => Message_ListMessage_ProductSection.toJSON(e));
    }
    if (message.headerImage !== undefined) {
      obj.headerImage = Message_ListMessage_ProductListHeaderImage.toJSON(message.headerImage);
    }
    if (message.businessOwnerJid !== undefined) {
      obj.businessOwnerJid = message.businessOwnerJid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_ListMessage_ProductListInfo>, I>>(
    base?: I,
  ): Message_ListMessage_ProductListInfo {
    return Message_ListMessage_ProductListInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_ListMessage_ProductListInfo>, I>>(
    object: I,
  ): Message_ListMessage_ProductListInfo {
    const message = createBaseMessage_ListMessage_ProductListInfo();
    message.productSections = object.productSections?.map((e) => Message_ListMessage_ProductSection.fromPartial(e)) ||
      [];
    message.headerImage = (object.headerImage !== undefined && object.headerImage !== null)
      ? Message_ListMessage_ProductListHeaderImage.fromPartial(object.headerImage)
      : undefined;
    message.businessOwnerJid = object.businessOwnerJid ?? undefined;
    return message;
  },
};

function createBaseMessage_ListMessage_ProductSection(): Message_ListMessage_ProductSection {
  return { title: undefined, products: [] };
}

export const Message_ListMessage_ProductSection: MessageFns<Message_ListMessage_ProductSection> = {
  encode(message: Message_ListMessage_ProductSection, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== undefined) {
      writer.uint32(10).string(message.title);
    }
    for (const v of message.products) {
      Message_ListMessage_Product.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_ListMessage_ProductSection {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_ListMessage_ProductSection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.products.push(Message_ListMessage_Product.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_ListMessage_ProductSection {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      products: globalThis.Array.isArray(object?.products)
        ? object.products.map((e: any) => Message_ListMessage_Product.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Message_ListMessage_ProductSection): unknown {
    const obj: any = {};
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.products?.length) {
      obj.products = message.products.map((e) => Message_ListMessage_Product.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_ListMessage_ProductSection>, I>>(
    base?: I,
  ): Message_ListMessage_ProductSection {
    return Message_ListMessage_ProductSection.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_ListMessage_ProductSection>, I>>(
    object: I,
  ): Message_ListMessage_ProductSection {
    const message = createBaseMessage_ListMessage_ProductSection();
    message.title = object.title ?? undefined;
    message.products = object.products?.map((e) => Message_ListMessage_Product.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMessage_ListMessage_Row(): Message_ListMessage_Row {
  return { title: undefined, description: undefined, rowId: undefined };
}

export const Message_ListMessage_Row: MessageFns<Message_ListMessage_Row> = {
  encode(message: Message_ListMessage_Row, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== undefined) {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== undefined) {
      writer.uint32(18).string(message.description);
    }
    if (message.rowId !== undefined) {
      writer.uint32(26).string(message.rowId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_ListMessage_Row {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_ListMessage_Row();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.rowId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_ListMessage_Row {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      rowId: isSet(object.rowId) ? globalThis.String(object.rowId) : undefined,
    };
  },

  toJSON(message: Message_ListMessage_Row): unknown {
    const obj: any = {};
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.rowId !== undefined) {
      obj.rowId = message.rowId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_ListMessage_Row>, I>>(base?: I): Message_ListMessage_Row {
    return Message_ListMessage_Row.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_ListMessage_Row>, I>>(object: I): Message_ListMessage_Row {
    const message = createBaseMessage_ListMessage_Row();
    message.title = object.title ?? undefined;
    message.description = object.description ?? undefined;
    message.rowId = object.rowId ?? undefined;
    return message;
  },
};

function createBaseMessage_ListMessage_Section(): Message_ListMessage_Section {
  return { title: undefined, rows: [] };
}

export const Message_ListMessage_Section: MessageFns<Message_ListMessage_Section> = {
  encode(message: Message_ListMessage_Section, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== undefined) {
      writer.uint32(10).string(message.title);
    }
    for (const v of message.rows) {
      Message_ListMessage_Row.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_ListMessage_Section {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_ListMessage_Section();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rows.push(Message_ListMessage_Row.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_ListMessage_Section {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      rows: globalThis.Array.isArray(object?.rows)
        ? object.rows.map((e: any) => Message_ListMessage_Row.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Message_ListMessage_Section): unknown {
    const obj: any = {};
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.rows?.length) {
      obj.rows = message.rows.map((e) => Message_ListMessage_Row.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_ListMessage_Section>, I>>(base?: I): Message_ListMessage_Section {
    return Message_ListMessage_Section.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_ListMessage_Section>, I>>(object: I): Message_ListMessage_Section {
    const message = createBaseMessage_ListMessage_Section();
    message.title = object.title ?? undefined;
    message.rows = object.rows?.map((e) => Message_ListMessage_Row.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMessage_ListResponseMessage(): Message_ListResponseMessage {
  return {
    title: undefined,
    listType: undefined,
    singleSelectReply: undefined,
    contextInfo: undefined,
    description: undefined,
  };
}

export const Message_ListResponseMessage: MessageFns<Message_ListResponseMessage> = {
  encode(message: Message_ListResponseMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== undefined) {
      writer.uint32(10).string(message.title);
    }
    if (message.listType !== undefined) {
      writer.uint32(16).int32(message.listType);
    }
    if (message.singleSelectReply !== undefined) {
      Message_ListResponseMessage_SingleSelectReply.encode(message.singleSelectReply, writer.uint32(26).fork()).join();
    }
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(34).fork()).join();
    }
    if (message.description !== undefined) {
      writer.uint32(42).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_ListResponseMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_ListResponseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.listType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.singleSelectReply = Message_ListResponseMessage_SingleSelectReply.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_ListResponseMessage {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      listType: isSet(object.listType) ? message_ListResponseMessage_ListTypeFromJSON(object.listType) : undefined,
      singleSelectReply: isSet(object.singleSelectReply)
        ? Message_ListResponseMessage_SingleSelectReply.fromJSON(object.singleSelectReply)
        : undefined,
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
    };
  },

  toJSON(message: Message_ListResponseMessage): unknown {
    const obj: any = {};
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.listType !== undefined) {
      obj.listType = message_ListResponseMessage_ListTypeToJSON(message.listType);
    }
    if (message.singleSelectReply !== undefined) {
      obj.singleSelectReply = Message_ListResponseMessage_SingleSelectReply.toJSON(message.singleSelectReply);
    }
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_ListResponseMessage>, I>>(base?: I): Message_ListResponseMessage {
    return Message_ListResponseMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_ListResponseMessage>, I>>(object: I): Message_ListResponseMessage {
    const message = createBaseMessage_ListResponseMessage();
    message.title = object.title ?? undefined;
    message.listType = object.listType ?? undefined;
    message.singleSelectReply = (object.singleSelectReply !== undefined && object.singleSelectReply !== null)
      ? Message_ListResponseMessage_SingleSelectReply.fromPartial(object.singleSelectReply)
      : undefined;
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    message.description = object.description ?? undefined;
    return message;
  },
};

function createBaseMessage_ListResponseMessage_SingleSelectReply(): Message_ListResponseMessage_SingleSelectReply {
  return { selectedRowId: undefined };
}

export const Message_ListResponseMessage_SingleSelectReply: MessageFns<Message_ListResponseMessage_SingleSelectReply> =
  {
    encode(
      message: Message_ListResponseMessage_SingleSelectReply,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.selectedRowId !== undefined) {
        writer.uint32(10).string(message.selectedRowId);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): Message_ListResponseMessage_SingleSelectReply {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseMessage_ListResponseMessage_SingleSelectReply();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.selectedRowId = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): Message_ListResponseMessage_SingleSelectReply {
      return { selectedRowId: isSet(object.selectedRowId) ? globalThis.String(object.selectedRowId) : undefined };
    },

    toJSON(message: Message_ListResponseMessage_SingleSelectReply): unknown {
      const obj: any = {};
      if (message.selectedRowId !== undefined) {
        obj.selectedRowId = message.selectedRowId;
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<Message_ListResponseMessage_SingleSelectReply>, I>>(
      base?: I,
    ): Message_ListResponseMessage_SingleSelectReply {
      return Message_ListResponseMessage_SingleSelectReply.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<Message_ListResponseMessage_SingleSelectReply>, I>>(
      object: I,
    ): Message_ListResponseMessage_SingleSelectReply {
      const message = createBaseMessage_ListResponseMessage_SingleSelectReply();
      message.selectedRowId = object.selectedRowId ?? undefined;
      return message;
    },
  };

function createBaseMessage_LiveLocationMessage(): Message_LiveLocationMessage {
  return {
    degreesLatitude: undefined,
    degreesLongitude: undefined,
    accuracyInMeters: undefined,
    speedInMps: undefined,
    degreesClockwiseFromMagneticNorth: undefined,
    caption: undefined,
    sequenceNumber: undefined,
    timeOffset: undefined,
    jpegThumbnail: undefined,
    contextInfo: undefined,
  };
}

export const Message_LiveLocationMessage: MessageFns<Message_LiveLocationMessage> = {
  encode(message: Message_LiveLocationMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.degreesLatitude !== undefined) {
      writer.uint32(9).double(message.degreesLatitude);
    }
    if (message.degreesLongitude !== undefined) {
      writer.uint32(17).double(message.degreesLongitude);
    }
    if (message.accuracyInMeters !== undefined) {
      writer.uint32(24).uint32(message.accuracyInMeters);
    }
    if (message.speedInMps !== undefined) {
      writer.uint32(37).float(message.speedInMps);
    }
    if (message.degreesClockwiseFromMagneticNorth !== undefined) {
      writer.uint32(40).uint32(message.degreesClockwiseFromMagneticNorth);
    }
    if (message.caption !== undefined) {
      writer.uint32(50).string(message.caption);
    }
    if (message.sequenceNumber !== undefined) {
      writer.uint32(56).int64(message.sequenceNumber);
    }
    if (message.timeOffset !== undefined) {
      writer.uint32(64).uint32(message.timeOffset);
    }
    if (message.jpegThumbnail !== undefined) {
      writer.uint32(130).bytes(message.jpegThumbnail);
    }
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(138).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_LiveLocationMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_LiveLocationMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.degreesLatitude = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.degreesLongitude = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.accuracyInMeters = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.speedInMps = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.degreesClockwiseFromMagneticNorth = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.caption = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.sequenceNumber = longToNumber(reader.int64());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.timeOffset = reader.uint32();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.jpegThumbnail = reader.bytes();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_LiveLocationMessage {
    return {
      degreesLatitude: isSet(object.degreesLatitude) ? globalThis.Number(object.degreesLatitude) : undefined,
      degreesLongitude: isSet(object.degreesLongitude) ? globalThis.Number(object.degreesLongitude) : undefined,
      accuracyInMeters: isSet(object.accuracyInMeters) ? globalThis.Number(object.accuracyInMeters) : undefined,
      speedInMps: isSet(object.speedInMps) ? globalThis.Number(object.speedInMps) : undefined,
      degreesClockwiseFromMagneticNorth: isSet(object.degreesClockwiseFromMagneticNorth)
        ? globalThis.Number(object.degreesClockwiseFromMagneticNorth)
        : undefined,
      caption: isSet(object.caption) ? globalThis.String(object.caption) : undefined,
      sequenceNumber: isSet(object.sequenceNumber) ? globalThis.Number(object.sequenceNumber) : undefined,
      timeOffset: isSet(object.timeOffset) ? globalThis.Number(object.timeOffset) : undefined,
      jpegThumbnail: isSet(object.jpegThumbnail) ? bytesFromBase64(object.jpegThumbnail) : undefined,
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
    };
  },

  toJSON(message: Message_LiveLocationMessage): unknown {
    const obj: any = {};
    if (message.degreesLatitude !== undefined) {
      obj.degreesLatitude = message.degreesLatitude;
    }
    if (message.degreesLongitude !== undefined) {
      obj.degreesLongitude = message.degreesLongitude;
    }
    if (message.accuracyInMeters !== undefined) {
      obj.accuracyInMeters = Math.round(message.accuracyInMeters);
    }
    if (message.speedInMps !== undefined) {
      obj.speedInMps = message.speedInMps;
    }
    if (message.degreesClockwiseFromMagneticNorth !== undefined) {
      obj.degreesClockwiseFromMagneticNorth = Math.round(message.degreesClockwiseFromMagneticNorth);
    }
    if (message.caption !== undefined) {
      obj.caption = message.caption;
    }
    if (message.sequenceNumber !== undefined) {
      obj.sequenceNumber = Math.round(message.sequenceNumber);
    }
    if (message.timeOffset !== undefined) {
      obj.timeOffset = Math.round(message.timeOffset);
    }
    if (message.jpegThumbnail !== undefined) {
      obj.jpegThumbnail = base64FromBytes(message.jpegThumbnail);
    }
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_LiveLocationMessage>, I>>(base?: I): Message_LiveLocationMessage {
    return Message_LiveLocationMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_LiveLocationMessage>, I>>(object: I): Message_LiveLocationMessage {
    const message = createBaseMessage_LiveLocationMessage();
    message.degreesLatitude = object.degreesLatitude ?? undefined;
    message.degreesLongitude = object.degreesLongitude ?? undefined;
    message.accuracyInMeters = object.accuracyInMeters ?? undefined;
    message.speedInMps = object.speedInMps ?? undefined;
    message.degreesClockwiseFromMagneticNorth = object.degreesClockwiseFromMagneticNorth ?? undefined;
    message.caption = object.caption ?? undefined;
    message.sequenceNumber = object.sequenceNumber ?? undefined;
    message.timeOffset = object.timeOffset ?? undefined;
    message.jpegThumbnail = object.jpegThumbnail ?? undefined;
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    return message;
  },
};

function createBaseMessage_LocationMessage(): Message_LocationMessage {
  return {
    degreesLatitude: undefined,
    degreesLongitude: undefined,
    name: undefined,
    address: undefined,
    url: undefined,
    isLive: undefined,
    accuracyInMeters: undefined,
    speedInMps: undefined,
    degreesClockwiseFromMagneticNorth: undefined,
    comment: undefined,
    jpegThumbnail: undefined,
    contextInfo: undefined,
  };
}

export const Message_LocationMessage: MessageFns<Message_LocationMessage> = {
  encode(message: Message_LocationMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.degreesLatitude !== undefined) {
      writer.uint32(9).double(message.degreesLatitude);
    }
    if (message.degreesLongitude !== undefined) {
      writer.uint32(17).double(message.degreesLongitude);
    }
    if (message.name !== undefined) {
      writer.uint32(26).string(message.name);
    }
    if (message.address !== undefined) {
      writer.uint32(34).string(message.address);
    }
    if (message.url !== undefined) {
      writer.uint32(42).string(message.url);
    }
    if (message.isLive !== undefined) {
      writer.uint32(48).bool(message.isLive);
    }
    if (message.accuracyInMeters !== undefined) {
      writer.uint32(56).uint32(message.accuracyInMeters);
    }
    if (message.speedInMps !== undefined) {
      writer.uint32(69).float(message.speedInMps);
    }
    if (message.degreesClockwiseFromMagneticNorth !== undefined) {
      writer.uint32(72).uint32(message.degreesClockwiseFromMagneticNorth);
    }
    if (message.comment !== undefined) {
      writer.uint32(90).string(message.comment);
    }
    if (message.jpegThumbnail !== undefined) {
      writer.uint32(130).bytes(message.jpegThumbnail);
    }
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(138).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_LocationMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_LocationMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.degreesLatitude = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.degreesLongitude = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isLive = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.accuracyInMeters = reader.uint32();
          continue;
        }
        case 8: {
          if (tag !== 69) {
            break;
          }

          message.speedInMps = reader.float();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.degreesClockwiseFromMagneticNorth = reader.uint32();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.comment = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.jpegThumbnail = reader.bytes();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_LocationMessage {
    return {
      degreesLatitude: isSet(object.degreesLatitude) ? globalThis.Number(object.degreesLatitude) : undefined,
      degreesLongitude: isSet(object.degreesLongitude) ? globalThis.Number(object.degreesLongitude) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      address: isSet(object.address) ? globalThis.String(object.address) : undefined,
      url: isSet(object.url) ? globalThis.String(object.url) : undefined,
      isLive: isSet(object.isLive) ? globalThis.Boolean(object.isLive) : undefined,
      accuracyInMeters: isSet(object.accuracyInMeters) ? globalThis.Number(object.accuracyInMeters) : undefined,
      speedInMps: isSet(object.speedInMps) ? globalThis.Number(object.speedInMps) : undefined,
      degreesClockwiseFromMagneticNorth: isSet(object.degreesClockwiseFromMagneticNorth)
        ? globalThis.Number(object.degreesClockwiseFromMagneticNorth)
        : undefined,
      comment: isSet(object.comment) ? globalThis.String(object.comment) : undefined,
      jpegThumbnail: isSet(object.jpegThumbnail) ? bytesFromBase64(object.jpegThumbnail) : undefined,
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
    };
  },

  toJSON(message: Message_LocationMessage): unknown {
    const obj: any = {};
    if (message.degreesLatitude !== undefined) {
      obj.degreesLatitude = message.degreesLatitude;
    }
    if (message.degreesLongitude !== undefined) {
      obj.degreesLongitude = message.degreesLongitude;
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    if (message.isLive !== undefined) {
      obj.isLive = message.isLive;
    }
    if (message.accuracyInMeters !== undefined) {
      obj.accuracyInMeters = Math.round(message.accuracyInMeters);
    }
    if (message.speedInMps !== undefined) {
      obj.speedInMps = message.speedInMps;
    }
    if (message.degreesClockwiseFromMagneticNorth !== undefined) {
      obj.degreesClockwiseFromMagneticNorth = Math.round(message.degreesClockwiseFromMagneticNorth);
    }
    if (message.comment !== undefined) {
      obj.comment = message.comment;
    }
    if (message.jpegThumbnail !== undefined) {
      obj.jpegThumbnail = base64FromBytes(message.jpegThumbnail);
    }
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_LocationMessage>, I>>(base?: I): Message_LocationMessage {
    return Message_LocationMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_LocationMessage>, I>>(object: I): Message_LocationMessage {
    const message = createBaseMessage_LocationMessage();
    message.degreesLatitude = object.degreesLatitude ?? undefined;
    message.degreesLongitude = object.degreesLongitude ?? undefined;
    message.name = object.name ?? undefined;
    message.address = object.address ?? undefined;
    message.url = object.url ?? undefined;
    message.isLive = object.isLive ?? undefined;
    message.accuracyInMeters = object.accuracyInMeters ?? undefined;
    message.speedInMps = object.speedInMps ?? undefined;
    message.degreesClockwiseFromMagneticNorth = object.degreesClockwiseFromMagneticNorth ?? undefined;
    message.comment = object.comment ?? undefined;
    message.jpegThumbnail = object.jpegThumbnail ?? undefined;
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    return message;
  },
};

function createBaseMessage_MMSThumbnailMetadata(): Message_MMSThumbnailMetadata {
  return {
    thumbnailDirectPath: undefined,
    thumbnailSha256: undefined,
    thumbnailEncSha256: undefined,
    mediaKey: undefined,
    mediaKeyTimestamp: undefined,
    thumbnailHeight: undefined,
    thumbnailWidth: undefined,
  };
}

export const Message_MMSThumbnailMetadata: MessageFns<Message_MMSThumbnailMetadata> = {
  encode(message: Message_MMSThumbnailMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.thumbnailDirectPath !== undefined) {
      writer.uint32(10).string(message.thumbnailDirectPath);
    }
    if (message.thumbnailSha256 !== undefined) {
      writer.uint32(18).bytes(message.thumbnailSha256);
    }
    if (message.thumbnailEncSha256 !== undefined) {
      writer.uint32(26).bytes(message.thumbnailEncSha256);
    }
    if (message.mediaKey !== undefined) {
      writer.uint32(34).bytes(message.mediaKey);
    }
    if (message.mediaKeyTimestamp !== undefined) {
      writer.uint32(40).int64(message.mediaKeyTimestamp);
    }
    if (message.thumbnailHeight !== undefined) {
      writer.uint32(48).uint32(message.thumbnailHeight);
    }
    if (message.thumbnailWidth !== undefined) {
      writer.uint32(56).uint32(message.thumbnailWidth);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_MMSThumbnailMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_MMSThumbnailMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.thumbnailDirectPath = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.thumbnailSha256 = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.thumbnailEncSha256 = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.mediaKey = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.mediaKeyTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.thumbnailHeight = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.thumbnailWidth = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_MMSThumbnailMetadata {
    return {
      thumbnailDirectPath: isSet(object.thumbnailDirectPath)
        ? globalThis.String(object.thumbnailDirectPath)
        : undefined,
      thumbnailSha256: isSet(object.thumbnailSha256) ? bytesFromBase64(object.thumbnailSha256) : undefined,
      thumbnailEncSha256: isSet(object.thumbnailEncSha256) ? bytesFromBase64(object.thumbnailEncSha256) : undefined,
      mediaKey: isSet(object.mediaKey) ? bytesFromBase64(object.mediaKey) : undefined,
      mediaKeyTimestamp: isSet(object.mediaKeyTimestamp) ? globalThis.Number(object.mediaKeyTimestamp) : undefined,
      thumbnailHeight: isSet(object.thumbnailHeight) ? globalThis.Number(object.thumbnailHeight) : undefined,
      thumbnailWidth: isSet(object.thumbnailWidth) ? globalThis.Number(object.thumbnailWidth) : undefined,
    };
  },

  toJSON(message: Message_MMSThumbnailMetadata): unknown {
    const obj: any = {};
    if (message.thumbnailDirectPath !== undefined) {
      obj.thumbnailDirectPath = message.thumbnailDirectPath;
    }
    if (message.thumbnailSha256 !== undefined) {
      obj.thumbnailSha256 = base64FromBytes(message.thumbnailSha256);
    }
    if (message.thumbnailEncSha256 !== undefined) {
      obj.thumbnailEncSha256 = base64FromBytes(message.thumbnailEncSha256);
    }
    if (message.mediaKey !== undefined) {
      obj.mediaKey = base64FromBytes(message.mediaKey);
    }
    if (message.mediaKeyTimestamp !== undefined) {
      obj.mediaKeyTimestamp = Math.round(message.mediaKeyTimestamp);
    }
    if (message.thumbnailHeight !== undefined) {
      obj.thumbnailHeight = Math.round(message.thumbnailHeight);
    }
    if (message.thumbnailWidth !== undefined) {
      obj.thumbnailWidth = Math.round(message.thumbnailWidth);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_MMSThumbnailMetadata>, I>>(base?: I): Message_MMSThumbnailMetadata {
    return Message_MMSThumbnailMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_MMSThumbnailMetadata>, I>>(object: I): Message_MMSThumbnailMetadata {
    const message = createBaseMessage_MMSThumbnailMetadata();
    message.thumbnailDirectPath = object.thumbnailDirectPath ?? undefined;
    message.thumbnailSha256 = object.thumbnailSha256 ?? undefined;
    message.thumbnailEncSha256 = object.thumbnailEncSha256 ?? undefined;
    message.mediaKey = object.mediaKey ?? undefined;
    message.mediaKeyTimestamp = object.mediaKeyTimestamp ?? undefined;
    message.thumbnailHeight = object.thumbnailHeight ?? undefined;
    message.thumbnailWidth = object.thumbnailWidth ?? undefined;
    return message;
  },
};

function createBaseMessage_MessageHistoryBundle(): Message_MessageHistoryBundle {
  return {
    mimetype: undefined,
    fileSha256: undefined,
    mediaKey: undefined,
    fileEncSha256: undefined,
    directPath: undefined,
    mediaKeyTimestamp: undefined,
    contextInfo: undefined,
    messageHistoryMetadata: undefined,
  };
}

export const Message_MessageHistoryBundle: MessageFns<Message_MessageHistoryBundle> = {
  encode(message: Message_MessageHistoryBundle, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mimetype !== undefined) {
      writer.uint32(10).string(message.mimetype);
    }
    if (message.fileSha256 !== undefined) {
      writer.uint32(18).bytes(message.fileSha256);
    }
    if (message.mediaKey !== undefined) {
      writer.uint32(26).bytes(message.mediaKey);
    }
    if (message.fileEncSha256 !== undefined) {
      writer.uint32(34).bytes(message.fileEncSha256);
    }
    if (message.directPath !== undefined) {
      writer.uint32(42).string(message.directPath);
    }
    if (message.mediaKeyTimestamp !== undefined) {
      writer.uint32(48).int64(message.mediaKeyTimestamp);
    }
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(58).fork()).join();
    }
    if (message.messageHistoryMetadata !== undefined) {
      Message_MessageHistoryMetadata.encode(message.messageHistoryMetadata, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_MessageHistoryBundle {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_MessageHistoryBundle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mimetype = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fileSha256 = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.mediaKey = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.fileEncSha256 = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.directPath = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.mediaKeyTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.messageHistoryMetadata = Message_MessageHistoryMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_MessageHistoryBundle {
    return {
      mimetype: isSet(object.mimetype) ? globalThis.String(object.mimetype) : undefined,
      fileSha256: isSet(object.fileSha256) ? bytesFromBase64(object.fileSha256) : undefined,
      mediaKey: isSet(object.mediaKey) ? bytesFromBase64(object.mediaKey) : undefined,
      fileEncSha256: isSet(object.fileEncSha256) ? bytesFromBase64(object.fileEncSha256) : undefined,
      directPath: isSet(object.directPath) ? globalThis.String(object.directPath) : undefined,
      mediaKeyTimestamp: isSet(object.mediaKeyTimestamp) ? globalThis.Number(object.mediaKeyTimestamp) : undefined,
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
      messageHistoryMetadata: isSet(object.messageHistoryMetadata)
        ? Message_MessageHistoryMetadata.fromJSON(object.messageHistoryMetadata)
        : undefined,
    };
  },

  toJSON(message: Message_MessageHistoryBundle): unknown {
    const obj: any = {};
    if (message.mimetype !== undefined) {
      obj.mimetype = message.mimetype;
    }
    if (message.fileSha256 !== undefined) {
      obj.fileSha256 = base64FromBytes(message.fileSha256);
    }
    if (message.mediaKey !== undefined) {
      obj.mediaKey = base64FromBytes(message.mediaKey);
    }
    if (message.fileEncSha256 !== undefined) {
      obj.fileEncSha256 = base64FromBytes(message.fileEncSha256);
    }
    if (message.directPath !== undefined) {
      obj.directPath = message.directPath;
    }
    if (message.mediaKeyTimestamp !== undefined) {
      obj.mediaKeyTimestamp = Math.round(message.mediaKeyTimestamp);
    }
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    if (message.messageHistoryMetadata !== undefined) {
      obj.messageHistoryMetadata = Message_MessageHistoryMetadata.toJSON(message.messageHistoryMetadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_MessageHistoryBundle>, I>>(base?: I): Message_MessageHistoryBundle {
    return Message_MessageHistoryBundle.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_MessageHistoryBundle>, I>>(object: I): Message_MessageHistoryBundle {
    const message = createBaseMessage_MessageHistoryBundle();
    message.mimetype = object.mimetype ?? undefined;
    message.fileSha256 = object.fileSha256 ?? undefined;
    message.mediaKey = object.mediaKey ?? undefined;
    message.fileEncSha256 = object.fileEncSha256 ?? undefined;
    message.directPath = object.directPath ?? undefined;
    message.mediaKeyTimestamp = object.mediaKeyTimestamp ?? undefined;
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    message.messageHistoryMetadata =
      (object.messageHistoryMetadata !== undefined && object.messageHistoryMetadata !== null)
        ? Message_MessageHistoryMetadata.fromPartial(object.messageHistoryMetadata)
        : undefined;
    return message;
  },
};

function createBaseMessage_MessageHistoryMetadata(): Message_MessageHistoryMetadata {
  return { historyReceivers: [], firstMessageTimestamp: undefined, messageCount: undefined };
}

export const Message_MessageHistoryMetadata: MessageFns<Message_MessageHistoryMetadata> = {
  encode(message: Message_MessageHistoryMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.historyReceivers) {
      writer.uint32(10).string(v!);
    }
    if (message.firstMessageTimestamp !== undefined) {
      writer.uint32(16).int64(message.firstMessageTimestamp);
    }
    if (message.messageCount !== undefined) {
      writer.uint32(24).int64(message.messageCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_MessageHistoryMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_MessageHistoryMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.historyReceivers.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.firstMessageTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.messageCount = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_MessageHistoryMetadata {
    return {
      historyReceivers: globalThis.Array.isArray(object?.historyReceivers)
        ? object.historyReceivers.map((e: any) => globalThis.String(e))
        : [],
      firstMessageTimestamp: isSet(object.firstMessageTimestamp)
        ? globalThis.Number(object.firstMessageTimestamp)
        : undefined,
      messageCount: isSet(object.messageCount) ? globalThis.Number(object.messageCount) : undefined,
    };
  },

  toJSON(message: Message_MessageHistoryMetadata): unknown {
    const obj: any = {};
    if (message.historyReceivers?.length) {
      obj.historyReceivers = message.historyReceivers;
    }
    if (message.firstMessageTimestamp !== undefined) {
      obj.firstMessageTimestamp = Math.round(message.firstMessageTimestamp);
    }
    if (message.messageCount !== undefined) {
      obj.messageCount = Math.round(message.messageCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_MessageHistoryMetadata>, I>>(base?: I): Message_MessageHistoryMetadata {
    return Message_MessageHistoryMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_MessageHistoryMetadata>, I>>(
    object: I,
  ): Message_MessageHistoryMetadata {
    const message = createBaseMessage_MessageHistoryMetadata();
    message.historyReceivers = object.historyReceivers?.map((e) => e) || [];
    message.firstMessageTimestamp = object.firstMessageTimestamp ?? undefined;
    message.messageCount = object.messageCount ?? undefined;
    return message;
  },
};

function createBaseMessage_MessageHistoryNotice(): Message_MessageHistoryNotice {
  return { contextInfo: undefined, messageHistoryMetadata: undefined };
}

export const Message_MessageHistoryNotice: MessageFns<Message_MessageHistoryNotice> = {
  encode(message: Message_MessageHistoryNotice, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(10).fork()).join();
    }
    if (message.messageHistoryMetadata !== undefined) {
      Message_MessageHistoryMetadata.encode(message.messageHistoryMetadata, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_MessageHistoryNotice {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_MessageHistoryNotice();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.messageHistoryMetadata = Message_MessageHistoryMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_MessageHistoryNotice {
    return {
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
      messageHistoryMetadata: isSet(object.messageHistoryMetadata)
        ? Message_MessageHistoryMetadata.fromJSON(object.messageHistoryMetadata)
        : undefined,
    };
  },

  toJSON(message: Message_MessageHistoryNotice): unknown {
    const obj: any = {};
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    if (message.messageHistoryMetadata !== undefined) {
      obj.messageHistoryMetadata = Message_MessageHistoryMetadata.toJSON(message.messageHistoryMetadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_MessageHistoryNotice>, I>>(base?: I): Message_MessageHistoryNotice {
    return Message_MessageHistoryNotice.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_MessageHistoryNotice>, I>>(object: I): Message_MessageHistoryNotice {
    const message = createBaseMessage_MessageHistoryNotice();
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    message.messageHistoryMetadata =
      (object.messageHistoryMetadata !== undefined && object.messageHistoryMetadata !== null)
        ? Message_MessageHistoryMetadata.fromPartial(object.messageHistoryMetadata)
        : undefined;
    return message;
  },
};

function createBaseMessage_NewsletterAdminInviteMessage(): Message_NewsletterAdminInviteMessage {
  return {
    newsletterJid: undefined,
    newsletterName: undefined,
    jpegThumbnail: undefined,
    caption: undefined,
    inviteExpiration: undefined,
    contextInfo: undefined,
  };
}

export const Message_NewsletterAdminInviteMessage: MessageFns<Message_NewsletterAdminInviteMessage> = {
  encode(message: Message_NewsletterAdminInviteMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.newsletterJid !== undefined) {
      writer.uint32(10).string(message.newsletterJid);
    }
    if (message.newsletterName !== undefined) {
      writer.uint32(18).string(message.newsletterName);
    }
    if (message.jpegThumbnail !== undefined) {
      writer.uint32(26).bytes(message.jpegThumbnail);
    }
    if (message.caption !== undefined) {
      writer.uint32(34).string(message.caption);
    }
    if (message.inviteExpiration !== undefined) {
      writer.uint32(40).int64(message.inviteExpiration);
    }
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_NewsletterAdminInviteMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_NewsletterAdminInviteMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.newsletterJid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.newsletterName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.jpegThumbnail = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.caption = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.inviteExpiration = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_NewsletterAdminInviteMessage {
    return {
      newsletterJid: isSet(object.newsletterJid) ? globalThis.String(object.newsletterJid) : undefined,
      newsletterName: isSet(object.newsletterName) ? globalThis.String(object.newsletterName) : undefined,
      jpegThumbnail: isSet(object.jpegThumbnail) ? bytesFromBase64(object.jpegThumbnail) : undefined,
      caption: isSet(object.caption) ? globalThis.String(object.caption) : undefined,
      inviteExpiration: isSet(object.inviteExpiration) ? globalThis.Number(object.inviteExpiration) : undefined,
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
    };
  },

  toJSON(message: Message_NewsletterAdminInviteMessage): unknown {
    const obj: any = {};
    if (message.newsletterJid !== undefined) {
      obj.newsletterJid = message.newsletterJid;
    }
    if (message.newsletterName !== undefined) {
      obj.newsletterName = message.newsletterName;
    }
    if (message.jpegThumbnail !== undefined) {
      obj.jpegThumbnail = base64FromBytes(message.jpegThumbnail);
    }
    if (message.caption !== undefined) {
      obj.caption = message.caption;
    }
    if (message.inviteExpiration !== undefined) {
      obj.inviteExpiration = Math.round(message.inviteExpiration);
    }
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_NewsletterAdminInviteMessage>, I>>(
    base?: I,
  ): Message_NewsletterAdminInviteMessage {
    return Message_NewsletterAdminInviteMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_NewsletterAdminInviteMessage>, I>>(
    object: I,
  ): Message_NewsletterAdminInviteMessage {
    const message = createBaseMessage_NewsletterAdminInviteMessage();
    message.newsletterJid = object.newsletterJid ?? undefined;
    message.newsletterName = object.newsletterName ?? undefined;
    message.jpegThumbnail = object.jpegThumbnail ?? undefined;
    message.caption = object.caption ?? undefined;
    message.inviteExpiration = object.inviteExpiration ?? undefined;
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    return message;
  },
};

function createBaseMessage_OrderMessage(): Message_OrderMessage {
  return {
    orderId: undefined,
    thumbnail: undefined,
    itemCount: undefined,
    status: undefined,
    surface: undefined,
    message: undefined,
    orderTitle: undefined,
    sellerJid: undefined,
    token: undefined,
    totalAmount1000: undefined,
    totalCurrencyCode: undefined,
    contextInfo: undefined,
    messageVersion: undefined,
    orderRequestMessageId: undefined,
    catalogType: undefined,
  };
}

export const Message_OrderMessage: MessageFns<Message_OrderMessage> = {
  encode(message: Message_OrderMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderId !== undefined) {
      writer.uint32(10).string(message.orderId);
    }
    if (message.thumbnail !== undefined) {
      writer.uint32(18).bytes(message.thumbnail);
    }
    if (message.itemCount !== undefined) {
      writer.uint32(24).int32(message.itemCount);
    }
    if (message.status !== undefined) {
      writer.uint32(32).int32(message.status);
    }
    if (message.surface !== undefined) {
      writer.uint32(40).int32(message.surface);
    }
    if (message.message !== undefined) {
      writer.uint32(50).string(message.message);
    }
    if (message.orderTitle !== undefined) {
      writer.uint32(58).string(message.orderTitle);
    }
    if (message.sellerJid !== undefined) {
      writer.uint32(66).string(message.sellerJid);
    }
    if (message.token !== undefined) {
      writer.uint32(74).string(message.token);
    }
    if (message.totalAmount1000 !== undefined) {
      writer.uint32(80).int64(message.totalAmount1000);
    }
    if (message.totalCurrencyCode !== undefined) {
      writer.uint32(90).string(message.totalCurrencyCode);
    }
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(138).fork()).join();
    }
    if (message.messageVersion !== undefined) {
      writer.uint32(96).int32(message.messageVersion);
    }
    if (message.orderRequestMessageId !== undefined) {
      MessageKey.encode(message.orderRequestMessageId, writer.uint32(106).fork()).join();
    }
    if (message.catalogType !== undefined) {
      writer.uint32(122).string(message.catalogType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_OrderMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_OrderMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.thumbnail = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.itemCount = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.surface = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.orderTitle = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.sellerJid = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.totalAmount1000 = longToNumber(reader.int64());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.totalCurrencyCode = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.messageVersion = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.orderRequestMessageId = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.catalogType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_OrderMessage {
    return {
      orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : undefined,
      thumbnail: isSet(object.thumbnail) ? bytesFromBase64(object.thumbnail) : undefined,
      itemCount: isSet(object.itemCount) ? globalThis.Number(object.itemCount) : undefined,
      status: isSet(object.status) ? message_OrderMessage_OrderStatusFromJSON(object.status) : undefined,
      surface: isSet(object.surface) ? message_OrderMessage_OrderSurfaceFromJSON(object.surface) : undefined,
      message: isSet(object.message) ? globalThis.String(object.message) : undefined,
      orderTitle: isSet(object.orderTitle) ? globalThis.String(object.orderTitle) : undefined,
      sellerJid: isSet(object.sellerJid) ? globalThis.String(object.sellerJid) : undefined,
      token: isSet(object.token) ? globalThis.String(object.token) : undefined,
      totalAmount1000: isSet(object.totalAmount1000) ? globalThis.Number(object.totalAmount1000) : undefined,
      totalCurrencyCode: isSet(object.totalCurrencyCode) ? globalThis.String(object.totalCurrencyCode) : undefined,
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
      messageVersion: isSet(object.messageVersion) ? globalThis.Number(object.messageVersion) : undefined,
      orderRequestMessageId: isSet(object.orderRequestMessageId)
        ? MessageKey.fromJSON(object.orderRequestMessageId)
        : undefined,
      catalogType: isSet(object.catalogType) ? globalThis.String(object.catalogType) : undefined,
    };
  },

  toJSON(message: Message_OrderMessage): unknown {
    const obj: any = {};
    if (message.orderId !== undefined) {
      obj.orderId = message.orderId;
    }
    if (message.thumbnail !== undefined) {
      obj.thumbnail = base64FromBytes(message.thumbnail);
    }
    if (message.itemCount !== undefined) {
      obj.itemCount = Math.round(message.itemCount);
    }
    if (message.status !== undefined) {
      obj.status = message_OrderMessage_OrderStatusToJSON(message.status);
    }
    if (message.surface !== undefined) {
      obj.surface = message_OrderMessage_OrderSurfaceToJSON(message.surface);
    }
    if (message.message !== undefined) {
      obj.message = message.message;
    }
    if (message.orderTitle !== undefined) {
      obj.orderTitle = message.orderTitle;
    }
    if (message.sellerJid !== undefined) {
      obj.sellerJid = message.sellerJid;
    }
    if (message.token !== undefined) {
      obj.token = message.token;
    }
    if (message.totalAmount1000 !== undefined) {
      obj.totalAmount1000 = Math.round(message.totalAmount1000);
    }
    if (message.totalCurrencyCode !== undefined) {
      obj.totalCurrencyCode = message.totalCurrencyCode;
    }
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    if (message.messageVersion !== undefined) {
      obj.messageVersion = Math.round(message.messageVersion);
    }
    if (message.orderRequestMessageId !== undefined) {
      obj.orderRequestMessageId = MessageKey.toJSON(message.orderRequestMessageId);
    }
    if (message.catalogType !== undefined) {
      obj.catalogType = message.catalogType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_OrderMessage>, I>>(base?: I): Message_OrderMessage {
    return Message_OrderMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_OrderMessage>, I>>(object: I): Message_OrderMessage {
    const message = createBaseMessage_OrderMessage();
    message.orderId = object.orderId ?? undefined;
    message.thumbnail = object.thumbnail ?? undefined;
    message.itemCount = object.itemCount ?? undefined;
    message.status = object.status ?? undefined;
    message.surface = object.surface ?? undefined;
    message.message = object.message ?? undefined;
    message.orderTitle = object.orderTitle ?? undefined;
    message.sellerJid = object.sellerJid ?? undefined;
    message.token = object.token ?? undefined;
    message.totalAmount1000 = object.totalAmount1000 ?? undefined;
    message.totalCurrencyCode = object.totalCurrencyCode ?? undefined;
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    message.messageVersion = object.messageVersion ?? undefined;
    message.orderRequestMessageId =
      (object.orderRequestMessageId !== undefined && object.orderRequestMessageId !== null)
        ? MessageKey.fromPartial(object.orderRequestMessageId)
        : undefined;
    message.catalogType = object.catalogType ?? undefined;
    return message;
  },
};

function createBaseMessage_PaymentInviteMessage(): Message_PaymentInviteMessage {
  return { serviceType: undefined, expiryTimestamp: undefined };
}

export const Message_PaymentInviteMessage: MessageFns<Message_PaymentInviteMessage> = {
  encode(message: Message_PaymentInviteMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serviceType !== undefined) {
      writer.uint32(8).int32(message.serviceType);
    }
    if (message.expiryTimestamp !== undefined) {
      writer.uint32(16).int64(message.expiryTimestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_PaymentInviteMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_PaymentInviteMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.serviceType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.expiryTimestamp = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_PaymentInviteMessage {
    return {
      serviceType: isSet(object.serviceType)
        ? message_PaymentInviteMessage_ServiceTypeFromJSON(object.serviceType)
        : undefined,
      expiryTimestamp: isSet(object.expiryTimestamp) ? globalThis.Number(object.expiryTimestamp) : undefined,
    };
  },

  toJSON(message: Message_PaymentInviteMessage): unknown {
    const obj: any = {};
    if (message.serviceType !== undefined) {
      obj.serviceType = message_PaymentInviteMessage_ServiceTypeToJSON(message.serviceType);
    }
    if (message.expiryTimestamp !== undefined) {
      obj.expiryTimestamp = Math.round(message.expiryTimestamp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_PaymentInviteMessage>, I>>(base?: I): Message_PaymentInviteMessage {
    return Message_PaymentInviteMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_PaymentInviteMessage>, I>>(object: I): Message_PaymentInviteMessage {
    const message = createBaseMessage_PaymentInviteMessage();
    message.serviceType = object.serviceType ?? undefined;
    message.expiryTimestamp = object.expiryTimestamp ?? undefined;
    return message;
  },
};

function createBaseMessage_PaymentLinkMetadata(): Message_PaymentLinkMetadata {
  return { button: undefined, header: undefined };
}

export const Message_PaymentLinkMetadata: MessageFns<Message_PaymentLinkMetadata> = {
  encode(message: Message_PaymentLinkMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.button !== undefined) {
      Message_PaymentLinkMetadata_PaymentLinkButton.encode(message.button, writer.uint32(10).fork()).join();
    }
    if (message.header !== undefined) {
      Message_PaymentLinkMetadata_PaymentLinkHeader.encode(message.header, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_PaymentLinkMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_PaymentLinkMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.button = Message_PaymentLinkMetadata_PaymentLinkButton.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.header = Message_PaymentLinkMetadata_PaymentLinkHeader.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_PaymentLinkMetadata {
    return {
      button: isSet(object.button) ? Message_PaymentLinkMetadata_PaymentLinkButton.fromJSON(object.button) : undefined,
      header: isSet(object.header) ? Message_PaymentLinkMetadata_PaymentLinkHeader.fromJSON(object.header) : undefined,
    };
  },

  toJSON(message: Message_PaymentLinkMetadata): unknown {
    const obj: any = {};
    if (message.button !== undefined) {
      obj.button = Message_PaymentLinkMetadata_PaymentLinkButton.toJSON(message.button);
    }
    if (message.header !== undefined) {
      obj.header = Message_PaymentLinkMetadata_PaymentLinkHeader.toJSON(message.header);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_PaymentLinkMetadata>, I>>(base?: I): Message_PaymentLinkMetadata {
    return Message_PaymentLinkMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_PaymentLinkMetadata>, I>>(object: I): Message_PaymentLinkMetadata {
    const message = createBaseMessage_PaymentLinkMetadata();
    message.button = (object.button !== undefined && object.button !== null)
      ? Message_PaymentLinkMetadata_PaymentLinkButton.fromPartial(object.button)
      : undefined;
    message.header = (object.header !== undefined && object.header !== null)
      ? Message_PaymentLinkMetadata_PaymentLinkHeader.fromPartial(object.header)
      : undefined;
    return message;
  },
};

function createBaseMessage_PaymentLinkMetadata_PaymentLinkButton(): Message_PaymentLinkMetadata_PaymentLinkButton {
  return { displayText: undefined };
}

export const Message_PaymentLinkMetadata_PaymentLinkButton: MessageFns<Message_PaymentLinkMetadata_PaymentLinkButton> =
  {
    encode(
      message: Message_PaymentLinkMetadata_PaymentLinkButton,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.displayText !== undefined) {
        writer.uint32(10).string(message.displayText);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): Message_PaymentLinkMetadata_PaymentLinkButton {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseMessage_PaymentLinkMetadata_PaymentLinkButton();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.displayText = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): Message_PaymentLinkMetadata_PaymentLinkButton {
      return { displayText: isSet(object.displayText) ? globalThis.String(object.displayText) : undefined };
    },

    toJSON(message: Message_PaymentLinkMetadata_PaymentLinkButton): unknown {
      const obj: any = {};
      if (message.displayText !== undefined) {
        obj.displayText = message.displayText;
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<Message_PaymentLinkMetadata_PaymentLinkButton>, I>>(
      base?: I,
    ): Message_PaymentLinkMetadata_PaymentLinkButton {
      return Message_PaymentLinkMetadata_PaymentLinkButton.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<Message_PaymentLinkMetadata_PaymentLinkButton>, I>>(
      object: I,
    ): Message_PaymentLinkMetadata_PaymentLinkButton {
      const message = createBaseMessage_PaymentLinkMetadata_PaymentLinkButton();
      message.displayText = object.displayText ?? undefined;
      return message;
    },
  };

function createBaseMessage_PaymentLinkMetadata_PaymentLinkHeader(): Message_PaymentLinkMetadata_PaymentLinkHeader {
  return { headerType: undefined };
}

export const Message_PaymentLinkMetadata_PaymentLinkHeader: MessageFns<Message_PaymentLinkMetadata_PaymentLinkHeader> =
  {
    encode(
      message: Message_PaymentLinkMetadata_PaymentLinkHeader,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.headerType !== undefined) {
        writer.uint32(8).int32(message.headerType);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): Message_PaymentLinkMetadata_PaymentLinkHeader {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseMessage_PaymentLinkMetadata_PaymentLinkHeader();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 8) {
              break;
            }

            message.headerType = reader.int32() as any;
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): Message_PaymentLinkMetadata_PaymentLinkHeader {
      return {
        headerType: isSet(object.headerType)
          ? message_PaymentLinkMetadata_PaymentLinkHeader_PaymentLinkHeaderTypeFromJSON(object.headerType)
          : undefined,
      };
    },

    toJSON(message: Message_PaymentLinkMetadata_PaymentLinkHeader): unknown {
      const obj: any = {};
      if (message.headerType !== undefined) {
        obj.headerType = message_PaymentLinkMetadata_PaymentLinkHeader_PaymentLinkHeaderTypeToJSON(message.headerType);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<Message_PaymentLinkMetadata_PaymentLinkHeader>, I>>(
      base?: I,
    ): Message_PaymentLinkMetadata_PaymentLinkHeader {
      return Message_PaymentLinkMetadata_PaymentLinkHeader.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<Message_PaymentLinkMetadata_PaymentLinkHeader>, I>>(
      object: I,
    ): Message_PaymentLinkMetadata_PaymentLinkHeader {
      const message = createBaseMessage_PaymentLinkMetadata_PaymentLinkHeader();
      message.headerType = object.headerType ?? undefined;
      return message;
    },
  };

function createBaseMessage_PeerDataOperationRequestMessage(): Message_PeerDataOperationRequestMessage {
  return {
    peerDataOperationRequestType: undefined,
    requestStickerReupload: [],
    requestUrlPreview: [],
    historySyncOnDemandRequest: undefined,
    placeholderMessageResendRequest: [],
    fullHistorySyncOnDemandRequest: undefined,
    syncdCollectionFatalRecoveryRequest: undefined,
  };
}

export const Message_PeerDataOperationRequestMessage: MessageFns<Message_PeerDataOperationRequestMessage> = {
  encode(message: Message_PeerDataOperationRequestMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.peerDataOperationRequestType !== undefined) {
      writer.uint32(8).int32(message.peerDataOperationRequestType);
    }
    for (const v of message.requestStickerReupload) {
      Message_PeerDataOperationRequestMessage_RequestStickerReupload.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.requestUrlPreview) {
      Message_PeerDataOperationRequestMessage_RequestUrlPreview.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.historySyncOnDemandRequest !== undefined) {
      Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest.encode(
        message.historySyncOnDemandRequest,
        writer.uint32(34).fork(),
      ).join();
    }
    for (const v of message.placeholderMessageResendRequest) {
      Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest.encode(v!, writer.uint32(42).fork())
        .join();
    }
    if (message.fullHistorySyncOnDemandRequest !== undefined) {
      Message_PeerDataOperationRequestMessage_FullHistorySyncOnDemandRequest.encode(
        message.fullHistorySyncOnDemandRequest,
        writer.uint32(50).fork(),
      ).join();
    }
    if (message.syncdCollectionFatalRecoveryRequest !== undefined) {
      Message_PeerDataOperationRequestMessage_SyncDCollectionFatalRecoveryRequest.encode(
        message.syncdCollectionFatalRecoveryRequest,
        writer.uint32(58).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_PeerDataOperationRequestMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_PeerDataOperationRequestMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.peerDataOperationRequestType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.requestStickerReupload.push(
            Message_PeerDataOperationRequestMessage_RequestStickerReupload.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.requestUrlPreview.push(
            Message_PeerDataOperationRequestMessage_RequestUrlPreview.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.historySyncOnDemandRequest = Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest
            .decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.placeholderMessageResendRequest.push(
            Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.fullHistorySyncOnDemandRequest =
            Message_PeerDataOperationRequestMessage_FullHistorySyncOnDemandRequest.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.syncdCollectionFatalRecoveryRequest =
            Message_PeerDataOperationRequestMessage_SyncDCollectionFatalRecoveryRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_PeerDataOperationRequestMessage {
    return {
      peerDataOperationRequestType: isSet(object.peerDataOperationRequestType)
        ? message_PeerDataOperationRequestTypeFromJSON(object.peerDataOperationRequestType)
        : undefined,
      requestStickerReupload: globalThis.Array.isArray(object?.requestStickerReupload)
        ? object.requestStickerReupload.map((e: any) =>
          Message_PeerDataOperationRequestMessage_RequestStickerReupload.fromJSON(e)
        )
        : [],
      requestUrlPreview: globalThis.Array.isArray(object?.requestUrlPreview)
        ? object.requestUrlPreview.map((e: any) =>
          Message_PeerDataOperationRequestMessage_RequestUrlPreview.fromJSON(e)
        )
        : [],
      historySyncOnDemandRequest: isSet(object.historySyncOnDemandRequest)
        ? Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest.fromJSON(object.historySyncOnDemandRequest)
        : undefined,
      placeholderMessageResendRequest: globalThis.Array.isArray(object?.placeholderMessageResendRequest)
        ? object.placeholderMessageResendRequest.map((e: any) =>
          Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest.fromJSON(e)
        )
        : [],
      fullHistorySyncOnDemandRequest: isSet(object.fullHistorySyncOnDemandRequest)
        ? Message_PeerDataOperationRequestMessage_FullHistorySyncOnDemandRequest.fromJSON(
          object.fullHistorySyncOnDemandRequest,
        )
        : undefined,
      syncdCollectionFatalRecoveryRequest: isSet(object.syncdCollectionFatalRecoveryRequest)
        ? Message_PeerDataOperationRequestMessage_SyncDCollectionFatalRecoveryRequest.fromJSON(
          object.syncdCollectionFatalRecoveryRequest,
        )
        : undefined,
    };
  },

  toJSON(message: Message_PeerDataOperationRequestMessage): unknown {
    const obj: any = {};
    if (message.peerDataOperationRequestType !== undefined) {
      obj.peerDataOperationRequestType = message_PeerDataOperationRequestTypeToJSON(
        message.peerDataOperationRequestType,
      );
    }
    if (message.requestStickerReupload?.length) {
      obj.requestStickerReupload = message.requestStickerReupload.map((e) =>
        Message_PeerDataOperationRequestMessage_RequestStickerReupload.toJSON(e)
      );
    }
    if (message.requestUrlPreview?.length) {
      obj.requestUrlPreview = message.requestUrlPreview.map((e) =>
        Message_PeerDataOperationRequestMessage_RequestUrlPreview.toJSON(e)
      );
    }
    if (message.historySyncOnDemandRequest !== undefined) {
      obj.historySyncOnDemandRequest = Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest.toJSON(
        message.historySyncOnDemandRequest,
      );
    }
    if (message.placeholderMessageResendRequest?.length) {
      obj.placeholderMessageResendRequest = message.placeholderMessageResendRequest.map((e) =>
        Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest.toJSON(e)
      );
    }
    if (message.fullHistorySyncOnDemandRequest !== undefined) {
      obj.fullHistorySyncOnDemandRequest = Message_PeerDataOperationRequestMessage_FullHistorySyncOnDemandRequest
        .toJSON(message.fullHistorySyncOnDemandRequest);
    }
    if (message.syncdCollectionFatalRecoveryRequest !== undefined) {
      obj.syncdCollectionFatalRecoveryRequest =
        Message_PeerDataOperationRequestMessage_SyncDCollectionFatalRecoveryRequest.toJSON(
          message.syncdCollectionFatalRecoveryRequest,
        );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_PeerDataOperationRequestMessage>, I>>(
    base?: I,
  ): Message_PeerDataOperationRequestMessage {
    return Message_PeerDataOperationRequestMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_PeerDataOperationRequestMessage>, I>>(
    object: I,
  ): Message_PeerDataOperationRequestMessage {
    const message = createBaseMessage_PeerDataOperationRequestMessage();
    message.peerDataOperationRequestType = object.peerDataOperationRequestType ?? undefined;
    message.requestStickerReupload =
      object.requestStickerReupload?.map((e) =>
        Message_PeerDataOperationRequestMessage_RequestStickerReupload.fromPartial(e)
      ) || [];
    message.requestUrlPreview =
      object.requestUrlPreview?.map((e) => Message_PeerDataOperationRequestMessage_RequestUrlPreview.fromPartial(e)) ||
      [];
    message.historySyncOnDemandRequest =
      (object.historySyncOnDemandRequest !== undefined && object.historySyncOnDemandRequest !== null)
        ? Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest.fromPartial(
          object.historySyncOnDemandRequest,
        )
        : undefined;
    message.placeholderMessageResendRequest =
      object.placeholderMessageResendRequest?.map((e) =>
        Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest.fromPartial(e)
      ) || [];
    message.fullHistorySyncOnDemandRequest =
      (object.fullHistorySyncOnDemandRequest !== undefined && object.fullHistorySyncOnDemandRequest !== null)
        ? Message_PeerDataOperationRequestMessage_FullHistorySyncOnDemandRequest.fromPartial(
          object.fullHistorySyncOnDemandRequest,
        )
        : undefined;
    message.syncdCollectionFatalRecoveryRequest =
      (object.syncdCollectionFatalRecoveryRequest !== undefined && object.syncdCollectionFatalRecoveryRequest !== null)
        ? Message_PeerDataOperationRequestMessage_SyncDCollectionFatalRecoveryRequest.fromPartial(
          object.syncdCollectionFatalRecoveryRequest,
        )
        : undefined;
    return message;
  },
};

function createBaseMessage_PeerDataOperationRequestMessage_FullHistorySyncOnDemandRequest(): Message_PeerDataOperationRequestMessage_FullHistorySyncOnDemandRequest {
  return { requestMetadata: undefined, historySyncConfig: undefined };
}

export const Message_PeerDataOperationRequestMessage_FullHistorySyncOnDemandRequest: MessageFns<
  Message_PeerDataOperationRequestMessage_FullHistorySyncOnDemandRequest
> = {
  encode(
    message: Message_PeerDataOperationRequestMessage_FullHistorySyncOnDemandRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.requestMetadata !== undefined) {
      Message_FullHistorySyncOnDemandRequestMetadata.encode(message.requestMetadata, writer.uint32(10).fork()).join();
    }
    if (message.historySyncConfig !== undefined) {
      DeviceProps_HistorySyncConfig.encode(message.historySyncConfig, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): Message_PeerDataOperationRequestMessage_FullHistorySyncOnDemandRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_PeerDataOperationRequestMessage_FullHistorySyncOnDemandRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestMetadata = Message_FullHistorySyncOnDemandRequestMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.historySyncConfig = DeviceProps_HistorySyncConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_PeerDataOperationRequestMessage_FullHistorySyncOnDemandRequest {
    return {
      requestMetadata: isSet(object.requestMetadata)
        ? Message_FullHistorySyncOnDemandRequestMetadata.fromJSON(object.requestMetadata)
        : undefined,
      historySyncConfig: isSet(object.historySyncConfig)
        ? DeviceProps_HistorySyncConfig.fromJSON(object.historySyncConfig)
        : undefined,
    };
  },

  toJSON(message: Message_PeerDataOperationRequestMessage_FullHistorySyncOnDemandRequest): unknown {
    const obj: any = {};
    if (message.requestMetadata !== undefined) {
      obj.requestMetadata = Message_FullHistorySyncOnDemandRequestMetadata.toJSON(message.requestMetadata);
    }
    if (message.historySyncConfig !== undefined) {
      obj.historySyncConfig = DeviceProps_HistorySyncConfig.toJSON(message.historySyncConfig);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_PeerDataOperationRequestMessage_FullHistorySyncOnDemandRequest>, I>>(
    base?: I,
  ): Message_PeerDataOperationRequestMessage_FullHistorySyncOnDemandRequest {
    return Message_PeerDataOperationRequestMessage_FullHistorySyncOnDemandRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_PeerDataOperationRequestMessage_FullHistorySyncOnDemandRequest>, I>>(
    object: I,
  ): Message_PeerDataOperationRequestMessage_FullHistorySyncOnDemandRequest {
    const message = createBaseMessage_PeerDataOperationRequestMessage_FullHistorySyncOnDemandRequest();
    message.requestMetadata = (object.requestMetadata !== undefined && object.requestMetadata !== null)
      ? Message_FullHistorySyncOnDemandRequestMetadata.fromPartial(object.requestMetadata)
      : undefined;
    message.historySyncConfig = (object.historySyncConfig !== undefined && object.historySyncConfig !== null)
      ? DeviceProps_HistorySyncConfig.fromPartial(object.historySyncConfig)
      : undefined;
    return message;
  },
};

function createBaseMessage_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest(): Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest {
  return {
    chatJid: undefined,
    oldestMsgId: undefined,
    oldestMsgFromMe: undefined,
    onDemandMsgCount: undefined,
    oldestMsgTimestampMs: undefined,
    accountLid: undefined,
  };
}

export const Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest: MessageFns<
  Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest
> = {
  encode(
    message: Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.chatJid !== undefined) {
      writer.uint32(10).string(message.chatJid);
    }
    if (message.oldestMsgId !== undefined) {
      writer.uint32(18).string(message.oldestMsgId);
    }
    if (message.oldestMsgFromMe !== undefined) {
      writer.uint32(24).bool(message.oldestMsgFromMe);
    }
    if (message.onDemandMsgCount !== undefined) {
      writer.uint32(32).int32(message.onDemandMsgCount);
    }
    if (message.oldestMsgTimestampMs !== undefined) {
      writer.uint32(40).int64(message.oldestMsgTimestampMs);
    }
    if (message.accountLid !== undefined) {
      writer.uint32(50).string(message.accountLid);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chatJid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.oldestMsgId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.oldestMsgFromMe = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.onDemandMsgCount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.oldestMsgTimestampMs = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.accountLid = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest {
    return {
      chatJid: isSet(object.chatJid) ? globalThis.String(object.chatJid) : undefined,
      oldestMsgId: isSet(object.oldestMsgId) ? globalThis.String(object.oldestMsgId) : undefined,
      oldestMsgFromMe: isSet(object.oldestMsgFromMe) ? globalThis.Boolean(object.oldestMsgFromMe) : undefined,
      onDemandMsgCount: isSet(object.onDemandMsgCount) ? globalThis.Number(object.onDemandMsgCount) : undefined,
      oldestMsgTimestampMs: isSet(object.oldestMsgTimestampMs)
        ? globalThis.Number(object.oldestMsgTimestampMs)
        : undefined,
      accountLid: isSet(object.accountLid) ? globalThis.String(object.accountLid) : undefined,
    };
  },

  toJSON(message: Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest): unknown {
    const obj: any = {};
    if (message.chatJid !== undefined) {
      obj.chatJid = message.chatJid;
    }
    if (message.oldestMsgId !== undefined) {
      obj.oldestMsgId = message.oldestMsgId;
    }
    if (message.oldestMsgFromMe !== undefined) {
      obj.oldestMsgFromMe = message.oldestMsgFromMe;
    }
    if (message.onDemandMsgCount !== undefined) {
      obj.onDemandMsgCount = Math.round(message.onDemandMsgCount);
    }
    if (message.oldestMsgTimestampMs !== undefined) {
      obj.oldestMsgTimestampMs = Math.round(message.oldestMsgTimestampMs);
    }
    if (message.accountLid !== undefined) {
      obj.accountLid = message.accountLid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest>, I>>(
    base?: I,
  ): Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest {
    return Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest>, I>>(
    object: I,
  ): Message_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest {
    const message = createBaseMessage_PeerDataOperationRequestMessage_HistorySyncOnDemandRequest();
    message.chatJid = object.chatJid ?? undefined;
    message.oldestMsgId = object.oldestMsgId ?? undefined;
    message.oldestMsgFromMe = object.oldestMsgFromMe ?? undefined;
    message.onDemandMsgCount = object.onDemandMsgCount ?? undefined;
    message.oldestMsgTimestampMs = object.oldestMsgTimestampMs ?? undefined;
    message.accountLid = object.accountLid ?? undefined;
    return message;
  },
};

function createBaseMessage_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest(): Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest {
  return { messageKey: undefined };
}

export const Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest: MessageFns<
  Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest
> = {
  encode(
    message: Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.messageKey !== undefined) {
      MessageKey.encode(message.messageKey, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.messageKey = MessageKey.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest {
    return { messageKey: isSet(object.messageKey) ? MessageKey.fromJSON(object.messageKey) : undefined };
  },

  toJSON(message: Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest): unknown {
    const obj: any = {};
    if (message.messageKey !== undefined) {
      obj.messageKey = MessageKey.toJSON(message.messageKey);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest>, I>>(
    base?: I,
  ): Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest {
    return Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest>, I>>(
    object: I,
  ): Message_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest {
    const message = createBaseMessage_PeerDataOperationRequestMessage_PlaceholderMessageResendRequest();
    message.messageKey = (object.messageKey !== undefined && object.messageKey !== null)
      ? MessageKey.fromPartial(object.messageKey)
      : undefined;
    return message;
  },
};

function createBaseMessage_PeerDataOperationRequestMessage_RequestStickerReupload(): Message_PeerDataOperationRequestMessage_RequestStickerReupload {
  return { fileSha256: undefined };
}

export const Message_PeerDataOperationRequestMessage_RequestStickerReupload: MessageFns<
  Message_PeerDataOperationRequestMessage_RequestStickerReupload
> = {
  encode(
    message: Message_PeerDataOperationRequestMessage_RequestStickerReupload,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.fileSha256 !== undefined) {
      writer.uint32(10).string(message.fileSha256);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): Message_PeerDataOperationRequestMessage_RequestStickerReupload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_PeerDataOperationRequestMessage_RequestStickerReupload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fileSha256 = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_PeerDataOperationRequestMessage_RequestStickerReupload {
    return { fileSha256: isSet(object.fileSha256) ? globalThis.String(object.fileSha256) : undefined };
  },

  toJSON(message: Message_PeerDataOperationRequestMessage_RequestStickerReupload): unknown {
    const obj: any = {};
    if (message.fileSha256 !== undefined) {
      obj.fileSha256 = message.fileSha256;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_PeerDataOperationRequestMessage_RequestStickerReupload>, I>>(
    base?: I,
  ): Message_PeerDataOperationRequestMessage_RequestStickerReupload {
    return Message_PeerDataOperationRequestMessage_RequestStickerReupload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_PeerDataOperationRequestMessage_RequestStickerReupload>, I>>(
    object: I,
  ): Message_PeerDataOperationRequestMessage_RequestStickerReupload {
    const message = createBaseMessage_PeerDataOperationRequestMessage_RequestStickerReupload();
    message.fileSha256 = object.fileSha256 ?? undefined;
    return message;
  },
};

function createBaseMessage_PeerDataOperationRequestMessage_RequestUrlPreview(): Message_PeerDataOperationRequestMessage_RequestUrlPreview {
  return { url: undefined, includeHqThumbnail: undefined };
}

export const Message_PeerDataOperationRequestMessage_RequestUrlPreview: MessageFns<
  Message_PeerDataOperationRequestMessage_RequestUrlPreview
> = {
  encode(
    message: Message_PeerDataOperationRequestMessage_RequestUrlPreview,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.url !== undefined) {
      writer.uint32(10).string(message.url);
    }
    if (message.includeHqThumbnail !== undefined) {
      writer.uint32(16).bool(message.includeHqThumbnail);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_PeerDataOperationRequestMessage_RequestUrlPreview {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_PeerDataOperationRequestMessage_RequestUrlPreview();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.includeHqThumbnail = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_PeerDataOperationRequestMessage_RequestUrlPreview {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : undefined,
      includeHqThumbnail: isSet(object.includeHqThumbnail) ? globalThis.Boolean(object.includeHqThumbnail) : undefined,
    };
  },

  toJSON(message: Message_PeerDataOperationRequestMessage_RequestUrlPreview): unknown {
    const obj: any = {};
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    if (message.includeHqThumbnail !== undefined) {
      obj.includeHqThumbnail = message.includeHqThumbnail;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_PeerDataOperationRequestMessage_RequestUrlPreview>, I>>(
    base?: I,
  ): Message_PeerDataOperationRequestMessage_RequestUrlPreview {
    return Message_PeerDataOperationRequestMessage_RequestUrlPreview.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_PeerDataOperationRequestMessage_RequestUrlPreview>, I>>(
    object: I,
  ): Message_PeerDataOperationRequestMessage_RequestUrlPreview {
    const message = createBaseMessage_PeerDataOperationRequestMessage_RequestUrlPreview();
    message.url = object.url ?? undefined;
    message.includeHqThumbnail = object.includeHqThumbnail ?? undefined;
    return message;
  },
};

function createBaseMessage_PeerDataOperationRequestMessage_SyncDCollectionFatalRecoveryRequest(): Message_PeerDataOperationRequestMessage_SyncDCollectionFatalRecoveryRequest {
  return { collectionName: undefined, timestamp: undefined };
}

export const Message_PeerDataOperationRequestMessage_SyncDCollectionFatalRecoveryRequest: MessageFns<
  Message_PeerDataOperationRequestMessage_SyncDCollectionFatalRecoveryRequest
> = {
  encode(
    message: Message_PeerDataOperationRequestMessage_SyncDCollectionFatalRecoveryRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.collectionName !== undefined) {
      writer.uint32(10).string(message.collectionName);
    }
    if (message.timestamp !== undefined) {
      writer.uint32(16).int64(message.timestamp);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): Message_PeerDataOperationRequestMessage_SyncDCollectionFatalRecoveryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_PeerDataOperationRequestMessage_SyncDCollectionFatalRecoveryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.collectionName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_PeerDataOperationRequestMessage_SyncDCollectionFatalRecoveryRequest {
    return {
      collectionName: isSet(object.collectionName) ? globalThis.String(object.collectionName) : undefined,
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : undefined,
    };
  },

  toJSON(message: Message_PeerDataOperationRequestMessage_SyncDCollectionFatalRecoveryRequest): unknown {
    const obj: any = {};
    if (message.collectionName !== undefined) {
      obj.collectionName = message.collectionName;
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = Math.round(message.timestamp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_PeerDataOperationRequestMessage_SyncDCollectionFatalRecoveryRequest>, I>>(
    base?: I,
  ): Message_PeerDataOperationRequestMessage_SyncDCollectionFatalRecoveryRequest {
    return Message_PeerDataOperationRequestMessage_SyncDCollectionFatalRecoveryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<Message_PeerDataOperationRequestMessage_SyncDCollectionFatalRecoveryRequest>, I>,
  >(object: I): Message_PeerDataOperationRequestMessage_SyncDCollectionFatalRecoveryRequest {
    const message = createBaseMessage_PeerDataOperationRequestMessage_SyncDCollectionFatalRecoveryRequest();
    message.collectionName = object.collectionName ?? undefined;
    message.timestamp = object.timestamp ?? undefined;
    return message;
  },
};

function createBaseMessage_PeerDataOperationRequestResponseMessage(): Message_PeerDataOperationRequestResponseMessage {
  return { peerDataOperationRequestType: undefined, stanzaId: undefined, peerDataOperationResult: [] };
}

export const Message_PeerDataOperationRequestResponseMessage: MessageFns<
  Message_PeerDataOperationRequestResponseMessage
> = {
  encode(
    message: Message_PeerDataOperationRequestResponseMessage,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.peerDataOperationRequestType !== undefined) {
      writer.uint32(8).int32(message.peerDataOperationRequestType);
    }
    if (message.stanzaId !== undefined) {
      writer.uint32(18).string(message.stanzaId);
    }
    for (const v of message.peerDataOperationResult) {
      Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult.encode(v!, writer.uint32(26).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_PeerDataOperationRequestResponseMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_PeerDataOperationRequestResponseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.peerDataOperationRequestType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.stanzaId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.peerDataOperationResult.push(
            Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_PeerDataOperationRequestResponseMessage {
    return {
      peerDataOperationRequestType: isSet(object.peerDataOperationRequestType)
        ? message_PeerDataOperationRequestTypeFromJSON(object.peerDataOperationRequestType)
        : undefined,
      stanzaId: isSet(object.stanzaId) ? globalThis.String(object.stanzaId) : undefined,
      peerDataOperationResult: globalThis.Array.isArray(object?.peerDataOperationResult)
        ? object.peerDataOperationResult.map((e: any) =>
          Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult.fromJSON(e)
        )
        : [],
    };
  },

  toJSON(message: Message_PeerDataOperationRequestResponseMessage): unknown {
    const obj: any = {};
    if (message.peerDataOperationRequestType !== undefined) {
      obj.peerDataOperationRequestType = message_PeerDataOperationRequestTypeToJSON(
        message.peerDataOperationRequestType,
      );
    }
    if (message.stanzaId !== undefined) {
      obj.stanzaId = message.stanzaId;
    }
    if (message.peerDataOperationResult?.length) {
      obj.peerDataOperationResult = message.peerDataOperationResult.map((e) =>
        Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_PeerDataOperationRequestResponseMessage>, I>>(
    base?: I,
  ): Message_PeerDataOperationRequestResponseMessage {
    return Message_PeerDataOperationRequestResponseMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_PeerDataOperationRequestResponseMessage>, I>>(
    object: I,
  ): Message_PeerDataOperationRequestResponseMessage {
    const message = createBaseMessage_PeerDataOperationRequestResponseMessage();
    message.peerDataOperationRequestType = object.peerDataOperationRequestType ?? undefined;
    message.stanzaId = object.stanzaId ?? undefined;
    message.peerDataOperationResult =
      object.peerDataOperationResult?.map((e) =>
        Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult.fromPartial(e)
      ) || [];
    return message;
  },
};

function createBaseMessage_PeerDataOperationRequestResponseMessage_PeerDataOperationResult(): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult {
  return {
    mediaUploadResult: undefined,
    stickerMessage: undefined,
    linkPreviewResponse: undefined,
    placeholderMessageResendResponse: undefined,
    waffleNonceFetchRequestResponse: undefined,
    fullHistorySyncOnDemandRequestResponse: undefined,
    companionMetaNonceFetchRequestResponse: undefined,
    syncdSnapshotFatalRecoveryResponse: undefined,
  };
}

export const Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult: MessageFns<
  Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult
> = {
  encode(
    message: Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.mediaUploadResult !== undefined) {
      writer.uint32(8).int32(message.mediaUploadResult);
    }
    if (message.stickerMessage !== undefined) {
      Message_StickerMessage.encode(message.stickerMessage, writer.uint32(18).fork()).join();
    }
    if (message.linkPreviewResponse !== undefined) {
      Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse.encode(
        message.linkPreviewResponse,
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.placeholderMessageResendResponse !== undefined) {
      Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse.encode(
        message.placeholderMessageResendResponse,
        writer.uint32(34).fork(),
      ).join();
    }
    if (message.waffleNonceFetchRequestResponse !== undefined) {
      Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_WaffleNonceFetchResponse.encode(
        message.waffleNonceFetchRequestResponse,
        writer.uint32(42).fork(),
      ).join();
    }
    if (message.fullHistorySyncOnDemandRequestResponse !== undefined) {
      Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandRequestResponse
        .encode(message.fullHistorySyncOnDemandRequestResponse, writer.uint32(50).fork()).join();
    }
    if (message.companionMetaNonceFetchRequestResponse !== undefined) {
      Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_CompanionMetaNonceFetchResponse.encode(
        message.companionMetaNonceFetchRequestResponse,
        writer.uint32(58).fork(),
      ).join();
    }
    if (message.syncdSnapshotFatalRecoveryResponse !== undefined) {
      Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_SyncDSnapshotFatalRecoveryResponse.encode(
        message.syncdSnapshotFatalRecoveryResponse,
        writer.uint32(66).fork(),
      ).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_PeerDataOperationRequestResponseMessage_PeerDataOperationResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.mediaUploadResult = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.stickerMessage = Message_StickerMessage.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.linkPreviewResponse =
            Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse.decode(
              reader,
              reader.uint32(),
            );
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.placeholderMessageResendResponse =
            Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse
              .decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.waffleNonceFetchRequestResponse =
            Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_WaffleNonceFetchResponse.decode(
              reader,
              reader.uint32(),
            );
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.fullHistorySyncOnDemandRequestResponse =
            Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandRequestResponse
              .decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.companionMetaNonceFetchRequestResponse =
            Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_CompanionMetaNonceFetchResponse
              .decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.syncdSnapshotFatalRecoveryResponse =
            Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_SyncDSnapshotFatalRecoveryResponse
              .decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult {
    return {
      mediaUploadResult: isSet(object.mediaUploadResult)
        ? mediaRetryNotification_ResultTypeFromJSON(object.mediaUploadResult)
        : undefined,
      stickerMessage: isSet(object.stickerMessage) ? Message_StickerMessage.fromJSON(object.stickerMessage) : undefined,
      linkPreviewResponse: isSet(object.linkPreviewResponse)
        ? Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse.fromJSON(
          object.linkPreviewResponse,
        )
        : undefined,
      placeholderMessageResendResponse: isSet(object.placeholderMessageResendResponse)
        ? Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse
          .fromJSON(object.placeholderMessageResendResponse)
        : undefined,
      waffleNonceFetchRequestResponse: isSet(object.waffleNonceFetchRequestResponse)
        ? Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_WaffleNonceFetchResponse.fromJSON(
          object.waffleNonceFetchRequestResponse,
        )
        : undefined,
      fullHistorySyncOnDemandRequestResponse: isSet(object.fullHistorySyncOnDemandRequestResponse)
        ? Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandRequestResponse
          .fromJSON(object.fullHistorySyncOnDemandRequestResponse)
        : undefined,
      companionMetaNonceFetchRequestResponse: isSet(object.companionMetaNonceFetchRequestResponse)
        ? Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_CompanionMetaNonceFetchResponse
          .fromJSON(object.companionMetaNonceFetchRequestResponse)
        : undefined,
      syncdSnapshotFatalRecoveryResponse: isSet(object.syncdSnapshotFatalRecoveryResponse)
        ? Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_SyncDSnapshotFatalRecoveryResponse
          .fromJSON(object.syncdSnapshotFatalRecoveryResponse)
        : undefined,
    };
  },

  toJSON(message: Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult): unknown {
    const obj: any = {};
    if (message.mediaUploadResult !== undefined) {
      obj.mediaUploadResult = mediaRetryNotification_ResultTypeToJSON(message.mediaUploadResult);
    }
    if (message.stickerMessage !== undefined) {
      obj.stickerMessage = Message_StickerMessage.toJSON(message.stickerMessage);
    }
    if (message.linkPreviewResponse !== undefined) {
      obj.linkPreviewResponse =
        Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse.toJSON(
          message.linkPreviewResponse,
        );
    }
    if (message.placeholderMessageResendResponse !== undefined) {
      obj.placeholderMessageResendResponse =
        Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse.toJSON(
          message.placeholderMessageResendResponse,
        );
    }
    if (message.waffleNonceFetchRequestResponse !== undefined) {
      obj.waffleNonceFetchRequestResponse =
        Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_WaffleNonceFetchResponse.toJSON(
          message.waffleNonceFetchRequestResponse,
        );
    }
    if (message.fullHistorySyncOnDemandRequestResponse !== undefined) {
      obj.fullHistorySyncOnDemandRequestResponse =
        Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandRequestResponse
          .toJSON(message.fullHistorySyncOnDemandRequestResponse);
    }
    if (message.companionMetaNonceFetchRequestResponse !== undefined) {
      obj.companionMetaNonceFetchRequestResponse =
        Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_CompanionMetaNonceFetchResponse.toJSON(
          message.companionMetaNonceFetchRequestResponse,
        );
    }
    if (message.syncdSnapshotFatalRecoveryResponse !== undefined) {
      obj.syncdSnapshotFatalRecoveryResponse =
        Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_SyncDSnapshotFatalRecoveryResponse
          .toJSON(message.syncdSnapshotFatalRecoveryResponse);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult>, I>>(
    base?: I,
  ): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult {
    return Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult>, I>>(
    object: I,
  ): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult {
    const message = createBaseMessage_PeerDataOperationRequestResponseMessage_PeerDataOperationResult();
    message.mediaUploadResult = object.mediaUploadResult ?? undefined;
    message.stickerMessage = (object.stickerMessage !== undefined && object.stickerMessage !== null)
      ? Message_StickerMessage.fromPartial(object.stickerMessage)
      : undefined;
    message.linkPreviewResponse = (object.linkPreviewResponse !== undefined && object.linkPreviewResponse !== null)
      ? Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse.fromPartial(
        object.linkPreviewResponse,
      )
      : undefined;
    message.placeholderMessageResendResponse =
      (object.placeholderMessageResendResponse !== undefined && object.placeholderMessageResendResponse !== null)
        ? Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse
          .fromPartial(object.placeholderMessageResendResponse)
        : undefined;
    message.waffleNonceFetchRequestResponse =
      (object.waffleNonceFetchRequestResponse !== undefined && object.waffleNonceFetchRequestResponse !== null)
        ? Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_WaffleNonceFetchResponse.fromPartial(
          object.waffleNonceFetchRequestResponse,
        )
        : undefined;
    message.fullHistorySyncOnDemandRequestResponse =
      (object.fullHistorySyncOnDemandRequestResponse !== undefined &&
          object.fullHistorySyncOnDemandRequestResponse !== null)
        ? Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandRequestResponse
          .fromPartial(object.fullHistorySyncOnDemandRequestResponse)
        : undefined;
    message.companionMetaNonceFetchRequestResponse =
      (object.companionMetaNonceFetchRequestResponse !== undefined &&
          object.companionMetaNonceFetchRequestResponse !== null)
        ? Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_CompanionMetaNonceFetchResponse
          .fromPartial(object.companionMetaNonceFetchRequestResponse)
        : undefined;
    message.syncdSnapshotFatalRecoveryResponse =
      (object.syncdSnapshotFatalRecoveryResponse !== undefined && object.syncdSnapshotFatalRecoveryResponse !== null)
        ? Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_SyncDSnapshotFatalRecoveryResponse
          .fromPartial(object.syncdSnapshotFatalRecoveryResponse)
        : undefined;
    return message;
  },
};

function createBaseMessage_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_CompanionMetaNonceFetchResponse(): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_CompanionMetaNonceFetchResponse {
  return { nonce: undefined };
}

export const Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_CompanionMetaNonceFetchResponse:
  MessageFns<Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_CompanionMetaNonceFetchResponse> =
    {
      encode(
        message:
          Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_CompanionMetaNonceFetchResponse,
        writer: BinaryWriter = new BinaryWriter(),
      ): BinaryWriter {
        if (message.nonce !== undefined) {
          writer.uint32(10).string(message.nonce);
        }
        return writer;
      },

      decode(
        input: BinaryReader | Uint8Array,
        length?: number,
      ): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_CompanionMetaNonceFetchResponse {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message =
          createBaseMessage_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_CompanionMetaNonceFetchResponse();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }

              message.nonce = reader.string();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      },

      fromJSON(
        object: any,
      ): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_CompanionMetaNonceFetchResponse {
        return { nonce: isSet(object.nonce) ? globalThis.String(object.nonce) : undefined };
      },

      toJSON(
        message:
          Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_CompanionMetaNonceFetchResponse,
      ): unknown {
        const obj: any = {};
        if (message.nonce !== undefined) {
          obj.nonce = message.nonce;
        }
        return obj;
      },

      create<
        I extends Exact<
          DeepPartial<
            Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_CompanionMetaNonceFetchResponse
          >,
          I
        >,
      >(
        base?: I,
      ): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_CompanionMetaNonceFetchResponse {
        return Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_CompanionMetaNonceFetchResponse
          .fromPartial(base ?? ({} as any));
      },
      fromPartial<
        I extends Exact<
          DeepPartial<
            Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_CompanionMetaNonceFetchResponse
          >,
          I
        >,
      >(
        object: I,
      ): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_CompanionMetaNonceFetchResponse {
        const message =
          createBaseMessage_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_CompanionMetaNonceFetchResponse();
        message.nonce = object.nonce ?? undefined;
        return message;
      },
    };

function createBaseMessage_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandRequestResponse(): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandRequestResponse {
  return { requestMetadata: undefined, responseCode: undefined };
}

export const Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandRequestResponse:
  MessageFns<
    Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandRequestResponse
  > = {
    encode(
      message:
        Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandRequestResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.requestMetadata !== undefined) {
        Message_FullHistorySyncOnDemandRequestMetadata.encode(message.requestMetadata, writer.uint32(10).fork()).join();
      }
      if (message.responseCode !== undefined) {
        writer.uint32(16).int32(message.responseCode);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandRequestResponse {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message =
        createBaseMessage_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandRequestResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.requestMetadata = Message_FullHistorySyncOnDemandRequestMetadata.decode(reader, reader.uint32());
            continue;
          }
          case 2: {
            if (tag !== 16) {
              break;
            }

            message.responseCode = reader.int32() as any;
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(
      object: any,
    ): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandRequestResponse {
      return {
        requestMetadata: isSet(object.requestMetadata)
          ? Message_FullHistorySyncOnDemandRequestMetadata.fromJSON(object.requestMetadata)
          : undefined,
        responseCode: isSet(object.responseCode)
          ? message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandResponseCodeFromJSON(
            object.responseCode,
          )
          : undefined,
      };
    },

    toJSON(
      message:
        Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandRequestResponse,
    ): unknown {
      const obj: any = {};
      if (message.requestMetadata !== undefined) {
        obj.requestMetadata = Message_FullHistorySyncOnDemandRequestMetadata.toJSON(message.requestMetadata);
      }
      if (message.responseCode !== undefined) {
        obj.responseCode =
          message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandResponseCodeToJSON(
            message.responseCode,
          );
      }
      return obj;
    },

    create<
      I extends Exact<
        DeepPartial<
          Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandRequestResponse
        >,
        I
      >,
    >(
      base?: I,
    ): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandRequestResponse {
      return Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandRequestResponse
        .fromPartial(base ?? ({} as any));
    },
    fromPartial<
      I extends Exact<
        DeepPartial<
          Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandRequestResponse
        >,
        I
      >,
    >(
      object: I,
    ): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandRequestResponse {
      const message =
        createBaseMessage_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_FullHistorySyncOnDemandRequestResponse();
      message.requestMetadata = (object.requestMetadata !== undefined && object.requestMetadata !== null)
        ? Message_FullHistorySyncOnDemandRequestMetadata.fromPartial(object.requestMetadata)
        : undefined;
      message.responseCode = object.responseCode ?? undefined;
      return message;
    },
  };

function createBaseMessage_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse(): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse {
  return {
    url: undefined,
    title: undefined,
    description: undefined,
    thumbData: undefined,
    matchText: undefined,
    previewType: undefined,
    hqThumbnail: undefined,
  };
}

export const Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse: MessageFns<
  Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse
> = {
  encode(
    message: Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.url !== undefined) {
      writer.uint32(10).string(message.url);
    }
    if (message.title !== undefined) {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description);
    }
    if (message.thumbData !== undefined) {
      writer.uint32(34).bytes(message.thumbData);
    }
    if (message.matchText !== undefined) {
      writer.uint32(50).string(message.matchText);
    }
    if (message.previewType !== undefined) {
      writer.uint32(58).string(message.previewType);
    }
    if (message.hqThumbnail !== undefined) {
      Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail
        .encode(message.hqThumbnail, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message =
      createBaseMessage_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.thumbData = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.matchText = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.previewType = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.hqThumbnail =
            Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail
              .decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : undefined,
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      thumbData: isSet(object.thumbData) ? bytesFromBase64(object.thumbData) : undefined,
      matchText: isSet(object.matchText) ? globalThis.String(object.matchText) : undefined,
      previewType: isSet(object.previewType) ? globalThis.String(object.previewType) : undefined,
      hqThumbnail: isSet(object.hqThumbnail)
        ? Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail
          .fromJSON(object.hqThumbnail)
        : undefined,
    };
  },

  toJSON(
    message: Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse,
  ): unknown {
    const obj: any = {};
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.thumbData !== undefined) {
      obj.thumbData = base64FromBytes(message.thumbData);
    }
    if (message.matchText !== undefined) {
      obj.matchText = message.matchText;
    }
    if (message.previewType !== undefined) {
      obj.previewType = message.previewType;
    }
    if (message.hqThumbnail !== undefined) {
      obj.hqThumbnail =
        Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail
          .toJSON(message.hqThumbnail);
    }
    return obj;
  },

  create<
    I extends Exact<
      DeepPartial<Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse>,
      I
    >,
  >(base?: I): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse {
    return Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse.fromPartial(
      base ?? ({} as any),
    );
  },
  fromPartial<
    I extends Exact<
      DeepPartial<Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse>,
      I
    >,
  >(object: I): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse {
    const message =
      createBaseMessage_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse();
    message.url = object.url ?? undefined;
    message.title = object.title ?? undefined;
    message.description = object.description ?? undefined;
    message.thumbData = object.thumbData ?? undefined;
    message.matchText = object.matchText ?? undefined;
    message.previewType = object.previewType ?? undefined;
    message.hqThumbnail = (object.hqThumbnail !== undefined && object.hqThumbnail !== null)
      ? Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail
        .fromPartial(object.hqThumbnail)
      : undefined;
    return message;
  },
};

function createBaseMessage_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail(): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail {
  return {
    directPath: undefined,
    thumbHash: undefined,
    encThumbHash: undefined,
    mediaKey: undefined,
    mediaKeyTimestampMs: undefined,
    thumbWidth: undefined,
    thumbHeight: undefined,
  };
}

export const Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail:
  MessageFns<
    Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail
  > = {
    encode(
      message:
        Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.directPath !== undefined) {
        writer.uint32(10).string(message.directPath);
      }
      if (message.thumbHash !== undefined) {
        writer.uint32(18).string(message.thumbHash);
      }
      if (message.encThumbHash !== undefined) {
        writer.uint32(26).string(message.encThumbHash);
      }
      if (message.mediaKey !== undefined) {
        writer.uint32(34).bytes(message.mediaKey);
      }
      if (message.mediaKeyTimestampMs !== undefined) {
        writer.uint32(40).int64(message.mediaKeyTimestampMs);
      }
      if (message.thumbWidth !== undefined) {
        writer.uint32(48).int32(message.thumbWidth);
      }
      if (message.thumbHeight !== undefined) {
        writer.uint32(56).int32(message.thumbHeight);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message =
        createBaseMessage_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.directPath = reader.string();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.thumbHash = reader.string();
            continue;
          }
          case 3: {
            if (tag !== 26) {
              break;
            }

            message.encThumbHash = reader.string();
            continue;
          }
          case 4: {
            if (tag !== 34) {
              break;
            }

            message.mediaKey = reader.bytes();
            continue;
          }
          case 5: {
            if (tag !== 40) {
              break;
            }

            message.mediaKeyTimestampMs = longToNumber(reader.int64());
            continue;
          }
          case 6: {
            if (tag !== 48) {
              break;
            }

            message.thumbWidth = reader.int32();
            continue;
          }
          case 7: {
            if (tag !== 56) {
              break;
            }

            message.thumbHeight = reader.int32();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(
      object: any,
    ): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail {
      return {
        directPath: isSet(object.directPath) ? globalThis.String(object.directPath) : undefined,
        thumbHash: isSet(object.thumbHash) ? globalThis.String(object.thumbHash) : undefined,
        encThumbHash: isSet(object.encThumbHash) ? globalThis.String(object.encThumbHash) : undefined,
        mediaKey: isSet(object.mediaKey) ? bytesFromBase64(object.mediaKey) : undefined,
        mediaKeyTimestampMs: isSet(object.mediaKeyTimestampMs)
          ? globalThis.Number(object.mediaKeyTimestampMs)
          : undefined,
        thumbWidth: isSet(object.thumbWidth) ? globalThis.Number(object.thumbWidth) : undefined,
        thumbHeight: isSet(object.thumbHeight) ? globalThis.Number(object.thumbHeight) : undefined,
      };
    },

    toJSON(
      message:
        Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail,
    ): unknown {
      const obj: any = {};
      if (message.directPath !== undefined) {
        obj.directPath = message.directPath;
      }
      if (message.thumbHash !== undefined) {
        obj.thumbHash = message.thumbHash;
      }
      if (message.encThumbHash !== undefined) {
        obj.encThumbHash = message.encThumbHash;
      }
      if (message.mediaKey !== undefined) {
        obj.mediaKey = base64FromBytes(message.mediaKey);
      }
      if (message.mediaKeyTimestampMs !== undefined) {
        obj.mediaKeyTimestampMs = Math.round(message.mediaKeyTimestampMs);
      }
      if (message.thumbWidth !== undefined) {
        obj.thumbWidth = Math.round(message.thumbWidth);
      }
      if (message.thumbHeight !== undefined) {
        obj.thumbHeight = Math.round(message.thumbHeight);
      }
      return obj;
    },

    create<
      I extends Exact<
        DeepPartial<
          Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail
        >,
        I
      >,
    >(
      base?: I,
    ): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail {
      return Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail
        .fromPartial(base ?? ({} as any));
    },
    fromPartial<
      I extends Exact<
        DeepPartial<
          Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail
        >,
        I
      >,
    >(
      object: I,
    ): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail {
      const message =
        createBaseMessage_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_LinkPreviewResponse_LinkPreviewHighQualityThumbnail();
      message.directPath = object.directPath ?? undefined;
      message.thumbHash = object.thumbHash ?? undefined;
      message.encThumbHash = object.encThumbHash ?? undefined;
      message.mediaKey = object.mediaKey ?? undefined;
      message.mediaKeyTimestampMs = object.mediaKeyTimestampMs ?? undefined;
      message.thumbWidth = object.thumbWidth ?? undefined;
      message.thumbHeight = object.thumbHeight ?? undefined;
      return message;
    },
  };

function createBaseMessage_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse(): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse {
  return { webMessageInfoBytes: undefined };
}

export const Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse:
  MessageFns<Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse> =
    {
      encode(
        message:
          Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse,
        writer: BinaryWriter = new BinaryWriter(),
      ): BinaryWriter {
        if (message.webMessageInfoBytes !== undefined) {
          writer.uint32(10).bytes(message.webMessageInfoBytes);
        }
        return writer;
      },

      decode(
        input: BinaryReader | Uint8Array,
        length?: number,
      ): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message =
          createBaseMessage_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse();
        while (reader.pos < end) {
          const tag = reader.uint32();
          switch (tag >>> 3) {
            case 1: {
              if (tag !== 10) {
                break;
              }

              message.webMessageInfoBytes = reader.bytes();
              continue;
            }
          }
          if ((tag & 7) === 4 || tag === 0) {
            break;
          }
          reader.skip(tag & 7);
        }
        return message;
      },

      fromJSON(
        object: any,
      ): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse {
        return {
          webMessageInfoBytes: isSet(object.webMessageInfoBytes)
            ? bytesFromBase64(object.webMessageInfoBytes)
            : undefined,
        };
      },

      toJSON(
        message:
          Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse,
      ): unknown {
        const obj: any = {};
        if (message.webMessageInfoBytes !== undefined) {
          obj.webMessageInfoBytes = base64FromBytes(message.webMessageInfoBytes);
        }
        return obj;
      },

      create<
        I extends Exact<
          DeepPartial<
            Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse
          >,
          I
        >,
      >(
        base?: I,
      ): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse {
        return Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse
          .fromPartial(base ?? ({} as any));
      },
      fromPartial<
        I extends Exact<
          DeepPartial<
            Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse
          >,
          I
        >,
      >(
        object: I,
      ): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse {
        const message =
          createBaseMessage_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_PlaceholderMessageResendResponse();
        message.webMessageInfoBytes = object.webMessageInfoBytes ?? undefined;
        return message;
      },
    };

function createBaseMessage_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_SyncDSnapshotFatalRecoveryResponse(): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_SyncDSnapshotFatalRecoveryResponse {
  return { collectionSnapshot: undefined, isCompressed: undefined };
}

export const Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_SyncDSnapshotFatalRecoveryResponse:
  MessageFns<
    Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_SyncDSnapshotFatalRecoveryResponse
  > = {
    encode(
      message:
        Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_SyncDSnapshotFatalRecoveryResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.collectionSnapshot !== undefined) {
        writer.uint32(10).bytes(message.collectionSnapshot);
      }
      if (message.isCompressed !== undefined) {
        writer.uint32(16).bool(message.isCompressed);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_SyncDSnapshotFatalRecoveryResponse {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message =
        createBaseMessage_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_SyncDSnapshotFatalRecoveryResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.collectionSnapshot = reader.bytes();
            continue;
          }
          case 2: {
            if (tag !== 16) {
              break;
            }

            message.isCompressed = reader.bool();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(
      object: any,
    ): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_SyncDSnapshotFatalRecoveryResponse {
      return {
        collectionSnapshot: isSet(object.collectionSnapshot) ? bytesFromBase64(object.collectionSnapshot) : undefined,
        isCompressed: isSet(object.isCompressed) ? globalThis.Boolean(object.isCompressed) : undefined,
      };
    },

    toJSON(
      message:
        Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_SyncDSnapshotFatalRecoveryResponse,
    ): unknown {
      const obj: any = {};
      if (message.collectionSnapshot !== undefined) {
        obj.collectionSnapshot = base64FromBytes(message.collectionSnapshot);
      }
      if (message.isCompressed !== undefined) {
        obj.isCompressed = message.isCompressed;
      }
      return obj;
    },

    create<
      I extends Exact<
        DeepPartial<
          Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_SyncDSnapshotFatalRecoveryResponse
        >,
        I
      >,
    >(
      base?: I,
    ): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_SyncDSnapshotFatalRecoveryResponse {
      return Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_SyncDSnapshotFatalRecoveryResponse
        .fromPartial(base ?? ({} as any));
    },
    fromPartial<
      I extends Exact<
        DeepPartial<
          Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_SyncDSnapshotFatalRecoveryResponse
        >,
        I
      >,
    >(
      object: I,
    ): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_SyncDSnapshotFatalRecoveryResponse {
      const message =
        createBaseMessage_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_SyncDSnapshotFatalRecoveryResponse();
      message.collectionSnapshot = object.collectionSnapshot ?? undefined;
      message.isCompressed = object.isCompressed ?? undefined;
      return message;
    },
  };

function createBaseMessage_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_WaffleNonceFetchResponse(): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_WaffleNonceFetchResponse {
  return { nonce: undefined, waEntFbid: undefined };
}

export const Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_WaffleNonceFetchResponse:
  MessageFns<Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_WaffleNonceFetchResponse> = {
    encode(
      message: Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_WaffleNonceFetchResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.nonce !== undefined) {
        writer.uint32(10).string(message.nonce);
      }
      if (message.waEntFbid !== undefined) {
        writer.uint32(18).string(message.waEntFbid);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_WaffleNonceFetchResponse {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message =
        createBaseMessage_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_WaffleNonceFetchResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.nonce = reader.string();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.waEntFbid = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(
      object: any,
    ): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_WaffleNonceFetchResponse {
      return {
        nonce: isSet(object.nonce) ? globalThis.String(object.nonce) : undefined,
        waEntFbid: isSet(object.waEntFbid) ? globalThis.String(object.waEntFbid) : undefined,
      };
    },

    toJSON(
      message: Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_WaffleNonceFetchResponse,
    ): unknown {
      const obj: any = {};
      if (message.nonce !== undefined) {
        obj.nonce = message.nonce;
      }
      if (message.waEntFbid !== undefined) {
        obj.waEntFbid = message.waEntFbid;
      }
      return obj;
    },

    create<
      I extends Exact<
        DeepPartial<Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_WaffleNonceFetchResponse>,
        I
      >,
    >(base?: I): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_WaffleNonceFetchResponse {
      return Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_WaffleNonceFetchResponse
        .fromPartial(base ?? ({} as any));
    },
    fromPartial<
      I extends Exact<
        DeepPartial<Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_WaffleNonceFetchResponse>,
        I
      >,
    >(object: I): Message_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_WaffleNonceFetchResponse {
      const message =
        createBaseMessage_PeerDataOperationRequestResponseMessage_PeerDataOperationResult_WaffleNonceFetchResponse();
      message.nonce = object.nonce ?? undefined;
      message.waEntFbid = object.waEntFbid ?? undefined;
      return message;
    },
  };

function createBaseMessage_PinInChatMessage(): Message_PinInChatMessage {
  return { key: undefined, type: undefined, senderTimestampMs: undefined };
}

export const Message_PinInChatMessage: MessageFns<Message_PinInChatMessage> = {
  encode(message: Message_PinInChatMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined) {
      MessageKey.encode(message.key, writer.uint32(10).fork()).join();
    }
    if (message.type !== undefined) {
      writer.uint32(16).int32(message.type);
    }
    if (message.senderTimestampMs !== undefined) {
      writer.uint32(24).int64(message.senderTimestampMs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_PinInChatMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_PinInChatMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.senderTimestampMs = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_PinInChatMessage {
    return {
      key: isSet(object.key) ? MessageKey.fromJSON(object.key) : undefined,
      type: isSet(object.type) ? message_PinInChatMessage_TypeFromJSON(object.type) : undefined,
      senderTimestampMs: isSet(object.senderTimestampMs) ? globalThis.Number(object.senderTimestampMs) : undefined,
    };
  },

  toJSON(message: Message_PinInChatMessage): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = MessageKey.toJSON(message.key);
    }
    if (message.type !== undefined) {
      obj.type = message_PinInChatMessage_TypeToJSON(message.type);
    }
    if (message.senderTimestampMs !== undefined) {
      obj.senderTimestampMs = Math.round(message.senderTimestampMs);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_PinInChatMessage>, I>>(base?: I): Message_PinInChatMessage {
    return Message_PinInChatMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_PinInChatMessage>, I>>(object: I): Message_PinInChatMessage {
    const message = createBaseMessage_PinInChatMessage();
    message.key = (object.key !== undefined && object.key !== null) ? MessageKey.fromPartial(object.key) : undefined;
    message.type = object.type ?? undefined;
    message.senderTimestampMs = object.senderTimestampMs ?? undefined;
    return message;
  },
};

function createBaseMessage_PlaceholderMessage(): Message_PlaceholderMessage {
  return { type: undefined };
}

export const Message_PlaceholderMessage: MessageFns<Message_PlaceholderMessage> = {
  encode(message: Message_PlaceholderMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== undefined) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_PlaceholderMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_PlaceholderMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_PlaceholderMessage {
    return { type: isSet(object.type) ? message_PlaceholderMessage_PlaceholderTypeFromJSON(object.type) : undefined };
  },

  toJSON(message: Message_PlaceholderMessage): unknown {
    const obj: any = {};
    if (message.type !== undefined) {
      obj.type = message_PlaceholderMessage_PlaceholderTypeToJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_PlaceholderMessage>, I>>(base?: I): Message_PlaceholderMessage {
    return Message_PlaceholderMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_PlaceholderMessage>, I>>(object: I): Message_PlaceholderMessage {
    const message = createBaseMessage_PlaceholderMessage();
    message.type = object.type ?? undefined;
    return message;
  },
};

function createBaseMessage_PollCreationMessage(): Message_PollCreationMessage {
  return {
    encKey: undefined,
    name: undefined,
    options: [],
    selectableOptionsCount: undefined,
    contextInfo: undefined,
    pollContentType: undefined,
    pollType: undefined,
    correctAnswer: undefined,
  };
}

export const Message_PollCreationMessage: MessageFns<Message_PollCreationMessage> = {
  encode(message: Message_PollCreationMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.encKey !== undefined) {
      writer.uint32(10).bytes(message.encKey);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    for (const v of message.options) {
      Message_PollCreationMessage_Option.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.selectableOptionsCount !== undefined) {
      writer.uint32(32).uint32(message.selectableOptionsCount);
    }
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(42).fork()).join();
    }
    if (message.pollContentType !== undefined) {
      writer.uint32(48).int32(message.pollContentType);
    }
    if (message.pollType !== undefined) {
      writer.uint32(56).int32(message.pollType);
    }
    if (message.correctAnswer !== undefined) {
      Message_PollCreationMessage_Option.encode(message.correctAnswer, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_PollCreationMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_PollCreationMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.encKey = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.options.push(Message_PollCreationMessage_Option.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.selectableOptionsCount = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.pollContentType = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.pollType = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.correctAnswer = Message_PollCreationMessage_Option.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_PollCreationMessage {
    return {
      encKey: isSet(object.encKey) ? bytesFromBase64(object.encKey) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      options: globalThis.Array.isArray(object?.options)
        ? object.options.map((e: any) => Message_PollCreationMessage_Option.fromJSON(e))
        : [],
      selectableOptionsCount: isSet(object.selectableOptionsCount)
        ? globalThis.Number(object.selectableOptionsCount)
        : undefined,
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
      pollContentType: isSet(object.pollContentType)
        ? message_PollContentTypeFromJSON(object.pollContentType)
        : undefined,
      pollType: isSet(object.pollType) ? message_PollCreationMessage_PollTypeFromJSON(object.pollType) : undefined,
      correctAnswer: isSet(object.correctAnswer)
        ? Message_PollCreationMessage_Option.fromJSON(object.correctAnswer)
        : undefined,
    };
  },

  toJSON(message: Message_PollCreationMessage): unknown {
    const obj: any = {};
    if (message.encKey !== undefined) {
      obj.encKey = base64FromBytes(message.encKey);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.options?.length) {
      obj.options = message.options.map((e) => Message_PollCreationMessage_Option.toJSON(e));
    }
    if (message.selectableOptionsCount !== undefined) {
      obj.selectableOptionsCount = Math.round(message.selectableOptionsCount);
    }
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    if (message.pollContentType !== undefined) {
      obj.pollContentType = message_PollContentTypeToJSON(message.pollContentType);
    }
    if (message.pollType !== undefined) {
      obj.pollType = message_PollCreationMessage_PollTypeToJSON(message.pollType);
    }
    if (message.correctAnswer !== undefined) {
      obj.correctAnswer = Message_PollCreationMessage_Option.toJSON(message.correctAnswer);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_PollCreationMessage>, I>>(base?: I): Message_PollCreationMessage {
    return Message_PollCreationMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_PollCreationMessage>, I>>(object: I): Message_PollCreationMessage {
    const message = createBaseMessage_PollCreationMessage();
    message.encKey = object.encKey ?? undefined;
    message.name = object.name ?? undefined;
    message.options = object.options?.map((e) => Message_PollCreationMessage_Option.fromPartial(e)) || [];
    message.selectableOptionsCount = object.selectableOptionsCount ?? undefined;
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    message.pollContentType = object.pollContentType ?? undefined;
    message.pollType = object.pollType ?? undefined;
    message.correctAnswer = (object.correctAnswer !== undefined && object.correctAnswer !== null)
      ? Message_PollCreationMessage_Option.fromPartial(object.correctAnswer)
      : undefined;
    return message;
  },
};

function createBaseMessage_PollCreationMessage_Option(): Message_PollCreationMessage_Option {
  return { optionName: undefined, optionHash: undefined };
}

export const Message_PollCreationMessage_Option: MessageFns<Message_PollCreationMessage_Option> = {
  encode(message: Message_PollCreationMessage_Option, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.optionName !== undefined) {
      writer.uint32(10).string(message.optionName);
    }
    if (message.optionHash !== undefined) {
      writer.uint32(18).string(message.optionHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_PollCreationMessage_Option {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_PollCreationMessage_Option();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.optionName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.optionHash = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_PollCreationMessage_Option {
    return {
      optionName: isSet(object.optionName) ? globalThis.String(object.optionName) : undefined,
      optionHash: isSet(object.optionHash) ? globalThis.String(object.optionHash) : undefined,
    };
  },

  toJSON(message: Message_PollCreationMessage_Option): unknown {
    const obj: any = {};
    if (message.optionName !== undefined) {
      obj.optionName = message.optionName;
    }
    if (message.optionHash !== undefined) {
      obj.optionHash = message.optionHash;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_PollCreationMessage_Option>, I>>(
    base?: I,
  ): Message_PollCreationMessage_Option {
    return Message_PollCreationMessage_Option.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_PollCreationMessage_Option>, I>>(
    object: I,
  ): Message_PollCreationMessage_Option {
    const message = createBaseMessage_PollCreationMessage_Option();
    message.optionName = object.optionName ?? undefined;
    message.optionHash = object.optionHash ?? undefined;
    return message;
  },
};

function createBaseMessage_PollEncValue(): Message_PollEncValue {
  return { encPayload: undefined, encIv: undefined };
}

export const Message_PollEncValue: MessageFns<Message_PollEncValue> = {
  encode(message: Message_PollEncValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.encPayload !== undefined) {
      writer.uint32(10).bytes(message.encPayload);
    }
    if (message.encIv !== undefined) {
      writer.uint32(18).bytes(message.encIv);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_PollEncValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_PollEncValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.encPayload = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.encIv = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_PollEncValue {
    return {
      encPayload: isSet(object.encPayload) ? bytesFromBase64(object.encPayload) : undefined,
      encIv: isSet(object.encIv) ? bytesFromBase64(object.encIv) : undefined,
    };
  },

  toJSON(message: Message_PollEncValue): unknown {
    const obj: any = {};
    if (message.encPayload !== undefined) {
      obj.encPayload = base64FromBytes(message.encPayload);
    }
    if (message.encIv !== undefined) {
      obj.encIv = base64FromBytes(message.encIv);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_PollEncValue>, I>>(base?: I): Message_PollEncValue {
    return Message_PollEncValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_PollEncValue>, I>>(object: I): Message_PollEncValue {
    const message = createBaseMessage_PollEncValue();
    message.encPayload = object.encPayload ?? undefined;
    message.encIv = object.encIv ?? undefined;
    return message;
  },
};

function createBaseMessage_PollResultSnapshotMessage(): Message_PollResultSnapshotMessage {
  return { name: undefined, pollVotes: [], contextInfo: undefined };
}

export const Message_PollResultSnapshotMessage: MessageFns<Message_PollResultSnapshotMessage> = {
  encode(message: Message_PollResultSnapshotMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.pollVotes) {
      Message_PollResultSnapshotMessage_PollVote.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_PollResultSnapshotMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_PollResultSnapshotMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pollVotes.push(Message_PollResultSnapshotMessage_PollVote.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_PollResultSnapshotMessage {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      pollVotes: globalThis.Array.isArray(object?.pollVotes)
        ? object.pollVotes.map((e: any) => Message_PollResultSnapshotMessage_PollVote.fromJSON(e))
        : [],
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
    };
  },

  toJSON(message: Message_PollResultSnapshotMessage): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.pollVotes?.length) {
      obj.pollVotes = message.pollVotes.map((e) => Message_PollResultSnapshotMessage_PollVote.toJSON(e));
    }
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_PollResultSnapshotMessage>, I>>(
    base?: I,
  ): Message_PollResultSnapshotMessage {
    return Message_PollResultSnapshotMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_PollResultSnapshotMessage>, I>>(
    object: I,
  ): Message_PollResultSnapshotMessage {
    const message = createBaseMessage_PollResultSnapshotMessage();
    message.name = object.name ?? undefined;
    message.pollVotes = object.pollVotes?.map((e) => Message_PollResultSnapshotMessage_PollVote.fromPartial(e)) || [];
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    return message;
  },
};

function createBaseMessage_PollResultSnapshotMessage_PollVote(): Message_PollResultSnapshotMessage_PollVote {
  return { optionName: undefined, optionVoteCount: undefined };
}

export const Message_PollResultSnapshotMessage_PollVote: MessageFns<Message_PollResultSnapshotMessage_PollVote> = {
  encode(message: Message_PollResultSnapshotMessage_PollVote, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.optionName !== undefined) {
      writer.uint32(10).string(message.optionName);
    }
    if (message.optionVoteCount !== undefined) {
      writer.uint32(16).int64(message.optionVoteCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_PollResultSnapshotMessage_PollVote {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_PollResultSnapshotMessage_PollVote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.optionName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.optionVoteCount = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_PollResultSnapshotMessage_PollVote {
    return {
      optionName: isSet(object.optionName) ? globalThis.String(object.optionName) : undefined,
      optionVoteCount: isSet(object.optionVoteCount) ? globalThis.Number(object.optionVoteCount) : undefined,
    };
  },

  toJSON(message: Message_PollResultSnapshotMessage_PollVote): unknown {
    const obj: any = {};
    if (message.optionName !== undefined) {
      obj.optionName = message.optionName;
    }
    if (message.optionVoteCount !== undefined) {
      obj.optionVoteCount = Math.round(message.optionVoteCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_PollResultSnapshotMessage_PollVote>, I>>(
    base?: I,
  ): Message_PollResultSnapshotMessage_PollVote {
    return Message_PollResultSnapshotMessage_PollVote.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_PollResultSnapshotMessage_PollVote>, I>>(
    object: I,
  ): Message_PollResultSnapshotMessage_PollVote {
    const message = createBaseMessage_PollResultSnapshotMessage_PollVote();
    message.optionName = object.optionName ?? undefined;
    message.optionVoteCount = object.optionVoteCount ?? undefined;
    return message;
  },
};

function createBaseMessage_PollUpdateMessage(): Message_PollUpdateMessage {
  return { pollCreationMessageKey: undefined, vote: undefined, metadata: undefined, senderTimestampMs: undefined };
}

export const Message_PollUpdateMessage: MessageFns<Message_PollUpdateMessage> = {
  encode(message: Message_PollUpdateMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pollCreationMessageKey !== undefined) {
      MessageKey.encode(message.pollCreationMessageKey, writer.uint32(10).fork()).join();
    }
    if (message.vote !== undefined) {
      Message_PollEncValue.encode(message.vote, writer.uint32(18).fork()).join();
    }
    if (message.metadata !== undefined) {
      Message_PollUpdateMessageMetadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    if (message.senderTimestampMs !== undefined) {
      writer.uint32(32).int64(message.senderTimestampMs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_PollUpdateMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_PollUpdateMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pollCreationMessageKey = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.vote = Message_PollEncValue.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = Message_PollUpdateMessageMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.senderTimestampMs = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_PollUpdateMessage {
    return {
      pollCreationMessageKey: isSet(object.pollCreationMessageKey)
        ? MessageKey.fromJSON(object.pollCreationMessageKey)
        : undefined,
      vote: isSet(object.vote) ? Message_PollEncValue.fromJSON(object.vote) : undefined,
      metadata: isSet(object.metadata) ? Message_PollUpdateMessageMetadata.fromJSON(object.metadata) : undefined,
      senderTimestampMs: isSet(object.senderTimestampMs) ? globalThis.Number(object.senderTimestampMs) : undefined,
    };
  },

  toJSON(message: Message_PollUpdateMessage): unknown {
    const obj: any = {};
    if (message.pollCreationMessageKey !== undefined) {
      obj.pollCreationMessageKey = MessageKey.toJSON(message.pollCreationMessageKey);
    }
    if (message.vote !== undefined) {
      obj.vote = Message_PollEncValue.toJSON(message.vote);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Message_PollUpdateMessageMetadata.toJSON(message.metadata);
    }
    if (message.senderTimestampMs !== undefined) {
      obj.senderTimestampMs = Math.round(message.senderTimestampMs);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_PollUpdateMessage>, I>>(base?: I): Message_PollUpdateMessage {
    return Message_PollUpdateMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_PollUpdateMessage>, I>>(object: I): Message_PollUpdateMessage {
    const message = createBaseMessage_PollUpdateMessage();
    message.pollCreationMessageKey =
      (object.pollCreationMessageKey !== undefined && object.pollCreationMessageKey !== null)
        ? MessageKey.fromPartial(object.pollCreationMessageKey)
        : undefined;
    message.vote = (object.vote !== undefined && object.vote !== null)
      ? Message_PollEncValue.fromPartial(object.vote)
      : undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Message_PollUpdateMessageMetadata.fromPartial(object.metadata)
      : undefined;
    message.senderTimestampMs = object.senderTimestampMs ?? undefined;
    return message;
  },
};

function createBaseMessage_PollUpdateMessageMetadata(): Message_PollUpdateMessageMetadata {
  return {};
}

export const Message_PollUpdateMessageMetadata: MessageFns<Message_PollUpdateMessageMetadata> = {
  encode(_: Message_PollUpdateMessageMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_PollUpdateMessageMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_PollUpdateMessageMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Message_PollUpdateMessageMetadata {
    return {};
  },

  toJSON(_: Message_PollUpdateMessageMetadata): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_PollUpdateMessageMetadata>, I>>(
    base?: I,
  ): Message_PollUpdateMessageMetadata {
    return Message_PollUpdateMessageMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_PollUpdateMessageMetadata>, I>>(
    _: I,
  ): Message_PollUpdateMessageMetadata {
    const message = createBaseMessage_PollUpdateMessageMetadata();
    return message;
  },
};

function createBaseMessage_PollVoteMessage(): Message_PollVoteMessage {
  return { selectedOptions: [] };
}

export const Message_PollVoteMessage: MessageFns<Message_PollVoteMessage> = {
  encode(message: Message_PollVoteMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.selectedOptions) {
      writer.uint32(10).bytes(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_PollVoteMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_PollVoteMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.selectedOptions.push(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_PollVoteMessage {
    return {
      selectedOptions: globalThis.Array.isArray(object?.selectedOptions)
        ? object.selectedOptions.map((e: any) => bytesFromBase64(e))
        : [],
    };
  },

  toJSON(message: Message_PollVoteMessage): unknown {
    const obj: any = {};
    if (message.selectedOptions?.length) {
      obj.selectedOptions = message.selectedOptions.map((e) => base64FromBytes(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_PollVoteMessage>, I>>(base?: I): Message_PollVoteMessage {
    return Message_PollVoteMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_PollVoteMessage>, I>>(object: I): Message_PollVoteMessage {
    const message = createBaseMessage_PollVoteMessage();
    message.selectedOptions = object.selectedOptions?.map((e) => e) || [];
    return message;
  },
};

function createBaseMessage_ProductMessage(): Message_ProductMessage {
  return {
    product: undefined,
    businessOwnerJid: undefined,
    catalog: undefined,
    body: undefined,
    footer: undefined,
    contextInfo: undefined,
  };
}

export const Message_ProductMessage: MessageFns<Message_ProductMessage> = {
  encode(message: Message_ProductMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.product !== undefined) {
      Message_ProductMessage_ProductSnapshot.encode(message.product, writer.uint32(10).fork()).join();
    }
    if (message.businessOwnerJid !== undefined) {
      writer.uint32(18).string(message.businessOwnerJid);
    }
    if (message.catalog !== undefined) {
      Message_ProductMessage_CatalogSnapshot.encode(message.catalog, writer.uint32(34).fork()).join();
    }
    if (message.body !== undefined) {
      writer.uint32(42).string(message.body);
    }
    if (message.footer !== undefined) {
      writer.uint32(50).string(message.footer);
    }
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(138).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_ProductMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_ProductMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.product = Message_ProductMessage_ProductSnapshot.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.businessOwnerJid = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.catalog = Message_ProductMessage_CatalogSnapshot.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.body = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.footer = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_ProductMessage {
    return {
      product: isSet(object.product) ? Message_ProductMessage_ProductSnapshot.fromJSON(object.product) : undefined,
      businessOwnerJid: isSet(object.businessOwnerJid) ? globalThis.String(object.businessOwnerJid) : undefined,
      catalog: isSet(object.catalog) ? Message_ProductMessage_CatalogSnapshot.fromJSON(object.catalog) : undefined,
      body: isSet(object.body) ? globalThis.String(object.body) : undefined,
      footer: isSet(object.footer) ? globalThis.String(object.footer) : undefined,
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
    };
  },

  toJSON(message: Message_ProductMessage): unknown {
    const obj: any = {};
    if (message.product !== undefined) {
      obj.product = Message_ProductMessage_ProductSnapshot.toJSON(message.product);
    }
    if (message.businessOwnerJid !== undefined) {
      obj.businessOwnerJid = message.businessOwnerJid;
    }
    if (message.catalog !== undefined) {
      obj.catalog = Message_ProductMessage_CatalogSnapshot.toJSON(message.catalog);
    }
    if (message.body !== undefined) {
      obj.body = message.body;
    }
    if (message.footer !== undefined) {
      obj.footer = message.footer;
    }
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_ProductMessage>, I>>(base?: I): Message_ProductMessage {
    return Message_ProductMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_ProductMessage>, I>>(object: I): Message_ProductMessage {
    const message = createBaseMessage_ProductMessage();
    message.product = (object.product !== undefined && object.product !== null)
      ? Message_ProductMessage_ProductSnapshot.fromPartial(object.product)
      : undefined;
    message.businessOwnerJid = object.businessOwnerJid ?? undefined;
    message.catalog = (object.catalog !== undefined && object.catalog !== null)
      ? Message_ProductMessage_CatalogSnapshot.fromPartial(object.catalog)
      : undefined;
    message.body = object.body ?? undefined;
    message.footer = object.footer ?? undefined;
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    return message;
  },
};

function createBaseMessage_ProductMessage_CatalogSnapshot(): Message_ProductMessage_CatalogSnapshot {
  return { catalogImage: undefined, title: undefined, description: undefined };
}

export const Message_ProductMessage_CatalogSnapshot: MessageFns<Message_ProductMessage_CatalogSnapshot> = {
  encode(message: Message_ProductMessage_CatalogSnapshot, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.catalogImage !== undefined) {
      Message_ImageMessage.encode(message.catalogImage, writer.uint32(10).fork()).join();
    }
    if (message.title !== undefined) {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_ProductMessage_CatalogSnapshot {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_ProductMessage_CatalogSnapshot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.catalogImage = Message_ImageMessage.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_ProductMessage_CatalogSnapshot {
    return {
      catalogImage: isSet(object.catalogImage) ? Message_ImageMessage.fromJSON(object.catalogImage) : undefined,
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
    };
  },

  toJSON(message: Message_ProductMessage_CatalogSnapshot): unknown {
    const obj: any = {};
    if (message.catalogImage !== undefined) {
      obj.catalogImage = Message_ImageMessage.toJSON(message.catalogImage);
    }
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_ProductMessage_CatalogSnapshot>, I>>(
    base?: I,
  ): Message_ProductMessage_CatalogSnapshot {
    return Message_ProductMessage_CatalogSnapshot.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_ProductMessage_CatalogSnapshot>, I>>(
    object: I,
  ): Message_ProductMessage_CatalogSnapshot {
    const message = createBaseMessage_ProductMessage_CatalogSnapshot();
    message.catalogImage = (object.catalogImage !== undefined && object.catalogImage !== null)
      ? Message_ImageMessage.fromPartial(object.catalogImage)
      : undefined;
    message.title = object.title ?? undefined;
    message.description = object.description ?? undefined;
    return message;
  },
};

function createBaseMessage_ProductMessage_ProductSnapshot(): Message_ProductMessage_ProductSnapshot {
  return {
    productImage: undefined,
    productId: undefined,
    title: undefined,
    description: undefined,
    currencyCode: undefined,
    priceAmount1000: undefined,
    retailerId: undefined,
    url: undefined,
    productImageCount: undefined,
    firstImageId: undefined,
    salePriceAmount1000: undefined,
    signedUrl: undefined,
  };
}

export const Message_ProductMessage_ProductSnapshot: MessageFns<Message_ProductMessage_ProductSnapshot> = {
  encode(message: Message_ProductMessage_ProductSnapshot, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productImage !== undefined) {
      Message_ImageMessage.encode(message.productImage, writer.uint32(10).fork()).join();
    }
    if (message.productId !== undefined) {
      writer.uint32(18).string(message.productId);
    }
    if (message.title !== undefined) {
      writer.uint32(26).string(message.title);
    }
    if (message.description !== undefined) {
      writer.uint32(34).string(message.description);
    }
    if (message.currencyCode !== undefined) {
      writer.uint32(42).string(message.currencyCode);
    }
    if (message.priceAmount1000 !== undefined) {
      writer.uint32(48).int64(message.priceAmount1000);
    }
    if (message.retailerId !== undefined) {
      writer.uint32(58).string(message.retailerId);
    }
    if (message.url !== undefined) {
      writer.uint32(66).string(message.url);
    }
    if (message.productImageCount !== undefined) {
      writer.uint32(72).uint32(message.productImageCount);
    }
    if (message.firstImageId !== undefined) {
      writer.uint32(90).string(message.firstImageId);
    }
    if (message.salePriceAmount1000 !== undefined) {
      writer.uint32(96).int64(message.salePriceAmount1000);
    }
    if (message.signedUrl !== undefined) {
      writer.uint32(106).string(message.signedUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_ProductMessage_ProductSnapshot {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_ProductMessage_ProductSnapshot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productImage = Message_ImageMessage.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.currencyCode = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.priceAmount1000 = longToNumber(reader.int64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.retailerId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.productImageCount = reader.uint32();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.firstImageId = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.salePriceAmount1000 = longToNumber(reader.int64());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.signedUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_ProductMessage_ProductSnapshot {
    return {
      productImage: isSet(object.productImage) ? Message_ImageMessage.fromJSON(object.productImage) : undefined,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : undefined,
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      currencyCode: isSet(object.currencyCode) ? globalThis.String(object.currencyCode) : undefined,
      priceAmount1000: isSet(object.priceAmount1000) ? globalThis.Number(object.priceAmount1000) : undefined,
      retailerId: isSet(object.retailerId) ? globalThis.String(object.retailerId) : undefined,
      url: isSet(object.url) ? globalThis.String(object.url) : undefined,
      productImageCount: isSet(object.productImageCount) ? globalThis.Number(object.productImageCount) : undefined,
      firstImageId: isSet(object.firstImageId) ? globalThis.String(object.firstImageId) : undefined,
      salePriceAmount1000: isSet(object.salePriceAmount1000)
        ? globalThis.Number(object.salePriceAmount1000)
        : undefined,
      signedUrl: isSet(object.signedUrl) ? globalThis.String(object.signedUrl) : undefined,
    };
  },

  toJSON(message: Message_ProductMessage_ProductSnapshot): unknown {
    const obj: any = {};
    if (message.productImage !== undefined) {
      obj.productImage = Message_ImageMessage.toJSON(message.productImage);
    }
    if (message.productId !== undefined) {
      obj.productId = message.productId;
    }
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.currencyCode !== undefined) {
      obj.currencyCode = message.currencyCode;
    }
    if (message.priceAmount1000 !== undefined) {
      obj.priceAmount1000 = Math.round(message.priceAmount1000);
    }
    if (message.retailerId !== undefined) {
      obj.retailerId = message.retailerId;
    }
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    if (message.productImageCount !== undefined) {
      obj.productImageCount = Math.round(message.productImageCount);
    }
    if (message.firstImageId !== undefined) {
      obj.firstImageId = message.firstImageId;
    }
    if (message.salePriceAmount1000 !== undefined) {
      obj.salePriceAmount1000 = Math.round(message.salePriceAmount1000);
    }
    if (message.signedUrl !== undefined) {
      obj.signedUrl = message.signedUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_ProductMessage_ProductSnapshot>, I>>(
    base?: I,
  ): Message_ProductMessage_ProductSnapshot {
    return Message_ProductMessage_ProductSnapshot.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_ProductMessage_ProductSnapshot>, I>>(
    object: I,
  ): Message_ProductMessage_ProductSnapshot {
    const message = createBaseMessage_ProductMessage_ProductSnapshot();
    message.productImage = (object.productImage !== undefined && object.productImage !== null)
      ? Message_ImageMessage.fromPartial(object.productImage)
      : undefined;
    message.productId = object.productId ?? undefined;
    message.title = object.title ?? undefined;
    message.description = object.description ?? undefined;
    message.currencyCode = object.currencyCode ?? undefined;
    message.priceAmount1000 = object.priceAmount1000 ?? undefined;
    message.retailerId = object.retailerId ?? undefined;
    message.url = object.url ?? undefined;
    message.productImageCount = object.productImageCount ?? undefined;
    message.firstImageId = object.firstImageId ?? undefined;
    message.salePriceAmount1000 = object.salePriceAmount1000 ?? undefined;
    message.signedUrl = object.signedUrl ?? undefined;
    return message;
  },
};

function createBaseMessage_ProtocolMessage(): Message_ProtocolMessage {
  return {
    key: undefined,
    type: undefined,
    ephemeralExpiration: undefined,
    ephemeralSettingTimestamp: undefined,
    historySyncNotification: undefined,
    appStateSyncKeyShare: undefined,
    appStateSyncKeyRequest: undefined,
    initialSecurityNotificationSettingSync: undefined,
    appStateFatalExceptionNotification: undefined,
    disappearingMode: undefined,
    editedMessage: undefined,
    timestampMs: undefined,
    peerDataOperationRequestMessage: undefined,
    peerDataOperationRequestResponseMessage: undefined,
    botFeedbackMessage: undefined,
    invokerJid: undefined,
    requestWelcomeMessageMetadata: undefined,
    mediaNotifyMessage: undefined,
    cloudApiThreadControlNotification: undefined,
    lidMigrationMappingSyncMessage: undefined,
    limitSharing: undefined,
    aiPsiMetadata: undefined,
    aiQueryFanout: undefined,
    memberLabel: undefined,
  };
}

export const Message_ProtocolMessage: MessageFns<Message_ProtocolMessage> = {
  encode(message: Message_ProtocolMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined) {
      MessageKey.encode(message.key, writer.uint32(10).fork()).join();
    }
    if (message.type !== undefined) {
      writer.uint32(16).int32(message.type);
    }
    if (message.ephemeralExpiration !== undefined) {
      writer.uint32(32).uint32(message.ephemeralExpiration);
    }
    if (message.ephemeralSettingTimestamp !== undefined) {
      writer.uint32(40).int64(message.ephemeralSettingTimestamp);
    }
    if (message.historySyncNotification !== undefined) {
      Message_HistorySyncNotification.encode(message.historySyncNotification, writer.uint32(50).fork()).join();
    }
    if (message.appStateSyncKeyShare !== undefined) {
      Message_AppStateSyncKeyShare.encode(message.appStateSyncKeyShare, writer.uint32(58).fork()).join();
    }
    if (message.appStateSyncKeyRequest !== undefined) {
      Message_AppStateSyncKeyRequest.encode(message.appStateSyncKeyRequest, writer.uint32(66).fork()).join();
    }
    if (message.initialSecurityNotificationSettingSync !== undefined) {
      Message_InitialSecurityNotificationSettingSync.encode(
        message.initialSecurityNotificationSettingSync,
        writer.uint32(74).fork(),
      ).join();
    }
    if (message.appStateFatalExceptionNotification !== undefined) {
      Message_AppStateFatalExceptionNotification.encode(
        message.appStateFatalExceptionNotification,
        writer.uint32(82).fork(),
      ).join();
    }
    if (message.disappearingMode !== undefined) {
      DisappearingMode.encode(message.disappearingMode, writer.uint32(90).fork()).join();
    }
    if (message.editedMessage !== undefined) {
      Message.encode(message.editedMessage, writer.uint32(114).fork()).join();
    }
    if (message.timestampMs !== undefined) {
      writer.uint32(120).int64(message.timestampMs);
    }
    if (message.peerDataOperationRequestMessage !== undefined) {
      Message_PeerDataOperationRequestMessage.encode(message.peerDataOperationRequestMessage, writer.uint32(130).fork())
        .join();
    }
    if (message.peerDataOperationRequestResponseMessage !== undefined) {
      Message_PeerDataOperationRequestResponseMessage.encode(
        message.peerDataOperationRequestResponseMessage,
        writer.uint32(138).fork(),
      ).join();
    }
    if (message.botFeedbackMessage !== undefined) {
      Message_BotFeedbackMessage.encode(message.botFeedbackMessage, writer.uint32(146).fork()).join();
    }
    if (message.invokerJid !== undefined) {
      writer.uint32(154).string(message.invokerJid);
    }
    if (message.requestWelcomeMessageMetadata !== undefined) {
      Message_RequestWelcomeMessageMetadata.encode(message.requestWelcomeMessageMetadata, writer.uint32(162).fork())
        .join();
    }
    if (message.mediaNotifyMessage !== undefined) {
      MediaNotifyMessage.encode(message.mediaNotifyMessage, writer.uint32(170).fork()).join();
    }
    if (message.cloudApiThreadControlNotification !== undefined) {
      Message_CloudAPIThreadControlNotification.encode(
        message.cloudApiThreadControlNotification,
        writer.uint32(178).fork(),
      ).join();
    }
    if (message.lidMigrationMappingSyncMessage !== undefined) {
      LIDMigrationMappingSyncMessage.encode(message.lidMigrationMappingSyncMessage, writer.uint32(186).fork()).join();
    }
    if (message.limitSharing !== undefined) {
      LimitSharing.encode(message.limitSharing, writer.uint32(194).fork()).join();
    }
    if (message.aiPsiMetadata !== undefined) {
      writer.uint32(202).bytes(message.aiPsiMetadata);
    }
    if (message.aiQueryFanout !== undefined) {
      AIQueryFanout.encode(message.aiQueryFanout, writer.uint32(210).fork()).join();
    }
    if (message.memberLabel !== undefined) {
      MemberLabel.encode(message.memberLabel, writer.uint32(218).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_ProtocolMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_ProtocolMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.ephemeralExpiration = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.ephemeralSettingTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.historySyncNotification = Message_HistorySyncNotification.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.appStateSyncKeyShare = Message_AppStateSyncKeyShare.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.appStateSyncKeyRequest = Message_AppStateSyncKeyRequest.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.initialSecurityNotificationSettingSync = Message_InitialSecurityNotificationSettingSync.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.appStateFatalExceptionNotification = Message_AppStateFatalExceptionNotification.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.disappearingMode = DisappearingMode.decode(reader, reader.uint32());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.editedMessage = Message.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.timestampMs = longToNumber(reader.int64());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.peerDataOperationRequestMessage = Message_PeerDataOperationRequestMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.peerDataOperationRequestResponseMessage = Message_PeerDataOperationRequestResponseMessage.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.botFeedbackMessage = Message_BotFeedbackMessage.decode(reader, reader.uint32());
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.invokerJid = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.requestWelcomeMessageMetadata = Message_RequestWelcomeMessageMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.mediaNotifyMessage = MediaNotifyMessage.decode(reader, reader.uint32());
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.cloudApiThreadControlNotification = Message_CloudAPIThreadControlNotification.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.lidMigrationMappingSyncMessage = LIDMigrationMappingSyncMessage.decode(reader, reader.uint32());
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.limitSharing = LimitSharing.decode(reader, reader.uint32());
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.aiPsiMetadata = reader.bytes();
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.aiQueryFanout = AIQueryFanout.decode(reader, reader.uint32());
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.memberLabel = MemberLabel.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_ProtocolMessage {
    return {
      key: isSet(object.key) ? MessageKey.fromJSON(object.key) : undefined,
      type: isSet(object.type) ? message_ProtocolMessage_TypeFromJSON(object.type) : undefined,
      ephemeralExpiration: isSet(object.ephemeralExpiration)
        ? globalThis.Number(object.ephemeralExpiration)
        : undefined,
      ephemeralSettingTimestamp: isSet(object.ephemeralSettingTimestamp)
        ? globalThis.Number(object.ephemeralSettingTimestamp)
        : undefined,
      historySyncNotification: isSet(object.historySyncNotification)
        ? Message_HistorySyncNotification.fromJSON(object.historySyncNotification)
        : undefined,
      appStateSyncKeyShare: isSet(object.appStateSyncKeyShare)
        ? Message_AppStateSyncKeyShare.fromJSON(object.appStateSyncKeyShare)
        : undefined,
      appStateSyncKeyRequest: isSet(object.appStateSyncKeyRequest)
        ? Message_AppStateSyncKeyRequest.fromJSON(object.appStateSyncKeyRequest)
        : undefined,
      initialSecurityNotificationSettingSync: isSet(object.initialSecurityNotificationSettingSync)
        ? Message_InitialSecurityNotificationSettingSync.fromJSON(object.initialSecurityNotificationSettingSync)
        : undefined,
      appStateFatalExceptionNotification: isSet(object.appStateFatalExceptionNotification)
        ? Message_AppStateFatalExceptionNotification.fromJSON(object.appStateFatalExceptionNotification)
        : undefined,
      disappearingMode: isSet(object.disappearingMode) ? DisappearingMode.fromJSON(object.disappearingMode) : undefined,
      editedMessage: isSet(object.editedMessage) ? Message.fromJSON(object.editedMessage) : undefined,
      timestampMs: isSet(object.timestampMs) ? globalThis.Number(object.timestampMs) : undefined,
      peerDataOperationRequestMessage: isSet(object.peerDataOperationRequestMessage)
        ? Message_PeerDataOperationRequestMessage.fromJSON(object.peerDataOperationRequestMessage)
        : undefined,
      peerDataOperationRequestResponseMessage: isSet(object.peerDataOperationRequestResponseMessage)
        ? Message_PeerDataOperationRequestResponseMessage.fromJSON(object.peerDataOperationRequestResponseMessage)
        : undefined,
      botFeedbackMessage: isSet(object.botFeedbackMessage)
        ? Message_BotFeedbackMessage.fromJSON(object.botFeedbackMessage)
        : undefined,
      invokerJid: isSet(object.invokerJid) ? globalThis.String(object.invokerJid) : undefined,
      requestWelcomeMessageMetadata: isSet(object.requestWelcomeMessageMetadata)
        ? Message_RequestWelcomeMessageMetadata.fromJSON(object.requestWelcomeMessageMetadata)
        : undefined,
      mediaNotifyMessage: isSet(object.mediaNotifyMessage)
        ? MediaNotifyMessage.fromJSON(object.mediaNotifyMessage)
        : undefined,
      cloudApiThreadControlNotification: isSet(object.cloudApiThreadControlNotification)
        ? Message_CloudAPIThreadControlNotification.fromJSON(object.cloudApiThreadControlNotification)
        : undefined,
      lidMigrationMappingSyncMessage: isSet(object.lidMigrationMappingSyncMessage)
        ? LIDMigrationMappingSyncMessage.fromJSON(object.lidMigrationMappingSyncMessage)
        : undefined,
      limitSharing: isSet(object.limitSharing) ? LimitSharing.fromJSON(object.limitSharing) : undefined,
      aiPsiMetadata: isSet(object.aiPsiMetadata) ? bytesFromBase64(object.aiPsiMetadata) : undefined,
      aiQueryFanout: isSet(object.aiQueryFanout) ? AIQueryFanout.fromJSON(object.aiQueryFanout) : undefined,
      memberLabel: isSet(object.memberLabel) ? MemberLabel.fromJSON(object.memberLabel) : undefined,
    };
  },

  toJSON(message: Message_ProtocolMessage): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = MessageKey.toJSON(message.key);
    }
    if (message.type !== undefined) {
      obj.type = message_ProtocolMessage_TypeToJSON(message.type);
    }
    if (message.ephemeralExpiration !== undefined) {
      obj.ephemeralExpiration = Math.round(message.ephemeralExpiration);
    }
    if (message.ephemeralSettingTimestamp !== undefined) {
      obj.ephemeralSettingTimestamp = Math.round(message.ephemeralSettingTimestamp);
    }
    if (message.historySyncNotification !== undefined) {
      obj.historySyncNotification = Message_HistorySyncNotification.toJSON(message.historySyncNotification);
    }
    if (message.appStateSyncKeyShare !== undefined) {
      obj.appStateSyncKeyShare = Message_AppStateSyncKeyShare.toJSON(message.appStateSyncKeyShare);
    }
    if (message.appStateSyncKeyRequest !== undefined) {
      obj.appStateSyncKeyRequest = Message_AppStateSyncKeyRequest.toJSON(message.appStateSyncKeyRequest);
    }
    if (message.initialSecurityNotificationSettingSync !== undefined) {
      obj.initialSecurityNotificationSettingSync = Message_InitialSecurityNotificationSettingSync.toJSON(
        message.initialSecurityNotificationSettingSync,
      );
    }
    if (message.appStateFatalExceptionNotification !== undefined) {
      obj.appStateFatalExceptionNotification = Message_AppStateFatalExceptionNotification.toJSON(
        message.appStateFatalExceptionNotification,
      );
    }
    if (message.disappearingMode !== undefined) {
      obj.disappearingMode = DisappearingMode.toJSON(message.disappearingMode);
    }
    if (message.editedMessage !== undefined) {
      obj.editedMessage = Message.toJSON(message.editedMessage);
    }
    if (message.timestampMs !== undefined) {
      obj.timestampMs = Math.round(message.timestampMs);
    }
    if (message.peerDataOperationRequestMessage !== undefined) {
      obj.peerDataOperationRequestMessage = Message_PeerDataOperationRequestMessage.toJSON(
        message.peerDataOperationRequestMessage,
      );
    }
    if (message.peerDataOperationRequestResponseMessage !== undefined) {
      obj.peerDataOperationRequestResponseMessage = Message_PeerDataOperationRequestResponseMessage.toJSON(
        message.peerDataOperationRequestResponseMessage,
      );
    }
    if (message.botFeedbackMessage !== undefined) {
      obj.botFeedbackMessage = Message_BotFeedbackMessage.toJSON(message.botFeedbackMessage);
    }
    if (message.invokerJid !== undefined) {
      obj.invokerJid = message.invokerJid;
    }
    if (message.requestWelcomeMessageMetadata !== undefined) {
      obj.requestWelcomeMessageMetadata = Message_RequestWelcomeMessageMetadata.toJSON(
        message.requestWelcomeMessageMetadata,
      );
    }
    if (message.mediaNotifyMessage !== undefined) {
      obj.mediaNotifyMessage = MediaNotifyMessage.toJSON(message.mediaNotifyMessage);
    }
    if (message.cloudApiThreadControlNotification !== undefined) {
      obj.cloudApiThreadControlNotification = Message_CloudAPIThreadControlNotification.toJSON(
        message.cloudApiThreadControlNotification,
      );
    }
    if (message.lidMigrationMappingSyncMessage !== undefined) {
      obj.lidMigrationMappingSyncMessage = LIDMigrationMappingSyncMessage.toJSON(
        message.lidMigrationMappingSyncMessage,
      );
    }
    if (message.limitSharing !== undefined) {
      obj.limitSharing = LimitSharing.toJSON(message.limitSharing);
    }
    if (message.aiPsiMetadata !== undefined) {
      obj.aiPsiMetadata = base64FromBytes(message.aiPsiMetadata);
    }
    if (message.aiQueryFanout !== undefined) {
      obj.aiQueryFanout = AIQueryFanout.toJSON(message.aiQueryFanout);
    }
    if (message.memberLabel !== undefined) {
      obj.memberLabel = MemberLabel.toJSON(message.memberLabel);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_ProtocolMessage>, I>>(base?: I): Message_ProtocolMessage {
    return Message_ProtocolMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_ProtocolMessage>, I>>(object: I): Message_ProtocolMessage {
    const message = createBaseMessage_ProtocolMessage();
    message.key = (object.key !== undefined && object.key !== null) ? MessageKey.fromPartial(object.key) : undefined;
    message.type = object.type ?? undefined;
    message.ephemeralExpiration = object.ephemeralExpiration ?? undefined;
    message.ephemeralSettingTimestamp = object.ephemeralSettingTimestamp ?? undefined;
    message.historySyncNotification =
      (object.historySyncNotification !== undefined && object.historySyncNotification !== null)
        ? Message_HistorySyncNotification.fromPartial(object.historySyncNotification)
        : undefined;
    message.appStateSyncKeyShare = (object.appStateSyncKeyShare !== undefined && object.appStateSyncKeyShare !== null)
      ? Message_AppStateSyncKeyShare.fromPartial(object.appStateSyncKeyShare)
      : undefined;
    message.appStateSyncKeyRequest =
      (object.appStateSyncKeyRequest !== undefined && object.appStateSyncKeyRequest !== null)
        ? Message_AppStateSyncKeyRequest.fromPartial(object.appStateSyncKeyRequest)
        : undefined;
    message.initialSecurityNotificationSettingSync =
      (object.initialSecurityNotificationSettingSync !== undefined &&
          object.initialSecurityNotificationSettingSync !== null)
        ? Message_InitialSecurityNotificationSettingSync.fromPartial(object.initialSecurityNotificationSettingSync)
        : undefined;
    message.appStateFatalExceptionNotification =
      (object.appStateFatalExceptionNotification !== undefined && object.appStateFatalExceptionNotification !== null)
        ? Message_AppStateFatalExceptionNotification.fromPartial(object.appStateFatalExceptionNotification)
        : undefined;
    message.disappearingMode = (object.disappearingMode !== undefined && object.disappearingMode !== null)
      ? DisappearingMode.fromPartial(object.disappearingMode)
      : undefined;
    message.editedMessage = (object.editedMessage !== undefined && object.editedMessage !== null)
      ? Message.fromPartial(object.editedMessage)
      : undefined;
    message.timestampMs = object.timestampMs ?? undefined;
    message.peerDataOperationRequestMessage =
      (object.peerDataOperationRequestMessage !== undefined && object.peerDataOperationRequestMessage !== null)
        ? Message_PeerDataOperationRequestMessage.fromPartial(object.peerDataOperationRequestMessage)
        : undefined;
    message.peerDataOperationRequestResponseMessage =
      (object.peerDataOperationRequestResponseMessage !== undefined &&
          object.peerDataOperationRequestResponseMessage !== null)
        ? Message_PeerDataOperationRequestResponseMessage.fromPartial(object.peerDataOperationRequestResponseMessage)
        : undefined;
    message.botFeedbackMessage = (object.botFeedbackMessage !== undefined && object.botFeedbackMessage !== null)
      ? Message_BotFeedbackMessage.fromPartial(object.botFeedbackMessage)
      : undefined;
    message.invokerJid = object.invokerJid ?? undefined;
    message.requestWelcomeMessageMetadata =
      (object.requestWelcomeMessageMetadata !== undefined && object.requestWelcomeMessageMetadata !== null)
        ? Message_RequestWelcomeMessageMetadata.fromPartial(object.requestWelcomeMessageMetadata)
        : undefined;
    message.mediaNotifyMessage = (object.mediaNotifyMessage !== undefined && object.mediaNotifyMessage !== null)
      ? MediaNotifyMessage.fromPartial(object.mediaNotifyMessage)
      : undefined;
    message.cloudApiThreadControlNotification =
      (object.cloudApiThreadControlNotification !== undefined && object.cloudApiThreadControlNotification !== null)
        ? Message_CloudAPIThreadControlNotification.fromPartial(object.cloudApiThreadControlNotification)
        : undefined;
    message.lidMigrationMappingSyncMessage =
      (object.lidMigrationMappingSyncMessage !== undefined && object.lidMigrationMappingSyncMessage !== null)
        ? LIDMigrationMappingSyncMessage.fromPartial(object.lidMigrationMappingSyncMessage)
        : undefined;
    message.limitSharing = (object.limitSharing !== undefined && object.limitSharing !== null)
      ? LimitSharing.fromPartial(object.limitSharing)
      : undefined;
    message.aiPsiMetadata = object.aiPsiMetadata ?? undefined;
    message.aiQueryFanout = (object.aiQueryFanout !== undefined && object.aiQueryFanout !== null)
      ? AIQueryFanout.fromPartial(object.aiQueryFanout)
      : undefined;
    message.memberLabel = (object.memberLabel !== undefined && object.memberLabel !== null)
      ? MemberLabel.fromPartial(object.memberLabel)
      : undefined;
    return message;
  },
};

function createBaseMessage_ReactionMessage(): Message_ReactionMessage {
  return { key: undefined, text: undefined, groupingKey: undefined, senderTimestampMs: undefined };
}

export const Message_ReactionMessage: MessageFns<Message_ReactionMessage> = {
  encode(message: Message_ReactionMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined) {
      MessageKey.encode(message.key, writer.uint32(10).fork()).join();
    }
    if (message.text !== undefined) {
      writer.uint32(18).string(message.text);
    }
    if (message.groupingKey !== undefined) {
      writer.uint32(26).string(message.groupingKey);
    }
    if (message.senderTimestampMs !== undefined) {
      writer.uint32(32).int64(message.senderTimestampMs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_ReactionMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_ReactionMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.groupingKey = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.senderTimestampMs = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_ReactionMessage {
    return {
      key: isSet(object.key) ? MessageKey.fromJSON(object.key) : undefined,
      text: isSet(object.text) ? globalThis.String(object.text) : undefined,
      groupingKey: isSet(object.groupingKey) ? globalThis.String(object.groupingKey) : undefined,
      senderTimestampMs: isSet(object.senderTimestampMs) ? globalThis.Number(object.senderTimestampMs) : undefined,
    };
  },

  toJSON(message: Message_ReactionMessage): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = MessageKey.toJSON(message.key);
    }
    if (message.text !== undefined) {
      obj.text = message.text;
    }
    if (message.groupingKey !== undefined) {
      obj.groupingKey = message.groupingKey;
    }
    if (message.senderTimestampMs !== undefined) {
      obj.senderTimestampMs = Math.round(message.senderTimestampMs);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_ReactionMessage>, I>>(base?: I): Message_ReactionMessage {
    return Message_ReactionMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_ReactionMessage>, I>>(object: I): Message_ReactionMessage {
    const message = createBaseMessage_ReactionMessage();
    message.key = (object.key !== undefined && object.key !== null) ? MessageKey.fromPartial(object.key) : undefined;
    message.text = object.text ?? undefined;
    message.groupingKey = object.groupingKey ?? undefined;
    message.senderTimestampMs = object.senderTimestampMs ?? undefined;
    return message;
  },
};

function createBaseMessage_RequestPaymentMessage(): Message_RequestPaymentMessage {
  return {
    noteMessage: undefined,
    currencyCodeIso4217: undefined,
    amount1000: undefined,
    requestFrom: undefined,
    expiryTimestamp: undefined,
    amount: undefined,
    background: undefined,
  };
}

export const Message_RequestPaymentMessage: MessageFns<Message_RequestPaymentMessage> = {
  encode(message: Message_RequestPaymentMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.noteMessage !== undefined) {
      Message.encode(message.noteMessage, writer.uint32(34).fork()).join();
    }
    if (message.currencyCodeIso4217 !== undefined) {
      writer.uint32(10).string(message.currencyCodeIso4217);
    }
    if (message.amount1000 !== undefined) {
      writer.uint32(16).uint64(message.amount1000);
    }
    if (message.requestFrom !== undefined) {
      writer.uint32(26).string(message.requestFrom);
    }
    if (message.expiryTimestamp !== undefined) {
      writer.uint32(40).int64(message.expiryTimestamp);
    }
    if (message.amount !== undefined) {
      Money.encode(message.amount, writer.uint32(50).fork()).join();
    }
    if (message.background !== undefined) {
      PaymentBackground.encode(message.background, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_RequestPaymentMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_RequestPaymentMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.noteMessage = Message.decode(reader, reader.uint32());
          continue;
        }
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.currencyCodeIso4217 = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.amount1000 = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.requestFrom = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.expiryTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.amount = Money.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.background = PaymentBackground.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_RequestPaymentMessage {
    return {
      noteMessage: isSet(object.noteMessage) ? Message.fromJSON(object.noteMessage) : undefined,
      currencyCodeIso4217: isSet(object.currencyCodeIso4217)
        ? globalThis.String(object.currencyCodeIso4217)
        : undefined,
      amount1000: isSet(object.amount1000) ? globalThis.Number(object.amount1000) : undefined,
      requestFrom: isSet(object.requestFrom) ? globalThis.String(object.requestFrom) : undefined,
      expiryTimestamp: isSet(object.expiryTimestamp) ? globalThis.Number(object.expiryTimestamp) : undefined,
      amount: isSet(object.amount) ? Money.fromJSON(object.amount) : undefined,
      background: isSet(object.background) ? PaymentBackground.fromJSON(object.background) : undefined,
    };
  },

  toJSON(message: Message_RequestPaymentMessage): unknown {
    const obj: any = {};
    if (message.noteMessage !== undefined) {
      obj.noteMessage = Message.toJSON(message.noteMessage);
    }
    if (message.currencyCodeIso4217 !== undefined) {
      obj.currencyCodeIso4217 = message.currencyCodeIso4217;
    }
    if (message.amount1000 !== undefined) {
      obj.amount1000 = Math.round(message.amount1000);
    }
    if (message.requestFrom !== undefined) {
      obj.requestFrom = message.requestFrom;
    }
    if (message.expiryTimestamp !== undefined) {
      obj.expiryTimestamp = Math.round(message.expiryTimestamp);
    }
    if (message.amount !== undefined) {
      obj.amount = Money.toJSON(message.amount);
    }
    if (message.background !== undefined) {
      obj.background = PaymentBackground.toJSON(message.background);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_RequestPaymentMessage>, I>>(base?: I): Message_RequestPaymentMessage {
    return Message_RequestPaymentMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_RequestPaymentMessage>, I>>(
    object: I,
  ): Message_RequestPaymentMessage {
    const message = createBaseMessage_RequestPaymentMessage();
    message.noteMessage = (object.noteMessage !== undefined && object.noteMessage !== null)
      ? Message.fromPartial(object.noteMessage)
      : undefined;
    message.currencyCodeIso4217 = object.currencyCodeIso4217 ?? undefined;
    message.amount1000 = object.amount1000 ?? undefined;
    message.requestFrom = object.requestFrom ?? undefined;
    message.expiryTimestamp = object.expiryTimestamp ?? undefined;
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Money.fromPartial(object.amount)
      : undefined;
    message.background = (object.background !== undefined && object.background !== null)
      ? PaymentBackground.fromPartial(object.background)
      : undefined;
    return message;
  },
};

function createBaseMessage_RequestPhoneNumberMessage(): Message_RequestPhoneNumberMessage {
  return { contextInfo: undefined };
}

export const Message_RequestPhoneNumberMessage: MessageFns<Message_RequestPhoneNumberMessage> = {
  encode(message: Message_RequestPhoneNumberMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_RequestPhoneNumberMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_RequestPhoneNumberMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_RequestPhoneNumberMessage {
    return { contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined };
  },

  toJSON(message: Message_RequestPhoneNumberMessage): unknown {
    const obj: any = {};
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_RequestPhoneNumberMessage>, I>>(
    base?: I,
  ): Message_RequestPhoneNumberMessage {
    return Message_RequestPhoneNumberMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_RequestPhoneNumberMessage>, I>>(
    object: I,
  ): Message_RequestPhoneNumberMessage {
    const message = createBaseMessage_RequestPhoneNumberMessage();
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    return message;
  },
};

function createBaseMessage_RequestWelcomeMessageMetadata(): Message_RequestWelcomeMessageMetadata {
  return { localChatState: undefined };
}

export const Message_RequestWelcomeMessageMetadata: MessageFns<Message_RequestWelcomeMessageMetadata> = {
  encode(message: Message_RequestWelcomeMessageMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.localChatState !== undefined) {
      writer.uint32(8).int32(message.localChatState);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_RequestWelcomeMessageMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_RequestWelcomeMessageMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.localChatState = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_RequestWelcomeMessageMetadata {
    return {
      localChatState: isSet(object.localChatState)
        ? message_RequestWelcomeMessageMetadata_LocalChatStateFromJSON(object.localChatState)
        : undefined,
    };
  },

  toJSON(message: Message_RequestWelcomeMessageMetadata): unknown {
    const obj: any = {};
    if (message.localChatState !== undefined) {
      obj.localChatState = message_RequestWelcomeMessageMetadata_LocalChatStateToJSON(message.localChatState);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_RequestWelcomeMessageMetadata>, I>>(
    base?: I,
  ): Message_RequestWelcomeMessageMetadata {
    return Message_RequestWelcomeMessageMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_RequestWelcomeMessageMetadata>, I>>(
    object: I,
  ): Message_RequestWelcomeMessageMetadata {
    const message = createBaseMessage_RequestWelcomeMessageMetadata();
    message.localChatState = object.localChatState ?? undefined;
    return message;
  },
};

function createBaseMessage_ScheduledCallCreationMessage(): Message_ScheduledCallCreationMessage {
  return { scheduledTimestampMs: undefined, callType: undefined, title: undefined };
}

export const Message_ScheduledCallCreationMessage: MessageFns<Message_ScheduledCallCreationMessage> = {
  encode(message: Message_ScheduledCallCreationMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.scheduledTimestampMs !== undefined) {
      writer.uint32(8).int64(message.scheduledTimestampMs);
    }
    if (message.callType !== undefined) {
      writer.uint32(16).int32(message.callType);
    }
    if (message.title !== undefined) {
      writer.uint32(26).string(message.title);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_ScheduledCallCreationMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_ScheduledCallCreationMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.scheduledTimestampMs = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.callType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_ScheduledCallCreationMessage {
    return {
      scheduledTimestampMs: isSet(object.scheduledTimestampMs)
        ? globalThis.Number(object.scheduledTimestampMs)
        : undefined,
      callType: isSet(object.callType)
        ? message_ScheduledCallCreationMessage_CallTypeFromJSON(object.callType)
        : undefined,
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
    };
  },

  toJSON(message: Message_ScheduledCallCreationMessage): unknown {
    const obj: any = {};
    if (message.scheduledTimestampMs !== undefined) {
      obj.scheduledTimestampMs = Math.round(message.scheduledTimestampMs);
    }
    if (message.callType !== undefined) {
      obj.callType = message_ScheduledCallCreationMessage_CallTypeToJSON(message.callType);
    }
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_ScheduledCallCreationMessage>, I>>(
    base?: I,
  ): Message_ScheduledCallCreationMessage {
    return Message_ScheduledCallCreationMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_ScheduledCallCreationMessage>, I>>(
    object: I,
  ): Message_ScheduledCallCreationMessage {
    const message = createBaseMessage_ScheduledCallCreationMessage();
    message.scheduledTimestampMs = object.scheduledTimestampMs ?? undefined;
    message.callType = object.callType ?? undefined;
    message.title = object.title ?? undefined;
    return message;
  },
};

function createBaseMessage_ScheduledCallEditMessage(): Message_ScheduledCallEditMessage {
  return { key: undefined, editType: undefined };
}

export const Message_ScheduledCallEditMessage: MessageFns<Message_ScheduledCallEditMessage> = {
  encode(message: Message_ScheduledCallEditMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined) {
      MessageKey.encode(message.key, writer.uint32(10).fork()).join();
    }
    if (message.editType !== undefined) {
      writer.uint32(16).int32(message.editType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_ScheduledCallEditMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_ScheduledCallEditMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.editType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_ScheduledCallEditMessage {
    return {
      key: isSet(object.key) ? MessageKey.fromJSON(object.key) : undefined,
      editType: isSet(object.editType) ? message_ScheduledCallEditMessage_EditTypeFromJSON(object.editType) : undefined,
    };
  },

  toJSON(message: Message_ScheduledCallEditMessage): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = MessageKey.toJSON(message.key);
    }
    if (message.editType !== undefined) {
      obj.editType = message_ScheduledCallEditMessage_EditTypeToJSON(message.editType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_ScheduledCallEditMessage>, I>>(
    base?: I,
  ): Message_ScheduledCallEditMessage {
    return Message_ScheduledCallEditMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_ScheduledCallEditMessage>, I>>(
    object: I,
  ): Message_ScheduledCallEditMessage {
    const message = createBaseMessage_ScheduledCallEditMessage();
    message.key = (object.key !== undefined && object.key !== null) ? MessageKey.fromPartial(object.key) : undefined;
    message.editType = object.editType ?? undefined;
    return message;
  },
};

function createBaseMessage_SecretEncryptedMessage(): Message_SecretEncryptedMessage {
  return { targetMessageKey: undefined, encPayload: undefined, encIv: undefined, secretEncType: undefined };
}

export const Message_SecretEncryptedMessage: MessageFns<Message_SecretEncryptedMessage> = {
  encode(message: Message_SecretEncryptedMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.targetMessageKey !== undefined) {
      MessageKey.encode(message.targetMessageKey, writer.uint32(10).fork()).join();
    }
    if (message.encPayload !== undefined) {
      writer.uint32(18).bytes(message.encPayload);
    }
    if (message.encIv !== undefined) {
      writer.uint32(26).bytes(message.encIv);
    }
    if (message.secretEncType !== undefined) {
      writer.uint32(32).int32(message.secretEncType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_SecretEncryptedMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_SecretEncryptedMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.targetMessageKey = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.encPayload = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.encIv = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.secretEncType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_SecretEncryptedMessage {
    return {
      targetMessageKey: isSet(object.targetMessageKey) ? MessageKey.fromJSON(object.targetMessageKey) : undefined,
      encPayload: isSet(object.encPayload) ? bytesFromBase64(object.encPayload) : undefined,
      encIv: isSet(object.encIv) ? bytesFromBase64(object.encIv) : undefined,
      secretEncType: isSet(object.secretEncType)
        ? message_SecretEncryptedMessage_SecretEncTypeFromJSON(object.secretEncType)
        : undefined,
    };
  },

  toJSON(message: Message_SecretEncryptedMessage): unknown {
    const obj: any = {};
    if (message.targetMessageKey !== undefined) {
      obj.targetMessageKey = MessageKey.toJSON(message.targetMessageKey);
    }
    if (message.encPayload !== undefined) {
      obj.encPayload = base64FromBytes(message.encPayload);
    }
    if (message.encIv !== undefined) {
      obj.encIv = base64FromBytes(message.encIv);
    }
    if (message.secretEncType !== undefined) {
      obj.secretEncType = message_SecretEncryptedMessage_SecretEncTypeToJSON(message.secretEncType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_SecretEncryptedMessage>, I>>(base?: I): Message_SecretEncryptedMessage {
    return Message_SecretEncryptedMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_SecretEncryptedMessage>, I>>(
    object: I,
  ): Message_SecretEncryptedMessage {
    const message = createBaseMessage_SecretEncryptedMessage();
    message.targetMessageKey = (object.targetMessageKey !== undefined && object.targetMessageKey !== null)
      ? MessageKey.fromPartial(object.targetMessageKey)
      : undefined;
    message.encPayload = object.encPayload ?? undefined;
    message.encIv = object.encIv ?? undefined;
    message.secretEncType = object.secretEncType ?? undefined;
    return message;
  },
};

function createBaseMessage_SendPaymentMessage(): Message_SendPaymentMessage {
  return { noteMessage: undefined, requestMessageKey: undefined, background: undefined };
}

export const Message_SendPaymentMessage: MessageFns<Message_SendPaymentMessage> = {
  encode(message: Message_SendPaymentMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.noteMessage !== undefined) {
      Message.encode(message.noteMessage, writer.uint32(18).fork()).join();
    }
    if (message.requestMessageKey !== undefined) {
      MessageKey.encode(message.requestMessageKey, writer.uint32(26).fork()).join();
    }
    if (message.background !== undefined) {
      PaymentBackground.encode(message.background, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_SendPaymentMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_SendPaymentMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.noteMessage = Message.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.requestMessageKey = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.background = PaymentBackground.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_SendPaymentMessage {
    return {
      noteMessage: isSet(object.noteMessage) ? Message.fromJSON(object.noteMessage) : undefined,
      requestMessageKey: isSet(object.requestMessageKey) ? MessageKey.fromJSON(object.requestMessageKey) : undefined,
      background: isSet(object.background) ? PaymentBackground.fromJSON(object.background) : undefined,
    };
  },

  toJSON(message: Message_SendPaymentMessage): unknown {
    const obj: any = {};
    if (message.noteMessage !== undefined) {
      obj.noteMessage = Message.toJSON(message.noteMessage);
    }
    if (message.requestMessageKey !== undefined) {
      obj.requestMessageKey = MessageKey.toJSON(message.requestMessageKey);
    }
    if (message.background !== undefined) {
      obj.background = PaymentBackground.toJSON(message.background);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_SendPaymentMessage>, I>>(base?: I): Message_SendPaymentMessage {
    return Message_SendPaymentMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_SendPaymentMessage>, I>>(object: I): Message_SendPaymentMessage {
    const message = createBaseMessage_SendPaymentMessage();
    message.noteMessage = (object.noteMessage !== undefined && object.noteMessage !== null)
      ? Message.fromPartial(object.noteMessage)
      : undefined;
    message.requestMessageKey = (object.requestMessageKey !== undefined && object.requestMessageKey !== null)
      ? MessageKey.fromPartial(object.requestMessageKey)
      : undefined;
    message.background = (object.background !== undefined && object.background !== null)
      ? PaymentBackground.fromPartial(object.background)
      : undefined;
    return message;
  },
};

function createBaseMessage_SenderKeyDistributionMessage(): Message_SenderKeyDistributionMessage {
  return { groupId: undefined, axolotlSenderKeyDistributionMessage: undefined };
}

export const Message_SenderKeyDistributionMessage: MessageFns<Message_SenderKeyDistributionMessage> = {
  encode(message: Message_SenderKeyDistributionMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.groupId !== undefined) {
      writer.uint32(10).string(message.groupId);
    }
    if (message.axolotlSenderKeyDistributionMessage !== undefined) {
      writer.uint32(18).bytes(message.axolotlSenderKeyDistributionMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_SenderKeyDistributionMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_SenderKeyDistributionMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.groupId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.axolotlSenderKeyDistributionMessage = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_SenderKeyDistributionMessage {
    return {
      groupId: isSet(object.groupId) ? globalThis.String(object.groupId) : undefined,
      axolotlSenderKeyDistributionMessage: isSet(object.axolotlSenderKeyDistributionMessage)
        ? bytesFromBase64(object.axolotlSenderKeyDistributionMessage)
        : undefined,
    };
  },

  toJSON(message: Message_SenderKeyDistributionMessage): unknown {
    const obj: any = {};
    if (message.groupId !== undefined) {
      obj.groupId = message.groupId;
    }
    if (message.axolotlSenderKeyDistributionMessage !== undefined) {
      obj.axolotlSenderKeyDistributionMessage = base64FromBytes(message.axolotlSenderKeyDistributionMessage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_SenderKeyDistributionMessage>, I>>(
    base?: I,
  ): Message_SenderKeyDistributionMessage {
    return Message_SenderKeyDistributionMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_SenderKeyDistributionMessage>, I>>(
    object: I,
  ): Message_SenderKeyDistributionMessage {
    const message = createBaseMessage_SenderKeyDistributionMessage();
    message.groupId = object.groupId ?? undefined;
    message.axolotlSenderKeyDistributionMessage = object.axolotlSenderKeyDistributionMessage ?? undefined;
    return message;
  },
};

function createBaseMessage_StatusNotificationMessage(): Message_StatusNotificationMessage {
  return { responseMessageKey: undefined, originalMessageKey: undefined, type: undefined };
}

export const Message_StatusNotificationMessage: MessageFns<Message_StatusNotificationMessage> = {
  encode(message: Message_StatusNotificationMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.responseMessageKey !== undefined) {
      MessageKey.encode(message.responseMessageKey, writer.uint32(10).fork()).join();
    }
    if (message.originalMessageKey !== undefined) {
      MessageKey.encode(message.originalMessageKey, writer.uint32(18).fork()).join();
    }
    if (message.type !== undefined) {
      writer.uint32(24).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_StatusNotificationMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_StatusNotificationMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.responseMessageKey = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.originalMessageKey = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_StatusNotificationMessage {
    return {
      responseMessageKey: isSet(object.responseMessageKey) ? MessageKey.fromJSON(object.responseMessageKey) : undefined,
      originalMessageKey: isSet(object.originalMessageKey) ? MessageKey.fromJSON(object.originalMessageKey) : undefined,
      type: isSet(object.type)
        ? message_StatusNotificationMessage_StatusNotificationTypeFromJSON(object.type)
        : undefined,
    };
  },

  toJSON(message: Message_StatusNotificationMessage): unknown {
    const obj: any = {};
    if (message.responseMessageKey !== undefined) {
      obj.responseMessageKey = MessageKey.toJSON(message.responseMessageKey);
    }
    if (message.originalMessageKey !== undefined) {
      obj.originalMessageKey = MessageKey.toJSON(message.originalMessageKey);
    }
    if (message.type !== undefined) {
      obj.type = message_StatusNotificationMessage_StatusNotificationTypeToJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_StatusNotificationMessage>, I>>(
    base?: I,
  ): Message_StatusNotificationMessage {
    return Message_StatusNotificationMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_StatusNotificationMessage>, I>>(
    object: I,
  ): Message_StatusNotificationMessage {
    const message = createBaseMessage_StatusNotificationMessage();
    message.responseMessageKey = (object.responseMessageKey !== undefined && object.responseMessageKey !== null)
      ? MessageKey.fromPartial(object.responseMessageKey)
      : undefined;
    message.originalMessageKey = (object.originalMessageKey !== undefined && object.originalMessageKey !== null)
      ? MessageKey.fromPartial(object.originalMessageKey)
      : undefined;
    message.type = object.type ?? undefined;
    return message;
  },
};

function createBaseMessage_StickerMessage(): Message_StickerMessage {
  return {
    url: undefined,
    fileSha256: undefined,
    fileEncSha256: undefined,
    mediaKey: undefined,
    mimetype: undefined,
    height: undefined,
    width: undefined,
    directPath: undefined,
    fileLength: undefined,
    mediaKeyTimestamp: undefined,
    firstFrameLength: undefined,
    firstFrameSidecar: undefined,
    isAnimated: undefined,
    pngThumbnail: undefined,
    contextInfo: undefined,
    stickerSentTs: undefined,
    isAvatar: undefined,
    isAiSticker: undefined,
    isLottie: undefined,
    accessibilityLabel: undefined,
  };
}

export const Message_StickerMessage: MessageFns<Message_StickerMessage> = {
  encode(message: Message_StickerMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== undefined) {
      writer.uint32(10).string(message.url);
    }
    if (message.fileSha256 !== undefined) {
      writer.uint32(18).bytes(message.fileSha256);
    }
    if (message.fileEncSha256 !== undefined) {
      writer.uint32(26).bytes(message.fileEncSha256);
    }
    if (message.mediaKey !== undefined) {
      writer.uint32(34).bytes(message.mediaKey);
    }
    if (message.mimetype !== undefined) {
      writer.uint32(42).string(message.mimetype);
    }
    if (message.height !== undefined) {
      writer.uint32(48).uint32(message.height);
    }
    if (message.width !== undefined) {
      writer.uint32(56).uint32(message.width);
    }
    if (message.directPath !== undefined) {
      writer.uint32(66).string(message.directPath);
    }
    if (message.fileLength !== undefined) {
      writer.uint32(72).uint64(message.fileLength);
    }
    if (message.mediaKeyTimestamp !== undefined) {
      writer.uint32(80).int64(message.mediaKeyTimestamp);
    }
    if (message.firstFrameLength !== undefined) {
      writer.uint32(88).uint32(message.firstFrameLength);
    }
    if (message.firstFrameSidecar !== undefined) {
      writer.uint32(98).bytes(message.firstFrameSidecar);
    }
    if (message.isAnimated !== undefined) {
      writer.uint32(104).bool(message.isAnimated);
    }
    if (message.pngThumbnail !== undefined) {
      writer.uint32(130).bytes(message.pngThumbnail);
    }
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(138).fork()).join();
    }
    if (message.stickerSentTs !== undefined) {
      writer.uint32(144).int64(message.stickerSentTs);
    }
    if (message.isAvatar !== undefined) {
      writer.uint32(152).bool(message.isAvatar);
    }
    if (message.isAiSticker !== undefined) {
      writer.uint32(160).bool(message.isAiSticker);
    }
    if (message.isLottie !== undefined) {
      writer.uint32(168).bool(message.isLottie);
    }
    if (message.accessibilityLabel !== undefined) {
      writer.uint32(178).string(message.accessibilityLabel);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_StickerMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_StickerMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fileSha256 = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fileEncSha256 = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.mediaKey = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.mimetype = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.height = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.width = reader.uint32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.directPath = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.fileLength = longToNumber(reader.uint64());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.mediaKeyTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.firstFrameLength = reader.uint32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.firstFrameSidecar = reader.bytes();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.isAnimated = reader.bool();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.pngThumbnail = reader.bytes();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.stickerSentTs = longToNumber(reader.int64());
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.isAvatar = reader.bool();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.isAiSticker = reader.bool();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.isLottie = reader.bool();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.accessibilityLabel = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_StickerMessage {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : undefined,
      fileSha256: isSet(object.fileSha256) ? bytesFromBase64(object.fileSha256) : undefined,
      fileEncSha256: isSet(object.fileEncSha256) ? bytesFromBase64(object.fileEncSha256) : undefined,
      mediaKey: isSet(object.mediaKey) ? bytesFromBase64(object.mediaKey) : undefined,
      mimetype: isSet(object.mimetype) ? globalThis.String(object.mimetype) : undefined,
      height: isSet(object.height) ? globalThis.Number(object.height) : undefined,
      width: isSet(object.width) ? globalThis.Number(object.width) : undefined,
      directPath: isSet(object.directPath) ? globalThis.String(object.directPath) : undefined,
      fileLength: isSet(object.fileLength) ? globalThis.Number(object.fileLength) : undefined,
      mediaKeyTimestamp: isSet(object.mediaKeyTimestamp) ? globalThis.Number(object.mediaKeyTimestamp) : undefined,
      firstFrameLength: isSet(object.firstFrameLength) ? globalThis.Number(object.firstFrameLength) : undefined,
      firstFrameSidecar: isSet(object.firstFrameSidecar) ? bytesFromBase64(object.firstFrameSidecar) : undefined,
      isAnimated: isSet(object.isAnimated) ? globalThis.Boolean(object.isAnimated) : undefined,
      pngThumbnail: isSet(object.pngThumbnail) ? bytesFromBase64(object.pngThumbnail) : undefined,
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
      stickerSentTs: isSet(object.stickerSentTs) ? globalThis.Number(object.stickerSentTs) : undefined,
      isAvatar: isSet(object.isAvatar) ? globalThis.Boolean(object.isAvatar) : undefined,
      isAiSticker: isSet(object.isAiSticker) ? globalThis.Boolean(object.isAiSticker) : undefined,
      isLottie: isSet(object.isLottie) ? globalThis.Boolean(object.isLottie) : undefined,
      accessibilityLabel: isSet(object.accessibilityLabel) ? globalThis.String(object.accessibilityLabel) : undefined,
    };
  },

  toJSON(message: Message_StickerMessage): unknown {
    const obj: any = {};
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    if (message.fileSha256 !== undefined) {
      obj.fileSha256 = base64FromBytes(message.fileSha256);
    }
    if (message.fileEncSha256 !== undefined) {
      obj.fileEncSha256 = base64FromBytes(message.fileEncSha256);
    }
    if (message.mediaKey !== undefined) {
      obj.mediaKey = base64FromBytes(message.mediaKey);
    }
    if (message.mimetype !== undefined) {
      obj.mimetype = message.mimetype;
    }
    if (message.height !== undefined) {
      obj.height = Math.round(message.height);
    }
    if (message.width !== undefined) {
      obj.width = Math.round(message.width);
    }
    if (message.directPath !== undefined) {
      obj.directPath = message.directPath;
    }
    if (message.fileLength !== undefined) {
      obj.fileLength = Math.round(message.fileLength);
    }
    if (message.mediaKeyTimestamp !== undefined) {
      obj.mediaKeyTimestamp = Math.round(message.mediaKeyTimestamp);
    }
    if (message.firstFrameLength !== undefined) {
      obj.firstFrameLength = Math.round(message.firstFrameLength);
    }
    if (message.firstFrameSidecar !== undefined) {
      obj.firstFrameSidecar = base64FromBytes(message.firstFrameSidecar);
    }
    if (message.isAnimated !== undefined) {
      obj.isAnimated = message.isAnimated;
    }
    if (message.pngThumbnail !== undefined) {
      obj.pngThumbnail = base64FromBytes(message.pngThumbnail);
    }
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    if (message.stickerSentTs !== undefined) {
      obj.stickerSentTs = Math.round(message.stickerSentTs);
    }
    if (message.isAvatar !== undefined) {
      obj.isAvatar = message.isAvatar;
    }
    if (message.isAiSticker !== undefined) {
      obj.isAiSticker = message.isAiSticker;
    }
    if (message.isLottie !== undefined) {
      obj.isLottie = message.isLottie;
    }
    if (message.accessibilityLabel !== undefined) {
      obj.accessibilityLabel = message.accessibilityLabel;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_StickerMessage>, I>>(base?: I): Message_StickerMessage {
    return Message_StickerMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_StickerMessage>, I>>(object: I): Message_StickerMessage {
    const message = createBaseMessage_StickerMessage();
    message.url = object.url ?? undefined;
    message.fileSha256 = object.fileSha256 ?? undefined;
    message.fileEncSha256 = object.fileEncSha256 ?? undefined;
    message.mediaKey = object.mediaKey ?? undefined;
    message.mimetype = object.mimetype ?? undefined;
    message.height = object.height ?? undefined;
    message.width = object.width ?? undefined;
    message.directPath = object.directPath ?? undefined;
    message.fileLength = object.fileLength ?? undefined;
    message.mediaKeyTimestamp = object.mediaKeyTimestamp ?? undefined;
    message.firstFrameLength = object.firstFrameLength ?? undefined;
    message.firstFrameSidecar = object.firstFrameSidecar ?? undefined;
    message.isAnimated = object.isAnimated ?? undefined;
    message.pngThumbnail = object.pngThumbnail ?? undefined;
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    message.stickerSentTs = object.stickerSentTs ?? undefined;
    message.isAvatar = object.isAvatar ?? undefined;
    message.isAiSticker = object.isAiSticker ?? undefined;
    message.isLottie = object.isLottie ?? undefined;
    message.accessibilityLabel = object.accessibilityLabel ?? undefined;
    return message;
  },
};

function createBaseMessage_StickerPackMessage(): Message_StickerPackMessage {
  return {
    stickerPackId: undefined,
    name: undefined,
    publisher: undefined,
    stickers: [],
    fileLength: undefined,
    fileSha256: undefined,
    fileEncSha256: undefined,
    mediaKey: undefined,
    directPath: undefined,
    caption: undefined,
    contextInfo: undefined,
    packDescription: undefined,
    mediaKeyTimestamp: undefined,
    trayIconFileName: undefined,
    thumbnailDirectPath: undefined,
    thumbnailSha256: undefined,
    thumbnailEncSha256: undefined,
    thumbnailHeight: undefined,
    thumbnailWidth: undefined,
    imageDataHash: undefined,
    stickerPackSize: undefined,
    stickerPackOrigin: undefined,
  };
}

export const Message_StickerPackMessage: MessageFns<Message_StickerPackMessage> = {
  encode(message: Message_StickerPackMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stickerPackId !== undefined) {
      writer.uint32(10).string(message.stickerPackId);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.publisher !== undefined) {
      writer.uint32(26).string(message.publisher);
    }
    for (const v of message.stickers) {
      Message_StickerPackMessage_Sticker.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.fileLength !== undefined) {
      writer.uint32(40).uint64(message.fileLength);
    }
    if (message.fileSha256 !== undefined) {
      writer.uint32(50).bytes(message.fileSha256);
    }
    if (message.fileEncSha256 !== undefined) {
      writer.uint32(58).bytes(message.fileEncSha256);
    }
    if (message.mediaKey !== undefined) {
      writer.uint32(66).bytes(message.mediaKey);
    }
    if (message.directPath !== undefined) {
      writer.uint32(74).string(message.directPath);
    }
    if (message.caption !== undefined) {
      writer.uint32(82).string(message.caption);
    }
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(90).fork()).join();
    }
    if (message.packDescription !== undefined) {
      writer.uint32(98).string(message.packDescription);
    }
    if (message.mediaKeyTimestamp !== undefined) {
      writer.uint32(104).int64(message.mediaKeyTimestamp);
    }
    if (message.trayIconFileName !== undefined) {
      writer.uint32(114).string(message.trayIconFileName);
    }
    if (message.thumbnailDirectPath !== undefined) {
      writer.uint32(122).string(message.thumbnailDirectPath);
    }
    if (message.thumbnailSha256 !== undefined) {
      writer.uint32(130).bytes(message.thumbnailSha256);
    }
    if (message.thumbnailEncSha256 !== undefined) {
      writer.uint32(138).bytes(message.thumbnailEncSha256);
    }
    if (message.thumbnailHeight !== undefined) {
      writer.uint32(144).uint32(message.thumbnailHeight);
    }
    if (message.thumbnailWidth !== undefined) {
      writer.uint32(152).uint32(message.thumbnailWidth);
    }
    if (message.imageDataHash !== undefined) {
      writer.uint32(162).string(message.imageDataHash);
    }
    if (message.stickerPackSize !== undefined) {
      writer.uint32(168).uint64(message.stickerPackSize);
    }
    if (message.stickerPackOrigin !== undefined) {
      writer.uint32(176).int32(message.stickerPackOrigin);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_StickerPackMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_StickerPackMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stickerPackId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.publisher = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.stickers.push(Message_StickerPackMessage_Sticker.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.fileLength = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.fileSha256 = reader.bytes();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.fileEncSha256 = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.mediaKey = reader.bytes();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.directPath = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.caption = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.packDescription = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.mediaKeyTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.trayIconFileName = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.thumbnailDirectPath = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.thumbnailSha256 = reader.bytes();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.thumbnailEncSha256 = reader.bytes();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.thumbnailHeight = reader.uint32();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.thumbnailWidth = reader.uint32();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.imageDataHash = reader.string();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.stickerPackSize = longToNumber(reader.uint64());
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.stickerPackOrigin = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_StickerPackMessage {
    return {
      stickerPackId: isSet(object.stickerPackId) ? globalThis.String(object.stickerPackId) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      publisher: isSet(object.publisher) ? globalThis.String(object.publisher) : undefined,
      stickers: globalThis.Array.isArray(object?.stickers)
        ? object.stickers.map((e: any) => Message_StickerPackMessage_Sticker.fromJSON(e))
        : [],
      fileLength: isSet(object.fileLength) ? globalThis.Number(object.fileLength) : undefined,
      fileSha256: isSet(object.fileSha256) ? bytesFromBase64(object.fileSha256) : undefined,
      fileEncSha256: isSet(object.fileEncSha256) ? bytesFromBase64(object.fileEncSha256) : undefined,
      mediaKey: isSet(object.mediaKey) ? bytesFromBase64(object.mediaKey) : undefined,
      directPath: isSet(object.directPath) ? globalThis.String(object.directPath) : undefined,
      caption: isSet(object.caption) ? globalThis.String(object.caption) : undefined,
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
      packDescription: isSet(object.packDescription) ? globalThis.String(object.packDescription) : undefined,
      mediaKeyTimestamp: isSet(object.mediaKeyTimestamp) ? globalThis.Number(object.mediaKeyTimestamp) : undefined,
      trayIconFileName: isSet(object.trayIconFileName) ? globalThis.String(object.trayIconFileName) : undefined,
      thumbnailDirectPath: isSet(object.thumbnailDirectPath)
        ? globalThis.String(object.thumbnailDirectPath)
        : undefined,
      thumbnailSha256: isSet(object.thumbnailSha256) ? bytesFromBase64(object.thumbnailSha256) : undefined,
      thumbnailEncSha256: isSet(object.thumbnailEncSha256) ? bytesFromBase64(object.thumbnailEncSha256) : undefined,
      thumbnailHeight: isSet(object.thumbnailHeight) ? globalThis.Number(object.thumbnailHeight) : undefined,
      thumbnailWidth: isSet(object.thumbnailWidth) ? globalThis.Number(object.thumbnailWidth) : undefined,
      imageDataHash: isSet(object.imageDataHash) ? globalThis.String(object.imageDataHash) : undefined,
      stickerPackSize: isSet(object.stickerPackSize) ? globalThis.Number(object.stickerPackSize) : undefined,
      stickerPackOrigin: isSet(object.stickerPackOrigin)
        ? message_StickerPackMessage_StickerPackOriginFromJSON(object.stickerPackOrigin)
        : undefined,
    };
  },

  toJSON(message: Message_StickerPackMessage): unknown {
    const obj: any = {};
    if (message.stickerPackId !== undefined) {
      obj.stickerPackId = message.stickerPackId;
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.publisher !== undefined) {
      obj.publisher = message.publisher;
    }
    if (message.stickers?.length) {
      obj.stickers = message.stickers.map((e) => Message_StickerPackMessage_Sticker.toJSON(e));
    }
    if (message.fileLength !== undefined) {
      obj.fileLength = Math.round(message.fileLength);
    }
    if (message.fileSha256 !== undefined) {
      obj.fileSha256 = base64FromBytes(message.fileSha256);
    }
    if (message.fileEncSha256 !== undefined) {
      obj.fileEncSha256 = base64FromBytes(message.fileEncSha256);
    }
    if (message.mediaKey !== undefined) {
      obj.mediaKey = base64FromBytes(message.mediaKey);
    }
    if (message.directPath !== undefined) {
      obj.directPath = message.directPath;
    }
    if (message.caption !== undefined) {
      obj.caption = message.caption;
    }
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    if (message.packDescription !== undefined) {
      obj.packDescription = message.packDescription;
    }
    if (message.mediaKeyTimestamp !== undefined) {
      obj.mediaKeyTimestamp = Math.round(message.mediaKeyTimestamp);
    }
    if (message.trayIconFileName !== undefined) {
      obj.trayIconFileName = message.trayIconFileName;
    }
    if (message.thumbnailDirectPath !== undefined) {
      obj.thumbnailDirectPath = message.thumbnailDirectPath;
    }
    if (message.thumbnailSha256 !== undefined) {
      obj.thumbnailSha256 = base64FromBytes(message.thumbnailSha256);
    }
    if (message.thumbnailEncSha256 !== undefined) {
      obj.thumbnailEncSha256 = base64FromBytes(message.thumbnailEncSha256);
    }
    if (message.thumbnailHeight !== undefined) {
      obj.thumbnailHeight = Math.round(message.thumbnailHeight);
    }
    if (message.thumbnailWidth !== undefined) {
      obj.thumbnailWidth = Math.round(message.thumbnailWidth);
    }
    if (message.imageDataHash !== undefined) {
      obj.imageDataHash = message.imageDataHash;
    }
    if (message.stickerPackSize !== undefined) {
      obj.stickerPackSize = Math.round(message.stickerPackSize);
    }
    if (message.stickerPackOrigin !== undefined) {
      obj.stickerPackOrigin = message_StickerPackMessage_StickerPackOriginToJSON(message.stickerPackOrigin);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_StickerPackMessage>, I>>(base?: I): Message_StickerPackMessage {
    return Message_StickerPackMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_StickerPackMessage>, I>>(object: I): Message_StickerPackMessage {
    const message = createBaseMessage_StickerPackMessage();
    message.stickerPackId = object.stickerPackId ?? undefined;
    message.name = object.name ?? undefined;
    message.publisher = object.publisher ?? undefined;
    message.stickers = object.stickers?.map((e) => Message_StickerPackMessage_Sticker.fromPartial(e)) || [];
    message.fileLength = object.fileLength ?? undefined;
    message.fileSha256 = object.fileSha256 ?? undefined;
    message.fileEncSha256 = object.fileEncSha256 ?? undefined;
    message.mediaKey = object.mediaKey ?? undefined;
    message.directPath = object.directPath ?? undefined;
    message.caption = object.caption ?? undefined;
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    message.packDescription = object.packDescription ?? undefined;
    message.mediaKeyTimestamp = object.mediaKeyTimestamp ?? undefined;
    message.trayIconFileName = object.trayIconFileName ?? undefined;
    message.thumbnailDirectPath = object.thumbnailDirectPath ?? undefined;
    message.thumbnailSha256 = object.thumbnailSha256 ?? undefined;
    message.thumbnailEncSha256 = object.thumbnailEncSha256 ?? undefined;
    message.thumbnailHeight = object.thumbnailHeight ?? undefined;
    message.thumbnailWidth = object.thumbnailWidth ?? undefined;
    message.imageDataHash = object.imageDataHash ?? undefined;
    message.stickerPackSize = object.stickerPackSize ?? undefined;
    message.stickerPackOrigin = object.stickerPackOrigin ?? undefined;
    return message;
  },
};

function createBaseMessage_StickerPackMessage_Sticker(): Message_StickerPackMessage_Sticker {
  return {
    fileName: undefined,
    isAnimated: undefined,
    emojis: [],
    accessibilityLabel: undefined,
    isLottie: undefined,
    mimetype: undefined,
  };
}

export const Message_StickerPackMessage_Sticker: MessageFns<Message_StickerPackMessage_Sticker> = {
  encode(message: Message_StickerPackMessage_Sticker, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fileName !== undefined) {
      writer.uint32(10).string(message.fileName);
    }
    if (message.isAnimated !== undefined) {
      writer.uint32(16).bool(message.isAnimated);
    }
    for (const v of message.emojis) {
      writer.uint32(26).string(v!);
    }
    if (message.accessibilityLabel !== undefined) {
      writer.uint32(34).string(message.accessibilityLabel);
    }
    if (message.isLottie !== undefined) {
      writer.uint32(40).bool(message.isLottie);
    }
    if (message.mimetype !== undefined) {
      writer.uint32(50).string(message.mimetype);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_StickerPackMessage_Sticker {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_StickerPackMessage_Sticker();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fileName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isAnimated = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.emojis.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.accessibilityLabel = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isLottie = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.mimetype = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_StickerPackMessage_Sticker {
    return {
      fileName: isSet(object.fileName) ? globalThis.String(object.fileName) : undefined,
      isAnimated: isSet(object.isAnimated) ? globalThis.Boolean(object.isAnimated) : undefined,
      emojis: globalThis.Array.isArray(object?.emojis) ? object.emojis.map((e: any) => globalThis.String(e)) : [],
      accessibilityLabel: isSet(object.accessibilityLabel) ? globalThis.String(object.accessibilityLabel) : undefined,
      isLottie: isSet(object.isLottie) ? globalThis.Boolean(object.isLottie) : undefined,
      mimetype: isSet(object.mimetype) ? globalThis.String(object.mimetype) : undefined,
    };
  },

  toJSON(message: Message_StickerPackMessage_Sticker): unknown {
    const obj: any = {};
    if (message.fileName !== undefined) {
      obj.fileName = message.fileName;
    }
    if (message.isAnimated !== undefined) {
      obj.isAnimated = message.isAnimated;
    }
    if (message.emojis?.length) {
      obj.emojis = message.emojis;
    }
    if (message.accessibilityLabel !== undefined) {
      obj.accessibilityLabel = message.accessibilityLabel;
    }
    if (message.isLottie !== undefined) {
      obj.isLottie = message.isLottie;
    }
    if (message.mimetype !== undefined) {
      obj.mimetype = message.mimetype;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_StickerPackMessage_Sticker>, I>>(
    base?: I,
  ): Message_StickerPackMessage_Sticker {
    return Message_StickerPackMessage_Sticker.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_StickerPackMessage_Sticker>, I>>(
    object: I,
  ): Message_StickerPackMessage_Sticker {
    const message = createBaseMessage_StickerPackMessage_Sticker();
    message.fileName = object.fileName ?? undefined;
    message.isAnimated = object.isAnimated ?? undefined;
    message.emojis = object.emojis?.map((e) => e) || [];
    message.accessibilityLabel = object.accessibilityLabel ?? undefined;
    message.isLottie = object.isLottie ?? undefined;
    message.mimetype = object.mimetype ?? undefined;
    return message;
  },
};

function createBaseMessage_StickerSyncRMRMessage(): Message_StickerSyncRMRMessage {
  return { filehash: [], rmrSource: undefined, requestTimestamp: undefined };
}

export const Message_StickerSyncRMRMessage: MessageFns<Message_StickerSyncRMRMessage> = {
  encode(message: Message_StickerSyncRMRMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.filehash) {
      writer.uint32(10).string(v!);
    }
    if (message.rmrSource !== undefined) {
      writer.uint32(18).string(message.rmrSource);
    }
    if (message.requestTimestamp !== undefined) {
      writer.uint32(24).int64(message.requestTimestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_StickerSyncRMRMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_StickerSyncRMRMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filehash.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rmrSource = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.requestTimestamp = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_StickerSyncRMRMessage {
    return {
      filehash: globalThis.Array.isArray(object?.filehash) ? object.filehash.map((e: any) => globalThis.String(e)) : [],
      rmrSource: isSet(object.rmrSource) ? globalThis.String(object.rmrSource) : undefined,
      requestTimestamp: isSet(object.requestTimestamp) ? globalThis.Number(object.requestTimestamp) : undefined,
    };
  },

  toJSON(message: Message_StickerSyncRMRMessage): unknown {
    const obj: any = {};
    if (message.filehash?.length) {
      obj.filehash = message.filehash;
    }
    if (message.rmrSource !== undefined) {
      obj.rmrSource = message.rmrSource;
    }
    if (message.requestTimestamp !== undefined) {
      obj.requestTimestamp = Math.round(message.requestTimestamp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_StickerSyncRMRMessage>, I>>(base?: I): Message_StickerSyncRMRMessage {
    return Message_StickerSyncRMRMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_StickerSyncRMRMessage>, I>>(
    object: I,
  ): Message_StickerSyncRMRMessage {
    const message = createBaseMessage_StickerSyncRMRMessage();
    message.filehash = object.filehash?.map((e) => e) || [];
    message.rmrSource = object.rmrSource ?? undefined;
    message.requestTimestamp = object.requestTimestamp ?? undefined;
    return message;
  },
};

function createBaseMessage_TemplateButtonReplyMessage(): Message_TemplateButtonReplyMessage {
  return {
    selectedId: undefined,
    selectedDisplayText: undefined,
    contextInfo: undefined,
    selectedIndex: undefined,
    selectedCarouselCardIndex: undefined,
  };
}

export const Message_TemplateButtonReplyMessage: MessageFns<Message_TemplateButtonReplyMessage> = {
  encode(message: Message_TemplateButtonReplyMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.selectedId !== undefined) {
      writer.uint32(10).string(message.selectedId);
    }
    if (message.selectedDisplayText !== undefined) {
      writer.uint32(18).string(message.selectedDisplayText);
    }
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(26).fork()).join();
    }
    if (message.selectedIndex !== undefined) {
      writer.uint32(32).uint32(message.selectedIndex);
    }
    if (message.selectedCarouselCardIndex !== undefined) {
      writer.uint32(40).uint32(message.selectedCarouselCardIndex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_TemplateButtonReplyMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_TemplateButtonReplyMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.selectedId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.selectedDisplayText = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.selectedIndex = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.selectedCarouselCardIndex = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_TemplateButtonReplyMessage {
    return {
      selectedId: isSet(object.selectedId) ? globalThis.String(object.selectedId) : undefined,
      selectedDisplayText: isSet(object.selectedDisplayText)
        ? globalThis.String(object.selectedDisplayText)
        : undefined,
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
      selectedIndex: isSet(object.selectedIndex) ? globalThis.Number(object.selectedIndex) : undefined,
      selectedCarouselCardIndex: isSet(object.selectedCarouselCardIndex)
        ? globalThis.Number(object.selectedCarouselCardIndex)
        : undefined,
    };
  },

  toJSON(message: Message_TemplateButtonReplyMessage): unknown {
    const obj: any = {};
    if (message.selectedId !== undefined) {
      obj.selectedId = message.selectedId;
    }
    if (message.selectedDisplayText !== undefined) {
      obj.selectedDisplayText = message.selectedDisplayText;
    }
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    if (message.selectedIndex !== undefined) {
      obj.selectedIndex = Math.round(message.selectedIndex);
    }
    if (message.selectedCarouselCardIndex !== undefined) {
      obj.selectedCarouselCardIndex = Math.round(message.selectedCarouselCardIndex);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_TemplateButtonReplyMessage>, I>>(
    base?: I,
  ): Message_TemplateButtonReplyMessage {
    return Message_TemplateButtonReplyMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_TemplateButtonReplyMessage>, I>>(
    object: I,
  ): Message_TemplateButtonReplyMessage {
    const message = createBaseMessage_TemplateButtonReplyMessage();
    message.selectedId = object.selectedId ?? undefined;
    message.selectedDisplayText = object.selectedDisplayText ?? undefined;
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    message.selectedIndex = object.selectedIndex ?? undefined;
    message.selectedCarouselCardIndex = object.selectedCarouselCardIndex ?? undefined;
    return message;
  },
};

function createBaseMessage_TemplateMessage(): Message_TemplateMessage {
  return {
    contextInfo: undefined,
    hydratedTemplate: undefined,
    templateId: undefined,
    fourRowTemplate: undefined,
    hydratedFourRowTemplate: undefined,
    interactiveMessageTemplate: undefined,
  };
}

export const Message_TemplateMessage: MessageFns<Message_TemplateMessage> = {
  encode(message: Message_TemplateMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(26).fork()).join();
    }
    if (message.hydratedTemplate !== undefined) {
      Message_TemplateMessage_HydratedFourRowTemplate.encode(message.hydratedTemplate, writer.uint32(34).fork()).join();
    }
    if (message.templateId !== undefined) {
      writer.uint32(74).string(message.templateId);
    }
    if (message.fourRowTemplate !== undefined) {
      Message_TemplateMessage_FourRowTemplate.encode(message.fourRowTemplate, writer.uint32(10).fork()).join();
    }
    if (message.hydratedFourRowTemplate !== undefined) {
      Message_TemplateMessage_HydratedFourRowTemplate.encode(message.hydratedFourRowTemplate, writer.uint32(18).fork())
        .join();
    }
    if (message.interactiveMessageTemplate !== undefined) {
      Message_InteractiveMessage.encode(message.interactiveMessageTemplate, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_TemplateMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_TemplateMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.hydratedTemplate = Message_TemplateMessage_HydratedFourRowTemplate.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.templateId = reader.string();
          continue;
        }
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fourRowTemplate = Message_TemplateMessage_FourRowTemplate.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.hydratedFourRowTemplate = Message_TemplateMessage_HydratedFourRowTemplate.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.interactiveMessageTemplate = Message_InteractiveMessage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_TemplateMessage {
    return {
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
      hydratedTemplate: isSet(object.hydratedTemplate)
        ? Message_TemplateMessage_HydratedFourRowTemplate.fromJSON(object.hydratedTemplate)
        : undefined,
      templateId: isSet(object.templateId) ? globalThis.String(object.templateId) : undefined,
      fourRowTemplate: isSet(object.fourRowTemplate)
        ? Message_TemplateMessage_FourRowTemplate.fromJSON(object.fourRowTemplate)
        : undefined,
      hydratedFourRowTemplate: isSet(object.hydratedFourRowTemplate)
        ? Message_TemplateMessage_HydratedFourRowTemplate.fromJSON(object.hydratedFourRowTemplate)
        : undefined,
      interactiveMessageTemplate: isSet(object.interactiveMessageTemplate)
        ? Message_InteractiveMessage.fromJSON(object.interactiveMessageTemplate)
        : undefined,
    };
  },

  toJSON(message: Message_TemplateMessage): unknown {
    const obj: any = {};
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    if (message.hydratedTemplate !== undefined) {
      obj.hydratedTemplate = Message_TemplateMessage_HydratedFourRowTemplate.toJSON(message.hydratedTemplate);
    }
    if (message.templateId !== undefined) {
      obj.templateId = message.templateId;
    }
    if (message.fourRowTemplate !== undefined) {
      obj.fourRowTemplate = Message_TemplateMessage_FourRowTemplate.toJSON(message.fourRowTemplate);
    }
    if (message.hydratedFourRowTemplate !== undefined) {
      obj.hydratedFourRowTemplate = Message_TemplateMessage_HydratedFourRowTemplate.toJSON(
        message.hydratedFourRowTemplate,
      );
    }
    if (message.interactiveMessageTemplate !== undefined) {
      obj.interactiveMessageTemplate = Message_InteractiveMessage.toJSON(message.interactiveMessageTemplate);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_TemplateMessage>, I>>(base?: I): Message_TemplateMessage {
    return Message_TemplateMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_TemplateMessage>, I>>(object: I): Message_TemplateMessage {
    const message = createBaseMessage_TemplateMessage();
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    message.hydratedTemplate = (object.hydratedTemplate !== undefined && object.hydratedTemplate !== null)
      ? Message_TemplateMessage_HydratedFourRowTemplate.fromPartial(object.hydratedTemplate)
      : undefined;
    message.templateId = object.templateId ?? undefined;
    message.fourRowTemplate = (object.fourRowTemplate !== undefined && object.fourRowTemplate !== null)
      ? Message_TemplateMessage_FourRowTemplate.fromPartial(object.fourRowTemplate)
      : undefined;
    message.hydratedFourRowTemplate =
      (object.hydratedFourRowTemplate !== undefined && object.hydratedFourRowTemplate !== null)
        ? Message_TemplateMessage_HydratedFourRowTemplate.fromPartial(object.hydratedFourRowTemplate)
        : undefined;
    message.interactiveMessageTemplate =
      (object.interactiveMessageTemplate !== undefined && object.interactiveMessageTemplate !== null)
        ? Message_InteractiveMessage.fromPartial(object.interactiveMessageTemplate)
        : undefined;
    return message;
  },
};

function createBaseMessage_TemplateMessage_FourRowTemplate(): Message_TemplateMessage_FourRowTemplate {
  return {
    content: undefined,
    footer: undefined,
    buttons: [],
    documentMessage: undefined,
    highlyStructuredMessage: undefined,
    imageMessage: undefined,
    videoMessage: undefined,
    locationMessage: undefined,
  };
}

export const Message_TemplateMessage_FourRowTemplate: MessageFns<Message_TemplateMessage_FourRowTemplate> = {
  encode(message: Message_TemplateMessage_FourRowTemplate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.content !== undefined) {
      Message_HighlyStructuredMessage.encode(message.content, writer.uint32(50).fork()).join();
    }
    if (message.footer !== undefined) {
      Message_HighlyStructuredMessage.encode(message.footer, writer.uint32(58).fork()).join();
    }
    for (const v of message.buttons) {
      TemplateButton.encode(v!, writer.uint32(66).fork()).join();
    }
    if (message.documentMessage !== undefined) {
      Message_DocumentMessage.encode(message.documentMessage, writer.uint32(10).fork()).join();
    }
    if (message.highlyStructuredMessage !== undefined) {
      Message_HighlyStructuredMessage.encode(message.highlyStructuredMessage, writer.uint32(18).fork()).join();
    }
    if (message.imageMessage !== undefined) {
      Message_ImageMessage.encode(message.imageMessage, writer.uint32(26).fork()).join();
    }
    if (message.videoMessage !== undefined) {
      Message_VideoMessage.encode(message.videoMessage, writer.uint32(34).fork()).join();
    }
    if (message.locationMessage !== undefined) {
      Message_LocationMessage.encode(message.locationMessage, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_TemplateMessage_FourRowTemplate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_TemplateMessage_FourRowTemplate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.content = Message_HighlyStructuredMessage.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.footer = Message_HighlyStructuredMessage.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.buttons.push(TemplateButton.decode(reader, reader.uint32()));
          continue;
        }
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.documentMessage = Message_DocumentMessage.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.highlyStructuredMessage = Message_HighlyStructuredMessage.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.imageMessage = Message_ImageMessage.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.videoMessage = Message_VideoMessage.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.locationMessage = Message_LocationMessage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_TemplateMessage_FourRowTemplate {
    return {
      content: isSet(object.content) ? Message_HighlyStructuredMessage.fromJSON(object.content) : undefined,
      footer: isSet(object.footer) ? Message_HighlyStructuredMessage.fromJSON(object.footer) : undefined,
      buttons: globalThis.Array.isArray(object?.buttons)
        ? object.buttons.map((e: any) => TemplateButton.fromJSON(e))
        : [],
      documentMessage: isSet(object.documentMessage)
        ? Message_DocumentMessage.fromJSON(object.documentMessage)
        : undefined,
      highlyStructuredMessage: isSet(object.highlyStructuredMessage)
        ? Message_HighlyStructuredMessage.fromJSON(object.highlyStructuredMessage)
        : undefined,
      imageMessage: isSet(object.imageMessage) ? Message_ImageMessage.fromJSON(object.imageMessage) : undefined,
      videoMessage: isSet(object.videoMessage) ? Message_VideoMessage.fromJSON(object.videoMessage) : undefined,
      locationMessage: isSet(object.locationMessage)
        ? Message_LocationMessage.fromJSON(object.locationMessage)
        : undefined,
    };
  },

  toJSON(message: Message_TemplateMessage_FourRowTemplate): unknown {
    const obj: any = {};
    if (message.content !== undefined) {
      obj.content = Message_HighlyStructuredMessage.toJSON(message.content);
    }
    if (message.footer !== undefined) {
      obj.footer = Message_HighlyStructuredMessage.toJSON(message.footer);
    }
    if (message.buttons?.length) {
      obj.buttons = message.buttons.map((e) => TemplateButton.toJSON(e));
    }
    if (message.documentMessage !== undefined) {
      obj.documentMessage = Message_DocumentMessage.toJSON(message.documentMessage);
    }
    if (message.highlyStructuredMessage !== undefined) {
      obj.highlyStructuredMessage = Message_HighlyStructuredMessage.toJSON(message.highlyStructuredMessage);
    }
    if (message.imageMessage !== undefined) {
      obj.imageMessage = Message_ImageMessage.toJSON(message.imageMessage);
    }
    if (message.videoMessage !== undefined) {
      obj.videoMessage = Message_VideoMessage.toJSON(message.videoMessage);
    }
    if (message.locationMessage !== undefined) {
      obj.locationMessage = Message_LocationMessage.toJSON(message.locationMessage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_TemplateMessage_FourRowTemplate>, I>>(
    base?: I,
  ): Message_TemplateMessage_FourRowTemplate {
    return Message_TemplateMessage_FourRowTemplate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_TemplateMessage_FourRowTemplate>, I>>(
    object: I,
  ): Message_TemplateMessage_FourRowTemplate {
    const message = createBaseMessage_TemplateMessage_FourRowTemplate();
    message.content = (object.content !== undefined && object.content !== null)
      ? Message_HighlyStructuredMessage.fromPartial(object.content)
      : undefined;
    message.footer = (object.footer !== undefined && object.footer !== null)
      ? Message_HighlyStructuredMessage.fromPartial(object.footer)
      : undefined;
    message.buttons = object.buttons?.map((e) => TemplateButton.fromPartial(e)) || [];
    message.documentMessage = (object.documentMessage !== undefined && object.documentMessage !== null)
      ? Message_DocumentMessage.fromPartial(object.documentMessage)
      : undefined;
    message.highlyStructuredMessage =
      (object.highlyStructuredMessage !== undefined && object.highlyStructuredMessage !== null)
        ? Message_HighlyStructuredMessage.fromPartial(object.highlyStructuredMessage)
        : undefined;
    message.imageMessage = (object.imageMessage !== undefined && object.imageMessage !== null)
      ? Message_ImageMessage.fromPartial(object.imageMessage)
      : undefined;
    message.videoMessage = (object.videoMessage !== undefined && object.videoMessage !== null)
      ? Message_VideoMessage.fromPartial(object.videoMessage)
      : undefined;
    message.locationMessage = (object.locationMessage !== undefined && object.locationMessage !== null)
      ? Message_LocationMessage.fromPartial(object.locationMessage)
      : undefined;
    return message;
  },
};

function createBaseMessage_TemplateMessage_HydratedFourRowTemplate(): Message_TemplateMessage_HydratedFourRowTemplate {
  return {
    hydratedContentText: undefined,
    hydratedFooterText: undefined,
    hydratedButtons: [],
    templateId: undefined,
    maskLinkedDevices: undefined,
    documentMessage: undefined,
    hydratedTitleText: undefined,
    imageMessage: undefined,
    videoMessage: undefined,
    locationMessage: undefined,
  };
}

export const Message_TemplateMessage_HydratedFourRowTemplate: MessageFns<
  Message_TemplateMessage_HydratedFourRowTemplate
> = {
  encode(
    message: Message_TemplateMessage_HydratedFourRowTemplate,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.hydratedContentText !== undefined) {
      writer.uint32(50).string(message.hydratedContentText);
    }
    if (message.hydratedFooterText !== undefined) {
      writer.uint32(58).string(message.hydratedFooterText);
    }
    for (const v of message.hydratedButtons) {
      HydratedTemplateButton.encode(v!, writer.uint32(66).fork()).join();
    }
    if (message.templateId !== undefined) {
      writer.uint32(74).string(message.templateId);
    }
    if (message.maskLinkedDevices !== undefined) {
      writer.uint32(80).bool(message.maskLinkedDevices);
    }
    if (message.documentMessage !== undefined) {
      Message_DocumentMessage.encode(message.documentMessage, writer.uint32(10).fork()).join();
    }
    if (message.hydratedTitleText !== undefined) {
      writer.uint32(18).string(message.hydratedTitleText);
    }
    if (message.imageMessage !== undefined) {
      Message_ImageMessage.encode(message.imageMessage, writer.uint32(26).fork()).join();
    }
    if (message.videoMessage !== undefined) {
      Message_VideoMessage.encode(message.videoMessage, writer.uint32(34).fork()).join();
    }
    if (message.locationMessage !== undefined) {
      Message_LocationMessage.encode(message.locationMessage, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_TemplateMessage_HydratedFourRowTemplate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_TemplateMessage_HydratedFourRowTemplate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.hydratedContentText = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.hydratedFooterText = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.hydratedButtons.push(HydratedTemplateButton.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.templateId = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.maskLinkedDevices = reader.bool();
          continue;
        }
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.documentMessage = Message_DocumentMessage.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.hydratedTitleText = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.imageMessage = Message_ImageMessage.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.videoMessage = Message_VideoMessage.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.locationMessage = Message_LocationMessage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_TemplateMessage_HydratedFourRowTemplate {
    return {
      hydratedContentText: isSet(object.hydratedContentText)
        ? globalThis.String(object.hydratedContentText)
        : undefined,
      hydratedFooterText: isSet(object.hydratedFooterText) ? globalThis.String(object.hydratedFooterText) : undefined,
      hydratedButtons: globalThis.Array.isArray(object?.hydratedButtons)
        ? object.hydratedButtons.map((e: any) => HydratedTemplateButton.fromJSON(e))
        : [],
      templateId: isSet(object.templateId) ? globalThis.String(object.templateId) : undefined,
      maskLinkedDevices: isSet(object.maskLinkedDevices) ? globalThis.Boolean(object.maskLinkedDevices) : undefined,
      documentMessage: isSet(object.documentMessage)
        ? Message_DocumentMessage.fromJSON(object.documentMessage)
        : undefined,
      hydratedTitleText: isSet(object.hydratedTitleText) ? globalThis.String(object.hydratedTitleText) : undefined,
      imageMessage: isSet(object.imageMessage) ? Message_ImageMessage.fromJSON(object.imageMessage) : undefined,
      videoMessage: isSet(object.videoMessage) ? Message_VideoMessage.fromJSON(object.videoMessage) : undefined,
      locationMessage: isSet(object.locationMessage)
        ? Message_LocationMessage.fromJSON(object.locationMessage)
        : undefined,
    };
  },

  toJSON(message: Message_TemplateMessage_HydratedFourRowTemplate): unknown {
    const obj: any = {};
    if (message.hydratedContentText !== undefined) {
      obj.hydratedContentText = message.hydratedContentText;
    }
    if (message.hydratedFooterText !== undefined) {
      obj.hydratedFooterText = message.hydratedFooterText;
    }
    if (message.hydratedButtons?.length) {
      obj.hydratedButtons = message.hydratedButtons.map((e) => HydratedTemplateButton.toJSON(e));
    }
    if (message.templateId !== undefined) {
      obj.templateId = message.templateId;
    }
    if (message.maskLinkedDevices !== undefined) {
      obj.maskLinkedDevices = message.maskLinkedDevices;
    }
    if (message.documentMessage !== undefined) {
      obj.documentMessage = Message_DocumentMessage.toJSON(message.documentMessage);
    }
    if (message.hydratedTitleText !== undefined) {
      obj.hydratedTitleText = message.hydratedTitleText;
    }
    if (message.imageMessage !== undefined) {
      obj.imageMessage = Message_ImageMessage.toJSON(message.imageMessage);
    }
    if (message.videoMessage !== undefined) {
      obj.videoMessage = Message_VideoMessage.toJSON(message.videoMessage);
    }
    if (message.locationMessage !== undefined) {
      obj.locationMessage = Message_LocationMessage.toJSON(message.locationMessage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_TemplateMessage_HydratedFourRowTemplate>, I>>(
    base?: I,
  ): Message_TemplateMessage_HydratedFourRowTemplate {
    return Message_TemplateMessage_HydratedFourRowTemplate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_TemplateMessage_HydratedFourRowTemplate>, I>>(
    object: I,
  ): Message_TemplateMessage_HydratedFourRowTemplate {
    const message = createBaseMessage_TemplateMessage_HydratedFourRowTemplate();
    message.hydratedContentText = object.hydratedContentText ?? undefined;
    message.hydratedFooterText = object.hydratedFooterText ?? undefined;
    message.hydratedButtons = object.hydratedButtons?.map((e) => HydratedTemplateButton.fromPartial(e)) || [];
    message.templateId = object.templateId ?? undefined;
    message.maskLinkedDevices = object.maskLinkedDevices ?? undefined;
    message.documentMessage = (object.documentMessage !== undefined && object.documentMessage !== null)
      ? Message_DocumentMessage.fromPartial(object.documentMessage)
      : undefined;
    message.hydratedTitleText = object.hydratedTitleText ?? undefined;
    message.imageMessage = (object.imageMessage !== undefined && object.imageMessage !== null)
      ? Message_ImageMessage.fromPartial(object.imageMessage)
      : undefined;
    message.videoMessage = (object.videoMessage !== undefined && object.videoMessage !== null)
      ? Message_VideoMessage.fromPartial(object.videoMessage)
      : undefined;
    message.locationMessage = (object.locationMessage !== undefined && object.locationMessage !== null)
      ? Message_LocationMessage.fromPartial(object.locationMessage)
      : undefined;
    return message;
  },
};

function createBaseMessage_URLMetadata(): Message_URLMetadata {
  return { fbExperimentId: undefined };
}

export const Message_URLMetadata: MessageFns<Message_URLMetadata> = {
  encode(message: Message_URLMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fbExperimentId !== undefined) {
      writer.uint32(8).uint32(message.fbExperimentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_URLMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_URLMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.fbExperimentId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_URLMetadata {
    return { fbExperimentId: isSet(object.fbExperimentId) ? globalThis.Number(object.fbExperimentId) : undefined };
  },

  toJSON(message: Message_URLMetadata): unknown {
    const obj: any = {};
    if (message.fbExperimentId !== undefined) {
      obj.fbExperimentId = Math.round(message.fbExperimentId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_URLMetadata>, I>>(base?: I): Message_URLMetadata {
    return Message_URLMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_URLMetadata>, I>>(object: I): Message_URLMetadata {
    const message = createBaseMessage_URLMetadata();
    message.fbExperimentId = object.fbExperimentId ?? undefined;
    return message;
  },
};

function createBaseMessage_VideoMessage(): Message_VideoMessage {
  return {
    url: undefined,
    mimetype: undefined,
    fileSha256: undefined,
    fileLength: undefined,
    seconds: undefined,
    mediaKey: undefined,
    caption: undefined,
    gifPlayback: undefined,
    height: undefined,
    width: undefined,
    fileEncSha256: undefined,
    interactiveAnnotations: [],
    directPath: undefined,
    mediaKeyTimestamp: undefined,
    jpegThumbnail: undefined,
    contextInfo: undefined,
    streamingSidecar: undefined,
    gifAttribution: undefined,
    viewOnce: undefined,
    thumbnailDirectPath: undefined,
    thumbnailSha256: undefined,
    thumbnailEncSha256: undefined,
    staticUrl: undefined,
    annotations: [],
    accessibilityLabel: undefined,
    processedVideos: [],
    externalShareFullVideoDurationInSeconds: undefined,
  };
}

export const Message_VideoMessage: MessageFns<Message_VideoMessage> = {
  encode(message: Message_VideoMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== undefined) {
      writer.uint32(10).string(message.url);
    }
    if (message.mimetype !== undefined) {
      writer.uint32(18).string(message.mimetype);
    }
    if (message.fileSha256 !== undefined) {
      writer.uint32(26).bytes(message.fileSha256);
    }
    if (message.fileLength !== undefined) {
      writer.uint32(32).uint64(message.fileLength);
    }
    if (message.seconds !== undefined) {
      writer.uint32(40).uint32(message.seconds);
    }
    if (message.mediaKey !== undefined) {
      writer.uint32(50).bytes(message.mediaKey);
    }
    if (message.caption !== undefined) {
      writer.uint32(58).string(message.caption);
    }
    if (message.gifPlayback !== undefined) {
      writer.uint32(64).bool(message.gifPlayback);
    }
    if (message.height !== undefined) {
      writer.uint32(72).uint32(message.height);
    }
    if (message.width !== undefined) {
      writer.uint32(80).uint32(message.width);
    }
    if (message.fileEncSha256 !== undefined) {
      writer.uint32(90).bytes(message.fileEncSha256);
    }
    for (const v of message.interactiveAnnotations) {
      InteractiveAnnotation.encode(v!, writer.uint32(98).fork()).join();
    }
    if (message.directPath !== undefined) {
      writer.uint32(106).string(message.directPath);
    }
    if (message.mediaKeyTimestamp !== undefined) {
      writer.uint32(112).int64(message.mediaKeyTimestamp);
    }
    if (message.jpegThumbnail !== undefined) {
      writer.uint32(130).bytes(message.jpegThumbnail);
    }
    if (message.contextInfo !== undefined) {
      ContextInfo.encode(message.contextInfo, writer.uint32(138).fork()).join();
    }
    if (message.streamingSidecar !== undefined) {
      writer.uint32(146).bytes(message.streamingSidecar);
    }
    if (message.gifAttribution !== undefined) {
      writer.uint32(152).int32(message.gifAttribution);
    }
    if (message.viewOnce !== undefined) {
      writer.uint32(160).bool(message.viewOnce);
    }
    if (message.thumbnailDirectPath !== undefined) {
      writer.uint32(170).string(message.thumbnailDirectPath);
    }
    if (message.thumbnailSha256 !== undefined) {
      writer.uint32(178).bytes(message.thumbnailSha256);
    }
    if (message.thumbnailEncSha256 !== undefined) {
      writer.uint32(186).bytes(message.thumbnailEncSha256);
    }
    if (message.staticUrl !== undefined) {
      writer.uint32(194).string(message.staticUrl);
    }
    for (const v of message.annotations) {
      InteractiveAnnotation.encode(v!, writer.uint32(202).fork()).join();
    }
    if (message.accessibilityLabel !== undefined) {
      writer.uint32(210).string(message.accessibilityLabel);
    }
    for (const v of message.processedVideos) {
      ProcessedVideo.encode(v!, writer.uint32(218).fork()).join();
    }
    if (message.externalShareFullVideoDurationInSeconds !== undefined) {
      writer.uint32(224).uint32(message.externalShareFullVideoDurationInSeconds);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message_VideoMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage_VideoMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.mimetype = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fileSha256 = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.fileLength = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.seconds = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.mediaKey = reader.bytes();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.caption = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.gifPlayback = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.height = reader.uint32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.width = reader.uint32();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.fileEncSha256 = reader.bytes();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.interactiveAnnotations.push(InteractiveAnnotation.decode(reader, reader.uint32()));
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.directPath = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.mediaKeyTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.jpegThumbnail = reader.bytes();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.contextInfo = ContextInfo.decode(reader, reader.uint32());
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.streamingSidecar = reader.bytes();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.gifAttribution = reader.int32() as any;
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.viewOnce = reader.bool();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.thumbnailDirectPath = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.thumbnailSha256 = reader.bytes();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.thumbnailEncSha256 = reader.bytes();
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.staticUrl = reader.string();
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.annotations.push(InteractiveAnnotation.decode(reader, reader.uint32()));
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.accessibilityLabel = reader.string();
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.processedVideos.push(ProcessedVideo.decode(reader, reader.uint32()));
          continue;
        }
        case 28: {
          if (tag !== 224) {
            break;
          }

          message.externalShareFullVideoDurationInSeconds = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message_VideoMessage {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : undefined,
      mimetype: isSet(object.mimetype) ? globalThis.String(object.mimetype) : undefined,
      fileSha256: isSet(object.fileSha256) ? bytesFromBase64(object.fileSha256) : undefined,
      fileLength: isSet(object.fileLength) ? globalThis.Number(object.fileLength) : undefined,
      seconds: isSet(object.seconds) ? globalThis.Number(object.seconds) : undefined,
      mediaKey: isSet(object.mediaKey) ? bytesFromBase64(object.mediaKey) : undefined,
      caption: isSet(object.caption) ? globalThis.String(object.caption) : undefined,
      gifPlayback: isSet(object.gifPlayback) ? globalThis.Boolean(object.gifPlayback) : undefined,
      height: isSet(object.height) ? globalThis.Number(object.height) : undefined,
      width: isSet(object.width) ? globalThis.Number(object.width) : undefined,
      fileEncSha256: isSet(object.fileEncSha256) ? bytesFromBase64(object.fileEncSha256) : undefined,
      interactiveAnnotations: globalThis.Array.isArray(object?.interactiveAnnotations)
        ? object.interactiveAnnotations.map((e: any) => InteractiveAnnotation.fromJSON(e))
        : [],
      directPath: isSet(object.directPath) ? globalThis.String(object.directPath) : undefined,
      mediaKeyTimestamp: isSet(object.mediaKeyTimestamp) ? globalThis.Number(object.mediaKeyTimestamp) : undefined,
      jpegThumbnail: isSet(object.jpegThumbnail) ? bytesFromBase64(object.jpegThumbnail) : undefined,
      contextInfo: isSet(object.contextInfo) ? ContextInfo.fromJSON(object.contextInfo) : undefined,
      streamingSidecar: isSet(object.streamingSidecar) ? bytesFromBase64(object.streamingSidecar) : undefined,
      gifAttribution: isSet(object.gifAttribution)
        ? message_VideoMessage_AttributionFromJSON(object.gifAttribution)
        : undefined,
      viewOnce: isSet(object.viewOnce) ? globalThis.Boolean(object.viewOnce) : undefined,
      thumbnailDirectPath: isSet(object.thumbnailDirectPath)
        ? globalThis.String(object.thumbnailDirectPath)
        : undefined,
      thumbnailSha256: isSet(object.thumbnailSha256) ? bytesFromBase64(object.thumbnailSha256) : undefined,
      thumbnailEncSha256: isSet(object.thumbnailEncSha256) ? bytesFromBase64(object.thumbnailEncSha256) : undefined,
      staticUrl: isSet(object.staticUrl) ? globalThis.String(object.staticUrl) : undefined,
      annotations: globalThis.Array.isArray(object?.annotations)
        ? object.annotations.map((e: any) => InteractiveAnnotation.fromJSON(e))
        : [],
      accessibilityLabel: isSet(object.accessibilityLabel) ? globalThis.String(object.accessibilityLabel) : undefined,
      processedVideos: globalThis.Array.isArray(object?.processedVideos)
        ? object.processedVideos.map((e: any) => ProcessedVideo.fromJSON(e))
        : [],
      externalShareFullVideoDurationInSeconds: isSet(object.externalShareFullVideoDurationInSeconds)
        ? globalThis.Number(object.externalShareFullVideoDurationInSeconds)
        : undefined,
    };
  },

  toJSON(message: Message_VideoMessage): unknown {
    const obj: any = {};
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    if (message.mimetype !== undefined) {
      obj.mimetype = message.mimetype;
    }
    if (message.fileSha256 !== undefined) {
      obj.fileSha256 = base64FromBytes(message.fileSha256);
    }
    if (message.fileLength !== undefined) {
      obj.fileLength = Math.round(message.fileLength);
    }
    if (message.seconds !== undefined) {
      obj.seconds = Math.round(message.seconds);
    }
    if (message.mediaKey !== undefined) {
      obj.mediaKey = base64FromBytes(message.mediaKey);
    }
    if (message.caption !== undefined) {
      obj.caption = message.caption;
    }
    if (message.gifPlayback !== undefined) {
      obj.gifPlayback = message.gifPlayback;
    }
    if (message.height !== undefined) {
      obj.height = Math.round(message.height);
    }
    if (message.width !== undefined) {
      obj.width = Math.round(message.width);
    }
    if (message.fileEncSha256 !== undefined) {
      obj.fileEncSha256 = base64FromBytes(message.fileEncSha256);
    }
    if (message.interactiveAnnotations?.length) {
      obj.interactiveAnnotations = message.interactiveAnnotations.map((e) => InteractiveAnnotation.toJSON(e));
    }
    if (message.directPath !== undefined) {
      obj.directPath = message.directPath;
    }
    if (message.mediaKeyTimestamp !== undefined) {
      obj.mediaKeyTimestamp = Math.round(message.mediaKeyTimestamp);
    }
    if (message.jpegThumbnail !== undefined) {
      obj.jpegThumbnail = base64FromBytes(message.jpegThumbnail);
    }
    if (message.contextInfo !== undefined) {
      obj.contextInfo = ContextInfo.toJSON(message.contextInfo);
    }
    if (message.streamingSidecar !== undefined) {
      obj.streamingSidecar = base64FromBytes(message.streamingSidecar);
    }
    if (message.gifAttribution !== undefined) {
      obj.gifAttribution = message_VideoMessage_AttributionToJSON(message.gifAttribution);
    }
    if (message.viewOnce !== undefined) {
      obj.viewOnce = message.viewOnce;
    }
    if (message.thumbnailDirectPath !== undefined) {
      obj.thumbnailDirectPath = message.thumbnailDirectPath;
    }
    if (message.thumbnailSha256 !== undefined) {
      obj.thumbnailSha256 = base64FromBytes(message.thumbnailSha256);
    }
    if (message.thumbnailEncSha256 !== undefined) {
      obj.thumbnailEncSha256 = base64FromBytes(message.thumbnailEncSha256);
    }
    if (message.staticUrl !== undefined) {
      obj.staticUrl = message.staticUrl;
    }
    if (message.annotations?.length) {
      obj.annotations = message.annotations.map((e) => InteractiveAnnotation.toJSON(e));
    }
    if (message.accessibilityLabel !== undefined) {
      obj.accessibilityLabel = message.accessibilityLabel;
    }
    if (message.processedVideos?.length) {
      obj.processedVideos = message.processedVideos.map((e) => ProcessedVideo.toJSON(e));
    }
    if (message.externalShareFullVideoDurationInSeconds !== undefined) {
      obj.externalShareFullVideoDurationInSeconds = Math.round(message.externalShareFullVideoDurationInSeconds);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message_VideoMessage>, I>>(base?: I): Message_VideoMessage {
    return Message_VideoMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message_VideoMessage>, I>>(object: I): Message_VideoMessage {
    const message = createBaseMessage_VideoMessage();
    message.url = object.url ?? undefined;
    message.mimetype = object.mimetype ?? undefined;
    message.fileSha256 = object.fileSha256 ?? undefined;
    message.fileLength = object.fileLength ?? undefined;
    message.seconds = object.seconds ?? undefined;
    message.mediaKey = object.mediaKey ?? undefined;
    message.caption = object.caption ?? undefined;
    message.gifPlayback = object.gifPlayback ?? undefined;
    message.height = object.height ?? undefined;
    message.width = object.width ?? undefined;
    message.fileEncSha256 = object.fileEncSha256 ?? undefined;
    message.interactiveAnnotations = object.interactiveAnnotations?.map((e) => InteractiveAnnotation.fromPartial(e)) ||
      [];
    message.directPath = object.directPath ?? undefined;
    message.mediaKeyTimestamp = object.mediaKeyTimestamp ?? undefined;
    message.jpegThumbnail = object.jpegThumbnail ?? undefined;
    message.contextInfo = (object.contextInfo !== undefined && object.contextInfo !== null)
      ? ContextInfo.fromPartial(object.contextInfo)
      : undefined;
    message.streamingSidecar = object.streamingSidecar ?? undefined;
    message.gifAttribution = object.gifAttribution ?? undefined;
    message.viewOnce = object.viewOnce ?? undefined;
    message.thumbnailDirectPath = object.thumbnailDirectPath ?? undefined;
    message.thumbnailSha256 = object.thumbnailSha256 ?? undefined;
    message.thumbnailEncSha256 = object.thumbnailEncSha256 ?? undefined;
    message.staticUrl = object.staticUrl ?? undefined;
    message.annotations = object.annotations?.map((e) => InteractiveAnnotation.fromPartial(e)) || [];
    message.accessibilityLabel = object.accessibilityLabel ?? undefined;
    message.processedVideos = object.processedVideos?.map((e) => ProcessedVideo.fromPartial(e)) || [];
    message.externalShareFullVideoDurationInSeconds = object.externalShareFullVideoDurationInSeconds ?? undefined;
    return message;
  },
};

function createBaseMessageAddOn(): MessageAddOn {
  return {
    messageAddOnType: undefined,
    messageAddOn: undefined,
    senderTimestampMs: undefined,
    serverTimestampMs: undefined,
    status: undefined,
    addOnContextInfo: undefined,
    messageAddOnKey: undefined,
    legacyMessage: undefined,
  };
}

export const MessageAddOn: MessageFns<MessageAddOn> = {
  encode(message: MessageAddOn, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.messageAddOnType !== undefined) {
      writer.uint32(8).int32(message.messageAddOnType);
    }
    if (message.messageAddOn !== undefined) {
      Message.encode(message.messageAddOn, writer.uint32(18).fork()).join();
    }
    if (message.senderTimestampMs !== undefined) {
      writer.uint32(24).int64(message.senderTimestampMs);
    }
    if (message.serverTimestampMs !== undefined) {
      writer.uint32(32).int64(message.serverTimestampMs);
    }
    if (message.status !== undefined) {
      writer.uint32(40).int32(message.status);
    }
    if (message.addOnContextInfo !== undefined) {
      MessageAddOnContextInfo.encode(message.addOnContextInfo, writer.uint32(50).fork()).join();
    }
    if (message.messageAddOnKey !== undefined) {
      MessageKey.encode(message.messageAddOnKey, writer.uint32(58).fork()).join();
    }
    if (message.legacyMessage !== undefined) {
      LegacyMessage.encode(message.legacyMessage, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessageAddOn {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageAddOn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.messageAddOnType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.messageAddOn = Message.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.senderTimestampMs = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.serverTimestampMs = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.addOnContextInfo = MessageAddOnContextInfo.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.messageAddOnKey = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.legacyMessage = LegacyMessage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessageAddOn {
    return {
      messageAddOnType: isSet(object.messageAddOnType)
        ? messageAddOn_MessageAddOnTypeFromJSON(object.messageAddOnType)
        : undefined,
      messageAddOn: isSet(object.messageAddOn) ? Message.fromJSON(object.messageAddOn) : undefined,
      senderTimestampMs: isSet(object.senderTimestampMs) ? globalThis.Number(object.senderTimestampMs) : undefined,
      serverTimestampMs: isSet(object.serverTimestampMs) ? globalThis.Number(object.serverTimestampMs) : undefined,
      status: isSet(object.status) ? webMessageInfo_StatusFromJSON(object.status) : undefined,
      addOnContextInfo: isSet(object.addOnContextInfo)
        ? MessageAddOnContextInfo.fromJSON(object.addOnContextInfo)
        : undefined,
      messageAddOnKey: isSet(object.messageAddOnKey) ? MessageKey.fromJSON(object.messageAddOnKey) : undefined,
      legacyMessage: isSet(object.legacyMessage) ? LegacyMessage.fromJSON(object.legacyMessage) : undefined,
    };
  },

  toJSON(message: MessageAddOn): unknown {
    const obj: any = {};
    if (message.messageAddOnType !== undefined) {
      obj.messageAddOnType = messageAddOn_MessageAddOnTypeToJSON(message.messageAddOnType);
    }
    if (message.messageAddOn !== undefined) {
      obj.messageAddOn = Message.toJSON(message.messageAddOn);
    }
    if (message.senderTimestampMs !== undefined) {
      obj.senderTimestampMs = Math.round(message.senderTimestampMs);
    }
    if (message.serverTimestampMs !== undefined) {
      obj.serverTimestampMs = Math.round(message.serverTimestampMs);
    }
    if (message.status !== undefined) {
      obj.status = webMessageInfo_StatusToJSON(message.status);
    }
    if (message.addOnContextInfo !== undefined) {
      obj.addOnContextInfo = MessageAddOnContextInfo.toJSON(message.addOnContextInfo);
    }
    if (message.messageAddOnKey !== undefined) {
      obj.messageAddOnKey = MessageKey.toJSON(message.messageAddOnKey);
    }
    if (message.legacyMessage !== undefined) {
      obj.legacyMessage = LegacyMessage.toJSON(message.legacyMessage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MessageAddOn>, I>>(base?: I): MessageAddOn {
    return MessageAddOn.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MessageAddOn>, I>>(object: I): MessageAddOn {
    const message = createBaseMessageAddOn();
    message.messageAddOnType = object.messageAddOnType ?? undefined;
    message.messageAddOn = (object.messageAddOn !== undefined && object.messageAddOn !== null)
      ? Message.fromPartial(object.messageAddOn)
      : undefined;
    message.senderTimestampMs = object.senderTimestampMs ?? undefined;
    message.serverTimestampMs = object.serverTimestampMs ?? undefined;
    message.status = object.status ?? undefined;
    message.addOnContextInfo = (object.addOnContextInfo !== undefined && object.addOnContextInfo !== null)
      ? MessageAddOnContextInfo.fromPartial(object.addOnContextInfo)
      : undefined;
    message.messageAddOnKey = (object.messageAddOnKey !== undefined && object.messageAddOnKey !== null)
      ? MessageKey.fromPartial(object.messageAddOnKey)
      : undefined;
    message.legacyMessage = (object.legacyMessage !== undefined && object.legacyMessage !== null)
      ? LegacyMessage.fromPartial(object.legacyMessage)
      : undefined;
    return message;
  },
};

function createBaseMessageAddOnContextInfo(): MessageAddOnContextInfo {
  return { messageAddOnDurationInSecs: undefined, messageAddOnExpiryType: undefined };
}

export const MessageAddOnContextInfo: MessageFns<MessageAddOnContextInfo> = {
  encode(message: MessageAddOnContextInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.messageAddOnDurationInSecs !== undefined) {
      writer.uint32(8).uint32(message.messageAddOnDurationInSecs);
    }
    if (message.messageAddOnExpiryType !== undefined) {
      writer.uint32(16).int32(message.messageAddOnExpiryType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessageAddOnContextInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageAddOnContextInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.messageAddOnDurationInSecs = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.messageAddOnExpiryType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessageAddOnContextInfo {
    return {
      messageAddOnDurationInSecs: isSet(object.messageAddOnDurationInSecs)
        ? globalThis.Number(object.messageAddOnDurationInSecs)
        : undefined,
      messageAddOnExpiryType: isSet(object.messageAddOnExpiryType)
        ? messageContextInfo_MessageAddonExpiryTypeFromJSON(object.messageAddOnExpiryType)
        : undefined,
    };
  },

  toJSON(message: MessageAddOnContextInfo): unknown {
    const obj: any = {};
    if (message.messageAddOnDurationInSecs !== undefined) {
      obj.messageAddOnDurationInSecs = Math.round(message.messageAddOnDurationInSecs);
    }
    if (message.messageAddOnExpiryType !== undefined) {
      obj.messageAddOnExpiryType = messageContextInfo_MessageAddonExpiryTypeToJSON(message.messageAddOnExpiryType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MessageAddOnContextInfo>, I>>(base?: I): MessageAddOnContextInfo {
    return MessageAddOnContextInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MessageAddOnContextInfo>, I>>(object: I): MessageAddOnContextInfo {
    const message = createBaseMessageAddOnContextInfo();
    message.messageAddOnDurationInSecs = object.messageAddOnDurationInSecs ?? undefined;
    message.messageAddOnExpiryType = object.messageAddOnExpiryType ?? undefined;
    return message;
  },
};

function createBaseMessageAssociation(): MessageAssociation {
  return { associationType: undefined, parentMessageKey: undefined, messageIndex: undefined };
}

export const MessageAssociation: MessageFns<MessageAssociation> = {
  encode(message: MessageAssociation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.associationType !== undefined) {
      writer.uint32(8).int32(message.associationType);
    }
    if (message.parentMessageKey !== undefined) {
      MessageKey.encode(message.parentMessageKey, writer.uint32(18).fork()).join();
    }
    if (message.messageIndex !== undefined) {
      writer.uint32(24).int32(message.messageIndex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessageAssociation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageAssociation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.associationType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.parentMessageKey = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.messageIndex = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessageAssociation {
    return {
      associationType: isSet(object.associationType)
        ? messageAssociation_AssociationTypeFromJSON(object.associationType)
        : undefined,
      parentMessageKey: isSet(object.parentMessageKey) ? MessageKey.fromJSON(object.parentMessageKey) : undefined,
      messageIndex: isSet(object.messageIndex) ? globalThis.Number(object.messageIndex) : undefined,
    };
  },

  toJSON(message: MessageAssociation): unknown {
    const obj: any = {};
    if (message.associationType !== undefined) {
      obj.associationType = messageAssociation_AssociationTypeToJSON(message.associationType);
    }
    if (message.parentMessageKey !== undefined) {
      obj.parentMessageKey = MessageKey.toJSON(message.parentMessageKey);
    }
    if (message.messageIndex !== undefined) {
      obj.messageIndex = Math.round(message.messageIndex);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MessageAssociation>, I>>(base?: I): MessageAssociation {
    return MessageAssociation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MessageAssociation>, I>>(object: I): MessageAssociation {
    const message = createBaseMessageAssociation();
    message.associationType = object.associationType ?? undefined;
    message.parentMessageKey = (object.parentMessageKey !== undefined && object.parentMessageKey !== null)
      ? MessageKey.fromPartial(object.parentMessageKey)
      : undefined;
    message.messageIndex = object.messageIndex ?? undefined;
    return message;
  },
};

function createBaseMessageContextInfo(): MessageContextInfo {
  return {
    deviceListMetadata: undefined,
    deviceListMetadataVersion: undefined,
    messageSecret: undefined,
    paddingBytes: undefined,
    messageAddOnDurationInSecs: undefined,
    botMessageSecret: undefined,
    botMetadata: undefined,
    reportingTokenVersion: undefined,
    messageAddOnExpiryType: undefined,
    messageAssociation: undefined,
    capiCreatedGroup: undefined,
    supportPayload: undefined,
    limitSharing: undefined,
    limitSharingV2: undefined,
  };
}

export const MessageContextInfo: MessageFns<MessageContextInfo> = {
  encode(message: MessageContextInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deviceListMetadata !== undefined) {
      DeviceListMetadata.encode(message.deviceListMetadata, writer.uint32(10).fork()).join();
    }
    if (message.deviceListMetadataVersion !== undefined) {
      writer.uint32(16).int32(message.deviceListMetadataVersion);
    }
    if (message.messageSecret !== undefined) {
      writer.uint32(26).bytes(message.messageSecret);
    }
    if (message.paddingBytes !== undefined) {
      writer.uint32(34).bytes(message.paddingBytes);
    }
    if (message.messageAddOnDurationInSecs !== undefined) {
      writer.uint32(40).uint32(message.messageAddOnDurationInSecs);
    }
    if (message.botMessageSecret !== undefined) {
      writer.uint32(50).bytes(message.botMessageSecret);
    }
    if (message.botMetadata !== undefined) {
      BotMetadata.encode(message.botMetadata, writer.uint32(58).fork()).join();
    }
    if (message.reportingTokenVersion !== undefined) {
      writer.uint32(64).int32(message.reportingTokenVersion);
    }
    if (message.messageAddOnExpiryType !== undefined) {
      writer.uint32(72).int32(message.messageAddOnExpiryType);
    }
    if (message.messageAssociation !== undefined) {
      MessageAssociation.encode(message.messageAssociation, writer.uint32(82).fork()).join();
    }
    if (message.capiCreatedGroup !== undefined) {
      writer.uint32(88).bool(message.capiCreatedGroup);
    }
    if (message.supportPayload !== undefined) {
      writer.uint32(98).string(message.supportPayload);
    }
    if (message.limitSharing !== undefined) {
      LimitSharing.encode(message.limitSharing, writer.uint32(106).fork()).join();
    }
    if (message.limitSharingV2 !== undefined) {
      LimitSharing.encode(message.limitSharingV2, writer.uint32(114).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessageContextInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageContextInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.deviceListMetadata = DeviceListMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.deviceListMetadataVersion = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.messageSecret = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.paddingBytes = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.messageAddOnDurationInSecs = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.botMessageSecret = reader.bytes();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.botMetadata = BotMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.reportingTokenVersion = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.messageAddOnExpiryType = reader.int32() as any;
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.messageAssociation = MessageAssociation.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.capiCreatedGroup = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.supportPayload = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.limitSharing = LimitSharing.decode(reader, reader.uint32());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.limitSharingV2 = LimitSharing.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessageContextInfo {
    return {
      deviceListMetadata: isSet(object.deviceListMetadata)
        ? DeviceListMetadata.fromJSON(object.deviceListMetadata)
        : undefined,
      deviceListMetadataVersion: isSet(object.deviceListMetadataVersion)
        ? globalThis.Number(object.deviceListMetadataVersion)
        : undefined,
      messageSecret: isSet(object.messageSecret) ? bytesFromBase64(object.messageSecret) : undefined,
      paddingBytes: isSet(object.paddingBytes) ? bytesFromBase64(object.paddingBytes) : undefined,
      messageAddOnDurationInSecs: isSet(object.messageAddOnDurationInSecs)
        ? globalThis.Number(object.messageAddOnDurationInSecs)
        : undefined,
      botMessageSecret: isSet(object.botMessageSecret) ? bytesFromBase64(object.botMessageSecret) : undefined,
      botMetadata: isSet(object.botMetadata) ? BotMetadata.fromJSON(object.botMetadata) : undefined,
      reportingTokenVersion: isSet(object.reportingTokenVersion)
        ? globalThis.Number(object.reportingTokenVersion)
        : undefined,
      messageAddOnExpiryType: isSet(object.messageAddOnExpiryType)
        ? messageContextInfo_MessageAddonExpiryTypeFromJSON(object.messageAddOnExpiryType)
        : undefined,
      messageAssociation: isSet(object.messageAssociation)
        ? MessageAssociation.fromJSON(object.messageAssociation)
        : undefined,
      capiCreatedGroup: isSet(object.capiCreatedGroup) ? globalThis.Boolean(object.capiCreatedGroup) : undefined,
      supportPayload: isSet(object.supportPayload) ? globalThis.String(object.supportPayload) : undefined,
      limitSharing: isSet(object.limitSharing) ? LimitSharing.fromJSON(object.limitSharing) : undefined,
      limitSharingV2: isSet(object.limitSharingV2) ? LimitSharing.fromJSON(object.limitSharingV2) : undefined,
    };
  },

  toJSON(message: MessageContextInfo): unknown {
    const obj: any = {};
    if (message.deviceListMetadata !== undefined) {
      obj.deviceListMetadata = DeviceListMetadata.toJSON(message.deviceListMetadata);
    }
    if (message.deviceListMetadataVersion !== undefined) {
      obj.deviceListMetadataVersion = Math.round(message.deviceListMetadataVersion);
    }
    if (message.messageSecret !== undefined) {
      obj.messageSecret = base64FromBytes(message.messageSecret);
    }
    if (message.paddingBytes !== undefined) {
      obj.paddingBytes = base64FromBytes(message.paddingBytes);
    }
    if (message.messageAddOnDurationInSecs !== undefined) {
      obj.messageAddOnDurationInSecs = Math.round(message.messageAddOnDurationInSecs);
    }
    if (message.botMessageSecret !== undefined) {
      obj.botMessageSecret = base64FromBytes(message.botMessageSecret);
    }
    if (message.botMetadata !== undefined) {
      obj.botMetadata = BotMetadata.toJSON(message.botMetadata);
    }
    if (message.reportingTokenVersion !== undefined) {
      obj.reportingTokenVersion = Math.round(message.reportingTokenVersion);
    }
    if (message.messageAddOnExpiryType !== undefined) {
      obj.messageAddOnExpiryType = messageContextInfo_MessageAddonExpiryTypeToJSON(message.messageAddOnExpiryType);
    }
    if (message.messageAssociation !== undefined) {
      obj.messageAssociation = MessageAssociation.toJSON(message.messageAssociation);
    }
    if (message.capiCreatedGroup !== undefined) {
      obj.capiCreatedGroup = message.capiCreatedGroup;
    }
    if (message.supportPayload !== undefined) {
      obj.supportPayload = message.supportPayload;
    }
    if (message.limitSharing !== undefined) {
      obj.limitSharing = LimitSharing.toJSON(message.limitSharing);
    }
    if (message.limitSharingV2 !== undefined) {
      obj.limitSharingV2 = LimitSharing.toJSON(message.limitSharingV2);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MessageContextInfo>, I>>(base?: I): MessageContextInfo {
    return MessageContextInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MessageContextInfo>, I>>(object: I): MessageContextInfo {
    const message = createBaseMessageContextInfo();
    message.deviceListMetadata = (object.deviceListMetadata !== undefined && object.deviceListMetadata !== null)
      ? DeviceListMetadata.fromPartial(object.deviceListMetadata)
      : undefined;
    message.deviceListMetadataVersion = object.deviceListMetadataVersion ?? undefined;
    message.messageSecret = object.messageSecret ?? undefined;
    message.paddingBytes = object.paddingBytes ?? undefined;
    message.messageAddOnDurationInSecs = object.messageAddOnDurationInSecs ?? undefined;
    message.botMessageSecret = object.botMessageSecret ?? undefined;
    message.botMetadata = (object.botMetadata !== undefined && object.botMetadata !== null)
      ? BotMetadata.fromPartial(object.botMetadata)
      : undefined;
    message.reportingTokenVersion = object.reportingTokenVersion ?? undefined;
    message.messageAddOnExpiryType = object.messageAddOnExpiryType ?? undefined;
    message.messageAssociation = (object.messageAssociation !== undefined && object.messageAssociation !== null)
      ? MessageAssociation.fromPartial(object.messageAssociation)
      : undefined;
    message.capiCreatedGroup = object.capiCreatedGroup ?? undefined;
    message.supportPayload = object.supportPayload ?? undefined;
    message.limitSharing = (object.limitSharing !== undefined && object.limitSharing !== null)
      ? LimitSharing.fromPartial(object.limitSharing)
      : undefined;
    message.limitSharingV2 = (object.limitSharingV2 !== undefined && object.limitSharingV2 !== null)
      ? LimitSharing.fromPartial(object.limitSharingV2)
      : undefined;
    return message;
  },
};

function createBaseMessageKey(): MessageKey {
  return { remoteJid: undefined, fromMe: undefined, id: undefined, participant: undefined };
}

export const MessageKey: MessageFns<MessageKey> = {
  encode(message: MessageKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.remoteJid !== undefined) {
      writer.uint32(10).string(message.remoteJid);
    }
    if (message.fromMe !== undefined) {
      writer.uint32(16).bool(message.fromMe);
    }
    if (message.id !== undefined) {
      writer.uint32(26).string(message.id);
    }
    if (message.participant !== undefined) {
      writer.uint32(34).string(message.participant);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessageKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.remoteJid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.fromMe = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.participant = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessageKey {
    return {
      remoteJid: isSet(object.remoteJid) ? globalThis.String(object.remoteJid) : undefined,
      fromMe: isSet(object.fromMe) ? globalThis.Boolean(object.fromMe) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      participant: isSet(object.participant) ? globalThis.String(object.participant) : undefined,
    };
  },

  toJSON(message: MessageKey): unknown {
    const obj: any = {};
    if (message.remoteJid !== undefined) {
      obj.remoteJid = message.remoteJid;
    }
    if (message.fromMe !== undefined) {
      obj.fromMe = message.fromMe;
    }
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.participant !== undefined) {
      obj.participant = message.participant;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MessageKey>, I>>(base?: I): MessageKey {
    return MessageKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MessageKey>, I>>(object: I): MessageKey {
    const message = createBaseMessageKey();
    message.remoteJid = object.remoteJid ?? undefined;
    message.fromMe = object.fromMe ?? undefined;
    message.id = object.id ?? undefined;
    message.participant = object.participant ?? undefined;
    return message;
  },
};

function createBaseMessageSecretMessage(): MessageSecretMessage {
  return { version: undefined, encIv: undefined, encPayload: undefined };
}

export const MessageSecretMessage: MessageFns<MessageSecretMessage> = {
  encode(message: MessageSecretMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== undefined) {
      writer.uint32(13).sfixed32(message.version);
    }
    if (message.encIv !== undefined) {
      writer.uint32(18).bytes(message.encIv);
    }
    if (message.encPayload !== undefined) {
      writer.uint32(26).bytes(message.encPayload);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessageSecretMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageSecretMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.version = reader.sfixed32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.encIv = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.encPayload = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessageSecretMessage {
    return {
      version: isSet(object.version) ? globalThis.Number(object.version) : undefined,
      encIv: isSet(object.encIv) ? bytesFromBase64(object.encIv) : undefined,
      encPayload: isSet(object.encPayload) ? bytesFromBase64(object.encPayload) : undefined,
    };
  },

  toJSON(message: MessageSecretMessage): unknown {
    const obj: any = {};
    if (message.version !== undefined) {
      obj.version = Math.round(message.version);
    }
    if (message.encIv !== undefined) {
      obj.encIv = base64FromBytes(message.encIv);
    }
    if (message.encPayload !== undefined) {
      obj.encPayload = base64FromBytes(message.encPayload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MessageSecretMessage>, I>>(base?: I): MessageSecretMessage {
    return MessageSecretMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MessageSecretMessage>, I>>(object: I): MessageSecretMessage {
    const message = createBaseMessageSecretMessage();
    message.version = object.version ?? undefined;
    message.encIv = object.encIv ?? undefined;
    message.encPayload = object.encPayload ?? undefined;
    return message;
  },
};

function createBaseMoney(): Money {
  return { value: undefined, offset: undefined, currencyCode: undefined };
}

export const Money: MessageFns<Money> = {
  encode(message: Money, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== undefined) {
      writer.uint32(8).int64(message.value);
    }
    if (message.offset !== undefined) {
      writer.uint32(16).uint32(message.offset);
    }
    if (message.currencyCode !== undefined) {
      writer.uint32(26).string(message.currencyCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Money {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMoney();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.value = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.offset = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.currencyCode = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Money {
    return {
      value: isSet(object.value) ? globalThis.Number(object.value) : undefined,
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : undefined,
      currencyCode: isSet(object.currencyCode) ? globalThis.String(object.currencyCode) : undefined,
    };
  },

  toJSON(message: Money): unknown {
    const obj: any = {};
    if (message.value !== undefined) {
      obj.value = Math.round(message.value);
    }
    if (message.offset !== undefined) {
      obj.offset = Math.round(message.offset);
    }
    if (message.currencyCode !== undefined) {
      obj.currencyCode = message.currencyCode;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Money>, I>>(base?: I): Money {
    return Money.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Money>, I>>(object: I): Money {
    const message = createBaseMoney();
    message.value = object.value ?? undefined;
    message.offset = object.offset ?? undefined;
    message.currencyCode = object.currencyCode ?? undefined;
    return message;
  },
};

function createBaseMsgOpaqueData(): MsgOpaqueData {
  return {
    body: undefined,
    caption: undefined,
    lng: undefined,
    isLive: undefined,
    lat: undefined,
    paymentAmount1000: undefined,
    paymentNoteMsgBody: undefined,
    matchedText: undefined,
    title: undefined,
    description: undefined,
    futureproofBuffer: undefined,
    clientUrl: undefined,
    loc: undefined,
    pollName: undefined,
    pollOptions: [],
    pollSelectableOptionsCount: undefined,
    messageSecret: undefined,
    originalSelfAuthor: undefined,
    senderTimestampMs: undefined,
    pollUpdateParentKey: undefined,
    encPollVote: undefined,
    isSentCagPollCreation: undefined,
    pollContentType: undefined,
    pollVotesSnapshot: undefined,
    encReactionTargetMessageKey: undefined,
    encReactionEncPayload: undefined,
    encReactionEncIv: undefined,
    botMessageSecret: undefined,
    targetMessageKey: undefined,
    encPayload: undefined,
    encIv: undefined,
    eventName: undefined,
    isEventCanceled: undefined,
    eventDescription: undefined,
    eventJoinLink: undefined,
    eventStartTime: undefined,
    eventLocation: undefined,
    eventEndTime: undefined,
    plainProtobufBytes: undefined,
  };
}

export const MsgOpaqueData: MessageFns<MsgOpaqueData> = {
  encode(message: MsgOpaqueData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.body !== undefined) {
      writer.uint32(10).string(message.body);
    }
    if (message.caption !== undefined) {
      writer.uint32(26).string(message.caption);
    }
    if (message.lng !== undefined) {
      writer.uint32(41).double(message.lng);
    }
    if (message.isLive !== undefined) {
      writer.uint32(48).bool(message.isLive);
    }
    if (message.lat !== undefined) {
      writer.uint32(57).double(message.lat);
    }
    if (message.paymentAmount1000 !== undefined) {
      writer.uint32(64).int32(message.paymentAmount1000);
    }
    if (message.paymentNoteMsgBody !== undefined) {
      writer.uint32(74).string(message.paymentNoteMsgBody);
    }
    if (message.matchedText !== undefined) {
      writer.uint32(90).string(message.matchedText);
    }
    if (message.title !== undefined) {
      writer.uint32(98).string(message.title);
    }
    if (message.description !== undefined) {
      writer.uint32(106).string(message.description);
    }
    if (message.futureproofBuffer !== undefined) {
      writer.uint32(114).bytes(message.futureproofBuffer);
    }
    if (message.clientUrl !== undefined) {
      writer.uint32(122).string(message.clientUrl);
    }
    if (message.loc !== undefined) {
      writer.uint32(130).string(message.loc);
    }
    if (message.pollName !== undefined) {
      writer.uint32(138).string(message.pollName);
    }
    for (const v of message.pollOptions) {
      MsgOpaqueData_PollOption.encode(v!, writer.uint32(146).fork()).join();
    }
    if (message.pollSelectableOptionsCount !== undefined) {
      writer.uint32(160).uint32(message.pollSelectableOptionsCount);
    }
    if (message.messageSecret !== undefined) {
      writer.uint32(170).bytes(message.messageSecret);
    }
    if (message.originalSelfAuthor !== undefined) {
      writer.uint32(410).string(message.originalSelfAuthor);
    }
    if (message.senderTimestampMs !== undefined) {
      writer.uint32(176).int64(message.senderTimestampMs);
    }
    if (message.pollUpdateParentKey !== undefined) {
      writer.uint32(186).string(message.pollUpdateParentKey);
    }
    if (message.encPollVote !== undefined) {
      PollEncValue.encode(message.encPollVote, writer.uint32(194).fork()).join();
    }
    if (message.isSentCagPollCreation !== undefined) {
      writer.uint32(224).bool(message.isSentCagPollCreation);
    }
    if (message.pollContentType !== undefined) {
      writer.uint32(336).int32(message.pollContentType);
    }
    if (message.pollVotesSnapshot !== undefined) {
      MsgOpaqueData_PollVotesSnapshot.encode(message.pollVotesSnapshot, writer.uint32(330).fork()).join();
    }
    if (message.encReactionTargetMessageKey !== undefined) {
      writer.uint32(202).string(message.encReactionTargetMessageKey);
    }
    if (message.encReactionEncPayload !== undefined) {
      writer.uint32(210).bytes(message.encReactionEncPayload);
    }
    if (message.encReactionEncIv !== undefined) {
      writer.uint32(218).bytes(message.encReactionEncIv);
    }
    if (message.botMessageSecret !== undefined) {
      writer.uint32(234).bytes(message.botMessageSecret);
    }
    if (message.targetMessageKey !== undefined) {
      writer.uint32(242).string(message.targetMessageKey);
    }
    if (message.encPayload !== undefined) {
      writer.uint32(250).bytes(message.encPayload);
    }
    if (message.encIv !== undefined) {
      writer.uint32(258).bytes(message.encIv);
    }
    if (message.eventName !== undefined) {
      writer.uint32(266).string(message.eventName);
    }
    if (message.isEventCanceled !== undefined) {
      writer.uint32(272).bool(message.isEventCanceled);
    }
    if (message.eventDescription !== undefined) {
      writer.uint32(282).string(message.eventDescription);
    }
    if (message.eventJoinLink !== undefined) {
      writer.uint32(290).string(message.eventJoinLink);
    }
    if (message.eventStartTime !== undefined) {
      writer.uint32(296).int64(message.eventStartTime);
    }
    if (message.eventLocation !== undefined) {
      MsgOpaqueData_EventLocation.encode(message.eventLocation, writer.uint32(306).fork()).join();
    }
    if (message.eventEndTime !== undefined) {
      writer.uint32(320).int64(message.eventEndTime);
    }
    if (message.plainProtobufBytes !== undefined) {
      writer.uint32(346).bytes(message.plainProtobufBytes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgOpaqueData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgOpaqueData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.body = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.caption = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.lng = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isLive = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 57) {
            break;
          }

          message.lat = reader.double();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.paymentAmount1000 = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.paymentNoteMsgBody = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.matchedText = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.futureproofBuffer = reader.bytes();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.clientUrl = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.loc = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.pollName = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.pollOptions.push(MsgOpaqueData_PollOption.decode(reader, reader.uint32()));
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.pollSelectableOptionsCount = reader.uint32();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.messageSecret = reader.bytes();
          continue;
        }
        case 51: {
          if (tag !== 410) {
            break;
          }

          message.originalSelfAuthor = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.senderTimestampMs = longToNumber(reader.int64());
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.pollUpdateParentKey = reader.string();
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.encPollVote = PollEncValue.decode(reader, reader.uint32());
          continue;
        }
        case 28: {
          if (tag !== 224) {
            break;
          }

          message.isSentCagPollCreation = reader.bool();
          continue;
        }
        case 42: {
          if (tag !== 336) {
            break;
          }

          message.pollContentType = reader.int32() as any;
          continue;
        }
        case 41: {
          if (tag !== 330) {
            break;
          }

          message.pollVotesSnapshot = MsgOpaqueData_PollVotesSnapshot.decode(reader, reader.uint32());
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.encReactionTargetMessageKey = reader.string();
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.encReactionEncPayload = reader.bytes();
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.encReactionEncIv = reader.bytes();
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.botMessageSecret = reader.bytes();
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.targetMessageKey = reader.string();
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.encPayload = reader.bytes();
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.encIv = reader.bytes();
          continue;
        }
        case 33: {
          if (tag !== 266) {
            break;
          }

          message.eventName = reader.string();
          continue;
        }
        case 34: {
          if (tag !== 272) {
            break;
          }

          message.isEventCanceled = reader.bool();
          continue;
        }
        case 35: {
          if (tag !== 282) {
            break;
          }

          message.eventDescription = reader.string();
          continue;
        }
        case 36: {
          if (tag !== 290) {
            break;
          }

          message.eventJoinLink = reader.string();
          continue;
        }
        case 37: {
          if (tag !== 296) {
            break;
          }

          message.eventStartTime = longToNumber(reader.int64());
          continue;
        }
        case 38: {
          if (tag !== 306) {
            break;
          }

          message.eventLocation = MsgOpaqueData_EventLocation.decode(reader, reader.uint32());
          continue;
        }
        case 40: {
          if (tag !== 320) {
            break;
          }

          message.eventEndTime = longToNumber(reader.int64());
          continue;
        }
        case 43: {
          if (tag !== 346) {
            break;
          }

          message.plainProtobufBytes = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgOpaqueData {
    return {
      body: isSet(object.body) ? globalThis.String(object.body) : undefined,
      caption: isSet(object.caption) ? globalThis.String(object.caption) : undefined,
      lng: isSet(object.lng) ? globalThis.Number(object.lng) : undefined,
      isLive: isSet(object.isLive) ? globalThis.Boolean(object.isLive) : undefined,
      lat: isSet(object.lat) ? globalThis.Number(object.lat) : undefined,
      paymentAmount1000: isSet(object.paymentAmount1000) ? globalThis.Number(object.paymentAmount1000) : undefined,
      paymentNoteMsgBody: isSet(object.paymentNoteMsgBody) ? globalThis.String(object.paymentNoteMsgBody) : undefined,
      matchedText: isSet(object.matchedText) ? globalThis.String(object.matchedText) : undefined,
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      futureproofBuffer: isSet(object.futureproofBuffer) ? bytesFromBase64(object.futureproofBuffer) : undefined,
      clientUrl: isSet(object.clientUrl) ? globalThis.String(object.clientUrl) : undefined,
      loc: isSet(object.loc) ? globalThis.String(object.loc) : undefined,
      pollName: isSet(object.pollName) ? globalThis.String(object.pollName) : undefined,
      pollOptions: globalThis.Array.isArray(object?.pollOptions)
        ? object.pollOptions.map((e: any) => MsgOpaqueData_PollOption.fromJSON(e))
        : [],
      pollSelectableOptionsCount: isSet(object.pollSelectableOptionsCount)
        ? globalThis.Number(object.pollSelectableOptionsCount)
        : undefined,
      messageSecret: isSet(object.messageSecret) ? bytesFromBase64(object.messageSecret) : undefined,
      originalSelfAuthor: isSet(object.originalSelfAuthor) ? globalThis.String(object.originalSelfAuthor) : undefined,
      senderTimestampMs: isSet(object.senderTimestampMs) ? globalThis.Number(object.senderTimestampMs) : undefined,
      pollUpdateParentKey: isSet(object.pollUpdateParentKey)
        ? globalThis.String(object.pollUpdateParentKey)
        : undefined,
      encPollVote: isSet(object.encPollVote) ? PollEncValue.fromJSON(object.encPollVote) : undefined,
      isSentCagPollCreation: isSet(object.isSentCagPollCreation)
        ? globalThis.Boolean(object.isSentCagPollCreation)
        : undefined,
      pollContentType: isSet(object.pollContentType)
        ? msgOpaqueData_PollContentTypeFromJSON(object.pollContentType)
        : undefined,
      pollVotesSnapshot: isSet(object.pollVotesSnapshot)
        ? MsgOpaqueData_PollVotesSnapshot.fromJSON(object.pollVotesSnapshot)
        : undefined,
      encReactionTargetMessageKey: isSet(object.encReactionTargetMessageKey)
        ? globalThis.String(object.encReactionTargetMessageKey)
        : undefined,
      encReactionEncPayload: isSet(object.encReactionEncPayload)
        ? bytesFromBase64(object.encReactionEncPayload)
        : undefined,
      encReactionEncIv: isSet(object.encReactionEncIv) ? bytesFromBase64(object.encReactionEncIv) : undefined,
      botMessageSecret: isSet(object.botMessageSecret) ? bytesFromBase64(object.botMessageSecret) : undefined,
      targetMessageKey: isSet(object.targetMessageKey) ? globalThis.String(object.targetMessageKey) : undefined,
      encPayload: isSet(object.encPayload) ? bytesFromBase64(object.encPayload) : undefined,
      encIv: isSet(object.encIv) ? bytesFromBase64(object.encIv) : undefined,
      eventName: isSet(object.eventName) ? globalThis.String(object.eventName) : undefined,
      isEventCanceled: isSet(object.isEventCanceled) ? globalThis.Boolean(object.isEventCanceled) : undefined,
      eventDescription: isSet(object.eventDescription) ? globalThis.String(object.eventDescription) : undefined,
      eventJoinLink: isSet(object.eventJoinLink) ? globalThis.String(object.eventJoinLink) : undefined,
      eventStartTime: isSet(object.eventStartTime) ? globalThis.Number(object.eventStartTime) : undefined,
      eventLocation: isSet(object.eventLocation)
        ? MsgOpaqueData_EventLocation.fromJSON(object.eventLocation)
        : undefined,
      eventEndTime: isSet(object.eventEndTime) ? globalThis.Number(object.eventEndTime) : undefined,
      plainProtobufBytes: isSet(object.plainProtobufBytes) ? bytesFromBase64(object.plainProtobufBytes) : undefined,
    };
  },

  toJSON(message: MsgOpaqueData): unknown {
    const obj: any = {};
    if (message.body !== undefined) {
      obj.body = message.body;
    }
    if (message.caption !== undefined) {
      obj.caption = message.caption;
    }
    if (message.lng !== undefined) {
      obj.lng = message.lng;
    }
    if (message.isLive !== undefined) {
      obj.isLive = message.isLive;
    }
    if (message.lat !== undefined) {
      obj.lat = message.lat;
    }
    if (message.paymentAmount1000 !== undefined) {
      obj.paymentAmount1000 = Math.round(message.paymentAmount1000);
    }
    if (message.paymentNoteMsgBody !== undefined) {
      obj.paymentNoteMsgBody = message.paymentNoteMsgBody;
    }
    if (message.matchedText !== undefined) {
      obj.matchedText = message.matchedText;
    }
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.futureproofBuffer !== undefined) {
      obj.futureproofBuffer = base64FromBytes(message.futureproofBuffer);
    }
    if (message.clientUrl !== undefined) {
      obj.clientUrl = message.clientUrl;
    }
    if (message.loc !== undefined) {
      obj.loc = message.loc;
    }
    if (message.pollName !== undefined) {
      obj.pollName = message.pollName;
    }
    if (message.pollOptions?.length) {
      obj.pollOptions = message.pollOptions.map((e) => MsgOpaqueData_PollOption.toJSON(e));
    }
    if (message.pollSelectableOptionsCount !== undefined) {
      obj.pollSelectableOptionsCount = Math.round(message.pollSelectableOptionsCount);
    }
    if (message.messageSecret !== undefined) {
      obj.messageSecret = base64FromBytes(message.messageSecret);
    }
    if (message.originalSelfAuthor !== undefined) {
      obj.originalSelfAuthor = message.originalSelfAuthor;
    }
    if (message.senderTimestampMs !== undefined) {
      obj.senderTimestampMs = Math.round(message.senderTimestampMs);
    }
    if (message.pollUpdateParentKey !== undefined) {
      obj.pollUpdateParentKey = message.pollUpdateParentKey;
    }
    if (message.encPollVote !== undefined) {
      obj.encPollVote = PollEncValue.toJSON(message.encPollVote);
    }
    if (message.isSentCagPollCreation !== undefined) {
      obj.isSentCagPollCreation = message.isSentCagPollCreation;
    }
    if (message.pollContentType !== undefined) {
      obj.pollContentType = msgOpaqueData_PollContentTypeToJSON(message.pollContentType);
    }
    if (message.pollVotesSnapshot !== undefined) {
      obj.pollVotesSnapshot = MsgOpaqueData_PollVotesSnapshot.toJSON(message.pollVotesSnapshot);
    }
    if (message.encReactionTargetMessageKey !== undefined) {
      obj.encReactionTargetMessageKey = message.encReactionTargetMessageKey;
    }
    if (message.encReactionEncPayload !== undefined) {
      obj.encReactionEncPayload = base64FromBytes(message.encReactionEncPayload);
    }
    if (message.encReactionEncIv !== undefined) {
      obj.encReactionEncIv = base64FromBytes(message.encReactionEncIv);
    }
    if (message.botMessageSecret !== undefined) {
      obj.botMessageSecret = base64FromBytes(message.botMessageSecret);
    }
    if (message.targetMessageKey !== undefined) {
      obj.targetMessageKey = message.targetMessageKey;
    }
    if (message.encPayload !== undefined) {
      obj.encPayload = base64FromBytes(message.encPayload);
    }
    if (message.encIv !== undefined) {
      obj.encIv = base64FromBytes(message.encIv);
    }
    if (message.eventName !== undefined) {
      obj.eventName = message.eventName;
    }
    if (message.isEventCanceled !== undefined) {
      obj.isEventCanceled = message.isEventCanceled;
    }
    if (message.eventDescription !== undefined) {
      obj.eventDescription = message.eventDescription;
    }
    if (message.eventJoinLink !== undefined) {
      obj.eventJoinLink = message.eventJoinLink;
    }
    if (message.eventStartTime !== undefined) {
      obj.eventStartTime = Math.round(message.eventStartTime);
    }
    if (message.eventLocation !== undefined) {
      obj.eventLocation = MsgOpaqueData_EventLocation.toJSON(message.eventLocation);
    }
    if (message.eventEndTime !== undefined) {
      obj.eventEndTime = Math.round(message.eventEndTime);
    }
    if (message.plainProtobufBytes !== undefined) {
      obj.plainProtobufBytes = base64FromBytes(message.plainProtobufBytes);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgOpaqueData>, I>>(base?: I): MsgOpaqueData {
    return MsgOpaqueData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgOpaqueData>, I>>(object: I): MsgOpaqueData {
    const message = createBaseMsgOpaqueData();
    message.body = object.body ?? undefined;
    message.caption = object.caption ?? undefined;
    message.lng = object.lng ?? undefined;
    message.isLive = object.isLive ?? undefined;
    message.lat = object.lat ?? undefined;
    message.paymentAmount1000 = object.paymentAmount1000 ?? undefined;
    message.paymentNoteMsgBody = object.paymentNoteMsgBody ?? undefined;
    message.matchedText = object.matchedText ?? undefined;
    message.title = object.title ?? undefined;
    message.description = object.description ?? undefined;
    message.futureproofBuffer = object.futureproofBuffer ?? undefined;
    message.clientUrl = object.clientUrl ?? undefined;
    message.loc = object.loc ?? undefined;
    message.pollName = object.pollName ?? undefined;
    message.pollOptions = object.pollOptions?.map((e) => MsgOpaqueData_PollOption.fromPartial(e)) || [];
    message.pollSelectableOptionsCount = object.pollSelectableOptionsCount ?? undefined;
    message.messageSecret = object.messageSecret ?? undefined;
    message.originalSelfAuthor = object.originalSelfAuthor ?? undefined;
    message.senderTimestampMs = object.senderTimestampMs ?? undefined;
    message.pollUpdateParentKey = object.pollUpdateParentKey ?? undefined;
    message.encPollVote = (object.encPollVote !== undefined && object.encPollVote !== null)
      ? PollEncValue.fromPartial(object.encPollVote)
      : undefined;
    message.isSentCagPollCreation = object.isSentCagPollCreation ?? undefined;
    message.pollContentType = object.pollContentType ?? undefined;
    message.pollVotesSnapshot = (object.pollVotesSnapshot !== undefined && object.pollVotesSnapshot !== null)
      ? MsgOpaqueData_PollVotesSnapshot.fromPartial(object.pollVotesSnapshot)
      : undefined;
    message.encReactionTargetMessageKey = object.encReactionTargetMessageKey ?? undefined;
    message.encReactionEncPayload = object.encReactionEncPayload ?? undefined;
    message.encReactionEncIv = object.encReactionEncIv ?? undefined;
    message.botMessageSecret = object.botMessageSecret ?? undefined;
    message.targetMessageKey = object.targetMessageKey ?? undefined;
    message.encPayload = object.encPayload ?? undefined;
    message.encIv = object.encIv ?? undefined;
    message.eventName = object.eventName ?? undefined;
    message.isEventCanceled = object.isEventCanceled ?? undefined;
    message.eventDescription = object.eventDescription ?? undefined;
    message.eventJoinLink = object.eventJoinLink ?? undefined;
    message.eventStartTime = object.eventStartTime ?? undefined;
    message.eventLocation = (object.eventLocation !== undefined && object.eventLocation !== null)
      ? MsgOpaqueData_EventLocation.fromPartial(object.eventLocation)
      : undefined;
    message.eventEndTime = object.eventEndTime ?? undefined;
    message.plainProtobufBytes = object.plainProtobufBytes ?? undefined;
    return message;
  },
};

function createBaseMsgOpaqueData_EventLocation(): MsgOpaqueData_EventLocation {
  return {
    degreesLatitude: undefined,
    degreesLongitude: undefined,
    name: undefined,
    address: undefined,
    url: undefined,
    jpegThumbnail: undefined,
  };
}

export const MsgOpaqueData_EventLocation: MessageFns<MsgOpaqueData_EventLocation> = {
  encode(message: MsgOpaqueData_EventLocation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.degreesLatitude !== undefined) {
      writer.uint32(9).double(message.degreesLatitude);
    }
    if (message.degreesLongitude !== undefined) {
      writer.uint32(17).double(message.degreesLongitude);
    }
    if (message.name !== undefined) {
      writer.uint32(26).string(message.name);
    }
    if (message.address !== undefined) {
      writer.uint32(34).string(message.address);
    }
    if (message.url !== undefined) {
      writer.uint32(42).string(message.url);
    }
    if (message.jpegThumbnail !== undefined) {
      writer.uint32(50).bytes(message.jpegThumbnail);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgOpaqueData_EventLocation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgOpaqueData_EventLocation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.degreesLatitude = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.degreesLongitude = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.jpegThumbnail = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgOpaqueData_EventLocation {
    return {
      degreesLatitude: isSet(object.degreesLatitude) ? globalThis.Number(object.degreesLatitude) : undefined,
      degreesLongitude: isSet(object.degreesLongitude) ? globalThis.Number(object.degreesLongitude) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      address: isSet(object.address) ? globalThis.String(object.address) : undefined,
      url: isSet(object.url) ? globalThis.String(object.url) : undefined,
      jpegThumbnail: isSet(object.jpegThumbnail) ? bytesFromBase64(object.jpegThumbnail) : undefined,
    };
  },

  toJSON(message: MsgOpaqueData_EventLocation): unknown {
    const obj: any = {};
    if (message.degreesLatitude !== undefined) {
      obj.degreesLatitude = message.degreesLatitude;
    }
    if (message.degreesLongitude !== undefined) {
      obj.degreesLongitude = message.degreesLongitude;
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.address !== undefined) {
      obj.address = message.address;
    }
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    if (message.jpegThumbnail !== undefined) {
      obj.jpegThumbnail = base64FromBytes(message.jpegThumbnail);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgOpaqueData_EventLocation>, I>>(base?: I): MsgOpaqueData_EventLocation {
    return MsgOpaqueData_EventLocation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgOpaqueData_EventLocation>, I>>(object: I): MsgOpaqueData_EventLocation {
    const message = createBaseMsgOpaqueData_EventLocation();
    message.degreesLatitude = object.degreesLatitude ?? undefined;
    message.degreesLongitude = object.degreesLongitude ?? undefined;
    message.name = object.name ?? undefined;
    message.address = object.address ?? undefined;
    message.url = object.url ?? undefined;
    message.jpegThumbnail = object.jpegThumbnail ?? undefined;
    return message;
  },
};

function createBaseMsgOpaqueData_PollOption(): MsgOpaqueData_PollOption {
  return { name: undefined, hash: undefined };
}

export const MsgOpaqueData_PollOption: MessageFns<MsgOpaqueData_PollOption> = {
  encode(message: MsgOpaqueData_PollOption, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.hash !== undefined) {
      writer.uint32(18).string(message.hash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgOpaqueData_PollOption {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgOpaqueData_PollOption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.hash = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgOpaqueData_PollOption {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      hash: isSet(object.hash) ? globalThis.String(object.hash) : undefined,
    };
  },

  toJSON(message: MsgOpaqueData_PollOption): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.hash !== undefined) {
      obj.hash = message.hash;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgOpaqueData_PollOption>, I>>(base?: I): MsgOpaqueData_PollOption {
    return MsgOpaqueData_PollOption.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgOpaqueData_PollOption>, I>>(object: I): MsgOpaqueData_PollOption {
    const message = createBaseMsgOpaqueData_PollOption();
    message.name = object.name ?? undefined;
    message.hash = object.hash ?? undefined;
    return message;
  },
};

function createBaseMsgOpaqueData_PollVoteSnapshot(): MsgOpaqueData_PollVoteSnapshot {
  return { option: undefined, optionVoteCount: undefined };
}

export const MsgOpaqueData_PollVoteSnapshot: MessageFns<MsgOpaqueData_PollVoteSnapshot> = {
  encode(message: MsgOpaqueData_PollVoteSnapshot, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.option !== undefined) {
      MsgOpaqueData_PollOption.encode(message.option, writer.uint32(10).fork()).join();
    }
    if (message.optionVoteCount !== undefined) {
      writer.uint32(16).int32(message.optionVoteCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgOpaqueData_PollVoteSnapshot {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgOpaqueData_PollVoteSnapshot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.option = MsgOpaqueData_PollOption.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.optionVoteCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgOpaqueData_PollVoteSnapshot {
    return {
      option: isSet(object.option) ? MsgOpaqueData_PollOption.fromJSON(object.option) : undefined,
      optionVoteCount: isSet(object.optionVoteCount) ? globalThis.Number(object.optionVoteCount) : undefined,
    };
  },

  toJSON(message: MsgOpaqueData_PollVoteSnapshot): unknown {
    const obj: any = {};
    if (message.option !== undefined) {
      obj.option = MsgOpaqueData_PollOption.toJSON(message.option);
    }
    if (message.optionVoteCount !== undefined) {
      obj.optionVoteCount = Math.round(message.optionVoteCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgOpaqueData_PollVoteSnapshot>, I>>(base?: I): MsgOpaqueData_PollVoteSnapshot {
    return MsgOpaqueData_PollVoteSnapshot.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgOpaqueData_PollVoteSnapshot>, I>>(
    object: I,
  ): MsgOpaqueData_PollVoteSnapshot {
    const message = createBaseMsgOpaqueData_PollVoteSnapshot();
    message.option = (object.option !== undefined && object.option !== null)
      ? MsgOpaqueData_PollOption.fromPartial(object.option)
      : undefined;
    message.optionVoteCount = object.optionVoteCount ?? undefined;
    return message;
  },
};

function createBaseMsgOpaqueData_PollVotesSnapshot(): MsgOpaqueData_PollVotesSnapshot {
  return { pollVotes: [] };
}

export const MsgOpaqueData_PollVotesSnapshot: MessageFns<MsgOpaqueData_PollVotesSnapshot> = {
  encode(message: MsgOpaqueData_PollVotesSnapshot, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.pollVotes) {
      MsgOpaqueData_PollVoteSnapshot.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgOpaqueData_PollVotesSnapshot {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgOpaqueData_PollVotesSnapshot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pollVotes.push(MsgOpaqueData_PollVoteSnapshot.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgOpaqueData_PollVotesSnapshot {
    return {
      pollVotes: globalThis.Array.isArray(object?.pollVotes)
        ? object.pollVotes.map((e: any) => MsgOpaqueData_PollVoteSnapshot.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MsgOpaqueData_PollVotesSnapshot): unknown {
    const obj: any = {};
    if (message.pollVotes?.length) {
      obj.pollVotes = message.pollVotes.map((e) => MsgOpaqueData_PollVoteSnapshot.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgOpaqueData_PollVotesSnapshot>, I>>(base?: I): MsgOpaqueData_PollVotesSnapshot {
    return MsgOpaqueData_PollVotesSnapshot.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgOpaqueData_PollVotesSnapshot>, I>>(
    object: I,
  ): MsgOpaqueData_PollVotesSnapshot {
    const message = createBaseMsgOpaqueData_PollVotesSnapshot();
    message.pollVotes = object.pollVotes?.map((e) => MsgOpaqueData_PollVoteSnapshot.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgRowOpaqueData(): MsgRowOpaqueData {
  return { currentMsg: undefined, quotedMsg: undefined };
}

export const MsgRowOpaqueData: MessageFns<MsgRowOpaqueData> = {
  encode(message: MsgRowOpaqueData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.currentMsg !== undefined) {
      MsgOpaqueData.encode(message.currentMsg, writer.uint32(10).fork()).join();
    }
    if (message.quotedMsg !== undefined) {
      MsgOpaqueData.encode(message.quotedMsg, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRowOpaqueData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRowOpaqueData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.currentMsg = MsgOpaqueData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.quotedMsg = MsgOpaqueData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRowOpaqueData {
    return {
      currentMsg: isSet(object.currentMsg) ? MsgOpaqueData.fromJSON(object.currentMsg) : undefined,
      quotedMsg: isSet(object.quotedMsg) ? MsgOpaqueData.fromJSON(object.quotedMsg) : undefined,
    };
  },

  toJSON(message: MsgRowOpaqueData): unknown {
    const obj: any = {};
    if (message.currentMsg !== undefined) {
      obj.currentMsg = MsgOpaqueData.toJSON(message.currentMsg);
    }
    if (message.quotedMsg !== undefined) {
      obj.quotedMsg = MsgOpaqueData.toJSON(message.quotedMsg);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRowOpaqueData>, I>>(base?: I): MsgRowOpaqueData {
    return MsgRowOpaqueData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRowOpaqueData>, I>>(object: I): MsgRowOpaqueData {
    const message = createBaseMsgRowOpaqueData();
    message.currentMsg = (object.currentMsg !== undefined && object.currentMsg !== null)
      ? MsgOpaqueData.fromPartial(object.currentMsg)
      : undefined;
    message.quotedMsg = (object.quotedMsg !== undefined && object.quotedMsg !== null)
      ? MsgOpaqueData.fromPartial(object.quotedMsg)
      : undefined;
    return message;
  },
};

function createBaseNoiseCertificate(): NoiseCertificate {
  return { details: undefined, signature: undefined };
}

export const NoiseCertificate: MessageFns<NoiseCertificate> = {
  encode(message: NoiseCertificate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      writer.uint32(10).bytes(message.details);
    }
    if (message.signature !== undefined) {
      writer.uint32(18).bytes(message.signature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NoiseCertificate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNoiseCertificate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.details = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signature = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NoiseCertificate {
    return {
      details: isSet(object.details) ? bytesFromBase64(object.details) : undefined,
      signature: isSet(object.signature) ? bytesFromBase64(object.signature) : undefined,
    };
  },

  toJSON(message: NoiseCertificate): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = base64FromBytes(message.details);
    }
    if (message.signature !== undefined) {
      obj.signature = base64FromBytes(message.signature);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NoiseCertificate>, I>>(base?: I): NoiseCertificate {
    return NoiseCertificate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NoiseCertificate>, I>>(object: I): NoiseCertificate {
    const message = createBaseNoiseCertificate();
    message.details = object.details ?? undefined;
    message.signature = object.signature ?? undefined;
    return message;
  },
};

function createBaseNoiseCertificate_Details(): NoiseCertificate_Details {
  return { serial: undefined, issuer: undefined, expires: undefined, subject: undefined, key: undefined };
}

export const NoiseCertificate_Details: MessageFns<NoiseCertificate_Details> = {
  encode(message: NoiseCertificate_Details, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serial !== undefined) {
      writer.uint32(8).uint32(message.serial);
    }
    if (message.issuer !== undefined) {
      writer.uint32(18).string(message.issuer);
    }
    if (message.expires !== undefined) {
      writer.uint32(24).uint64(message.expires);
    }
    if (message.subject !== undefined) {
      writer.uint32(34).string(message.subject);
    }
    if (message.key !== undefined) {
      writer.uint32(42).bytes(message.key);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NoiseCertificate_Details {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNoiseCertificate_Details();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.serial = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.issuer = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.expires = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.key = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NoiseCertificate_Details {
    return {
      serial: isSet(object.serial) ? globalThis.Number(object.serial) : undefined,
      issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : undefined,
      expires: isSet(object.expires) ? globalThis.Number(object.expires) : undefined,
      subject: isSet(object.subject) ? globalThis.String(object.subject) : undefined,
      key: isSet(object.key) ? bytesFromBase64(object.key) : undefined,
    };
  },

  toJSON(message: NoiseCertificate_Details): unknown {
    const obj: any = {};
    if (message.serial !== undefined) {
      obj.serial = Math.round(message.serial);
    }
    if (message.issuer !== undefined) {
      obj.issuer = message.issuer;
    }
    if (message.expires !== undefined) {
      obj.expires = Math.round(message.expires);
    }
    if (message.subject !== undefined) {
      obj.subject = message.subject;
    }
    if (message.key !== undefined) {
      obj.key = base64FromBytes(message.key);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NoiseCertificate_Details>, I>>(base?: I): NoiseCertificate_Details {
    return NoiseCertificate_Details.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NoiseCertificate_Details>, I>>(object: I): NoiseCertificate_Details {
    const message = createBaseNoiseCertificate_Details();
    message.serial = object.serial ?? undefined;
    message.issuer = object.issuer ?? undefined;
    message.expires = object.expires ?? undefined;
    message.subject = object.subject ?? undefined;
    message.key = object.key ?? undefined;
    return message;
  },
};

function createBaseNotificationMessageInfo(): NotificationMessageInfo {
  return { key: undefined, message: undefined, messageTimestamp: undefined, participant: undefined };
}

export const NotificationMessageInfo: MessageFns<NotificationMessageInfo> = {
  encode(message: NotificationMessageInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined) {
      MessageKey.encode(message.key, writer.uint32(10).fork()).join();
    }
    if (message.message !== undefined) {
      Message.encode(message.message, writer.uint32(18).fork()).join();
    }
    if (message.messageTimestamp !== undefined) {
      writer.uint32(24).uint64(message.messageTimestamp);
    }
    if (message.participant !== undefined) {
      writer.uint32(34).string(message.participant);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NotificationMessageInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotificationMessageInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = Message.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.messageTimestamp = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.participant = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NotificationMessageInfo {
    return {
      key: isSet(object.key) ? MessageKey.fromJSON(object.key) : undefined,
      message: isSet(object.message) ? Message.fromJSON(object.message) : undefined,
      messageTimestamp: isSet(object.messageTimestamp) ? globalThis.Number(object.messageTimestamp) : undefined,
      participant: isSet(object.participant) ? globalThis.String(object.participant) : undefined,
    };
  },

  toJSON(message: NotificationMessageInfo): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = MessageKey.toJSON(message.key);
    }
    if (message.message !== undefined) {
      obj.message = Message.toJSON(message.message);
    }
    if (message.messageTimestamp !== undefined) {
      obj.messageTimestamp = Math.round(message.messageTimestamp);
    }
    if (message.participant !== undefined) {
      obj.participant = message.participant;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NotificationMessageInfo>, I>>(base?: I): NotificationMessageInfo {
    return NotificationMessageInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NotificationMessageInfo>, I>>(object: I): NotificationMessageInfo {
    const message = createBaseNotificationMessageInfo();
    message.key = (object.key !== undefined && object.key !== null) ? MessageKey.fromPartial(object.key) : undefined;
    message.message = (object.message !== undefined && object.message !== null)
      ? Message.fromPartial(object.message)
      : undefined;
    message.messageTimestamp = object.messageTimestamp ?? undefined;
    message.participant = object.participant ?? undefined;
    return message;
  },
};

function createBaseNotificationSettings(): NotificationSettings {
  return {
    messageVibrate: undefined,
    messagePopup: undefined,
    messageLight: undefined,
    lowPriorityNotifications: undefined,
    reactionsMuted: undefined,
    callVibrate: undefined,
  };
}

export const NotificationSettings: MessageFns<NotificationSettings> = {
  encode(message: NotificationSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.messageVibrate !== undefined) {
      writer.uint32(10).string(message.messageVibrate);
    }
    if (message.messagePopup !== undefined) {
      writer.uint32(18).string(message.messagePopup);
    }
    if (message.messageLight !== undefined) {
      writer.uint32(26).string(message.messageLight);
    }
    if (message.lowPriorityNotifications !== undefined) {
      writer.uint32(32).bool(message.lowPriorityNotifications);
    }
    if (message.reactionsMuted !== undefined) {
      writer.uint32(40).bool(message.reactionsMuted);
    }
    if (message.callVibrate !== undefined) {
      writer.uint32(50).string(message.callVibrate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NotificationSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotificationSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.messageVibrate = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.messagePopup = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.messageLight = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.lowPriorityNotifications = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.reactionsMuted = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.callVibrate = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NotificationSettings {
    return {
      messageVibrate: isSet(object.messageVibrate) ? globalThis.String(object.messageVibrate) : undefined,
      messagePopup: isSet(object.messagePopup) ? globalThis.String(object.messagePopup) : undefined,
      messageLight: isSet(object.messageLight) ? globalThis.String(object.messageLight) : undefined,
      lowPriorityNotifications: isSet(object.lowPriorityNotifications)
        ? globalThis.Boolean(object.lowPriorityNotifications)
        : undefined,
      reactionsMuted: isSet(object.reactionsMuted) ? globalThis.Boolean(object.reactionsMuted) : undefined,
      callVibrate: isSet(object.callVibrate) ? globalThis.String(object.callVibrate) : undefined,
    };
  },

  toJSON(message: NotificationSettings): unknown {
    const obj: any = {};
    if (message.messageVibrate !== undefined) {
      obj.messageVibrate = message.messageVibrate;
    }
    if (message.messagePopup !== undefined) {
      obj.messagePopup = message.messagePopup;
    }
    if (message.messageLight !== undefined) {
      obj.messageLight = message.messageLight;
    }
    if (message.lowPriorityNotifications !== undefined) {
      obj.lowPriorityNotifications = message.lowPriorityNotifications;
    }
    if (message.reactionsMuted !== undefined) {
      obj.reactionsMuted = message.reactionsMuted;
    }
    if (message.callVibrate !== undefined) {
      obj.callVibrate = message.callVibrate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NotificationSettings>, I>>(base?: I): NotificationSettings {
    return NotificationSettings.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NotificationSettings>, I>>(object: I): NotificationSettings {
    const message = createBaseNotificationSettings();
    message.messageVibrate = object.messageVibrate ?? undefined;
    message.messagePopup = object.messagePopup ?? undefined;
    message.messageLight = object.messageLight ?? undefined;
    message.lowPriorityNotifications = object.lowPriorityNotifications ?? undefined;
    message.reactionsMuted = object.reactionsMuted ?? undefined;
    message.callVibrate = object.callVibrate ?? undefined;
    return message;
  },
};

function createBasePairingRequest(): PairingRequest {
  return { companionPublicKey: undefined, companionIdentityKey: undefined, advSecret: undefined };
}

export const PairingRequest: MessageFns<PairingRequest> = {
  encode(message: PairingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.companionPublicKey !== undefined) {
      writer.uint32(10).bytes(message.companionPublicKey);
    }
    if (message.companionIdentityKey !== undefined) {
      writer.uint32(18).bytes(message.companionIdentityKey);
    }
    if (message.advSecret !== undefined) {
      writer.uint32(26).bytes(message.advSecret);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PairingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePairingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.companionPublicKey = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.companionIdentityKey = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.advSecret = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PairingRequest {
    return {
      companionPublicKey: isSet(object.companionPublicKey) ? bytesFromBase64(object.companionPublicKey) : undefined,
      companionIdentityKey: isSet(object.companionIdentityKey)
        ? bytesFromBase64(object.companionIdentityKey)
        : undefined,
      advSecret: isSet(object.advSecret) ? bytesFromBase64(object.advSecret) : undefined,
    };
  },

  toJSON(message: PairingRequest): unknown {
    const obj: any = {};
    if (message.companionPublicKey !== undefined) {
      obj.companionPublicKey = base64FromBytes(message.companionPublicKey);
    }
    if (message.companionIdentityKey !== undefined) {
      obj.companionIdentityKey = base64FromBytes(message.companionIdentityKey);
    }
    if (message.advSecret !== undefined) {
      obj.advSecret = base64FromBytes(message.advSecret);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PairingRequest>, I>>(base?: I): PairingRequest {
    return PairingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PairingRequest>, I>>(object: I): PairingRequest {
    const message = createBasePairingRequest();
    message.companionPublicKey = object.companionPublicKey ?? undefined;
    message.companionIdentityKey = object.companionIdentityKey ?? undefined;
    message.advSecret = object.advSecret ?? undefined;
    return message;
  },
};

function createBasePastParticipant(): PastParticipant {
  return { userJid: undefined, leaveReason: undefined, leaveTs: undefined };
}

export const PastParticipant: MessageFns<PastParticipant> = {
  encode(message: PastParticipant, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userJid !== undefined) {
      writer.uint32(10).string(message.userJid);
    }
    if (message.leaveReason !== undefined) {
      writer.uint32(16).int32(message.leaveReason);
    }
    if (message.leaveTs !== undefined) {
      writer.uint32(24).uint64(message.leaveTs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PastParticipant {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePastParticipant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userJid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.leaveReason = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.leaveTs = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PastParticipant {
    return {
      userJid: isSet(object.userJid) ? globalThis.String(object.userJid) : undefined,
      leaveReason: isSet(object.leaveReason) ? pastParticipant_LeaveReasonFromJSON(object.leaveReason) : undefined,
      leaveTs: isSet(object.leaveTs) ? globalThis.Number(object.leaveTs) : undefined,
    };
  },

  toJSON(message: PastParticipant): unknown {
    const obj: any = {};
    if (message.userJid !== undefined) {
      obj.userJid = message.userJid;
    }
    if (message.leaveReason !== undefined) {
      obj.leaveReason = pastParticipant_LeaveReasonToJSON(message.leaveReason);
    }
    if (message.leaveTs !== undefined) {
      obj.leaveTs = Math.round(message.leaveTs);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PastParticipant>, I>>(base?: I): PastParticipant {
    return PastParticipant.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PastParticipant>, I>>(object: I): PastParticipant {
    const message = createBasePastParticipant();
    message.userJid = object.userJid ?? undefined;
    message.leaveReason = object.leaveReason ?? undefined;
    message.leaveTs = object.leaveTs ?? undefined;
    return message;
  },
};

function createBasePastParticipants(): PastParticipants {
  return { groupJid: undefined, pastParticipants: [] };
}

export const PastParticipants: MessageFns<PastParticipants> = {
  encode(message: PastParticipants, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.groupJid !== undefined) {
      writer.uint32(10).string(message.groupJid);
    }
    for (const v of message.pastParticipants) {
      PastParticipant.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PastParticipants {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePastParticipants();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.groupJid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pastParticipants.push(PastParticipant.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PastParticipants {
    return {
      groupJid: isSet(object.groupJid) ? globalThis.String(object.groupJid) : undefined,
      pastParticipants: globalThis.Array.isArray(object?.pastParticipants)
        ? object.pastParticipants.map((e: any) => PastParticipant.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PastParticipants): unknown {
    const obj: any = {};
    if (message.groupJid !== undefined) {
      obj.groupJid = message.groupJid;
    }
    if (message.pastParticipants?.length) {
      obj.pastParticipants = message.pastParticipants.map((e) => PastParticipant.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PastParticipants>, I>>(base?: I): PastParticipants {
    return PastParticipants.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PastParticipants>, I>>(object: I): PastParticipants {
    const message = createBasePastParticipants();
    message.groupJid = object.groupJid ?? undefined;
    message.pastParticipants = object.pastParticipants?.map((e) => PastParticipant.fromPartial(e)) || [];
    return message;
  },
};

function createBasePatchDebugData(): PatchDebugData {
  return {
    currentLthash: undefined,
    newLthash: undefined,
    patchVersion: undefined,
    collectionName: undefined,
    firstFourBytesFromAHashOfSnapshotMacKey: undefined,
    newLthashSubtract: undefined,
    numberAdd: undefined,
    numberRemove: undefined,
    numberOverride: undefined,
    senderPlatform: undefined,
    isSenderPrimary: undefined,
  };
}

export const PatchDebugData: MessageFns<PatchDebugData> = {
  encode(message: PatchDebugData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.currentLthash !== undefined) {
      writer.uint32(10).bytes(message.currentLthash);
    }
    if (message.newLthash !== undefined) {
      writer.uint32(18).bytes(message.newLthash);
    }
    if (message.patchVersion !== undefined) {
      writer.uint32(26).bytes(message.patchVersion);
    }
    if (message.collectionName !== undefined) {
      writer.uint32(34).bytes(message.collectionName);
    }
    if (message.firstFourBytesFromAHashOfSnapshotMacKey !== undefined) {
      writer.uint32(42).bytes(message.firstFourBytesFromAHashOfSnapshotMacKey);
    }
    if (message.newLthashSubtract !== undefined) {
      writer.uint32(50).bytes(message.newLthashSubtract);
    }
    if (message.numberAdd !== undefined) {
      writer.uint32(56).int32(message.numberAdd);
    }
    if (message.numberRemove !== undefined) {
      writer.uint32(64).int32(message.numberRemove);
    }
    if (message.numberOverride !== undefined) {
      writer.uint32(72).int32(message.numberOverride);
    }
    if (message.senderPlatform !== undefined) {
      writer.uint32(80).int32(message.senderPlatform);
    }
    if (message.isSenderPrimary !== undefined) {
      writer.uint32(88).bool(message.isSenderPrimary);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PatchDebugData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePatchDebugData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.currentLthash = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.newLthash = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.patchVersion = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.collectionName = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.firstFourBytesFromAHashOfSnapshotMacKey = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.newLthashSubtract = reader.bytes();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.numberAdd = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.numberRemove = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.numberOverride = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.senderPlatform = reader.int32() as any;
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.isSenderPrimary = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PatchDebugData {
    return {
      currentLthash: isSet(object.currentLthash) ? bytesFromBase64(object.currentLthash) : undefined,
      newLthash: isSet(object.newLthash) ? bytesFromBase64(object.newLthash) : undefined,
      patchVersion: isSet(object.patchVersion) ? bytesFromBase64(object.patchVersion) : undefined,
      collectionName: isSet(object.collectionName) ? bytesFromBase64(object.collectionName) : undefined,
      firstFourBytesFromAHashOfSnapshotMacKey: isSet(object.firstFourBytesFromAHashOfSnapshotMacKey)
        ? bytesFromBase64(object.firstFourBytesFromAHashOfSnapshotMacKey)
        : undefined,
      newLthashSubtract: isSet(object.newLthashSubtract) ? bytesFromBase64(object.newLthashSubtract) : undefined,
      numberAdd: isSet(object.numberAdd) ? globalThis.Number(object.numberAdd) : undefined,
      numberRemove: isSet(object.numberRemove) ? globalThis.Number(object.numberRemove) : undefined,
      numberOverride: isSet(object.numberOverride) ? globalThis.Number(object.numberOverride) : undefined,
      senderPlatform: isSet(object.senderPlatform) ? patchDebugData_PlatformFromJSON(object.senderPlatform) : undefined,
      isSenderPrimary: isSet(object.isSenderPrimary) ? globalThis.Boolean(object.isSenderPrimary) : undefined,
    };
  },

  toJSON(message: PatchDebugData): unknown {
    const obj: any = {};
    if (message.currentLthash !== undefined) {
      obj.currentLthash = base64FromBytes(message.currentLthash);
    }
    if (message.newLthash !== undefined) {
      obj.newLthash = base64FromBytes(message.newLthash);
    }
    if (message.patchVersion !== undefined) {
      obj.patchVersion = base64FromBytes(message.patchVersion);
    }
    if (message.collectionName !== undefined) {
      obj.collectionName = base64FromBytes(message.collectionName);
    }
    if (message.firstFourBytesFromAHashOfSnapshotMacKey !== undefined) {
      obj.firstFourBytesFromAHashOfSnapshotMacKey = base64FromBytes(message.firstFourBytesFromAHashOfSnapshotMacKey);
    }
    if (message.newLthashSubtract !== undefined) {
      obj.newLthashSubtract = base64FromBytes(message.newLthashSubtract);
    }
    if (message.numberAdd !== undefined) {
      obj.numberAdd = Math.round(message.numberAdd);
    }
    if (message.numberRemove !== undefined) {
      obj.numberRemove = Math.round(message.numberRemove);
    }
    if (message.numberOverride !== undefined) {
      obj.numberOverride = Math.round(message.numberOverride);
    }
    if (message.senderPlatform !== undefined) {
      obj.senderPlatform = patchDebugData_PlatformToJSON(message.senderPlatform);
    }
    if (message.isSenderPrimary !== undefined) {
      obj.isSenderPrimary = message.isSenderPrimary;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PatchDebugData>, I>>(base?: I): PatchDebugData {
    return PatchDebugData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PatchDebugData>, I>>(object: I): PatchDebugData {
    const message = createBasePatchDebugData();
    message.currentLthash = object.currentLthash ?? undefined;
    message.newLthash = object.newLthash ?? undefined;
    message.patchVersion = object.patchVersion ?? undefined;
    message.collectionName = object.collectionName ?? undefined;
    message.firstFourBytesFromAHashOfSnapshotMacKey = object.firstFourBytesFromAHashOfSnapshotMacKey ?? undefined;
    message.newLthashSubtract = object.newLthashSubtract ?? undefined;
    message.numberAdd = object.numberAdd ?? undefined;
    message.numberRemove = object.numberRemove ?? undefined;
    message.numberOverride = object.numberOverride ?? undefined;
    message.senderPlatform = object.senderPlatform ?? undefined;
    message.isSenderPrimary = object.isSenderPrimary ?? undefined;
    return message;
  },
};

function createBasePaymentBackground(): PaymentBackground {
  return {
    id: undefined,
    fileLength: undefined,
    width: undefined,
    height: undefined,
    mimetype: undefined,
    placeholderArgb: undefined,
    textArgb: undefined,
    subtextArgb: undefined,
    mediaData: undefined,
    type: undefined,
  };
}

export const PaymentBackground: MessageFns<PaymentBackground> = {
  encode(message: PaymentBackground, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.fileLength !== undefined) {
      writer.uint32(16).uint64(message.fileLength);
    }
    if (message.width !== undefined) {
      writer.uint32(24).uint32(message.width);
    }
    if (message.height !== undefined) {
      writer.uint32(32).uint32(message.height);
    }
    if (message.mimetype !== undefined) {
      writer.uint32(42).string(message.mimetype);
    }
    if (message.placeholderArgb !== undefined) {
      writer.uint32(53).fixed32(message.placeholderArgb);
    }
    if (message.textArgb !== undefined) {
      writer.uint32(61).fixed32(message.textArgb);
    }
    if (message.subtextArgb !== undefined) {
      writer.uint32(69).fixed32(message.subtextArgb);
    }
    if (message.mediaData !== undefined) {
      PaymentBackground_MediaData.encode(message.mediaData, writer.uint32(74).fork()).join();
    }
    if (message.type !== undefined) {
      writer.uint32(80).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentBackground {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentBackground();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.fileLength = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.width = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.height = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.mimetype = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 53) {
            break;
          }

          message.placeholderArgb = reader.fixed32();
          continue;
        }
        case 7: {
          if (tag !== 61) {
            break;
          }

          message.textArgb = reader.fixed32();
          continue;
        }
        case 8: {
          if (tag !== 69) {
            break;
          }

          message.subtextArgb = reader.fixed32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.mediaData = PaymentBackground_MediaData.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentBackground {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      fileLength: isSet(object.fileLength) ? globalThis.Number(object.fileLength) : undefined,
      width: isSet(object.width) ? globalThis.Number(object.width) : undefined,
      height: isSet(object.height) ? globalThis.Number(object.height) : undefined,
      mimetype: isSet(object.mimetype) ? globalThis.String(object.mimetype) : undefined,
      placeholderArgb: isSet(object.placeholderArgb) ? globalThis.Number(object.placeholderArgb) : undefined,
      textArgb: isSet(object.textArgb) ? globalThis.Number(object.textArgb) : undefined,
      subtextArgb: isSet(object.subtextArgb) ? globalThis.Number(object.subtextArgb) : undefined,
      mediaData: isSet(object.mediaData) ? PaymentBackground_MediaData.fromJSON(object.mediaData) : undefined,
      type: isSet(object.type) ? paymentBackground_TypeFromJSON(object.type) : undefined,
    };
  },

  toJSON(message: PaymentBackground): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.fileLength !== undefined) {
      obj.fileLength = Math.round(message.fileLength);
    }
    if (message.width !== undefined) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== undefined) {
      obj.height = Math.round(message.height);
    }
    if (message.mimetype !== undefined) {
      obj.mimetype = message.mimetype;
    }
    if (message.placeholderArgb !== undefined) {
      obj.placeholderArgb = Math.round(message.placeholderArgb);
    }
    if (message.textArgb !== undefined) {
      obj.textArgb = Math.round(message.textArgb);
    }
    if (message.subtextArgb !== undefined) {
      obj.subtextArgb = Math.round(message.subtextArgb);
    }
    if (message.mediaData !== undefined) {
      obj.mediaData = PaymentBackground_MediaData.toJSON(message.mediaData);
    }
    if (message.type !== undefined) {
      obj.type = paymentBackground_TypeToJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaymentBackground>, I>>(base?: I): PaymentBackground {
    return PaymentBackground.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaymentBackground>, I>>(object: I): PaymentBackground {
    const message = createBasePaymentBackground();
    message.id = object.id ?? undefined;
    message.fileLength = object.fileLength ?? undefined;
    message.width = object.width ?? undefined;
    message.height = object.height ?? undefined;
    message.mimetype = object.mimetype ?? undefined;
    message.placeholderArgb = object.placeholderArgb ?? undefined;
    message.textArgb = object.textArgb ?? undefined;
    message.subtextArgb = object.subtextArgb ?? undefined;
    message.mediaData = (object.mediaData !== undefined && object.mediaData !== null)
      ? PaymentBackground_MediaData.fromPartial(object.mediaData)
      : undefined;
    message.type = object.type ?? undefined;
    return message;
  },
};

function createBasePaymentBackground_MediaData(): PaymentBackground_MediaData {
  return {
    mediaKey: undefined,
    mediaKeyTimestamp: undefined,
    fileSha256: undefined,
    fileEncSha256: undefined,
    directPath: undefined,
  };
}

export const PaymentBackground_MediaData: MessageFns<PaymentBackground_MediaData> = {
  encode(message: PaymentBackground_MediaData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mediaKey !== undefined) {
      writer.uint32(10).bytes(message.mediaKey);
    }
    if (message.mediaKeyTimestamp !== undefined) {
      writer.uint32(16).int64(message.mediaKeyTimestamp);
    }
    if (message.fileSha256 !== undefined) {
      writer.uint32(26).bytes(message.fileSha256);
    }
    if (message.fileEncSha256 !== undefined) {
      writer.uint32(34).bytes(message.fileEncSha256);
    }
    if (message.directPath !== undefined) {
      writer.uint32(42).string(message.directPath);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentBackground_MediaData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentBackground_MediaData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mediaKey = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.mediaKeyTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fileSha256 = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.fileEncSha256 = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.directPath = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentBackground_MediaData {
    return {
      mediaKey: isSet(object.mediaKey) ? bytesFromBase64(object.mediaKey) : undefined,
      mediaKeyTimestamp: isSet(object.mediaKeyTimestamp) ? globalThis.Number(object.mediaKeyTimestamp) : undefined,
      fileSha256: isSet(object.fileSha256) ? bytesFromBase64(object.fileSha256) : undefined,
      fileEncSha256: isSet(object.fileEncSha256) ? bytesFromBase64(object.fileEncSha256) : undefined,
      directPath: isSet(object.directPath) ? globalThis.String(object.directPath) : undefined,
    };
  },

  toJSON(message: PaymentBackground_MediaData): unknown {
    const obj: any = {};
    if (message.mediaKey !== undefined) {
      obj.mediaKey = base64FromBytes(message.mediaKey);
    }
    if (message.mediaKeyTimestamp !== undefined) {
      obj.mediaKeyTimestamp = Math.round(message.mediaKeyTimestamp);
    }
    if (message.fileSha256 !== undefined) {
      obj.fileSha256 = base64FromBytes(message.fileSha256);
    }
    if (message.fileEncSha256 !== undefined) {
      obj.fileEncSha256 = base64FromBytes(message.fileEncSha256);
    }
    if (message.directPath !== undefined) {
      obj.directPath = message.directPath;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaymentBackground_MediaData>, I>>(base?: I): PaymentBackground_MediaData {
    return PaymentBackground_MediaData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaymentBackground_MediaData>, I>>(object: I): PaymentBackground_MediaData {
    const message = createBasePaymentBackground_MediaData();
    message.mediaKey = object.mediaKey ?? undefined;
    message.mediaKeyTimestamp = object.mediaKeyTimestamp ?? undefined;
    message.fileSha256 = object.fileSha256 ?? undefined;
    message.fileEncSha256 = object.fileEncSha256 ?? undefined;
    message.directPath = object.directPath ?? undefined;
    return message;
  },
};

function createBasePaymentInfo(): PaymentInfo {
  return {
    currencyDeprecated: undefined,
    amount1000: undefined,
    receiverJid: undefined,
    status: undefined,
    transactionTimestamp: undefined,
    requestMessageKey: undefined,
    expiryTimestamp: undefined,
    futureproofed: undefined,
    currency: undefined,
    txnStatus: undefined,
    useNoviFiatFormat: undefined,
    primaryAmount: undefined,
    exchangeAmount: undefined,
  };
}

export const PaymentInfo: MessageFns<PaymentInfo> = {
  encode(message: PaymentInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.currencyDeprecated !== undefined) {
      writer.uint32(8).int32(message.currencyDeprecated);
    }
    if (message.amount1000 !== undefined) {
      writer.uint32(16).uint64(message.amount1000);
    }
    if (message.receiverJid !== undefined) {
      writer.uint32(26).string(message.receiverJid);
    }
    if (message.status !== undefined) {
      writer.uint32(32).int32(message.status);
    }
    if (message.transactionTimestamp !== undefined) {
      writer.uint32(40).uint64(message.transactionTimestamp);
    }
    if (message.requestMessageKey !== undefined) {
      MessageKey.encode(message.requestMessageKey, writer.uint32(50).fork()).join();
    }
    if (message.expiryTimestamp !== undefined) {
      writer.uint32(56).uint64(message.expiryTimestamp);
    }
    if (message.futureproofed !== undefined) {
      writer.uint32(64).bool(message.futureproofed);
    }
    if (message.currency !== undefined) {
      writer.uint32(74).string(message.currency);
    }
    if (message.txnStatus !== undefined) {
      writer.uint32(80).int32(message.txnStatus);
    }
    if (message.useNoviFiatFormat !== undefined) {
      writer.uint32(88).bool(message.useNoviFiatFormat);
    }
    if (message.primaryAmount !== undefined) {
      Money.encode(message.primaryAmount, writer.uint32(98).fork()).join();
    }
    if (message.exchangeAmount !== undefined) {
      Money.encode(message.exchangeAmount, writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.currencyDeprecated = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.amount1000 = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.receiverJid = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.transactionTimestamp = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.requestMessageKey = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.expiryTimestamp = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.futureproofed = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.txnStatus = reader.int32() as any;
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.useNoviFiatFormat = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.primaryAmount = Money.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.exchangeAmount = Money.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentInfo {
    return {
      currencyDeprecated: isSet(object.currencyDeprecated)
        ? paymentInfo_CurrencyFromJSON(object.currencyDeprecated)
        : undefined,
      amount1000: isSet(object.amount1000) ? globalThis.Number(object.amount1000) : undefined,
      receiverJid: isSet(object.receiverJid) ? globalThis.String(object.receiverJid) : undefined,
      status: isSet(object.status) ? paymentInfo_StatusFromJSON(object.status) : undefined,
      transactionTimestamp: isSet(object.transactionTimestamp)
        ? globalThis.Number(object.transactionTimestamp)
        : undefined,
      requestMessageKey: isSet(object.requestMessageKey) ? MessageKey.fromJSON(object.requestMessageKey) : undefined,
      expiryTimestamp: isSet(object.expiryTimestamp) ? globalThis.Number(object.expiryTimestamp) : undefined,
      futureproofed: isSet(object.futureproofed) ? globalThis.Boolean(object.futureproofed) : undefined,
      currency: isSet(object.currency) ? globalThis.String(object.currency) : undefined,
      txnStatus: isSet(object.txnStatus) ? paymentInfo_TxnStatusFromJSON(object.txnStatus) : undefined,
      useNoviFiatFormat: isSet(object.useNoviFiatFormat) ? globalThis.Boolean(object.useNoviFiatFormat) : undefined,
      primaryAmount: isSet(object.primaryAmount) ? Money.fromJSON(object.primaryAmount) : undefined,
      exchangeAmount: isSet(object.exchangeAmount) ? Money.fromJSON(object.exchangeAmount) : undefined,
    };
  },

  toJSON(message: PaymentInfo): unknown {
    const obj: any = {};
    if (message.currencyDeprecated !== undefined) {
      obj.currencyDeprecated = paymentInfo_CurrencyToJSON(message.currencyDeprecated);
    }
    if (message.amount1000 !== undefined) {
      obj.amount1000 = Math.round(message.amount1000);
    }
    if (message.receiverJid !== undefined) {
      obj.receiverJid = message.receiverJid;
    }
    if (message.status !== undefined) {
      obj.status = paymentInfo_StatusToJSON(message.status);
    }
    if (message.transactionTimestamp !== undefined) {
      obj.transactionTimestamp = Math.round(message.transactionTimestamp);
    }
    if (message.requestMessageKey !== undefined) {
      obj.requestMessageKey = MessageKey.toJSON(message.requestMessageKey);
    }
    if (message.expiryTimestamp !== undefined) {
      obj.expiryTimestamp = Math.round(message.expiryTimestamp);
    }
    if (message.futureproofed !== undefined) {
      obj.futureproofed = message.futureproofed;
    }
    if (message.currency !== undefined) {
      obj.currency = message.currency;
    }
    if (message.txnStatus !== undefined) {
      obj.txnStatus = paymentInfo_TxnStatusToJSON(message.txnStatus);
    }
    if (message.useNoviFiatFormat !== undefined) {
      obj.useNoviFiatFormat = message.useNoviFiatFormat;
    }
    if (message.primaryAmount !== undefined) {
      obj.primaryAmount = Money.toJSON(message.primaryAmount);
    }
    if (message.exchangeAmount !== undefined) {
      obj.exchangeAmount = Money.toJSON(message.exchangeAmount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaymentInfo>, I>>(base?: I): PaymentInfo {
    return PaymentInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaymentInfo>, I>>(object: I): PaymentInfo {
    const message = createBasePaymentInfo();
    message.currencyDeprecated = object.currencyDeprecated ?? undefined;
    message.amount1000 = object.amount1000 ?? undefined;
    message.receiverJid = object.receiverJid ?? undefined;
    message.status = object.status ?? undefined;
    message.transactionTimestamp = object.transactionTimestamp ?? undefined;
    message.requestMessageKey = (object.requestMessageKey !== undefined && object.requestMessageKey !== null)
      ? MessageKey.fromPartial(object.requestMessageKey)
      : undefined;
    message.expiryTimestamp = object.expiryTimestamp ?? undefined;
    message.futureproofed = object.futureproofed ?? undefined;
    message.currency = object.currency ?? undefined;
    message.txnStatus = object.txnStatus ?? undefined;
    message.useNoviFiatFormat = object.useNoviFiatFormat ?? undefined;
    message.primaryAmount = (object.primaryAmount !== undefined && object.primaryAmount !== null)
      ? Money.fromPartial(object.primaryAmount)
      : undefined;
    message.exchangeAmount = (object.exchangeAmount !== undefined && object.exchangeAmount !== null)
      ? Money.fromPartial(object.exchangeAmount)
      : undefined;
    return message;
  },
};

function createBasePhoneNumberToLIDMapping(): PhoneNumberToLIDMapping {
  return { pnJid: undefined, lidJid: undefined };
}

export const PhoneNumberToLIDMapping: MessageFns<PhoneNumberToLIDMapping> = {
  encode(message: PhoneNumberToLIDMapping, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pnJid !== undefined) {
      writer.uint32(10).string(message.pnJid);
    }
    if (message.lidJid !== undefined) {
      writer.uint32(18).string(message.lidJid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PhoneNumberToLIDMapping {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePhoneNumberToLIDMapping();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pnJid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.lidJid = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PhoneNumberToLIDMapping {
    return {
      pnJid: isSet(object.pnJid) ? globalThis.String(object.pnJid) : undefined,
      lidJid: isSet(object.lidJid) ? globalThis.String(object.lidJid) : undefined,
    };
  },

  toJSON(message: PhoneNumberToLIDMapping): unknown {
    const obj: any = {};
    if (message.pnJid !== undefined) {
      obj.pnJid = message.pnJid;
    }
    if (message.lidJid !== undefined) {
      obj.lidJid = message.lidJid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PhoneNumberToLIDMapping>, I>>(base?: I): PhoneNumberToLIDMapping {
    return PhoneNumberToLIDMapping.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PhoneNumberToLIDMapping>, I>>(object: I): PhoneNumberToLIDMapping {
    const message = createBasePhoneNumberToLIDMapping();
    message.pnJid = object.pnJid ?? undefined;
    message.lidJid = object.lidJid ?? undefined;
    return message;
  },
};

function createBasePhotoChange(): PhotoChange {
  return { oldPhoto: undefined, newPhoto: undefined, newPhotoId: undefined };
}

export const PhotoChange: MessageFns<PhotoChange> = {
  encode(message: PhotoChange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.oldPhoto !== undefined) {
      writer.uint32(10).bytes(message.oldPhoto);
    }
    if (message.newPhoto !== undefined) {
      writer.uint32(18).bytes(message.newPhoto);
    }
    if (message.newPhotoId !== undefined) {
      writer.uint32(24).uint32(message.newPhotoId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PhotoChange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePhotoChange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.oldPhoto = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.newPhoto = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.newPhotoId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PhotoChange {
    return {
      oldPhoto: isSet(object.oldPhoto) ? bytesFromBase64(object.oldPhoto) : undefined,
      newPhoto: isSet(object.newPhoto) ? bytesFromBase64(object.newPhoto) : undefined,
      newPhotoId: isSet(object.newPhotoId) ? globalThis.Number(object.newPhotoId) : undefined,
    };
  },

  toJSON(message: PhotoChange): unknown {
    const obj: any = {};
    if (message.oldPhoto !== undefined) {
      obj.oldPhoto = base64FromBytes(message.oldPhoto);
    }
    if (message.newPhoto !== undefined) {
      obj.newPhoto = base64FromBytes(message.newPhoto);
    }
    if (message.newPhotoId !== undefined) {
      obj.newPhotoId = Math.round(message.newPhotoId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PhotoChange>, I>>(base?: I): PhotoChange {
    return PhotoChange.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PhotoChange>, I>>(object: I): PhotoChange {
    const message = createBasePhotoChange();
    message.oldPhoto = object.oldPhoto ?? undefined;
    message.newPhoto = object.newPhoto ?? undefined;
    message.newPhotoId = object.newPhotoId ?? undefined;
    return message;
  },
};

function createBasePinInChat(): PinInChat {
  return {
    type: undefined,
    key: undefined,
    senderTimestampMs: undefined,
    serverTimestampMs: undefined,
    messageAddOnContextInfo: undefined,
  };
}

export const PinInChat: MessageFns<PinInChat> = {
  encode(message: PinInChat, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== undefined) {
      writer.uint32(8).int32(message.type);
    }
    if (message.key !== undefined) {
      MessageKey.encode(message.key, writer.uint32(18).fork()).join();
    }
    if (message.senderTimestampMs !== undefined) {
      writer.uint32(24).int64(message.senderTimestampMs);
    }
    if (message.serverTimestampMs !== undefined) {
      writer.uint32(32).int64(message.serverTimestampMs);
    }
    if (message.messageAddOnContextInfo !== undefined) {
      MessageAddOnContextInfo.encode(message.messageAddOnContextInfo, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PinInChat {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePinInChat();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.key = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.senderTimestampMs = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.serverTimestampMs = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.messageAddOnContextInfo = MessageAddOnContextInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PinInChat {
    return {
      type: isSet(object.type) ? pinInChat_TypeFromJSON(object.type) : undefined,
      key: isSet(object.key) ? MessageKey.fromJSON(object.key) : undefined,
      senderTimestampMs: isSet(object.senderTimestampMs) ? globalThis.Number(object.senderTimestampMs) : undefined,
      serverTimestampMs: isSet(object.serverTimestampMs) ? globalThis.Number(object.serverTimestampMs) : undefined,
      messageAddOnContextInfo: isSet(object.messageAddOnContextInfo)
        ? MessageAddOnContextInfo.fromJSON(object.messageAddOnContextInfo)
        : undefined,
    };
  },

  toJSON(message: PinInChat): unknown {
    const obj: any = {};
    if (message.type !== undefined) {
      obj.type = pinInChat_TypeToJSON(message.type);
    }
    if (message.key !== undefined) {
      obj.key = MessageKey.toJSON(message.key);
    }
    if (message.senderTimestampMs !== undefined) {
      obj.senderTimestampMs = Math.round(message.senderTimestampMs);
    }
    if (message.serverTimestampMs !== undefined) {
      obj.serverTimestampMs = Math.round(message.serverTimestampMs);
    }
    if (message.messageAddOnContextInfo !== undefined) {
      obj.messageAddOnContextInfo = MessageAddOnContextInfo.toJSON(message.messageAddOnContextInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PinInChat>, I>>(base?: I): PinInChat {
    return PinInChat.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PinInChat>, I>>(object: I): PinInChat {
    const message = createBasePinInChat();
    message.type = object.type ?? undefined;
    message.key = (object.key !== undefined && object.key !== null) ? MessageKey.fromPartial(object.key) : undefined;
    message.senderTimestampMs = object.senderTimestampMs ?? undefined;
    message.serverTimestampMs = object.serverTimestampMs ?? undefined;
    message.messageAddOnContextInfo =
      (object.messageAddOnContextInfo !== undefined && object.messageAddOnContextInfo !== null)
        ? MessageAddOnContextInfo.fromPartial(object.messageAddOnContextInfo)
        : undefined;
    return message;
  },
};

function createBasePoint(): Point {
  return { xDeprecated: undefined, yDeprecated: undefined, x: undefined, y: undefined };
}

export const Point: MessageFns<Point> = {
  encode(message: Point, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.xDeprecated !== undefined) {
      writer.uint32(8).int32(message.xDeprecated);
    }
    if (message.yDeprecated !== undefined) {
      writer.uint32(16).int32(message.yDeprecated);
    }
    if (message.x !== undefined) {
      writer.uint32(25).double(message.x);
    }
    if (message.y !== undefined) {
      writer.uint32(33).double(message.y);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Point {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.xDeprecated = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.yDeprecated = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.x = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.y = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Point {
    return {
      xDeprecated: isSet(object.xDeprecated) ? globalThis.Number(object.xDeprecated) : undefined,
      yDeprecated: isSet(object.yDeprecated) ? globalThis.Number(object.yDeprecated) : undefined,
      x: isSet(object.x) ? globalThis.Number(object.x) : undefined,
      y: isSet(object.y) ? globalThis.Number(object.y) : undefined,
    };
  },

  toJSON(message: Point): unknown {
    const obj: any = {};
    if (message.xDeprecated !== undefined) {
      obj.xDeprecated = Math.round(message.xDeprecated);
    }
    if (message.yDeprecated !== undefined) {
      obj.yDeprecated = Math.round(message.yDeprecated);
    }
    if (message.x !== undefined) {
      obj.x = message.x;
    }
    if (message.y !== undefined) {
      obj.y = message.y;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Point>, I>>(base?: I): Point {
    return Point.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Point>, I>>(object: I): Point {
    const message = createBasePoint();
    message.xDeprecated = object.xDeprecated ?? undefined;
    message.yDeprecated = object.yDeprecated ?? undefined;
    message.x = object.x ?? undefined;
    message.y = object.y ?? undefined;
    return message;
  },
};

function createBasePollAdditionalMetadata(): PollAdditionalMetadata {
  return { pollInvalidated: undefined };
}

export const PollAdditionalMetadata: MessageFns<PollAdditionalMetadata> = {
  encode(message: PollAdditionalMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pollInvalidated !== undefined) {
      writer.uint32(8).bool(message.pollInvalidated);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PollAdditionalMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePollAdditionalMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pollInvalidated = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PollAdditionalMetadata {
    return { pollInvalidated: isSet(object.pollInvalidated) ? globalThis.Boolean(object.pollInvalidated) : undefined };
  },

  toJSON(message: PollAdditionalMetadata): unknown {
    const obj: any = {};
    if (message.pollInvalidated !== undefined) {
      obj.pollInvalidated = message.pollInvalidated;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PollAdditionalMetadata>, I>>(base?: I): PollAdditionalMetadata {
    return PollAdditionalMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PollAdditionalMetadata>, I>>(object: I): PollAdditionalMetadata {
    const message = createBasePollAdditionalMetadata();
    message.pollInvalidated = object.pollInvalidated ?? undefined;
    return message;
  },
};

function createBasePollEncValue(): PollEncValue {
  return { encPayload: undefined, encIv: undefined };
}

export const PollEncValue: MessageFns<PollEncValue> = {
  encode(message: PollEncValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.encPayload !== undefined) {
      writer.uint32(10).bytes(message.encPayload);
    }
    if (message.encIv !== undefined) {
      writer.uint32(18).bytes(message.encIv);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PollEncValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePollEncValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.encPayload = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.encIv = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PollEncValue {
    return {
      encPayload: isSet(object.encPayload) ? bytesFromBase64(object.encPayload) : undefined,
      encIv: isSet(object.encIv) ? bytesFromBase64(object.encIv) : undefined,
    };
  },

  toJSON(message: PollEncValue): unknown {
    const obj: any = {};
    if (message.encPayload !== undefined) {
      obj.encPayload = base64FromBytes(message.encPayload);
    }
    if (message.encIv !== undefined) {
      obj.encIv = base64FromBytes(message.encIv);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PollEncValue>, I>>(base?: I): PollEncValue {
    return PollEncValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PollEncValue>, I>>(object: I): PollEncValue {
    const message = createBasePollEncValue();
    message.encPayload = object.encPayload ?? undefined;
    message.encIv = object.encIv ?? undefined;
    return message;
  },
};

function createBasePollUpdate(): PollUpdate {
  return {
    pollUpdateMessageKey: undefined,
    vote: undefined,
    senderTimestampMs: undefined,
    serverTimestampMs: undefined,
    unread: undefined,
  };
}

export const PollUpdate: MessageFns<PollUpdate> = {
  encode(message: PollUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pollUpdateMessageKey !== undefined) {
      MessageKey.encode(message.pollUpdateMessageKey, writer.uint32(10).fork()).join();
    }
    if (message.vote !== undefined) {
      Message_PollVoteMessage.encode(message.vote, writer.uint32(18).fork()).join();
    }
    if (message.senderTimestampMs !== undefined) {
      writer.uint32(24).int64(message.senderTimestampMs);
    }
    if (message.serverTimestampMs !== undefined) {
      writer.uint32(32).int64(message.serverTimestampMs);
    }
    if (message.unread !== undefined) {
      writer.uint32(40).bool(message.unread);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PollUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePollUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pollUpdateMessageKey = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.vote = Message_PollVoteMessage.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.senderTimestampMs = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.serverTimestampMs = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.unread = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PollUpdate {
    return {
      pollUpdateMessageKey: isSet(object.pollUpdateMessageKey)
        ? MessageKey.fromJSON(object.pollUpdateMessageKey)
        : undefined,
      vote: isSet(object.vote) ? Message_PollVoteMessage.fromJSON(object.vote) : undefined,
      senderTimestampMs: isSet(object.senderTimestampMs) ? globalThis.Number(object.senderTimestampMs) : undefined,
      serverTimestampMs: isSet(object.serverTimestampMs) ? globalThis.Number(object.serverTimestampMs) : undefined,
      unread: isSet(object.unread) ? globalThis.Boolean(object.unread) : undefined,
    };
  },

  toJSON(message: PollUpdate): unknown {
    const obj: any = {};
    if (message.pollUpdateMessageKey !== undefined) {
      obj.pollUpdateMessageKey = MessageKey.toJSON(message.pollUpdateMessageKey);
    }
    if (message.vote !== undefined) {
      obj.vote = Message_PollVoteMessage.toJSON(message.vote);
    }
    if (message.senderTimestampMs !== undefined) {
      obj.senderTimestampMs = Math.round(message.senderTimestampMs);
    }
    if (message.serverTimestampMs !== undefined) {
      obj.serverTimestampMs = Math.round(message.serverTimestampMs);
    }
    if (message.unread !== undefined) {
      obj.unread = message.unread;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PollUpdate>, I>>(base?: I): PollUpdate {
    return PollUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PollUpdate>, I>>(object: I): PollUpdate {
    const message = createBasePollUpdate();
    message.pollUpdateMessageKey = (object.pollUpdateMessageKey !== undefined && object.pollUpdateMessageKey !== null)
      ? MessageKey.fromPartial(object.pollUpdateMessageKey)
      : undefined;
    message.vote = (object.vote !== undefined && object.vote !== null)
      ? Message_PollVoteMessage.fromPartial(object.vote)
      : undefined;
    message.senderTimestampMs = object.senderTimestampMs ?? undefined;
    message.serverTimestampMs = object.serverTimestampMs ?? undefined;
    message.unread = object.unread ?? undefined;
    return message;
  },
};

function createBasePreKeyRecordStructure(): PreKeyRecordStructure {
  return { id: undefined, publicKey: undefined, privateKey: undefined };
}

export const PreKeyRecordStructure: MessageFns<PreKeyRecordStructure> = {
  encode(message: PreKeyRecordStructure, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.publicKey !== undefined) {
      writer.uint32(18).bytes(message.publicKey);
    }
    if (message.privateKey !== undefined) {
      writer.uint32(26).bytes(message.privateKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PreKeyRecordStructure {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePreKeyRecordStructure();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.publicKey = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.privateKey = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PreKeyRecordStructure {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : undefined,
      publicKey: isSet(object.publicKey) ? bytesFromBase64(object.publicKey) : undefined,
      privateKey: isSet(object.privateKey) ? bytesFromBase64(object.privateKey) : undefined,
    };
  },

  toJSON(message: PreKeyRecordStructure): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = Math.round(message.id);
    }
    if (message.publicKey !== undefined) {
      obj.publicKey = base64FromBytes(message.publicKey);
    }
    if (message.privateKey !== undefined) {
      obj.privateKey = base64FromBytes(message.privateKey);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PreKeyRecordStructure>, I>>(base?: I): PreKeyRecordStructure {
    return PreKeyRecordStructure.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PreKeyRecordStructure>, I>>(object: I): PreKeyRecordStructure {
    const message = createBasePreKeyRecordStructure();
    message.id = object.id ?? undefined;
    message.publicKey = object.publicKey ?? undefined;
    message.privateKey = object.privateKey ?? undefined;
    return message;
  },
};

function createBasePreKeySignalMessage(): PreKeySignalMessage {
  return {
    registrationId: undefined,
    preKeyId: undefined,
    signedPreKeyId: undefined,
    baseKey: undefined,
    identityKey: undefined,
    message: undefined,
  };
}

export const PreKeySignalMessage: MessageFns<PreKeySignalMessage> = {
  encode(message: PreKeySignalMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.registrationId !== undefined) {
      writer.uint32(40).uint32(message.registrationId);
    }
    if (message.preKeyId !== undefined) {
      writer.uint32(8).uint32(message.preKeyId);
    }
    if (message.signedPreKeyId !== undefined) {
      writer.uint32(48).uint32(message.signedPreKeyId);
    }
    if (message.baseKey !== undefined) {
      writer.uint32(18).bytes(message.baseKey);
    }
    if (message.identityKey !== undefined) {
      writer.uint32(26).bytes(message.identityKey);
    }
    if (message.message !== undefined) {
      writer.uint32(34).bytes(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PreKeySignalMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePreKeySignalMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.registrationId = reader.uint32();
          continue;
        }
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.preKeyId = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.signedPreKeyId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.baseKey = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.identityKey = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.message = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PreKeySignalMessage {
    return {
      registrationId: isSet(object.registrationId) ? globalThis.Number(object.registrationId) : undefined,
      preKeyId: isSet(object.preKeyId) ? globalThis.Number(object.preKeyId) : undefined,
      signedPreKeyId: isSet(object.signedPreKeyId) ? globalThis.Number(object.signedPreKeyId) : undefined,
      baseKey: isSet(object.baseKey) ? bytesFromBase64(object.baseKey) : undefined,
      identityKey: isSet(object.identityKey) ? bytesFromBase64(object.identityKey) : undefined,
      message: isSet(object.message) ? bytesFromBase64(object.message) : undefined,
    };
  },

  toJSON(message: PreKeySignalMessage): unknown {
    const obj: any = {};
    if (message.registrationId !== undefined) {
      obj.registrationId = Math.round(message.registrationId);
    }
    if (message.preKeyId !== undefined) {
      obj.preKeyId = Math.round(message.preKeyId);
    }
    if (message.signedPreKeyId !== undefined) {
      obj.signedPreKeyId = Math.round(message.signedPreKeyId);
    }
    if (message.baseKey !== undefined) {
      obj.baseKey = base64FromBytes(message.baseKey);
    }
    if (message.identityKey !== undefined) {
      obj.identityKey = base64FromBytes(message.identityKey);
    }
    if (message.message !== undefined) {
      obj.message = base64FromBytes(message.message);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PreKeySignalMessage>, I>>(base?: I): PreKeySignalMessage {
    return PreKeySignalMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PreKeySignalMessage>, I>>(object: I): PreKeySignalMessage {
    const message = createBasePreKeySignalMessage();
    message.registrationId = object.registrationId ?? undefined;
    message.preKeyId = object.preKeyId ?? undefined;
    message.signedPreKeyId = object.signedPreKeyId ?? undefined;
    message.baseKey = object.baseKey ?? undefined;
    message.identityKey = object.identityKey ?? undefined;
    message.message = object.message ?? undefined;
    return message;
  },
};

function createBasePremiumMessageInfo(): PremiumMessageInfo {
  return { serverCampaignId: undefined };
}

export const PremiumMessageInfo: MessageFns<PremiumMessageInfo> = {
  encode(message: PremiumMessageInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serverCampaignId !== undefined) {
      writer.uint32(10).string(message.serverCampaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PremiumMessageInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePremiumMessageInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.serverCampaignId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PremiumMessageInfo {
    return {
      serverCampaignId: isSet(object.serverCampaignId) ? globalThis.String(object.serverCampaignId) : undefined,
    };
  },

  toJSON(message: PremiumMessageInfo): unknown {
    const obj: any = {};
    if (message.serverCampaignId !== undefined) {
      obj.serverCampaignId = message.serverCampaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PremiumMessageInfo>, I>>(base?: I): PremiumMessageInfo {
    return PremiumMessageInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PremiumMessageInfo>, I>>(object: I): PremiumMessageInfo {
    const message = createBasePremiumMessageInfo();
    message.serverCampaignId = object.serverCampaignId ?? undefined;
    return message;
  },
};

function createBasePrimaryEphemeralIdentity(): PrimaryEphemeralIdentity {
  return { publicKey: undefined, nonce: undefined };
}

export const PrimaryEphemeralIdentity: MessageFns<PrimaryEphemeralIdentity> = {
  encode(message: PrimaryEphemeralIdentity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.publicKey !== undefined) {
      writer.uint32(10).bytes(message.publicKey);
    }
    if (message.nonce !== undefined) {
      writer.uint32(18).bytes(message.nonce);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrimaryEphemeralIdentity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrimaryEphemeralIdentity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.publicKey = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nonce = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrimaryEphemeralIdentity {
    return {
      publicKey: isSet(object.publicKey) ? bytesFromBase64(object.publicKey) : undefined,
      nonce: isSet(object.nonce) ? bytesFromBase64(object.nonce) : undefined,
    };
  },

  toJSON(message: PrimaryEphemeralIdentity): unknown {
    const obj: any = {};
    if (message.publicKey !== undefined) {
      obj.publicKey = base64FromBytes(message.publicKey);
    }
    if (message.nonce !== undefined) {
      obj.nonce = base64FromBytes(message.nonce);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrimaryEphemeralIdentity>, I>>(base?: I): PrimaryEphemeralIdentity {
    return PrimaryEphemeralIdentity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrimaryEphemeralIdentity>, I>>(object: I): PrimaryEphemeralIdentity {
    const message = createBasePrimaryEphemeralIdentity();
    message.publicKey = object.publicKey ?? undefined;
    message.nonce = object.nonce ?? undefined;
    return message;
  },
};

function createBaseProcessedVideo(): ProcessedVideo {
  return {
    directPath: undefined,
    fileSha256: undefined,
    height: undefined,
    width: undefined,
    fileLength: undefined,
    bitrate: undefined,
    quality: undefined,
    capabilities: [],
  };
}

export const ProcessedVideo: MessageFns<ProcessedVideo> = {
  encode(message: ProcessedVideo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.directPath !== undefined) {
      writer.uint32(10).string(message.directPath);
    }
    if (message.fileSha256 !== undefined) {
      writer.uint32(18).bytes(message.fileSha256);
    }
    if (message.height !== undefined) {
      writer.uint32(24).uint32(message.height);
    }
    if (message.width !== undefined) {
      writer.uint32(32).uint32(message.width);
    }
    if (message.fileLength !== undefined) {
      writer.uint32(40).uint64(message.fileLength);
    }
    if (message.bitrate !== undefined) {
      writer.uint32(48).uint32(message.bitrate);
    }
    if (message.quality !== undefined) {
      writer.uint32(56).int32(message.quality);
    }
    for (const v of message.capabilities) {
      writer.uint32(66).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessedVideo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessedVideo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.directPath = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fileSha256 = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.height = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.width = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.fileLength = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.bitrate = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.quality = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.capabilities.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessedVideo {
    return {
      directPath: isSet(object.directPath) ? globalThis.String(object.directPath) : undefined,
      fileSha256: isSet(object.fileSha256) ? bytesFromBase64(object.fileSha256) : undefined,
      height: isSet(object.height) ? globalThis.Number(object.height) : undefined,
      width: isSet(object.width) ? globalThis.Number(object.width) : undefined,
      fileLength: isSet(object.fileLength) ? globalThis.Number(object.fileLength) : undefined,
      bitrate: isSet(object.bitrate) ? globalThis.Number(object.bitrate) : undefined,
      quality: isSet(object.quality) ? processedVideo_VideoQualityFromJSON(object.quality) : undefined,
      capabilities: globalThis.Array.isArray(object?.capabilities)
        ? object.capabilities.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ProcessedVideo): unknown {
    const obj: any = {};
    if (message.directPath !== undefined) {
      obj.directPath = message.directPath;
    }
    if (message.fileSha256 !== undefined) {
      obj.fileSha256 = base64FromBytes(message.fileSha256);
    }
    if (message.height !== undefined) {
      obj.height = Math.round(message.height);
    }
    if (message.width !== undefined) {
      obj.width = Math.round(message.width);
    }
    if (message.fileLength !== undefined) {
      obj.fileLength = Math.round(message.fileLength);
    }
    if (message.bitrate !== undefined) {
      obj.bitrate = Math.round(message.bitrate);
    }
    if (message.quality !== undefined) {
      obj.quality = processedVideo_VideoQualityToJSON(message.quality);
    }
    if (message.capabilities?.length) {
      obj.capabilities = message.capabilities;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProcessedVideo>, I>>(base?: I): ProcessedVideo {
    return ProcessedVideo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProcessedVideo>, I>>(object: I): ProcessedVideo {
    const message = createBaseProcessedVideo();
    message.directPath = object.directPath ?? undefined;
    message.fileSha256 = object.fileSha256 ?? undefined;
    message.height = object.height ?? undefined;
    message.width = object.width ?? undefined;
    message.fileLength = object.fileLength ?? undefined;
    message.bitrate = object.bitrate ?? undefined;
    message.quality = object.quality ?? undefined;
    message.capabilities = object.capabilities?.map((e) => e) || [];
    return message;
  },
};

function createBaseProloguePayload(): ProloguePayload {
  return { companionEphemeralIdentity: undefined, commitment: undefined };
}

export const ProloguePayload: MessageFns<ProloguePayload> = {
  encode(message: ProloguePayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.companionEphemeralIdentity !== undefined) {
      writer.uint32(10).bytes(message.companionEphemeralIdentity);
    }
    if (message.commitment !== undefined) {
      CompanionCommitment.encode(message.commitment, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProloguePayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProloguePayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.companionEphemeralIdentity = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.commitment = CompanionCommitment.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProloguePayload {
    return {
      companionEphemeralIdentity: isSet(object.companionEphemeralIdentity)
        ? bytesFromBase64(object.companionEphemeralIdentity)
        : undefined,
      commitment: isSet(object.commitment) ? CompanionCommitment.fromJSON(object.commitment) : undefined,
    };
  },

  toJSON(message: ProloguePayload): unknown {
    const obj: any = {};
    if (message.companionEphemeralIdentity !== undefined) {
      obj.companionEphemeralIdentity = base64FromBytes(message.companionEphemeralIdentity);
    }
    if (message.commitment !== undefined) {
      obj.commitment = CompanionCommitment.toJSON(message.commitment);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProloguePayload>, I>>(base?: I): ProloguePayload {
    return ProloguePayload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProloguePayload>, I>>(object: I): ProloguePayload {
    const message = createBaseProloguePayload();
    message.companionEphemeralIdentity = object.companionEphemeralIdentity ?? undefined;
    message.commitment = (object.commitment !== undefined && object.commitment !== null)
      ? CompanionCommitment.fromPartial(object.commitment)
      : undefined;
    return message;
  },
};

function createBasePushname(): Pushname {
  return { id: undefined, pushname: undefined };
}

export const Pushname: MessageFns<Pushname> = {
  encode(message: Pushname, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    if (message.pushname !== undefined) {
      writer.uint32(18).string(message.pushname);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Pushname {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePushname();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pushname = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Pushname {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      pushname: isSet(object.pushname) ? globalThis.String(object.pushname) : undefined,
    };
  },

  toJSON(message: Pushname): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.pushname !== undefined) {
      obj.pushname = message.pushname;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Pushname>, I>>(base?: I): Pushname {
    return Pushname.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Pushname>, I>>(object: I): Pushname {
    const message = createBasePushname();
    message.id = object.id ?? undefined;
    message.pushname = object.pushname ?? undefined;
    return message;
  },
};

function createBaseReaction(): Reaction {
  return { key: undefined, text: undefined, groupingKey: undefined, senderTimestampMs: undefined, unread: undefined };
}

export const Reaction: MessageFns<Reaction> = {
  encode(message: Reaction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined) {
      MessageKey.encode(message.key, writer.uint32(10).fork()).join();
    }
    if (message.text !== undefined) {
      writer.uint32(18).string(message.text);
    }
    if (message.groupingKey !== undefined) {
      writer.uint32(26).string(message.groupingKey);
    }
    if (message.senderTimestampMs !== undefined) {
      writer.uint32(32).int64(message.senderTimestampMs);
    }
    if (message.unread !== undefined) {
      writer.uint32(40).bool(message.unread);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Reaction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.groupingKey = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.senderTimestampMs = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.unread = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Reaction {
    return {
      key: isSet(object.key) ? MessageKey.fromJSON(object.key) : undefined,
      text: isSet(object.text) ? globalThis.String(object.text) : undefined,
      groupingKey: isSet(object.groupingKey) ? globalThis.String(object.groupingKey) : undefined,
      senderTimestampMs: isSet(object.senderTimestampMs) ? globalThis.Number(object.senderTimestampMs) : undefined,
      unread: isSet(object.unread) ? globalThis.Boolean(object.unread) : undefined,
    };
  },

  toJSON(message: Reaction): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = MessageKey.toJSON(message.key);
    }
    if (message.text !== undefined) {
      obj.text = message.text;
    }
    if (message.groupingKey !== undefined) {
      obj.groupingKey = message.groupingKey;
    }
    if (message.senderTimestampMs !== undefined) {
      obj.senderTimestampMs = Math.round(message.senderTimestampMs);
    }
    if (message.unread !== undefined) {
      obj.unread = message.unread;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Reaction>, I>>(base?: I): Reaction {
    return Reaction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Reaction>, I>>(object: I): Reaction {
    const message = createBaseReaction();
    message.key = (object.key !== undefined && object.key !== null) ? MessageKey.fromPartial(object.key) : undefined;
    message.text = object.text ?? undefined;
    message.groupingKey = object.groupingKey ?? undefined;
    message.senderTimestampMs = object.senderTimestampMs ?? undefined;
    message.unread = object.unread ?? undefined;
    return message;
  },
};

function createBaseRecentEmojiWeight(): RecentEmojiWeight {
  return { emoji: undefined, weight: undefined };
}

export const RecentEmojiWeight: MessageFns<RecentEmojiWeight> = {
  encode(message: RecentEmojiWeight, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.emoji !== undefined) {
      writer.uint32(10).string(message.emoji);
    }
    if (message.weight !== undefined) {
      writer.uint32(21).float(message.weight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecentEmojiWeight {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecentEmojiWeight();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.emoji = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.weight = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecentEmojiWeight {
    return {
      emoji: isSet(object.emoji) ? globalThis.String(object.emoji) : undefined,
      weight: isSet(object.weight) ? globalThis.Number(object.weight) : undefined,
    };
  },

  toJSON(message: RecentEmojiWeight): unknown {
    const obj: any = {};
    if (message.emoji !== undefined) {
      obj.emoji = message.emoji;
    }
    if (message.weight !== undefined) {
      obj.weight = message.weight;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecentEmojiWeight>, I>>(base?: I): RecentEmojiWeight {
    return RecentEmojiWeight.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecentEmojiWeight>, I>>(object: I): RecentEmojiWeight {
    const message = createBaseRecentEmojiWeight();
    message.emoji = object.emoji ?? undefined;
    message.weight = object.weight ?? undefined;
    return message;
  },
};

function createBaseRecordStructure(): RecordStructure {
  return { currentSession: undefined, previousSessions: [] };
}

export const RecordStructure: MessageFns<RecordStructure> = {
  encode(message: RecordStructure, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.currentSession !== undefined) {
      SessionStructure.encode(message.currentSession, writer.uint32(10).fork()).join();
    }
    for (const v of message.previousSessions) {
      SessionStructure.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecordStructure {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecordStructure();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.currentSession = SessionStructure.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.previousSessions.push(SessionStructure.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecordStructure {
    return {
      currentSession: isSet(object.currentSession) ? SessionStructure.fromJSON(object.currentSession) : undefined,
      previousSessions: globalThis.Array.isArray(object?.previousSessions)
        ? object.previousSessions.map((e: any) => SessionStructure.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RecordStructure): unknown {
    const obj: any = {};
    if (message.currentSession !== undefined) {
      obj.currentSession = SessionStructure.toJSON(message.currentSession);
    }
    if (message.previousSessions?.length) {
      obj.previousSessions = message.previousSessions.map((e) => SessionStructure.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecordStructure>, I>>(base?: I): RecordStructure {
    return RecordStructure.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecordStructure>, I>>(object: I): RecordStructure {
    const message = createBaseRecordStructure();
    message.currentSession = (object.currentSession !== undefined && object.currentSession !== null)
      ? SessionStructure.fromPartial(object.currentSession)
      : undefined;
    message.previousSessions = object.previousSessions?.map((e) => SessionStructure.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReportable(): Reportable {
  return { minVersion: undefined, maxVersion: undefined, notReportableMinVersion: undefined, never: undefined };
}

export const Reportable: MessageFns<Reportable> = {
  encode(message: Reportable, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.minVersion !== undefined) {
      writer.uint32(8).uint32(message.minVersion);
    }
    if (message.maxVersion !== undefined) {
      writer.uint32(16).uint32(message.maxVersion);
    }
    if (message.notReportableMinVersion !== undefined) {
      writer.uint32(24).uint32(message.notReportableMinVersion);
    }
    if (message.never !== undefined) {
      writer.uint32(32).bool(message.never);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Reportable {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportable();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.minVersion = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.maxVersion = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.notReportableMinVersion = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.never = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Reportable {
    return {
      minVersion: isSet(object.minVersion) ? globalThis.Number(object.minVersion) : undefined,
      maxVersion: isSet(object.maxVersion) ? globalThis.Number(object.maxVersion) : undefined,
      notReportableMinVersion: isSet(object.notReportableMinVersion)
        ? globalThis.Number(object.notReportableMinVersion)
        : undefined,
      never: isSet(object.never) ? globalThis.Boolean(object.never) : undefined,
    };
  },

  toJSON(message: Reportable): unknown {
    const obj: any = {};
    if (message.minVersion !== undefined) {
      obj.minVersion = Math.round(message.minVersion);
    }
    if (message.maxVersion !== undefined) {
      obj.maxVersion = Math.round(message.maxVersion);
    }
    if (message.notReportableMinVersion !== undefined) {
      obj.notReportableMinVersion = Math.round(message.notReportableMinVersion);
    }
    if (message.never !== undefined) {
      obj.never = message.never;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Reportable>, I>>(base?: I): Reportable {
    return Reportable.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Reportable>, I>>(object: I): Reportable {
    const message = createBaseReportable();
    message.minVersion = object.minVersion ?? undefined;
    message.maxVersion = object.maxVersion ?? undefined;
    message.notReportableMinVersion = object.notReportableMinVersion ?? undefined;
    message.never = object.never ?? undefined;
    return message;
  },
};

function createBaseReportingTokenInfo(): ReportingTokenInfo {
  return { reportingTag: undefined };
}

export const ReportingTokenInfo: MessageFns<ReportingTokenInfo> = {
  encode(message: ReportingTokenInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reportingTag !== undefined) {
      writer.uint32(10).bytes(message.reportingTag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReportingTokenInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReportingTokenInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.reportingTag = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReportingTokenInfo {
    return { reportingTag: isSet(object.reportingTag) ? bytesFromBase64(object.reportingTag) : undefined };
  },

  toJSON(message: ReportingTokenInfo): unknown {
    const obj: any = {};
    if (message.reportingTag !== undefined) {
      obj.reportingTag = base64FromBytes(message.reportingTag);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReportingTokenInfo>, I>>(base?: I): ReportingTokenInfo {
    return ReportingTokenInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReportingTokenInfo>, I>>(object: I): ReportingTokenInfo {
    const message = createBaseReportingTokenInfo();
    message.reportingTag = object.reportingTag ?? undefined;
    return message;
  },
};

function createBaseSenderKeyDistributionMessage(): SenderKeyDistributionMessage {
  return { id: undefined, iteration: undefined, chainKey: undefined, signingKey: undefined };
}

export const SenderKeyDistributionMessage: MessageFns<SenderKeyDistributionMessage> = {
  encode(message: SenderKeyDistributionMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.iteration !== undefined) {
      writer.uint32(16).uint32(message.iteration);
    }
    if (message.chainKey !== undefined) {
      writer.uint32(26).bytes(message.chainKey);
    }
    if (message.signingKey !== undefined) {
      writer.uint32(34).bytes(message.signingKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SenderKeyDistributionMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSenderKeyDistributionMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.iteration = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.chainKey = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.signingKey = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SenderKeyDistributionMessage {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : undefined,
      iteration: isSet(object.iteration) ? globalThis.Number(object.iteration) : undefined,
      chainKey: isSet(object.chainKey) ? bytesFromBase64(object.chainKey) : undefined,
      signingKey: isSet(object.signingKey) ? bytesFromBase64(object.signingKey) : undefined,
    };
  },

  toJSON(message: SenderKeyDistributionMessage): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = Math.round(message.id);
    }
    if (message.iteration !== undefined) {
      obj.iteration = Math.round(message.iteration);
    }
    if (message.chainKey !== undefined) {
      obj.chainKey = base64FromBytes(message.chainKey);
    }
    if (message.signingKey !== undefined) {
      obj.signingKey = base64FromBytes(message.signingKey);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SenderKeyDistributionMessage>, I>>(base?: I): SenderKeyDistributionMessage {
    return SenderKeyDistributionMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SenderKeyDistributionMessage>, I>>(object: I): SenderKeyDistributionMessage {
    const message = createBaseSenderKeyDistributionMessage();
    message.id = object.id ?? undefined;
    message.iteration = object.iteration ?? undefined;
    message.chainKey = object.chainKey ?? undefined;
    message.signingKey = object.signingKey ?? undefined;
    return message;
  },
};

function createBaseSenderKeyMessage(): SenderKeyMessage {
  return { id: undefined, iteration: undefined, ciphertext: undefined };
}

export const SenderKeyMessage: MessageFns<SenderKeyMessage> = {
  encode(message: SenderKeyMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.iteration !== undefined) {
      writer.uint32(16).uint32(message.iteration);
    }
    if (message.ciphertext !== undefined) {
      writer.uint32(26).bytes(message.ciphertext);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SenderKeyMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSenderKeyMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.iteration = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ciphertext = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SenderKeyMessage {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : undefined,
      iteration: isSet(object.iteration) ? globalThis.Number(object.iteration) : undefined,
      ciphertext: isSet(object.ciphertext) ? bytesFromBase64(object.ciphertext) : undefined,
    };
  },

  toJSON(message: SenderKeyMessage): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = Math.round(message.id);
    }
    if (message.iteration !== undefined) {
      obj.iteration = Math.round(message.iteration);
    }
    if (message.ciphertext !== undefined) {
      obj.ciphertext = base64FromBytes(message.ciphertext);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SenderKeyMessage>, I>>(base?: I): SenderKeyMessage {
    return SenderKeyMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SenderKeyMessage>, I>>(object: I): SenderKeyMessage {
    const message = createBaseSenderKeyMessage();
    message.id = object.id ?? undefined;
    message.iteration = object.iteration ?? undefined;
    message.ciphertext = object.ciphertext ?? undefined;
    return message;
  },
};

function createBaseSenderKeyRecordStructure(): SenderKeyRecordStructure {
  return { senderKeyStates: [] };
}

export const SenderKeyRecordStructure: MessageFns<SenderKeyRecordStructure> = {
  encode(message: SenderKeyRecordStructure, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.senderKeyStates) {
      SenderKeyStateStructure.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SenderKeyRecordStructure {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSenderKeyRecordStructure();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.senderKeyStates.push(SenderKeyStateStructure.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SenderKeyRecordStructure {
    return {
      senderKeyStates: globalThis.Array.isArray(object?.senderKeyStates)
        ? object.senderKeyStates.map((e: any) => SenderKeyStateStructure.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SenderKeyRecordStructure): unknown {
    const obj: any = {};
    if (message.senderKeyStates?.length) {
      obj.senderKeyStates = message.senderKeyStates.map((e) => SenderKeyStateStructure.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SenderKeyRecordStructure>, I>>(base?: I): SenderKeyRecordStructure {
    return SenderKeyRecordStructure.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SenderKeyRecordStructure>, I>>(object: I): SenderKeyRecordStructure {
    const message = createBaseSenderKeyRecordStructure();
    message.senderKeyStates = object.senderKeyStates?.map((e) => SenderKeyStateStructure.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSenderKeyStateStructure(): SenderKeyStateStructure {
  return { senderKeyId: undefined, senderChainKey: undefined, senderSigningKey: undefined, senderMessageKeys: [] };
}

export const SenderKeyStateStructure: MessageFns<SenderKeyStateStructure> = {
  encode(message: SenderKeyStateStructure, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.senderKeyId !== undefined) {
      writer.uint32(8).uint32(message.senderKeyId);
    }
    if (message.senderChainKey !== undefined) {
      SenderKeyStateStructure_SenderChainKey.encode(message.senderChainKey, writer.uint32(18).fork()).join();
    }
    if (message.senderSigningKey !== undefined) {
      SenderKeyStateStructure_SenderSigningKey.encode(message.senderSigningKey, writer.uint32(26).fork()).join();
    }
    for (const v of message.senderMessageKeys) {
      SenderKeyStateStructure_SenderMessageKey.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SenderKeyStateStructure {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSenderKeyStateStructure();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.senderKeyId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.senderChainKey = SenderKeyStateStructure_SenderChainKey.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.senderSigningKey = SenderKeyStateStructure_SenderSigningKey.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.senderMessageKeys.push(SenderKeyStateStructure_SenderMessageKey.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SenderKeyStateStructure {
    return {
      senderKeyId: isSet(object.senderKeyId) ? globalThis.Number(object.senderKeyId) : undefined,
      senderChainKey: isSet(object.senderChainKey)
        ? SenderKeyStateStructure_SenderChainKey.fromJSON(object.senderChainKey)
        : undefined,
      senderSigningKey: isSet(object.senderSigningKey)
        ? SenderKeyStateStructure_SenderSigningKey.fromJSON(object.senderSigningKey)
        : undefined,
      senderMessageKeys: globalThis.Array.isArray(object?.senderMessageKeys)
        ? object.senderMessageKeys.map((e: any) => SenderKeyStateStructure_SenderMessageKey.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SenderKeyStateStructure): unknown {
    const obj: any = {};
    if (message.senderKeyId !== undefined) {
      obj.senderKeyId = Math.round(message.senderKeyId);
    }
    if (message.senderChainKey !== undefined) {
      obj.senderChainKey = SenderKeyStateStructure_SenderChainKey.toJSON(message.senderChainKey);
    }
    if (message.senderSigningKey !== undefined) {
      obj.senderSigningKey = SenderKeyStateStructure_SenderSigningKey.toJSON(message.senderSigningKey);
    }
    if (message.senderMessageKeys?.length) {
      obj.senderMessageKeys = message.senderMessageKeys.map((e) => SenderKeyStateStructure_SenderMessageKey.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SenderKeyStateStructure>, I>>(base?: I): SenderKeyStateStructure {
    return SenderKeyStateStructure.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SenderKeyStateStructure>, I>>(object: I): SenderKeyStateStructure {
    const message = createBaseSenderKeyStateStructure();
    message.senderKeyId = object.senderKeyId ?? undefined;
    message.senderChainKey = (object.senderChainKey !== undefined && object.senderChainKey !== null)
      ? SenderKeyStateStructure_SenderChainKey.fromPartial(object.senderChainKey)
      : undefined;
    message.senderSigningKey = (object.senderSigningKey !== undefined && object.senderSigningKey !== null)
      ? SenderKeyStateStructure_SenderSigningKey.fromPartial(object.senderSigningKey)
      : undefined;
    message.senderMessageKeys =
      object.senderMessageKeys?.map((e) => SenderKeyStateStructure_SenderMessageKey.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSenderKeyStateStructure_SenderChainKey(): SenderKeyStateStructure_SenderChainKey {
  return { iteration: undefined, seed: undefined };
}

export const SenderKeyStateStructure_SenderChainKey: MessageFns<SenderKeyStateStructure_SenderChainKey> = {
  encode(message: SenderKeyStateStructure_SenderChainKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.iteration !== undefined) {
      writer.uint32(8).uint32(message.iteration);
    }
    if (message.seed !== undefined) {
      writer.uint32(18).bytes(message.seed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SenderKeyStateStructure_SenderChainKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSenderKeyStateStructure_SenderChainKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.iteration = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.seed = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SenderKeyStateStructure_SenderChainKey {
    return {
      iteration: isSet(object.iteration) ? globalThis.Number(object.iteration) : undefined,
      seed: isSet(object.seed) ? bytesFromBase64(object.seed) : undefined,
    };
  },

  toJSON(message: SenderKeyStateStructure_SenderChainKey): unknown {
    const obj: any = {};
    if (message.iteration !== undefined) {
      obj.iteration = Math.round(message.iteration);
    }
    if (message.seed !== undefined) {
      obj.seed = base64FromBytes(message.seed);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SenderKeyStateStructure_SenderChainKey>, I>>(
    base?: I,
  ): SenderKeyStateStructure_SenderChainKey {
    return SenderKeyStateStructure_SenderChainKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SenderKeyStateStructure_SenderChainKey>, I>>(
    object: I,
  ): SenderKeyStateStructure_SenderChainKey {
    const message = createBaseSenderKeyStateStructure_SenderChainKey();
    message.iteration = object.iteration ?? undefined;
    message.seed = object.seed ?? undefined;
    return message;
  },
};

function createBaseSenderKeyStateStructure_SenderMessageKey(): SenderKeyStateStructure_SenderMessageKey {
  return { iteration: undefined, seed: undefined };
}

export const SenderKeyStateStructure_SenderMessageKey: MessageFns<SenderKeyStateStructure_SenderMessageKey> = {
  encode(message: SenderKeyStateStructure_SenderMessageKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.iteration !== undefined) {
      writer.uint32(8).uint32(message.iteration);
    }
    if (message.seed !== undefined) {
      writer.uint32(18).bytes(message.seed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SenderKeyStateStructure_SenderMessageKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSenderKeyStateStructure_SenderMessageKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.iteration = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.seed = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SenderKeyStateStructure_SenderMessageKey {
    return {
      iteration: isSet(object.iteration) ? globalThis.Number(object.iteration) : undefined,
      seed: isSet(object.seed) ? bytesFromBase64(object.seed) : undefined,
    };
  },

  toJSON(message: SenderKeyStateStructure_SenderMessageKey): unknown {
    const obj: any = {};
    if (message.iteration !== undefined) {
      obj.iteration = Math.round(message.iteration);
    }
    if (message.seed !== undefined) {
      obj.seed = base64FromBytes(message.seed);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SenderKeyStateStructure_SenderMessageKey>, I>>(
    base?: I,
  ): SenderKeyStateStructure_SenderMessageKey {
    return SenderKeyStateStructure_SenderMessageKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SenderKeyStateStructure_SenderMessageKey>, I>>(
    object: I,
  ): SenderKeyStateStructure_SenderMessageKey {
    const message = createBaseSenderKeyStateStructure_SenderMessageKey();
    message.iteration = object.iteration ?? undefined;
    message.seed = object.seed ?? undefined;
    return message;
  },
};

function createBaseSenderKeyStateStructure_SenderSigningKey(): SenderKeyStateStructure_SenderSigningKey {
  return { public: undefined, private: undefined };
}

export const SenderKeyStateStructure_SenderSigningKey: MessageFns<SenderKeyStateStructure_SenderSigningKey> = {
  encode(message: SenderKeyStateStructure_SenderSigningKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.public !== undefined) {
      writer.uint32(10).bytes(message.public);
    }
    if (message.private !== undefined) {
      writer.uint32(18).bytes(message.private);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SenderKeyStateStructure_SenderSigningKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSenderKeyStateStructure_SenderSigningKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.public = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.private = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SenderKeyStateStructure_SenderSigningKey {
    return {
      public: isSet(object.public) ? bytesFromBase64(object.public) : undefined,
      private: isSet(object.private) ? bytesFromBase64(object.private) : undefined,
    };
  },

  toJSON(message: SenderKeyStateStructure_SenderSigningKey): unknown {
    const obj: any = {};
    if (message.public !== undefined) {
      obj.public = base64FromBytes(message.public);
    }
    if (message.private !== undefined) {
      obj.private = base64FromBytes(message.private);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SenderKeyStateStructure_SenderSigningKey>, I>>(
    base?: I,
  ): SenderKeyStateStructure_SenderSigningKey {
    return SenderKeyStateStructure_SenderSigningKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SenderKeyStateStructure_SenderSigningKey>, I>>(
    object: I,
  ): SenderKeyStateStructure_SenderSigningKey {
    const message = createBaseSenderKeyStateStructure_SenderSigningKey();
    message.public = object.public ?? undefined;
    message.private = object.private ?? undefined;
    return message;
  },
};

function createBaseServerErrorReceipt(): ServerErrorReceipt {
  return { stanzaId: undefined };
}

export const ServerErrorReceipt: MessageFns<ServerErrorReceipt> = {
  encode(message: ServerErrorReceipt, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stanzaId !== undefined) {
      writer.uint32(10).string(message.stanzaId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerErrorReceipt {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerErrorReceipt();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stanzaId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerErrorReceipt {
    return { stanzaId: isSet(object.stanzaId) ? globalThis.String(object.stanzaId) : undefined };
  },

  toJSON(message: ServerErrorReceipt): unknown {
    const obj: any = {};
    if (message.stanzaId !== undefined) {
      obj.stanzaId = message.stanzaId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerErrorReceipt>, I>>(base?: I): ServerErrorReceipt {
    return ServerErrorReceipt.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerErrorReceipt>, I>>(object: I): ServerErrorReceipt {
    const message = createBaseServerErrorReceipt();
    message.stanzaId = object.stanzaId ?? undefined;
    return message;
  },
};

function createBaseSessionStructure(): SessionStructure {
  return {
    sessionVersion: undefined,
    localIdentityPublic: undefined,
    remoteIdentityPublic: undefined,
    rootKey: undefined,
    previousCounter: undefined,
    senderChain: undefined,
    receiverChains: [],
    pendingKeyExchange: undefined,
    pendingPreKey: undefined,
    remoteRegistrationId: undefined,
    localRegistrationId: undefined,
    needsRefresh: undefined,
    aliceBaseKey: undefined,
  };
}

export const SessionStructure: MessageFns<SessionStructure> = {
  encode(message: SessionStructure, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionVersion !== undefined) {
      writer.uint32(8).uint32(message.sessionVersion);
    }
    if (message.localIdentityPublic !== undefined) {
      writer.uint32(18).bytes(message.localIdentityPublic);
    }
    if (message.remoteIdentityPublic !== undefined) {
      writer.uint32(26).bytes(message.remoteIdentityPublic);
    }
    if (message.rootKey !== undefined) {
      writer.uint32(34).bytes(message.rootKey);
    }
    if (message.previousCounter !== undefined) {
      writer.uint32(40).uint32(message.previousCounter);
    }
    if (message.senderChain !== undefined) {
      SessionStructure_Chain.encode(message.senderChain, writer.uint32(50).fork()).join();
    }
    for (const v of message.receiverChains) {
      SessionStructure_Chain.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.pendingKeyExchange !== undefined) {
      SessionStructure_PendingKeyExchange.encode(message.pendingKeyExchange, writer.uint32(66).fork()).join();
    }
    if (message.pendingPreKey !== undefined) {
      SessionStructure_PendingPreKey.encode(message.pendingPreKey, writer.uint32(74).fork()).join();
    }
    if (message.remoteRegistrationId !== undefined) {
      writer.uint32(80).uint32(message.remoteRegistrationId);
    }
    if (message.localRegistrationId !== undefined) {
      writer.uint32(88).uint32(message.localRegistrationId);
    }
    if (message.needsRefresh !== undefined) {
      writer.uint32(96).bool(message.needsRefresh);
    }
    if (message.aliceBaseKey !== undefined) {
      writer.uint32(106).bytes(message.aliceBaseKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionStructure {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionStructure();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.sessionVersion = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.localIdentityPublic = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.remoteIdentityPublic = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.rootKey = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.previousCounter = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.senderChain = SessionStructure_Chain.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.receiverChains.push(SessionStructure_Chain.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.pendingKeyExchange = SessionStructure_PendingKeyExchange.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.pendingPreKey = SessionStructure_PendingPreKey.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.remoteRegistrationId = reader.uint32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.localRegistrationId = reader.uint32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.needsRefresh = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.aliceBaseKey = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionStructure {
    return {
      sessionVersion: isSet(object.sessionVersion) ? globalThis.Number(object.sessionVersion) : undefined,
      localIdentityPublic: isSet(object.localIdentityPublic) ? bytesFromBase64(object.localIdentityPublic) : undefined,
      remoteIdentityPublic: isSet(object.remoteIdentityPublic)
        ? bytesFromBase64(object.remoteIdentityPublic)
        : undefined,
      rootKey: isSet(object.rootKey) ? bytesFromBase64(object.rootKey) : undefined,
      previousCounter: isSet(object.previousCounter) ? globalThis.Number(object.previousCounter) : undefined,
      senderChain: isSet(object.senderChain) ? SessionStructure_Chain.fromJSON(object.senderChain) : undefined,
      receiverChains: globalThis.Array.isArray(object?.receiverChains)
        ? object.receiverChains.map((e: any) => SessionStructure_Chain.fromJSON(e))
        : [],
      pendingKeyExchange: isSet(object.pendingKeyExchange)
        ? SessionStructure_PendingKeyExchange.fromJSON(object.pendingKeyExchange)
        : undefined,
      pendingPreKey: isSet(object.pendingPreKey)
        ? SessionStructure_PendingPreKey.fromJSON(object.pendingPreKey)
        : undefined,
      remoteRegistrationId: isSet(object.remoteRegistrationId)
        ? globalThis.Number(object.remoteRegistrationId)
        : undefined,
      localRegistrationId: isSet(object.localRegistrationId)
        ? globalThis.Number(object.localRegistrationId)
        : undefined,
      needsRefresh: isSet(object.needsRefresh) ? globalThis.Boolean(object.needsRefresh) : undefined,
      aliceBaseKey: isSet(object.aliceBaseKey) ? bytesFromBase64(object.aliceBaseKey) : undefined,
    };
  },

  toJSON(message: SessionStructure): unknown {
    const obj: any = {};
    if (message.sessionVersion !== undefined) {
      obj.sessionVersion = Math.round(message.sessionVersion);
    }
    if (message.localIdentityPublic !== undefined) {
      obj.localIdentityPublic = base64FromBytes(message.localIdentityPublic);
    }
    if (message.remoteIdentityPublic !== undefined) {
      obj.remoteIdentityPublic = base64FromBytes(message.remoteIdentityPublic);
    }
    if (message.rootKey !== undefined) {
      obj.rootKey = base64FromBytes(message.rootKey);
    }
    if (message.previousCounter !== undefined) {
      obj.previousCounter = Math.round(message.previousCounter);
    }
    if (message.senderChain !== undefined) {
      obj.senderChain = SessionStructure_Chain.toJSON(message.senderChain);
    }
    if (message.receiverChains?.length) {
      obj.receiverChains = message.receiverChains.map((e) => SessionStructure_Chain.toJSON(e));
    }
    if (message.pendingKeyExchange !== undefined) {
      obj.pendingKeyExchange = SessionStructure_PendingKeyExchange.toJSON(message.pendingKeyExchange);
    }
    if (message.pendingPreKey !== undefined) {
      obj.pendingPreKey = SessionStructure_PendingPreKey.toJSON(message.pendingPreKey);
    }
    if (message.remoteRegistrationId !== undefined) {
      obj.remoteRegistrationId = Math.round(message.remoteRegistrationId);
    }
    if (message.localRegistrationId !== undefined) {
      obj.localRegistrationId = Math.round(message.localRegistrationId);
    }
    if (message.needsRefresh !== undefined) {
      obj.needsRefresh = message.needsRefresh;
    }
    if (message.aliceBaseKey !== undefined) {
      obj.aliceBaseKey = base64FromBytes(message.aliceBaseKey);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionStructure>, I>>(base?: I): SessionStructure {
    return SessionStructure.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionStructure>, I>>(object: I): SessionStructure {
    const message = createBaseSessionStructure();
    message.sessionVersion = object.sessionVersion ?? undefined;
    message.localIdentityPublic = object.localIdentityPublic ?? undefined;
    message.remoteIdentityPublic = object.remoteIdentityPublic ?? undefined;
    message.rootKey = object.rootKey ?? undefined;
    message.previousCounter = object.previousCounter ?? undefined;
    message.senderChain = (object.senderChain !== undefined && object.senderChain !== null)
      ? SessionStructure_Chain.fromPartial(object.senderChain)
      : undefined;
    message.receiverChains = object.receiverChains?.map((e) => SessionStructure_Chain.fromPartial(e)) || [];
    message.pendingKeyExchange = (object.pendingKeyExchange !== undefined && object.pendingKeyExchange !== null)
      ? SessionStructure_PendingKeyExchange.fromPartial(object.pendingKeyExchange)
      : undefined;
    message.pendingPreKey = (object.pendingPreKey !== undefined && object.pendingPreKey !== null)
      ? SessionStructure_PendingPreKey.fromPartial(object.pendingPreKey)
      : undefined;
    message.remoteRegistrationId = object.remoteRegistrationId ?? undefined;
    message.localRegistrationId = object.localRegistrationId ?? undefined;
    message.needsRefresh = object.needsRefresh ?? undefined;
    message.aliceBaseKey = object.aliceBaseKey ?? undefined;
    return message;
  },
};

function createBaseSessionStructure_Chain(): SessionStructure_Chain {
  return { senderRatchetKey: undefined, senderRatchetKeyPrivate: undefined, chainKey: undefined, messageKeys: [] };
}

export const SessionStructure_Chain: MessageFns<SessionStructure_Chain> = {
  encode(message: SessionStructure_Chain, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.senderRatchetKey !== undefined) {
      writer.uint32(10).bytes(message.senderRatchetKey);
    }
    if (message.senderRatchetKeyPrivate !== undefined) {
      writer.uint32(18).bytes(message.senderRatchetKeyPrivate);
    }
    if (message.chainKey !== undefined) {
      SessionStructure_Chain_ChainKey.encode(message.chainKey, writer.uint32(26).fork()).join();
    }
    for (const v of message.messageKeys) {
      SessionStructure_Chain_MessageKey.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionStructure_Chain {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionStructure_Chain();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.senderRatchetKey = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.senderRatchetKeyPrivate = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.chainKey = SessionStructure_Chain_ChainKey.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.messageKeys.push(SessionStructure_Chain_MessageKey.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionStructure_Chain {
    return {
      senderRatchetKey: isSet(object.senderRatchetKey) ? bytesFromBase64(object.senderRatchetKey) : undefined,
      senderRatchetKeyPrivate: isSet(object.senderRatchetKeyPrivate)
        ? bytesFromBase64(object.senderRatchetKeyPrivate)
        : undefined,
      chainKey: isSet(object.chainKey) ? SessionStructure_Chain_ChainKey.fromJSON(object.chainKey) : undefined,
      messageKeys: globalThis.Array.isArray(object?.messageKeys)
        ? object.messageKeys.map((e: any) => SessionStructure_Chain_MessageKey.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SessionStructure_Chain): unknown {
    const obj: any = {};
    if (message.senderRatchetKey !== undefined) {
      obj.senderRatchetKey = base64FromBytes(message.senderRatchetKey);
    }
    if (message.senderRatchetKeyPrivate !== undefined) {
      obj.senderRatchetKeyPrivate = base64FromBytes(message.senderRatchetKeyPrivate);
    }
    if (message.chainKey !== undefined) {
      obj.chainKey = SessionStructure_Chain_ChainKey.toJSON(message.chainKey);
    }
    if (message.messageKeys?.length) {
      obj.messageKeys = message.messageKeys.map((e) => SessionStructure_Chain_MessageKey.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionStructure_Chain>, I>>(base?: I): SessionStructure_Chain {
    return SessionStructure_Chain.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionStructure_Chain>, I>>(object: I): SessionStructure_Chain {
    const message = createBaseSessionStructure_Chain();
    message.senderRatchetKey = object.senderRatchetKey ?? undefined;
    message.senderRatchetKeyPrivate = object.senderRatchetKeyPrivate ?? undefined;
    message.chainKey = (object.chainKey !== undefined && object.chainKey !== null)
      ? SessionStructure_Chain_ChainKey.fromPartial(object.chainKey)
      : undefined;
    message.messageKeys = object.messageKeys?.map((e) => SessionStructure_Chain_MessageKey.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSessionStructure_Chain_ChainKey(): SessionStructure_Chain_ChainKey {
  return { index: undefined, key: undefined };
}

export const SessionStructure_Chain_ChainKey: MessageFns<SessionStructure_Chain_ChainKey> = {
  encode(message: SessionStructure_Chain_ChainKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== undefined) {
      writer.uint32(8).uint32(message.index);
    }
    if (message.key !== undefined) {
      writer.uint32(18).bytes(message.key);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionStructure_Chain_ChainKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionStructure_Chain_ChainKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.index = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.key = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionStructure_Chain_ChainKey {
    return {
      index: isSet(object.index) ? globalThis.Number(object.index) : undefined,
      key: isSet(object.key) ? bytesFromBase64(object.key) : undefined,
    };
  },

  toJSON(message: SessionStructure_Chain_ChainKey): unknown {
    const obj: any = {};
    if (message.index !== undefined) {
      obj.index = Math.round(message.index);
    }
    if (message.key !== undefined) {
      obj.key = base64FromBytes(message.key);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionStructure_Chain_ChainKey>, I>>(base?: I): SessionStructure_Chain_ChainKey {
    return SessionStructure_Chain_ChainKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionStructure_Chain_ChainKey>, I>>(
    object: I,
  ): SessionStructure_Chain_ChainKey {
    const message = createBaseSessionStructure_Chain_ChainKey();
    message.index = object.index ?? undefined;
    message.key = object.key ?? undefined;
    return message;
  },
};

function createBaseSessionStructure_Chain_MessageKey(): SessionStructure_Chain_MessageKey {
  return { index: undefined, cipherKey: undefined, macKey: undefined, iv: undefined };
}

export const SessionStructure_Chain_MessageKey: MessageFns<SessionStructure_Chain_MessageKey> = {
  encode(message: SessionStructure_Chain_MessageKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== undefined) {
      writer.uint32(8).uint32(message.index);
    }
    if (message.cipherKey !== undefined) {
      writer.uint32(18).bytes(message.cipherKey);
    }
    if (message.macKey !== undefined) {
      writer.uint32(26).bytes(message.macKey);
    }
    if (message.iv !== undefined) {
      writer.uint32(34).bytes(message.iv);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionStructure_Chain_MessageKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionStructure_Chain_MessageKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.index = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.cipherKey = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.macKey = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.iv = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionStructure_Chain_MessageKey {
    return {
      index: isSet(object.index) ? globalThis.Number(object.index) : undefined,
      cipherKey: isSet(object.cipherKey) ? bytesFromBase64(object.cipherKey) : undefined,
      macKey: isSet(object.macKey) ? bytesFromBase64(object.macKey) : undefined,
      iv: isSet(object.iv) ? bytesFromBase64(object.iv) : undefined,
    };
  },

  toJSON(message: SessionStructure_Chain_MessageKey): unknown {
    const obj: any = {};
    if (message.index !== undefined) {
      obj.index = Math.round(message.index);
    }
    if (message.cipherKey !== undefined) {
      obj.cipherKey = base64FromBytes(message.cipherKey);
    }
    if (message.macKey !== undefined) {
      obj.macKey = base64FromBytes(message.macKey);
    }
    if (message.iv !== undefined) {
      obj.iv = base64FromBytes(message.iv);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionStructure_Chain_MessageKey>, I>>(
    base?: I,
  ): SessionStructure_Chain_MessageKey {
    return SessionStructure_Chain_MessageKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionStructure_Chain_MessageKey>, I>>(
    object: I,
  ): SessionStructure_Chain_MessageKey {
    const message = createBaseSessionStructure_Chain_MessageKey();
    message.index = object.index ?? undefined;
    message.cipherKey = object.cipherKey ?? undefined;
    message.macKey = object.macKey ?? undefined;
    message.iv = object.iv ?? undefined;
    return message;
  },
};

function createBaseSessionStructure_PendingKeyExchange(): SessionStructure_PendingKeyExchange {
  return {
    sequence: undefined,
    localBaseKey: undefined,
    localBaseKeyPrivate: undefined,
    localRatchetKey: undefined,
    localRatchetKeyPrivate: undefined,
    localIdentityKey: undefined,
    localIdentityKeyPrivate: undefined,
  };
}

export const SessionStructure_PendingKeyExchange: MessageFns<SessionStructure_PendingKeyExchange> = {
  encode(message: SessionStructure_PendingKeyExchange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sequence !== undefined) {
      writer.uint32(8).uint32(message.sequence);
    }
    if (message.localBaseKey !== undefined) {
      writer.uint32(18).bytes(message.localBaseKey);
    }
    if (message.localBaseKeyPrivate !== undefined) {
      writer.uint32(26).bytes(message.localBaseKeyPrivate);
    }
    if (message.localRatchetKey !== undefined) {
      writer.uint32(34).bytes(message.localRatchetKey);
    }
    if (message.localRatchetKeyPrivate !== undefined) {
      writer.uint32(42).bytes(message.localRatchetKeyPrivate);
    }
    if (message.localIdentityKey !== undefined) {
      writer.uint32(58).bytes(message.localIdentityKey);
    }
    if (message.localIdentityKeyPrivate !== undefined) {
      writer.uint32(66).bytes(message.localIdentityKeyPrivate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionStructure_PendingKeyExchange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionStructure_PendingKeyExchange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.sequence = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.localBaseKey = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.localBaseKeyPrivate = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.localRatchetKey = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.localRatchetKeyPrivate = reader.bytes();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.localIdentityKey = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.localIdentityKeyPrivate = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionStructure_PendingKeyExchange {
    return {
      sequence: isSet(object.sequence) ? globalThis.Number(object.sequence) : undefined,
      localBaseKey: isSet(object.localBaseKey) ? bytesFromBase64(object.localBaseKey) : undefined,
      localBaseKeyPrivate: isSet(object.localBaseKeyPrivate) ? bytesFromBase64(object.localBaseKeyPrivate) : undefined,
      localRatchetKey: isSet(object.localRatchetKey) ? bytesFromBase64(object.localRatchetKey) : undefined,
      localRatchetKeyPrivate: isSet(object.localRatchetKeyPrivate)
        ? bytesFromBase64(object.localRatchetKeyPrivate)
        : undefined,
      localIdentityKey: isSet(object.localIdentityKey) ? bytesFromBase64(object.localIdentityKey) : undefined,
      localIdentityKeyPrivate: isSet(object.localIdentityKeyPrivate)
        ? bytesFromBase64(object.localIdentityKeyPrivate)
        : undefined,
    };
  },

  toJSON(message: SessionStructure_PendingKeyExchange): unknown {
    const obj: any = {};
    if (message.sequence !== undefined) {
      obj.sequence = Math.round(message.sequence);
    }
    if (message.localBaseKey !== undefined) {
      obj.localBaseKey = base64FromBytes(message.localBaseKey);
    }
    if (message.localBaseKeyPrivate !== undefined) {
      obj.localBaseKeyPrivate = base64FromBytes(message.localBaseKeyPrivate);
    }
    if (message.localRatchetKey !== undefined) {
      obj.localRatchetKey = base64FromBytes(message.localRatchetKey);
    }
    if (message.localRatchetKeyPrivate !== undefined) {
      obj.localRatchetKeyPrivate = base64FromBytes(message.localRatchetKeyPrivate);
    }
    if (message.localIdentityKey !== undefined) {
      obj.localIdentityKey = base64FromBytes(message.localIdentityKey);
    }
    if (message.localIdentityKeyPrivate !== undefined) {
      obj.localIdentityKeyPrivate = base64FromBytes(message.localIdentityKeyPrivate);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionStructure_PendingKeyExchange>, I>>(
    base?: I,
  ): SessionStructure_PendingKeyExchange {
    return SessionStructure_PendingKeyExchange.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionStructure_PendingKeyExchange>, I>>(
    object: I,
  ): SessionStructure_PendingKeyExchange {
    const message = createBaseSessionStructure_PendingKeyExchange();
    message.sequence = object.sequence ?? undefined;
    message.localBaseKey = object.localBaseKey ?? undefined;
    message.localBaseKeyPrivate = object.localBaseKeyPrivate ?? undefined;
    message.localRatchetKey = object.localRatchetKey ?? undefined;
    message.localRatchetKeyPrivate = object.localRatchetKeyPrivate ?? undefined;
    message.localIdentityKey = object.localIdentityKey ?? undefined;
    message.localIdentityKeyPrivate = object.localIdentityKeyPrivate ?? undefined;
    return message;
  },
};

function createBaseSessionStructure_PendingPreKey(): SessionStructure_PendingPreKey {
  return { preKeyId: undefined, signedPreKeyId: undefined, baseKey: undefined };
}

export const SessionStructure_PendingPreKey: MessageFns<SessionStructure_PendingPreKey> = {
  encode(message: SessionStructure_PendingPreKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.preKeyId !== undefined) {
      writer.uint32(8).uint32(message.preKeyId);
    }
    if (message.signedPreKeyId !== undefined) {
      writer.uint32(24).int32(message.signedPreKeyId);
    }
    if (message.baseKey !== undefined) {
      writer.uint32(18).bytes(message.baseKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionStructure_PendingPreKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionStructure_PendingPreKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.preKeyId = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.signedPreKeyId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.baseKey = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SessionStructure_PendingPreKey {
    return {
      preKeyId: isSet(object.preKeyId) ? globalThis.Number(object.preKeyId) : undefined,
      signedPreKeyId: isSet(object.signedPreKeyId) ? globalThis.Number(object.signedPreKeyId) : undefined,
      baseKey: isSet(object.baseKey) ? bytesFromBase64(object.baseKey) : undefined,
    };
  },

  toJSON(message: SessionStructure_PendingPreKey): unknown {
    const obj: any = {};
    if (message.preKeyId !== undefined) {
      obj.preKeyId = Math.round(message.preKeyId);
    }
    if (message.signedPreKeyId !== undefined) {
      obj.signedPreKeyId = Math.round(message.signedPreKeyId);
    }
    if (message.baseKey !== undefined) {
      obj.baseKey = base64FromBytes(message.baseKey);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SessionStructure_PendingPreKey>, I>>(base?: I): SessionStructure_PendingPreKey {
    return SessionStructure_PendingPreKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SessionStructure_PendingPreKey>, I>>(
    object: I,
  ): SessionStructure_PendingPreKey {
    const message = createBaseSessionStructure_PendingPreKey();
    message.preKeyId = object.preKeyId ?? undefined;
    message.signedPreKeyId = object.signedPreKeyId ?? undefined;
    message.baseKey = object.baseKey ?? undefined;
    return message;
  },
};

function createBaseSignalMessage(): SignalMessage {
  return { ratchetKey: undefined, counter: undefined, previousCounter: undefined, ciphertext: undefined };
}

export const SignalMessage: MessageFns<SignalMessage> = {
  encode(message: SignalMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ratchetKey !== undefined) {
      writer.uint32(10).bytes(message.ratchetKey);
    }
    if (message.counter !== undefined) {
      writer.uint32(16).uint32(message.counter);
    }
    if (message.previousCounter !== undefined) {
      writer.uint32(24).uint32(message.previousCounter);
    }
    if (message.ciphertext !== undefined) {
      writer.uint32(34).bytes(message.ciphertext);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignalMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignalMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ratchetKey = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.counter = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.previousCounter = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.ciphertext = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignalMessage {
    return {
      ratchetKey: isSet(object.ratchetKey) ? bytesFromBase64(object.ratchetKey) : undefined,
      counter: isSet(object.counter) ? globalThis.Number(object.counter) : undefined,
      previousCounter: isSet(object.previousCounter) ? globalThis.Number(object.previousCounter) : undefined,
      ciphertext: isSet(object.ciphertext) ? bytesFromBase64(object.ciphertext) : undefined,
    };
  },

  toJSON(message: SignalMessage): unknown {
    const obj: any = {};
    if (message.ratchetKey !== undefined) {
      obj.ratchetKey = base64FromBytes(message.ratchetKey);
    }
    if (message.counter !== undefined) {
      obj.counter = Math.round(message.counter);
    }
    if (message.previousCounter !== undefined) {
      obj.previousCounter = Math.round(message.previousCounter);
    }
    if (message.ciphertext !== undefined) {
      obj.ciphertext = base64FromBytes(message.ciphertext);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignalMessage>, I>>(base?: I): SignalMessage {
    return SignalMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignalMessage>, I>>(object: I): SignalMessage {
    const message = createBaseSignalMessage();
    message.ratchetKey = object.ratchetKey ?? undefined;
    message.counter = object.counter ?? undefined;
    message.previousCounter = object.previousCounter ?? undefined;
    message.ciphertext = object.ciphertext ?? undefined;
    return message;
  },
};

function createBaseSignedPreKeyRecordStructure(): SignedPreKeyRecordStructure {
  return { id: undefined, publicKey: undefined, privateKey: undefined, signature: undefined, timestamp: undefined };
}

export const SignedPreKeyRecordStructure: MessageFns<SignedPreKeyRecordStructure> = {
  encode(message: SignedPreKeyRecordStructure, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.publicKey !== undefined) {
      writer.uint32(18).bytes(message.publicKey);
    }
    if (message.privateKey !== undefined) {
      writer.uint32(26).bytes(message.privateKey);
    }
    if (message.signature !== undefined) {
      writer.uint32(34).bytes(message.signature);
    }
    if (message.timestamp !== undefined) {
      writer.uint32(41).fixed64(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignedPreKeyRecordStructure {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignedPreKeyRecordStructure();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.publicKey = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.privateKey = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.signature = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.timestamp = longToNumber(reader.fixed64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignedPreKeyRecordStructure {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : undefined,
      publicKey: isSet(object.publicKey) ? bytesFromBase64(object.publicKey) : undefined,
      privateKey: isSet(object.privateKey) ? bytesFromBase64(object.privateKey) : undefined,
      signature: isSet(object.signature) ? bytesFromBase64(object.signature) : undefined,
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : undefined,
    };
  },

  toJSON(message: SignedPreKeyRecordStructure): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = Math.round(message.id);
    }
    if (message.publicKey !== undefined) {
      obj.publicKey = base64FromBytes(message.publicKey);
    }
    if (message.privateKey !== undefined) {
      obj.privateKey = base64FromBytes(message.privateKey);
    }
    if (message.signature !== undefined) {
      obj.signature = base64FromBytes(message.signature);
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = Math.round(message.timestamp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignedPreKeyRecordStructure>, I>>(base?: I): SignedPreKeyRecordStructure {
    return SignedPreKeyRecordStructure.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignedPreKeyRecordStructure>, I>>(object: I): SignedPreKeyRecordStructure {
    const message = createBaseSignedPreKeyRecordStructure();
    message.id = object.id ?? undefined;
    message.publicKey = object.publicKey ?? undefined;
    message.privateKey = object.privateKey ?? undefined;
    message.signature = object.signature ?? undefined;
    message.timestamp = object.timestamp ?? undefined;
    return message;
  },
};

function createBaseStatusMentionMessage(): StatusMentionMessage {
  return { quotedStatus: undefined };
}

export const StatusMentionMessage: MessageFns<StatusMentionMessage> = {
  encode(message: StatusMentionMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.quotedStatus !== undefined) {
      Message.encode(message.quotedStatus, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StatusMentionMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStatusMentionMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.quotedStatus = Message.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StatusMentionMessage {
    return { quotedStatus: isSet(object.quotedStatus) ? Message.fromJSON(object.quotedStatus) : undefined };
  },

  toJSON(message: StatusMentionMessage): unknown {
    const obj: any = {};
    if (message.quotedStatus !== undefined) {
      obj.quotedStatus = Message.toJSON(message.quotedStatus);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StatusMentionMessage>, I>>(base?: I): StatusMentionMessage {
    return StatusMentionMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StatusMentionMessage>, I>>(object: I): StatusMentionMessage {
    const message = createBaseStatusMentionMessage();
    message.quotedStatus = (object.quotedStatus !== undefined && object.quotedStatus !== null)
      ? Message.fromPartial(object.quotedStatus)
      : undefined;
    return message;
  },
};

function createBaseStatusPSA(): StatusPSA {
  return { campaignId: 0, campaignExpirationTimestamp: undefined };
}

export const StatusPSA: MessageFns<StatusPSA> = {
  encode(message: StatusPSA, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.campaignId !== 0) {
      writer.uint32(352).uint64(message.campaignId);
    }
    if (message.campaignExpirationTimestamp !== undefined) {
      writer.uint32(360).uint64(message.campaignExpirationTimestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StatusPSA {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStatusPSA();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 44: {
          if (tag !== 352) {
            break;
          }

          message.campaignId = longToNumber(reader.uint64());
          continue;
        }
        case 45: {
          if (tag !== 360) {
            break;
          }

          message.campaignExpirationTimestamp = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StatusPSA {
    return {
      campaignId: isSet(object.campaignId) ? globalThis.Number(object.campaignId) : 0,
      campaignExpirationTimestamp: isSet(object.campaignExpirationTimestamp)
        ? globalThis.Number(object.campaignExpirationTimestamp)
        : undefined,
    };
  },

  toJSON(message: StatusPSA): unknown {
    const obj: any = {};
    if (message.campaignId !== 0) {
      obj.campaignId = Math.round(message.campaignId);
    }
    if (message.campaignExpirationTimestamp !== undefined) {
      obj.campaignExpirationTimestamp = Math.round(message.campaignExpirationTimestamp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StatusPSA>, I>>(base?: I): StatusPSA {
    return StatusPSA.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StatusPSA>, I>>(object: I): StatusPSA {
    const message = createBaseStatusPSA();
    message.campaignId = object.campaignId ?? 0;
    message.campaignExpirationTimestamp = object.campaignExpirationTimestamp ?? undefined;
    return message;
  },
};

function createBaseStickerMetadata(): StickerMetadata {
  return {
    url: undefined,
    fileSha256: undefined,
    fileEncSha256: undefined,
    mediaKey: undefined,
    mimetype: undefined,
    height: undefined,
    width: undefined,
    directPath: undefined,
    fileLength: undefined,
    weight: undefined,
    lastStickerSentTs: undefined,
    isLottie: undefined,
  };
}

export const StickerMetadata: MessageFns<StickerMetadata> = {
  encode(message: StickerMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== undefined) {
      writer.uint32(10).string(message.url);
    }
    if (message.fileSha256 !== undefined) {
      writer.uint32(18).bytes(message.fileSha256);
    }
    if (message.fileEncSha256 !== undefined) {
      writer.uint32(26).bytes(message.fileEncSha256);
    }
    if (message.mediaKey !== undefined) {
      writer.uint32(34).bytes(message.mediaKey);
    }
    if (message.mimetype !== undefined) {
      writer.uint32(42).string(message.mimetype);
    }
    if (message.height !== undefined) {
      writer.uint32(48).uint32(message.height);
    }
    if (message.width !== undefined) {
      writer.uint32(56).uint32(message.width);
    }
    if (message.directPath !== undefined) {
      writer.uint32(66).string(message.directPath);
    }
    if (message.fileLength !== undefined) {
      writer.uint32(72).uint64(message.fileLength);
    }
    if (message.weight !== undefined) {
      writer.uint32(85).float(message.weight);
    }
    if (message.lastStickerSentTs !== undefined) {
      writer.uint32(88).int64(message.lastStickerSentTs);
    }
    if (message.isLottie !== undefined) {
      writer.uint32(96).bool(message.isLottie);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StickerMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStickerMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fileSha256 = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fileEncSha256 = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.mediaKey = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.mimetype = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.height = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.width = reader.uint32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.directPath = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.fileLength = longToNumber(reader.uint64());
          continue;
        }
        case 10: {
          if (tag !== 85) {
            break;
          }

          message.weight = reader.float();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.lastStickerSentTs = longToNumber(reader.int64());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.isLottie = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StickerMetadata {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : undefined,
      fileSha256: isSet(object.fileSha256) ? bytesFromBase64(object.fileSha256) : undefined,
      fileEncSha256: isSet(object.fileEncSha256) ? bytesFromBase64(object.fileEncSha256) : undefined,
      mediaKey: isSet(object.mediaKey) ? bytesFromBase64(object.mediaKey) : undefined,
      mimetype: isSet(object.mimetype) ? globalThis.String(object.mimetype) : undefined,
      height: isSet(object.height) ? globalThis.Number(object.height) : undefined,
      width: isSet(object.width) ? globalThis.Number(object.width) : undefined,
      directPath: isSet(object.directPath) ? globalThis.String(object.directPath) : undefined,
      fileLength: isSet(object.fileLength) ? globalThis.Number(object.fileLength) : undefined,
      weight: isSet(object.weight) ? globalThis.Number(object.weight) : undefined,
      lastStickerSentTs: isSet(object.lastStickerSentTs) ? globalThis.Number(object.lastStickerSentTs) : undefined,
      isLottie: isSet(object.isLottie) ? globalThis.Boolean(object.isLottie) : undefined,
    };
  },

  toJSON(message: StickerMetadata): unknown {
    const obj: any = {};
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    if (message.fileSha256 !== undefined) {
      obj.fileSha256 = base64FromBytes(message.fileSha256);
    }
    if (message.fileEncSha256 !== undefined) {
      obj.fileEncSha256 = base64FromBytes(message.fileEncSha256);
    }
    if (message.mediaKey !== undefined) {
      obj.mediaKey = base64FromBytes(message.mediaKey);
    }
    if (message.mimetype !== undefined) {
      obj.mimetype = message.mimetype;
    }
    if (message.height !== undefined) {
      obj.height = Math.round(message.height);
    }
    if (message.width !== undefined) {
      obj.width = Math.round(message.width);
    }
    if (message.directPath !== undefined) {
      obj.directPath = message.directPath;
    }
    if (message.fileLength !== undefined) {
      obj.fileLength = Math.round(message.fileLength);
    }
    if (message.weight !== undefined) {
      obj.weight = message.weight;
    }
    if (message.lastStickerSentTs !== undefined) {
      obj.lastStickerSentTs = Math.round(message.lastStickerSentTs);
    }
    if (message.isLottie !== undefined) {
      obj.isLottie = message.isLottie;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StickerMetadata>, I>>(base?: I): StickerMetadata {
    return StickerMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StickerMetadata>, I>>(object: I): StickerMetadata {
    const message = createBaseStickerMetadata();
    message.url = object.url ?? undefined;
    message.fileSha256 = object.fileSha256 ?? undefined;
    message.fileEncSha256 = object.fileEncSha256 ?? undefined;
    message.mediaKey = object.mediaKey ?? undefined;
    message.mimetype = object.mimetype ?? undefined;
    message.height = object.height ?? undefined;
    message.width = object.width ?? undefined;
    message.directPath = object.directPath ?? undefined;
    message.fileLength = object.fileLength ?? undefined;
    message.weight = object.weight ?? undefined;
    message.lastStickerSentTs = object.lastStickerSentTs ?? undefined;
    message.isLottie = object.isLottie ?? undefined;
    return message;
  },
};

function createBaseSyncActionData(): SyncActionData {
  return { index: undefined, value: undefined, padding: undefined, version: undefined };
}

export const SyncActionData: MessageFns<SyncActionData> = {
  encode(message: SyncActionData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== undefined) {
      writer.uint32(10).bytes(message.index);
    }
    if (message.value !== undefined) {
      SyncActionValue.encode(message.value, writer.uint32(18).fork()).join();
    }
    if (message.padding !== undefined) {
      writer.uint32(26).bytes(message.padding);
    }
    if (message.version !== undefined) {
      writer.uint32(32).int32(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = SyncActionValue.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.padding = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.version = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionData {
    return {
      index: isSet(object.index) ? bytesFromBase64(object.index) : undefined,
      value: isSet(object.value) ? SyncActionValue.fromJSON(object.value) : undefined,
      padding: isSet(object.padding) ? bytesFromBase64(object.padding) : undefined,
      version: isSet(object.version) ? globalThis.Number(object.version) : undefined,
    };
  },

  toJSON(message: SyncActionData): unknown {
    const obj: any = {};
    if (message.index !== undefined) {
      obj.index = base64FromBytes(message.index);
    }
    if (message.value !== undefined) {
      obj.value = SyncActionValue.toJSON(message.value);
    }
    if (message.padding !== undefined) {
      obj.padding = base64FromBytes(message.padding);
    }
    if (message.version !== undefined) {
      obj.version = Math.round(message.version);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionData>, I>>(base?: I): SyncActionData {
    return SyncActionData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionData>, I>>(object: I): SyncActionData {
    const message = createBaseSyncActionData();
    message.index = object.index ?? undefined;
    message.value = (object.value !== undefined && object.value !== null)
      ? SyncActionValue.fromPartial(object.value)
      : undefined;
    message.padding = object.padding ?? undefined;
    message.version = object.version ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue(): SyncActionValue {
  return {
    timestamp: undefined,
    starAction: undefined,
    contactAction: undefined,
    muteAction: undefined,
    pinAction: undefined,
    securityNotificationSetting: undefined,
    pushNameSetting: undefined,
    quickReplyAction: undefined,
    recentEmojiWeightsAction: undefined,
    labelEditAction: undefined,
    labelAssociationAction: undefined,
    localeSetting: undefined,
    archiveChatAction: undefined,
    deleteMessageForMeAction: undefined,
    keyExpiration: undefined,
    markChatAsReadAction: undefined,
    clearChatAction: undefined,
    deleteChatAction: undefined,
    unarchiveChatsSetting: undefined,
    primaryFeature: undefined,
    androidUnsupportedActions: undefined,
    agentAction: undefined,
    subscriptionAction: undefined,
    userStatusMuteAction: undefined,
    timeFormatAction: undefined,
    nuxAction: undefined,
    primaryVersionAction: undefined,
    stickerAction: undefined,
    removeRecentStickerAction: undefined,
    chatAssignment: undefined,
    chatAssignmentOpenedStatus: undefined,
    pnForLidChatAction: undefined,
    marketingMessageAction: undefined,
    marketingMessageBroadcastAction: undefined,
    externalWebBetaAction: undefined,
    privacySettingRelayAllCalls: undefined,
    callLogAction: undefined,
    statusPrivacy: undefined,
    botWelcomeRequestAction: undefined,
    deleteIndividualCallLog: undefined,
    labelReorderingAction: undefined,
    paymentInfoAction: undefined,
    customPaymentMethodsAction: undefined,
    lockChatAction: undefined,
    chatLockSettings: undefined,
    wamoUserIdentifierAction: undefined,
    privacySettingDisableLinkPreviewsAction: undefined,
    deviceCapabilities: undefined,
    noteEditAction: undefined,
    favoritesAction: undefined,
    merchantPaymentPartnerAction: undefined,
    waffleAccountLinkStateAction: undefined,
    usernameChatStartMode: undefined,
    notificationActivitySettingAction: undefined,
    lidContactAction: undefined,
    ctwaPerCustomerDataSharingAction: undefined,
    paymentTosAction: undefined,
  };
}

export const SyncActionValue: MessageFns<SyncActionValue> = {
  encode(message: SyncActionValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timestamp !== undefined) {
      writer.uint32(8).int64(message.timestamp);
    }
    if (message.starAction !== undefined) {
      SyncActionValue_StarAction.encode(message.starAction, writer.uint32(18).fork()).join();
    }
    if (message.contactAction !== undefined) {
      SyncActionValue_ContactAction.encode(message.contactAction, writer.uint32(26).fork()).join();
    }
    if (message.muteAction !== undefined) {
      SyncActionValue_MuteAction.encode(message.muteAction, writer.uint32(34).fork()).join();
    }
    if (message.pinAction !== undefined) {
      SyncActionValue_PinAction.encode(message.pinAction, writer.uint32(42).fork()).join();
    }
    if (message.securityNotificationSetting !== undefined) {
      SyncActionValue_SecurityNotificationSetting.encode(message.securityNotificationSetting, writer.uint32(50).fork())
        .join();
    }
    if (message.pushNameSetting !== undefined) {
      SyncActionValue_PushNameSetting.encode(message.pushNameSetting, writer.uint32(58).fork()).join();
    }
    if (message.quickReplyAction !== undefined) {
      SyncActionValue_QuickReplyAction.encode(message.quickReplyAction, writer.uint32(66).fork()).join();
    }
    if (message.recentEmojiWeightsAction !== undefined) {
      SyncActionValue_RecentEmojiWeightsAction.encode(message.recentEmojiWeightsAction, writer.uint32(90).fork())
        .join();
    }
    if (message.labelEditAction !== undefined) {
      SyncActionValue_LabelEditAction.encode(message.labelEditAction, writer.uint32(114).fork()).join();
    }
    if (message.labelAssociationAction !== undefined) {
      SyncActionValue_LabelAssociationAction.encode(message.labelAssociationAction, writer.uint32(122).fork()).join();
    }
    if (message.localeSetting !== undefined) {
      SyncActionValue_LocaleSetting.encode(message.localeSetting, writer.uint32(130).fork()).join();
    }
    if (message.archiveChatAction !== undefined) {
      SyncActionValue_ArchiveChatAction.encode(message.archiveChatAction, writer.uint32(138).fork()).join();
    }
    if (message.deleteMessageForMeAction !== undefined) {
      SyncActionValue_DeleteMessageForMeAction.encode(message.deleteMessageForMeAction, writer.uint32(146).fork())
        .join();
    }
    if (message.keyExpiration !== undefined) {
      SyncActionValue_KeyExpiration.encode(message.keyExpiration, writer.uint32(154).fork()).join();
    }
    if (message.markChatAsReadAction !== undefined) {
      SyncActionValue_MarkChatAsReadAction.encode(message.markChatAsReadAction, writer.uint32(162).fork()).join();
    }
    if (message.clearChatAction !== undefined) {
      SyncActionValue_ClearChatAction.encode(message.clearChatAction, writer.uint32(170).fork()).join();
    }
    if (message.deleteChatAction !== undefined) {
      SyncActionValue_DeleteChatAction.encode(message.deleteChatAction, writer.uint32(178).fork()).join();
    }
    if (message.unarchiveChatsSetting !== undefined) {
      SyncActionValue_UnarchiveChatsSetting.encode(message.unarchiveChatsSetting, writer.uint32(186).fork()).join();
    }
    if (message.primaryFeature !== undefined) {
      SyncActionValue_PrimaryFeature.encode(message.primaryFeature, writer.uint32(194).fork()).join();
    }
    if (message.androidUnsupportedActions !== undefined) {
      SyncActionValue_AndroidUnsupportedActions.encode(message.androidUnsupportedActions, writer.uint32(210).fork())
        .join();
    }
    if (message.agentAction !== undefined) {
      SyncActionValue_AgentAction.encode(message.agentAction, writer.uint32(218).fork()).join();
    }
    if (message.subscriptionAction !== undefined) {
      SyncActionValue_SubscriptionAction.encode(message.subscriptionAction, writer.uint32(226).fork()).join();
    }
    if (message.userStatusMuteAction !== undefined) {
      SyncActionValue_UserStatusMuteAction.encode(message.userStatusMuteAction, writer.uint32(234).fork()).join();
    }
    if (message.timeFormatAction !== undefined) {
      SyncActionValue_TimeFormatAction.encode(message.timeFormatAction, writer.uint32(242).fork()).join();
    }
    if (message.nuxAction !== undefined) {
      SyncActionValue_NuxAction.encode(message.nuxAction, writer.uint32(250).fork()).join();
    }
    if (message.primaryVersionAction !== undefined) {
      SyncActionValue_PrimaryVersionAction.encode(message.primaryVersionAction, writer.uint32(258).fork()).join();
    }
    if (message.stickerAction !== undefined) {
      SyncActionValue_StickerAction.encode(message.stickerAction, writer.uint32(266).fork()).join();
    }
    if (message.removeRecentStickerAction !== undefined) {
      SyncActionValue_RemoveRecentStickerAction.encode(message.removeRecentStickerAction, writer.uint32(274).fork())
        .join();
    }
    if (message.chatAssignment !== undefined) {
      SyncActionValue_ChatAssignmentAction.encode(message.chatAssignment, writer.uint32(282).fork()).join();
    }
    if (message.chatAssignmentOpenedStatus !== undefined) {
      SyncActionValue_ChatAssignmentOpenedStatusAction.encode(
        message.chatAssignmentOpenedStatus,
        writer.uint32(290).fork(),
      ).join();
    }
    if (message.pnForLidChatAction !== undefined) {
      SyncActionValue_PnForLidChatAction.encode(message.pnForLidChatAction, writer.uint32(298).fork()).join();
    }
    if (message.marketingMessageAction !== undefined) {
      SyncActionValue_MarketingMessageAction.encode(message.marketingMessageAction, writer.uint32(306).fork()).join();
    }
    if (message.marketingMessageBroadcastAction !== undefined) {
      SyncActionValue_MarketingMessageBroadcastAction.encode(
        message.marketingMessageBroadcastAction,
        writer.uint32(314).fork(),
      ).join();
    }
    if (message.externalWebBetaAction !== undefined) {
      SyncActionValue_ExternalWebBetaAction.encode(message.externalWebBetaAction, writer.uint32(322).fork()).join();
    }
    if (message.privacySettingRelayAllCalls !== undefined) {
      SyncActionValue_PrivacySettingRelayAllCalls.encode(message.privacySettingRelayAllCalls, writer.uint32(330).fork())
        .join();
    }
    if (message.callLogAction !== undefined) {
      SyncActionValue_CallLogAction.encode(message.callLogAction, writer.uint32(338).fork()).join();
    }
    if (message.statusPrivacy !== undefined) {
      SyncActionValue_StatusPrivacyAction.encode(message.statusPrivacy, writer.uint32(354).fork()).join();
    }
    if (message.botWelcomeRequestAction !== undefined) {
      SyncActionValue_BotWelcomeRequestAction.encode(message.botWelcomeRequestAction, writer.uint32(362).fork()).join();
    }
    if (message.deleteIndividualCallLog !== undefined) {
      SyncActionValue_DeleteIndividualCallLogAction.encode(message.deleteIndividualCallLog, writer.uint32(370).fork())
        .join();
    }
    if (message.labelReorderingAction !== undefined) {
      SyncActionValue_LabelReorderingAction.encode(message.labelReorderingAction, writer.uint32(378).fork()).join();
    }
    if (message.paymentInfoAction !== undefined) {
      SyncActionValue_PaymentInfoAction.encode(message.paymentInfoAction, writer.uint32(386).fork()).join();
    }
    if (message.customPaymentMethodsAction !== undefined) {
      SyncActionValue_CustomPaymentMethodsAction.encode(message.customPaymentMethodsAction, writer.uint32(394).fork())
        .join();
    }
    if (message.lockChatAction !== undefined) {
      SyncActionValue_LockChatAction.encode(message.lockChatAction, writer.uint32(402).fork()).join();
    }
    if (message.chatLockSettings !== undefined) {
      ChatLockSettings.encode(message.chatLockSettings, writer.uint32(410).fork()).join();
    }
    if (message.wamoUserIdentifierAction !== undefined) {
      SyncActionValue_WamoUserIdentifierAction.encode(message.wamoUserIdentifierAction, writer.uint32(418).fork())
        .join();
    }
    if (message.privacySettingDisableLinkPreviewsAction !== undefined) {
      SyncActionValue_PrivacySettingDisableLinkPreviewsAction.encode(
        message.privacySettingDisableLinkPreviewsAction,
        writer.uint32(426).fork(),
      ).join();
    }
    if (message.deviceCapabilities !== undefined) {
      DeviceCapabilities.encode(message.deviceCapabilities, writer.uint32(434).fork()).join();
    }
    if (message.noteEditAction !== undefined) {
      SyncActionValue_NoteEditAction.encode(message.noteEditAction, writer.uint32(442).fork()).join();
    }
    if (message.favoritesAction !== undefined) {
      SyncActionValue_FavoritesAction.encode(message.favoritesAction, writer.uint32(450).fork()).join();
    }
    if (message.merchantPaymentPartnerAction !== undefined) {
      SyncActionValue_MerchantPaymentPartnerAction.encode(
        message.merchantPaymentPartnerAction,
        writer.uint32(458).fork(),
      ).join();
    }
    if (message.waffleAccountLinkStateAction !== undefined) {
      SyncActionValue_WaffleAccountLinkStateAction.encode(
        message.waffleAccountLinkStateAction,
        writer.uint32(466).fork(),
      ).join();
    }
    if (message.usernameChatStartMode !== undefined) {
      SyncActionValue_UsernameChatStartModeAction.encode(message.usernameChatStartMode, writer.uint32(474).fork())
        .join();
    }
    if (message.notificationActivitySettingAction !== undefined) {
      SyncActionValue_NotificationActivitySettingAction.encode(
        message.notificationActivitySettingAction,
        writer.uint32(482).fork(),
      ).join();
    }
    if (message.lidContactAction !== undefined) {
      SyncActionValue_LidContactAction.encode(message.lidContactAction, writer.uint32(490).fork()).join();
    }
    if (message.ctwaPerCustomerDataSharingAction !== undefined) {
      SyncActionValue_CtwaPerCustomerDataSharingAction.encode(
        message.ctwaPerCustomerDataSharingAction,
        writer.uint32(498).fork(),
      ).join();
    }
    if (message.paymentTosAction !== undefined) {
      SyncActionValue_PaymentTosAction.encode(message.paymentTosAction, writer.uint32(506).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.starAction = SyncActionValue_StarAction.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.contactAction = SyncActionValue_ContactAction.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.muteAction = SyncActionValue_MuteAction.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.pinAction = SyncActionValue_PinAction.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.securityNotificationSetting = SyncActionValue_SecurityNotificationSetting.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.pushNameSetting = SyncActionValue_PushNameSetting.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.quickReplyAction = SyncActionValue_QuickReplyAction.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.recentEmojiWeightsAction = SyncActionValue_RecentEmojiWeightsAction.decode(reader, reader.uint32());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.labelEditAction = SyncActionValue_LabelEditAction.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.labelAssociationAction = SyncActionValue_LabelAssociationAction.decode(reader, reader.uint32());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.localeSetting = SyncActionValue_LocaleSetting.decode(reader, reader.uint32());
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.archiveChatAction = SyncActionValue_ArchiveChatAction.decode(reader, reader.uint32());
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.deleteMessageForMeAction = SyncActionValue_DeleteMessageForMeAction.decode(reader, reader.uint32());
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.keyExpiration = SyncActionValue_KeyExpiration.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.markChatAsReadAction = SyncActionValue_MarkChatAsReadAction.decode(reader, reader.uint32());
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.clearChatAction = SyncActionValue_ClearChatAction.decode(reader, reader.uint32());
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.deleteChatAction = SyncActionValue_DeleteChatAction.decode(reader, reader.uint32());
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.unarchiveChatsSetting = SyncActionValue_UnarchiveChatsSetting.decode(reader, reader.uint32());
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.primaryFeature = SyncActionValue_PrimaryFeature.decode(reader, reader.uint32());
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.androidUnsupportedActions = SyncActionValue_AndroidUnsupportedActions.decode(reader, reader.uint32());
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.agentAction = SyncActionValue_AgentAction.decode(reader, reader.uint32());
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.subscriptionAction = SyncActionValue_SubscriptionAction.decode(reader, reader.uint32());
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.userStatusMuteAction = SyncActionValue_UserStatusMuteAction.decode(reader, reader.uint32());
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.timeFormatAction = SyncActionValue_TimeFormatAction.decode(reader, reader.uint32());
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.nuxAction = SyncActionValue_NuxAction.decode(reader, reader.uint32());
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.primaryVersionAction = SyncActionValue_PrimaryVersionAction.decode(reader, reader.uint32());
          continue;
        }
        case 33: {
          if (tag !== 266) {
            break;
          }

          message.stickerAction = SyncActionValue_StickerAction.decode(reader, reader.uint32());
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.removeRecentStickerAction = SyncActionValue_RemoveRecentStickerAction.decode(reader, reader.uint32());
          continue;
        }
        case 35: {
          if (tag !== 282) {
            break;
          }

          message.chatAssignment = SyncActionValue_ChatAssignmentAction.decode(reader, reader.uint32());
          continue;
        }
        case 36: {
          if (tag !== 290) {
            break;
          }

          message.chatAssignmentOpenedStatus = SyncActionValue_ChatAssignmentOpenedStatusAction.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 37: {
          if (tag !== 298) {
            break;
          }

          message.pnForLidChatAction = SyncActionValue_PnForLidChatAction.decode(reader, reader.uint32());
          continue;
        }
        case 38: {
          if (tag !== 306) {
            break;
          }

          message.marketingMessageAction = SyncActionValue_MarketingMessageAction.decode(reader, reader.uint32());
          continue;
        }
        case 39: {
          if (tag !== 314) {
            break;
          }

          message.marketingMessageBroadcastAction = SyncActionValue_MarketingMessageBroadcastAction.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 40: {
          if (tag !== 322) {
            break;
          }

          message.externalWebBetaAction = SyncActionValue_ExternalWebBetaAction.decode(reader, reader.uint32());
          continue;
        }
        case 41: {
          if (tag !== 330) {
            break;
          }

          message.privacySettingRelayAllCalls = SyncActionValue_PrivacySettingRelayAllCalls.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 42: {
          if (tag !== 338) {
            break;
          }

          message.callLogAction = SyncActionValue_CallLogAction.decode(reader, reader.uint32());
          continue;
        }
        case 44: {
          if (tag !== 354) {
            break;
          }

          message.statusPrivacy = SyncActionValue_StatusPrivacyAction.decode(reader, reader.uint32());
          continue;
        }
        case 45: {
          if (tag !== 362) {
            break;
          }

          message.botWelcomeRequestAction = SyncActionValue_BotWelcomeRequestAction.decode(reader, reader.uint32());
          continue;
        }
        case 46: {
          if (tag !== 370) {
            break;
          }

          message.deleteIndividualCallLog = SyncActionValue_DeleteIndividualCallLogAction.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 47: {
          if (tag !== 378) {
            break;
          }

          message.labelReorderingAction = SyncActionValue_LabelReorderingAction.decode(reader, reader.uint32());
          continue;
        }
        case 48: {
          if (tag !== 386) {
            break;
          }

          message.paymentInfoAction = SyncActionValue_PaymentInfoAction.decode(reader, reader.uint32());
          continue;
        }
        case 49: {
          if (tag !== 394) {
            break;
          }

          message.customPaymentMethodsAction = SyncActionValue_CustomPaymentMethodsAction.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 50: {
          if (tag !== 402) {
            break;
          }

          message.lockChatAction = SyncActionValue_LockChatAction.decode(reader, reader.uint32());
          continue;
        }
        case 51: {
          if (tag !== 410) {
            break;
          }

          message.chatLockSettings = ChatLockSettings.decode(reader, reader.uint32());
          continue;
        }
        case 52: {
          if (tag !== 418) {
            break;
          }

          message.wamoUserIdentifierAction = SyncActionValue_WamoUserIdentifierAction.decode(reader, reader.uint32());
          continue;
        }
        case 53: {
          if (tag !== 426) {
            break;
          }

          message.privacySettingDisableLinkPreviewsAction = SyncActionValue_PrivacySettingDisableLinkPreviewsAction
            .decode(reader, reader.uint32());
          continue;
        }
        case 54: {
          if (tag !== 434) {
            break;
          }

          message.deviceCapabilities = DeviceCapabilities.decode(reader, reader.uint32());
          continue;
        }
        case 55: {
          if (tag !== 442) {
            break;
          }

          message.noteEditAction = SyncActionValue_NoteEditAction.decode(reader, reader.uint32());
          continue;
        }
        case 56: {
          if (tag !== 450) {
            break;
          }

          message.favoritesAction = SyncActionValue_FavoritesAction.decode(reader, reader.uint32());
          continue;
        }
        case 57: {
          if (tag !== 458) {
            break;
          }

          message.merchantPaymentPartnerAction = SyncActionValue_MerchantPaymentPartnerAction.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 58: {
          if (tag !== 466) {
            break;
          }

          message.waffleAccountLinkStateAction = SyncActionValue_WaffleAccountLinkStateAction.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 59: {
          if (tag !== 474) {
            break;
          }

          message.usernameChatStartMode = SyncActionValue_UsernameChatStartModeAction.decode(reader, reader.uint32());
          continue;
        }
        case 60: {
          if (tag !== 482) {
            break;
          }

          message.notificationActivitySettingAction = SyncActionValue_NotificationActivitySettingAction.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 61: {
          if (tag !== 490) {
            break;
          }

          message.lidContactAction = SyncActionValue_LidContactAction.decode(reader, reader.uint32());
          continue;
        }
        case 62: {
          if (tag !== 498) {
            break;
          }

          message.ctwaPerCustomerDataSharingAction = SyncActionValue_CtwaPerCustomerDataSharingAction.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 63: {
          if (tag !== 506) {
            break;
          }

          message.paymentTosAction = SyncActionValue_PaymentTosAction.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue {
    return {
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : undefined,
      starAction: isSet(object.starAction) ? SyncActionValue_StarAction.fromJSON(object.starAction) : undefined,
      contactAction: isSet(object.contactAction)
        ? SyncActionValue_ContactAction.fromJSON(object.contactAction)
        : undefined,
      muteAction: isSet(object.muteAction) ? SyncActionValue_MuteAction.fromJSON(object.muteAction) : undefined,
      pinAction: isSet(object.pinAction) ? SyncActionValue_PinAction.fromJSON(object.pinAction) : undefined,
      securityNotificationSetting: isSet(object.securityNotificationSetting)
        ? SyncActionValue_SecurityNotificationSetting.fromJSON(object.securityNotificationSetting)
        : undefined,
      pushNameSetting: isSet(object.pushNameSetting)
        ? SyncActionValue_PushNameSetting.fromJSON(object.pushNameSetting)
        : undefined,
      quickReplyAction: isSet(object.quickReplyAction)
        ? SyncActionValue_QuickReplyAction.fromJSON(object.quickReplyAction)
        : undefined,
      recentEmojiWeightsAction: isSet(object.recentEmojiWeightsAction)
        ? SyncActionValue_RecentEmojiWeightsAction.fromJSON(object.recentEmojiWeightsAction)
        : undefined,
      labelEditAction: isSet(object.labelEditAction)
        ? SyncActionValue_LabelEditAction.fromJSON(object.labelEditAction)
        : undefined,
      labelAssociationAction: isSet(object.labelAssociationAction)
        ? SyncActionValue_LabelAssociationAction.fromJSON(object.labelAssociationAction)
        : undefined,
      localeSetting: isSet(object.localeSetting)
        ? SyncActionValue_LocaleSetting.fromJSON(object.localeSetting)
        : undefined,
      archiveChatAction: isSet(object.archiveChatAction)
        ? SyncActionValue_ArchiveChatAction.fromJSON(object.archiveChatAction)
        : undefined,
      deleteMessageForMeAction: isSet(object.deleteMessageForMeAction)
        ? SyncActionValue_DeleteMessageForMeAction.fromJSON(object.deleteMessageForMeAction)
        : undefined,
      keyExpiration: isSet(object.keyExpiration)
        ? SyncActionValue_KeyExpiration.fromJSON(object.keyExpiration)
        : undefined,
      markChatAsReadAction: isSet(object.markChatAsReadAction)
        ? SyncActionValue_MarkChatAsReadAction.fromJSON(object.markChatAsReadAction)
        : undefined,
      clearChatAction: isSet(object.clearChatAction)
        ? SyncActionValue_ClearChatAction.fromJSON(object.clearChatAction)
        : undefined,
      deleteChatAction: isSet(object.deleteChatAction)
        ? SyncActionValue_DeleteChatAction.fromJSON(object.deleteChatAction)
        : undefined,
      unarchiveChatsSetting: isSet(object.unarchiveChatsSetting)
        ? SyncActionValue_UnarchiveChatsSetting.fromJSON(object.unarchiveChatsSetting)
        : undefined,
      primaryFeature: isSet(object.primaryFeature)
        ? SyncActionValue_PrimaryFeature.fromJSON(object.primaryFeature)
        : undefined,
      androidUnsupportedActions: isSet(object.androidUnsupportedActions)
        ? SyncActionValue_AndroidUnsupportedActions.fromJSON(object.androidUnsupportedActions)
        : undefined,
      agentAction: isSet(object.agentAction) ? SyncActionValue_AgentAction.fromJSON(object.agentAction) : undefined,
      subscriptionAction: isSet(object.subscriptionAction)
        ? SyncActionValue_SubscriptionAction.fromJSON(object.subscriptionAction)
        : undefined,
      userStatusMuteAction: isSet(object.userStatusMuteAction)
        ? SyncActionValue_UserStatusMuteAction.fromJSON(object.userStatusMuteAction)
        : undefined,
      timeFormatAction: isSet(object.timeFormatAction)
        ? SyncActionValue_TimeFormatAction.fromJSON(object.timeFormatAction)
        : undefined,
      nuxAction: isSet(object.nuxAction) ? SyncActionValue_NuxAction.fromJSON(object.nuxAction) : undefined,
      primaryVersionAction: isSet(object.primaryVersionAction)
        ? SyncActionValue_PrimaryVersionAction.fromJSON(object.primaryVersionAction)
        : undefined,
      stickerAction: isSet(object.stickerAction)
        ? SyncActionValue_StickerAction.fromJSON(object.stickerAction)
        : undefined,
      removeRecentStickerAction: isSet(object.removeRecentStickerAction)
        ? SyncActionValue_RemoveRecentStickerAction.fromJSON(object.removeRecentStickerAction)
        : undefined,
      chatAssignment: isSet(object.chatAssignment)
        ? SyncActionValue_ChatAssignmentAction.fromJSON(object.chatAssignment)
        : undefined,
      chatAssignmentOpenedStatus: isSet(object.chatAssignmentOpenedStatus)
        ? SyncActionValue_ChatAssignmentOpenedStatusAction.fromJSON(object.chatAssignmentOpenedStatus)
        : undefined,
      pnForLidChatAction: isSet(object.pnForLidChatAction)
        ? SyncActionValue_PnForLidChatAction.fromJSON(object.pnForLidChatAction)
        : undefined,
      marketingMessageAction: isSet(object.marketingMessageAction)
        ? SyncActionValue_MarketingMessageAction.fromJSON(object.marketingMessageAction)
        : undefined,
      marketingMessageBroadcastAction: isSet(object.marketingMessageBroadcastAction)
        ? SyncActionValue_MarketingMessageBroadcastAction.fromJSON(object.marketingMessageBroadcastAction)
        : undefined,
      externalWebBetaAction: isSet(object.externalWebBetaAction)
        ? SyncActionValue_ExternalWebBetaAction.fromJSON(object.externalWebBetaAction)
        : undefined,
      privacySettingRelayAllCalls: isSet(object.privacySettingRelayAllCalls)
        ? SyncActionValue_PrivacySettingRelayAllCalls.fromJSON(object.privacySettingRelayAllCalls)
        : undefined,
      callLogAction: isSet(object.callLogAction)
        ? SyncActionValue_CallLogAction.fromJSON(object.callLogAction)
        : undefined,
      statusPrivacy: isSet(object.statusPrivacy)
        ? SyncActionValue_StatusPrivacyAction.fromJSON(object.statusPrivacy)
        : undefined,
      botWelcomeRequestAction: isSet(object.botWelcomeRequestAction)
        ? SyncActionValue_BotWelcomeRequestAction.fromJSON(object.botWelcomeRequestAction)
        : undefined,
      deleteIndividualCallLog: isSet(object.deleteIndividualCallLog)
        ? SyncActionValue_DeleteIndividualCallLogAction.fromJSON(object.deleteIndividualCallLog)
        : undefined,
      labelReorderingAction: isSet(object.labelReorderingAction)
        ? SyncActionValue_LabelReorderingAction.fromJSON(object.labelReorderingAction)
        : undefined,
      paymentInfoAction: isSet(object.paymentInfoAction)
        ? SyncActionValue_PaymentInfoAction.fromJSON(object.paymentInfoAction)
        : undefined,
      customPaymentMethodsAction: isSet(object.customPaymentMethodsAction)
        ? SyncActionValue_CustomPaymentMethodsAction.fromJSON(object.customPaymentMethodsAction)
        : undefined,
      lockChatAction: isSet(object.lockChatAction)
        ? SyncActionValue_LockChatAction.fromJSON(object.lockChatAction)
        : undefined,
      chatLockSettings: isSet(object.chatLockSettings) ? ChatLockSettings.fromJSON(object.chatLockSettings) : undefined,
      wamoUserIdentifierAction: isSet(object.wamoUserIdentifierAction)
        ? SyncActionValue_WamoUserIdentifierAction.fromJSON(object.wamoUserIdentifierAction)
        : undefined,
      privacySettingDisableLinkPreviewsAction: isSet(object.privacySettingDisableLinkPreviewsAction)
        ? SyncActionValue_PrivacySettingDisableLinkPreviewsAction.fromJSON(
          object.privacySettingDisableLinkPreviewsAction,
        )
        : undefined,
      deviceCapabilities: isSet(object.deviceCapabilities)
        ? DeviceCapabilities.fromJSON(object.deviceCapabilities)
        : undefined,
      noteEditAction: isSet(object.noteEditAction)
        ? SyncActionValue_NoteEditAction.fromJSON(object.noteEditAction)
        : undefined,
      favoritesAction: isSet(object.favoritesAction)
        ? SyncActionValue_FavoritesAction.fromJSON(object.favoritesAction)
        : undefined,
      merchantPaymentPartnerAction: isSet(object.merchantPaymentPartnerAction)
        ? SyncActionValue_MerchantPaymentPartnerAction.fromJSON(object.merchantPaymentPartnerAction)
        : undefined,
      waffleAccountLinkStateAction: isSet(object.waffleAccountLinkStateAction)
        ? SyncActionValue_WaffleAccountLinkStateAction.fromJSON(object.waffleAccountLinkStateAction)
        : undefined,
      usernameChatStartMode: isSet(object.usernameChatStartMode)
        ? SyncActionValue_UsernameChatStartModeAction.fromJSON(object.usernameChatStartMode)
        : undefined,
      notificationActivitySettingAction: isSet(object.notificationActivitySettingAction)
        ? SyncActionValue_NotificationActivitySettingAction.fromJSON(object.notificationActivitySettingAction)
        : undefined,
      lidContactAction: isSet(object.lidContactAction)
        ? SyncActionValue_LidContactAction.fromJSON(object.lidContactAction)
        : undefined,
      ctwaPerCustomerDataSharingAction: isSet(object.ctwaPerCustomerDataSharingAction)
        ? SyncActionValue_CtwaPerCustomerDataSharingAction.fromJSON(object.ctwaPerCustomerDataSharingAction)
        : undefined,
      paymentTosAction: isSet(object.paymentTosAction)
        ? SyncActionValue_PaymentTosAction.fromJSON(object.paymentTosAction)
        : undefined,
    };
  },

  toJSON(message: SyncActionValue): unknown {
    const obj: any = {};
    if (message.timestamp !== undefined) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.starAction !== undefined) {
      obj.starAction = SyncActionValue_StarAction.toJSON(message.starAction);
    }
    if (message.contactAction !== undefined) {
      obj.contactAction = SyncActionValue_ContactAction.toJSON(message.contactAction);
    }
    if (message.muteAction !== undefined) {
      obj.muteAction = SyncActionValue_MuteAction.toJSON(message.muteAction);
    }
    if (message.pinAction !== undefined) {
      obj.pinAction = SyncActionValue_PinAction.toJSON(message.pinAction);
    }
    if (message.securityNotificationSetting !== undefined) {
      obj.securityNotificationSetting = SyncActionValue_SecurityNotificationSetting.toJSON(
        message.securityNotificationSetting,
      );
    }
    if (message.pushNameSetting !== undefined) {
      obj.pushNameSetting = SyncActionValue_PushNameSetting.toJSON(message.pushNameSetting);
    }
    if (message.quickReplyAction !== undefined) {
      obj.quickReplyAction = SyncActionValue_QuickReplyAction.toJSON(message.quickReplyAction);
    }
    if (message.recentEmojiWeightsAction !== undefined) {
      obj.recentEmojiWeightsAction = SyncActionValue_RecentEmojiWeightsAction.toJSON(message.recentEmojiWeightsAction);
    }
    if (message.labelEditAction !== undefined) {
      obj.labelEditAction = SyncActionValue_LabelEditAction.toJSON(message.labelEditAction);
    }
    if (message.labelAssociationAction !== undefined) {
      obj.labelAssociationAction = SyncActionValue_LabelAssociationAction.toJSON(message.labelAssociationAction);
    }
    if (message.localeSetting !== undefined) {
      obj.localeSetting = SyncActionValue_LocaleSetting.toJSON(message.localeSetting);
    }
    if (message.archiveChatAction !== undefined) {
      obj.archiveChatAction = SyncActionValue_ArchiveChatAction.toJSON(message.archiveChatAction);
    }
    if (message.deleteMessageForMeAction !== undefined) {
      obj.deleteMessageForMeAction = SyncActionValue_DeleteMessageForMeAction.toJSON(message.deleteMessageForMeAction);
    }
    if (message.keyExpiration !== undefined) {
      obj.keyExpiration = SyncActionValue_KeyExpiration.toJSON(message.keyExpiration);
    }
    if (message.markChatAsReadAction !== undefined) {
      obj.markChatAsReadAction = SyncActionValue_MarkChatAsReadAction.toJSON(message.markChatAsReadAction);
    }
    if (message.clearChatAction !== undefined) {
      obj.clearChatAction = SyncActionValue_ClearChatAction.toJSON(message.clearChatAction);
    }
    if (message.deleteChatAction !== undefined) {
      obj.deleteChatAction = SyncActionValue_DeleteChatAction.toJSON(message.deleteChatAction);
    }
    if (message.unarchiveChatsSetting !== undefined) {
      obj.unarchiveChatsSetting = SyncActionValue_UnarchiveChatsSetting.toJSON(message.unarchiveChatsSetting);
    }
    if (message.primaryFeature !== undefined) {
      obj.primaryFeature = SyncActionValue_PrimaryFeature.toJSON(message.primaryFeature);
    }
    if (message.androidUnsupportedActions !== undefined) {
      obj.androidUnsupportedActions = SyncActionValue_AndroidUnsupportedActions.toJSON(
        message.androidUnsupportedActions,
      );
    }
    if (message.agentAction !== undefined) {
      obj.agentAction = SyncActionValue_AgentAction.toJSON(message.agentAction);
    }
    if (message.subscriptionAction !== undefined) {
      obj.subscriptionAction = SyncActionValue_SubscriptionAction.toJSON(message.subscriptionAction);
    }
    if (message.userStatusMuteAction !== undefined) {
      obj.userStatusMuteAction = SyncActionValue_UserStatusMuteAction.toJSON(message.userStatusMuteAction);
    }
    if (message.timeFormatAction !== undefined) {
      obj.timeFormatAction = SyncActionValue_TimeFormatAction.toJSON(message.timeFormatAction);
    }
    if (message.nuxAction !== undefined) {
      obj.nuxAction = SyncActionValue_NuxAction.toJSON(message.nuxAction);
    }
    if (message.primaryVersionAction !== undefined) {
      obj.primaryVersionAction = SyncActionValue_PrimaryVersionAction.toJSON(message.primaryVersionAction);
    }
    if (message.stickerAction !== undefined) {
      obj.stickerAction = SyncActionValue_StickerAction.toJSON(message.stickerAction);
    }
    if (message.removeRecentStickerAction !== undefined) {
      obj.removeRecentStickerAction = SyncActionValue_RemoveRecentStickerAction.toJSON(
        message.removeRecentStickerAction,
      );
    }
    if (message.chatAssignment !== undefined) {
      obj.chatAssignment = SyncActionValue_ChatAssignmentAction.toJSON(message.chatAssignment);
    }
    if (message.chatAssignmentOpenedStatus !== undefined) {
      obj.chatAssignmentOpenedStatus = SyncActionValue_ChatAssignmentOpenedStatusAction.toJSON(
        message.chatAssignmentOpenedStatus,
      );
    }
    if (message.pnForLidChatAction !== undefined) {
      obj.pnForLidChatAction = SyncActionValue_PnForLidChatAction.toJSON(message.pnForLidChatAction);
    }
    if (message.marketingMessageAction !== undefined) {
      obj.marketingMessageAction = SyncActionValue_MarketingMessageAction.toJSON(message.marketingMessageAction);
    }
    if (message.marketingMessageBroadcastAction !== undefined) {
      obj.marketingMessageBroadcastAction = SyncActionValue_MarketingMessageBroadcastAction.toJSON(
        message.marketingMessageBroadcastAction,
      );
    }
    if (message.externalWebBetaAction !== undefined) {
      obj.externalWebBetaAction = SyncActionValue_ExternalWebBetaAction.toJSON(message.externalWebBetaAction);
    }
    if (message.privacySettingRelayAllCalls !== undefined) {
      obj.privacySettingRelayAllCalls = SyncActionValue_PrivacySettingRelayAllCalls.toJSON(
        message.privacySettingRelayAllCalls,
      );
    }
    if (message.callLogAction !== undefined) {
      obj.callLogAction = SyncActionValue_CallLogAction.toJSON(message.callLogAction);
    }
    if (message.statusPrivacy !== undefined) {
      obj.statusPrivacy = SyncActionValue_StatusPrivacyAction.toJSON(message.statusPrivacy);
    }
    if (message.botWelcomeRequestAction !== undefined) {
      obj.botWelcomeRequestAction = SyncActionValue_BotWelcomeRequestAction.toJSON(message.botWelcomeRequestAction);
    }
    if (message.deleteIndividualCallLog !== undefined) {
      obj.deleteIndividualCallLog = SyncActionValue_DeleteIndividualCallLogAction.toJSON(
        message.deleteIndividualCallLog,
      );
    }
    if (message.labelReorderingAction !== undefined) {
      obj.labelReorderingAction = SyncActionValue_LabelReorderingAction.toJSON(message.labelReorderingAction);
    }
    if (message.paymentInfoAction !== undefined) {
      obj.paymentInfoAction = SyncActionValue_PaymentInfoAction.toJSON(message.paymentInfoAction);
    }
    if (message.customPaymentMethodsAction !== undefined) {
      obj.customPaymentMethodsAction = SyncActionValue_CustomPaymentMethodsAction.toJSON(
        message.customPaymentMethodsAction,
      );
    }
    if (message.lockChatAction !== undefined) {
      obj.lockChatAction = SyncActionValue_LockChatAction.toJSON(message.lockChatAction);
    }
    if (message.chatLockSettings !== undefined) {
      obj.chatLockSettings = ChatLockSettings.toJSON(message.chatLockSettings);
    }
    if (message.wamoUserIdentifierAction !== undefined) {
      obj.wamoUserIdentifierAction = SyncActionValue_WamoUserIdentifierAction.toJSON(message.wamoUserIdentifierAction);
    }
    if (message.privacySettingDisableLinkPreviewsAction !== undefined) {
      obj.privacySettingDisableLinkPreviewsAction = SyncActionValue_PrivacySettingDisableLinkPreviewsAction.toJSON(
        message.privacySettingDisableLinkPreviewsAction,
      );
    }
    if (message.deviceCapabilities !== undefined) {
      obj.deviceCapabilities = DeviceCapabilities.toJSON(message.deviceCapabilities);
    }
    if (message.noteEditAction !== undefined) {
      obj.noteEditAction = SyncActionValue_NoteEditAction.toJSON(message.noteEditAction);
    }
    if (message.favoritesAction !== undefined) {
      obj.favoritesAction = SyncActionValue_FavoritesAction.toJSON(message.favoritesAction);
    }
    if (message.merchantPaymentPartnerAction !== undefined) {
      obj.merchantPaymentPartnerAction = SyncActionValue_MerchantPaymentPartnerAction.toJSON(
        message.merchantPaymentPartnerAction,
      );
    }
    if (message.waffleAccountLinkStateAction !== undefined) {
      obj.waffleAccountLinkStateAction = SyncActionValue_WaffleAccountLinkStateAction.toJSON(
        message.waffleAccountLinkStateAction,
      );
    }
    if (message.usernameChatStartMode !== undefined) {
      obj.usernameChatStartMode = SyncActionValue_UsernameChatStartModeAction.toJSON(message.usernameChatStartMode);
    }
    if (message.notificationActivitySettingAction !== undefined) {
      obj.notificationActivitySettingAction = SyncActionValue_NotificationActivitySettingAction.toJSON(
        message.notificationActivitySettingAction,
      );
    }
    if (message.lidContactAction !== undefined) {
      obj.lidContactAction = SyncActionValue_LidContactAction.toJSON(message.lidContactAction);
    }
    if (message.ctwaPerCustomerDataSharingAction !== undefined) {
      obj.ctwaPerCustomerDataSharingAction = SyncActionValue_CtwaPerCustomerDataSharingAction.toJSON(
        message.ctwaPerCustomerDataSharingAction,
      );
    }
    if (message.paymentTosAction !== undefined) {
      obj.paymentTosAction = SyncActionValue_PaymentTosAction.toJSON(message.paymentTosAction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue>, I>>(base?: I): SyncActionValue {
    return SyncActionValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue>, I>>(object: I): SyncActionValue {
    const message = createBaseSyncActionValue();
    message.timestamp = object.timestamp ?? undefined;
    message.starAction = (object.starAction !== undefined && object.starAction !== null)
      ? SyncActionValue_StarAction.fromPartial(object.starAction)
      : undefined;
    message.contactAction = (object.contactAction !== undefined && object.contactAction !== null)
      ? SyncActionValue_ContactAction.fromPartial(object.contactAction)
      : undefined;
    message.muteAction = (object.muteAction !== undefined && object.muteAction !== null)
      ? SyncActionValue_MuteAction.fromPartial(object.muteAction)
      : undefined;
    message.pinAction = (object.pinAction !== undefined && object.pinAction !== null)
      ? SyncActionValue_PinAction.fromPartial(object.pinAction)
      : undefined;
    message.securityNotificationSetting =
      (object.securityNotificationSetting !== undefined && object.securityNotificationSetting !== null)
        ? SyncActionValue_SecurityNotificationSetting.fromPartial(object.securityNotificationSetting)
        : undefined;
    message.pushNameSetting = (object.pushNameSetting !== undefined && object.pushNameSetting !== null)
      ? SyncActionValue_PushNameSetting.fromPartial(object.pushNameSetting)
      : undefined;
    message.quickReplyAction = (object.quickReplyAction !== undefined && object.quickReplyAction !== null)
      ? SyncActionValue_QuickReplyAction.fromPartial(object.quickReplyAction)
      : undefined;
    message.recentEmojiWeightsAction =
      (object.recentEmojiWeightsAction !== undefined && object.recentEmojiWeightsAction !== null)
        ? SyncActionValue_RecentEmojiWeightsAction.fromPartial(object.recentEmojiWeightsAction)
        : undefined;
    message.labelEditAction = (object.labelEditAction !== undefined && object.labelEditAction !== null)
      ? SyncActionValue_LabelEditAction.fromPartial(object.labelEditAction)
      : undefined;
    message.labelAssociationAction =
      (object.labelAssociationAction !== undefined && object.labelAssociationAction !== null)
        ? SyncActionValue_LabelAssociationAction.fromPartial(object.labelAssociationAction)
        : undefined;
    message.localeSetting = (object.localeSetting !== undefined && object.localeSetting !== null)
      ? SyncActionValue_LocaleSetting.fromPartial(object.localeSetting)
      : undefined;
    message.archiveChatAction = (object.archiveChatAction !== undefined && object.archiveChatAction !== null)
      ? SyncActionValue_ArchiveChatAction.fromPartial(object.archiveChatAction)
      : undefined;
    message.deleteMessageForMeAction =
      (object.deleteMessageForMeAction !== undefined && object.deleteMessageForMeAction !== null)
        ? SyncActionValue_DeleteMessageForMeAction.fromPartial(object.deleteMessageForMeAction)
        : undefined;
    message.keyExpiration = (object.keyExpiration !== undefined && object.keyExpiration !== null)
      ? SyncActionValue_KeyExpiration.fromPartial(object.keyExpiration)
      : undefined;
    message.markChatAsReadAction = (object.markChatAsReadAction !== undefined && object.markChatAsReadAction !== null)
      ? SyncActionValue_MarkChatAsReadAction.fromPartial(object.markChatAsReadAction)
      : undefined;
    message.clearChatAction = (object.clearChatAction !== undefined && object.clearChatAction !== null)
      ? SyncActionValue_ClearChatAction.fromPartial(object.clearChatAction)
      : undefined;
    message.deleteChatAction = (object.deleteChatAction !== undefined && object.deleteChatAction !== null)
      ? SyncActionValue_DeleteChatAction.fromPartial(object.deleteChatAction)
      : undefined;
    message.unarchiveChatsSetting =
      (object.unarchiveChatsSetting !== undefined && object.unarchiveChatsSetting !== null)
        ? SyncActionValue_UnarchiveChatsSetting.fromPartial(object.unarchiveChatsSetting)
        : undefined;
    message.primaryFeature = (object.primaryFeature !== undefined && object.primaryFeature !== null)
      ? SyncActionValue_PrimaryFeature.fromPartial(object.primaryFeature)
      : undefined;
    message.androidUnsupportedActions =
      (object.androidUnsupportedActions !== undefined && object.androidUnsupportedActions !== null)
        ? SyncActionValue_AndroidUnsupportedActions.fromPartial(object.androidUnsupportedActions)
        : undefined;
    message.agentAction = (object.agentAction !== undefined && object.agentAction !== null)
      ? SyncActionValue_AgentAction.fromPartial(object.agentAction)
      : undefined;
    message.subscriptionAction = (object.subscriptionAction !== undefined && object.subscriptionAction !== null)
      ? SyncActionValue_SubscriptionAction.fromPartial(object.subscriptionAction)
      : undefined;
    message.userStatusMuteAction = (object.userStatusMuteAction !== undefined && object.userStatusMuteAction !== null)
      ? SyncActionValue_UserStatusMuteAction.fromPartial(object.userStatusMuteAction)
      : undefined;
    message.timeFormatAction = (object.timeFormatAction !== undefined && object.timeFormatAction !== null)
      ? SyncActionValue_TimeFormatAction.fromPartial(object.timeFormatAction)
      : undefined;
    message.nuxAction = (object.nuxAction !== undefined && object.nuxAction !== null)
      ? SyncActionValue_NuxAction.fromPartial(object.nuxAction)
      : undefined;
    message.primaryVersionAction = (object.primaryVersionAction !== undefined && object.primaryVersionAction !== null)
      ? SyncActionValue_PrimaryVersionAction.fromPartial(object.primaryVersionAction)
      : undefined;
    message.stickerAction = (object.stickerAction !== undefined && object.stickerAction !== null)
      ? SyncActionValue_StickerAction.fromPartial(object.stickerAction)
      : undefined;
    message.removeRecentStickerAction =
      (object.removeRecentStickerAction !== undefined && object.removeRecentStickerAction !== null)
        ? SyncActionValue_RemoveRecentStickerAction.fromPartial(object.removeRecentStickerAction)
        : undefined;
    message.chatAssignment = (object.chatAssignment !== undefined && object.chatAssignment !== null)
      ? SyncActionValue_ChatAssignmentAction.fromPartial(object.chatAssignment)
      : undefined;
    message.chatAssignmentOpenedStatus =
      (object.chatAssignmentOpenedStatus !== undefined && object.chatAssignmentOpenedStatus !== null)
        ? SyncActionValue_ChatAssignmentOpenedStatusAction.fromPartial(object.chatAssignmentOpenedStatus)
        : undefined;
    message.pnForLidChatAction = (object.pnForLidChatAction !== undefined && object.pnForLidChatAction !== null)
      ? SyncActionValue_PnForLidChatAction.fromPartial(object.pnForLidChatAction)
      : undefined;
    message.marketingMessageAction =
      (object.marketingMessageAction !== undefined && object.marketingMessageAction !== null)
        ? SyncActionValue_MarketingMessageAction.fromPartial(object.marketingMessageAction)
        : undefined;
    message.marketingMessageBroadcastAction =
      (object.marketingMessageBroadcastAction !== undefined && object.marketingMessageBroadcastAction !== null)
        ? SyncActionValue_MarketingMessageBroadcastAction.fromPartial(object.marketingMessageBroadcastAction)
        : undefined;
    message.externalWebBetaAction =
      (object.externalWebBetaAction !== undefined && object.externalWebBetaAction !== null)
        ? SyncActionValue_ExternalWebBetaAction.fromPartial(object.externalWebBetaAction)
        : undefined;
    message.privacySettingRelayAllCalls =
      (object.privacySettingRelayAllCalls !== undefined && object.privacySettingRelayAllCalls !== null)
        ? SyncActionValue_PrivacySettingRelayAllCalls.fromPartial(object.privacySettingRelayAllCalls)
        : undefined;
    message.callLogAction = (object.callLogAction !== undefined && object.callLogAction !== null)
      ? SyncActionValue_CallLogAction.fromPartial(object.callLogAction)
      : undefined;
    message.statusPrivacy = (object.statusPrivacy !== undefined && object.statusPrivacy !== null)
      ? SyncActionValue_StatusPrivacyAction.fromPartial(object.statusPrivacy)
      : undefined;
    message.botWelcomeRequestAction =
      (object.botWelcomeRequestAction !== undefined && object.botWelcomeRequestAction !== null)
        ? SyncActionValue_BotWelcomeRequestAction.fromPartial(object.botWelcomeRequestAction)
        : undefined;
    message.deleteIndividualCallLog =
      (object.deleteIndividualCallLog !== undefined && object.deleteIndividualCallLog !== null)
        ? SyncActionValue_DeleteIndividualCallLogAction.fromPartial(object.deleteIndividualCallLog)
        : undefined;
    message.labelReorderingAction =
      (object.labelReorderingAction !== undefined && object.labelReorderingAction !== null)
        ? SyncActionValue_LabelReorderingAction.fromPartial(object.labelReorderingAction)
        : undefined;
    message.paymentInfoAction = (object.paymentInfoAction !== undefined && object.paymentInfoAction !== null)
      ? SyncActionValue_PaymentInfoAction.fromPartial(object.paymentInfoAction)
      : undefined;
    message.customPaymentMethodsAction =
      (object.customPaymentMethodsAction !== undefined && object.customPaymentMethodsAction !== null)
        ? SyncActionValue_CustomPaymentMethodsAction.fromPartial(object.customPaymentMethodsAction)
        : undefined;
    message.lockChatAction = (object.lockChatAction !== undefined && object.lockChatAction !== null)
      ? SyncActionValue_LockChatAction.fromPartial(object.lockChatAction)
      : undefined;
    message.chatLockSettings = (object.chatLockSettings !== undefined && object.chatLockSettings !== null)
      ? ChatLockSettings.fromPartial(object.chatLockSettings)
      : undefined;
    message.wamoUserIdentifierAction =
      (object.wamoUserIdentifierAction !== undefined && object.wamoUserIdentifierAction !== null)
        ? SyncActionValue_WamoUserIdentifierAction.fromPartial(object.wamoUserIdentifierAction)
        : undefined;
    message.privacySettingDisableLinkPreviewsAction =
      (object.privacySettingDisableLinkPreviewsAction !== undefined &&
          object.privacySettingDisableLinkPreviewsAction !== null)
        ? SyncActionValue_PrivacySettingDisableLinkPreviewsAction.fromPartial(
          object.privacySettingDisableLinkPreviewsAction,
        )
        : undefined;
    message.deviceCapabilities = (object.deviceCapabilities !== undefined && object.deviceCapabilities !== null)
      ? DeviceCapabilities.fromPartial(object.deviceCapabilities)
      : undefined;
    message.noteEditAction = (object.noteEditAction !== undefined && object.noteEditAction !== null)
      ? SyncActionValue_NoteEditAction.fromPartial(object.noteEditAction)
      : undefined;
    message.favoritesAction = (object.favoritesAction !== undefined && object.favoritesAction !== null)
      ? SyncActionValue_FavoritesAction.fromPartial(object.favoritesAction)
      : undefined;
    message.merchantPaymentPartnerAction =
      (object.merchantPaymentPartnerAction !== undefined && object.merchantPaymentPartnerAction !== null)
        ? SyncActionValue_MerchantPaymentPartnerAction.fromPartial(object.merchantPaymentPartnerAction)
        : undefined;
    message.waffleAccountLinkStateAction =
      (object.waffleAccountLinkStateAction !== undefined && object.waffleAccountLinkStateAction !== null)
        ? SyncActionValue_WaffleAccountLinkStateAction.fromPartial(object.waffleAccountLinkStateAction)
        : undefined;
    message.usernameChatStartMode =
      (object.usernameChatStartMode !== undefined && object.usernameChatStartMode !== null)
        ? SyncActionValue_UsernameChatStartModeAction.fromPartial(object.usernameChatStartMode)
        : undefined;
    message.notificationActivitySettingAction =
      (object.notificationActivitySettingAction !== undefined && object.notificationActivitySettingAction !== null)
        ? SyncActionValue_NotificationActivitySettingAction.fromPartial(object.notificationActivitySettingAction)
        : undefined;
    message.lidContactAction = (object.lidContactAction !== undefined && object.lidContactAction !== null)
      ? SyncActionValue_LidContactAction.fromPartial(object.lidContactAction)
      : undefined;
    message.ctwaPerCustomerDataSharingAction =
      (object.ctwaPerCustomerDataSharingAction !== undefined && object.ctwaPerCustomerDataSharingAction !== null)
        ? SyncActionValue_CtwaPerCustomerDataSharingAction.fromPartial(object.ctwaPerCustomerDataSharingAction)
        : undefined;
    message.paymentTosAction = (object.paymentTosAction !== undefined && object.paymentTosAction !== null)
      ? SyncActionValue_PaymentTosAction.fromPartial(object.paymentTosAction)
      : undefined;
    return message;
  },
};

function createBaseSyncActionValue_AgentAction(): SyncActionValue_AgentAction {
  return { name: undefined, deviceID: undefined, isDeleted: undefined };
}

export const SyncActionValue_AgentAction: MessageFns<SyncActionValue_AgentAction> = {
  encode(message: SyncActionValue_AgentAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.deviceID !== undefined) {
      writer.uint32(16).int32(message.deviceID);
    }
    if (message.isDeleted !== undefined) {
      writer.uint32(24).bool(message.isDeleted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_AgentAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_AgentAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.deviceID = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isDeleted = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_AgentAction {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      deviceID: isSet(object.deviceID) ? globalThis.Number(object.deviceID) : undefined,
      isDeleted: isSet(object.isDeleted) ? globalThis.Boolean(object.isDeleted) : undefined,
    };
  },

  toJSON(message: SyncActionValue_AgentAction): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.deviceID !== undefined) {
      obj.deviceID = Math.round(message.deviceID);
    }
    if (message.isDeleted !== undefined) {
      obj.isDeleted = message.isDeleted;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_AgentAction>, I>>(base?: I): SyncActionValue_AgentAction {
    return SyncActionValue_AgentAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_AgentAction>, I>>(object: I): SyncActionValue_AgentAction {
    const message = createBaseSyncActionValue_AgentAction();
    message.name = object.name ?? undefined;
    message.deviceID = object.deviceID ?? undefined;
    message.isDeleted = object.isDeleted ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_AndroidUnsupportedActions(): SyncActionValue_AndroidUnsupportedActions {
  return { allowed: undefined };
}

export const SyncActionValue_AndroidUnsupportedActions: MessageFns<SyncActionValue_AndroidUnsupportedActions> = {
  encode(message: SyncActionValue_AndroidUnsupportedActions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.allowed !== undefined) {
      writer.uint32(8).bool(message.allowed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_AndroidUnsupportedActions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_AndroidUnsupportedActions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.allowed = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_AndroidUnsupportedActions {
    return { allowed: isSet(object.allowed) ? globalThis.Boolean(object.allowed) : undefined };
  },

  toJSON(message: SyncActionValue_AndroidUnsupportedActions): unknown {
    const obj: any = {};
    if (message.allowed !== undefined) {
      obj.allowed = message.allowed;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_AndroidUnsupportedActions>, I>>(
    base?: I,
  ): SyncActionValue_AndroidUnsupportedActions {
    return SyncActionValue_AndroidUnsupportedActions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_AndroidUnsupportedActions>, I>>(
    object: I,
  ): SyncActionValue_AndroidUnsupportedActions {
    const message = createBaseSyncActionValue_AndroidUnsupportedActions();
    message.allowed = object.allowed ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_ArchiveChatAction(): SyncActionValue_ArchiveChatAction {
  return { archived: undefined, messageRange: undefined };
}

export const SyncActionValue_ArchiveChatAction: MessageFns<SyncActionValue_ArchiveChatAction> = {
  encode(message: SyncActionValue_ArchiveChatAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.archived !== undefined) {
      writer.uint32(8).bool(message.archived);
    }
    if (message.messageRange !== undefined) {
      SyncActionValue_SyncActionMessageRange.encode(message.messageRange, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_ArchiveChatAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_ArchiveChatAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.archived = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.messageRange = SyncActionValue_SyncActionMessageRange.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_ArchiveChatAction {
    return {
      archived: isSet(object.archived) ? globalThis.Boolean(object.archived) : undefined,
      messageRange: isSet(object.messageRange)
        ? SyncActionValue_SyncActionMessageRange.fromJSON(object.messageRange)
        : undefined,
    };
  },

  toJSON(message: SyncActionValue_ArchiveChatAction): unknown {
    const obj: any = {};
    if (message.archived !== undefined) {
      obj.archived = message.archived;
    }
    if (message.messageRange !== undefined) {
      obj.messageRange = SyncActionValue_SyncActionMessageRange.toJSON(message.messageRange);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_ArchiveChatAction>, I>>(
    base?: I,
  ): SyncActionValue_ArchiveChatAction {
    return SyncActionValue_ArchiveChatAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_ArchiveChatAction>, I>>(
    object: I,
  ): SyncActionValue_ArchiveChatAction {
    const message = createBaseSyncActionValue_ArchiveChatAction();
    message.archived = object.archived ?? undefined;
    message.messageRange = (object.messageRange !== undefined && object.messageRange !== null)
      ? SyncActionValue_SyncActionMessageRange.fromPartial(object.messageRange)
      : undefined;
    return message;
  },
};

function createBaseSyncActionValue_BotWelcomeRequestAction(): SyncActionValue_BotWelcomeRequestAction {
  return { isSent: undefined };
}

export const SyncActionValue_BotWelcomeRequestAction: MessageFns<SyncActionValue_BotWelcomeRequestAction> = {
  encode(message: SyncActionValue_BotWelcomeRequestAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isSent !== undefined) {
      writer.uint32(8).bool(message.isSent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_BotWelcomeRequestAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_BotWelcomeRequestAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isSent = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_BotWelcomeRequestAction {
    return { isSent: isSet(object.isSent) ? globalThis.Boolean(object.isSent) : undefined };
  },

  toJSON(message: SyncActionValue_BotWelcomeRequestAction): unknown {
    const obj: any = {};
    if (message.isSent !== undefined) {
      obj.isSent = message.isSent;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_BotWelcomeRequestAction>, I>>(
    base?: I,
  ): SyncActionValue_BotWelcomeRequestAction {
    return SyncActionValue_BotWelcomeRequestAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_BotWelcomeRequestAction>, I>>(
    object: I,
  ): SyncActionValue_BotWelcomeRequestAction {
    const message = createBaseSyncActionValue_BotWelcomeRequestAction();
    message.isSent = object.isSent ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_CallLogAction(): SyncActionValue_CallLogAction {
  return { callLogRecord: undefined };
}

export const SyncActionValue_CallLogAction: MessageFns<SyncActionValue_CallLogAction> = {
  encode(message: SyncActionValue_CallLogAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.callLogRecord !== undefined) {
      CallLogRecord.encode(message.callLogRecord, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_CallLogAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_CallLogAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.callLogRecord = CallLogRecord.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_CallLogAction {
    return { callLogRecord: isSet(object.callLogRecord) ? CallLogRecord.fromJSON(object.callLogRecord) : undefined };
  },

  toJSON(message: SyncActionValue_CallLogAction): unknown {
    const obj: any = {};
    if (message.callLogRecord !== undefined) {
      obj.callLogRecord = CallLogRecord.toJSON(message.callLogRecord);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_CallLogAction>, I>>(base?: I): SyncActionValue_CallLogAction {
    return SyncActionValue_CallLogAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_CallLogAction>, I>>(
    object: I,
  ): SyncActionValue_CallLogAction {
    const message = createBaseSyncActionValue_CallLogAction();
    message.callLogRecord = (object.callLogRecord !== undefined && object.callLogRecord !== null)
      ? CallLogRecord.fromPartial(object.callLogRecord)
      : undefined;
    return message;
  },
};

function createBaseSyncActionValue_ChatAssignmentAction(): SyncActionValue_ChatAssignmentAction {
  return { deviceAgentID: undefined };
}

export const SyncActionValue_ChatAssignmentAction: MessageFns<SyncActionValue_ChatAssignmentAction> = {
  encode(message: SyncActionValue_ChatAssignmentAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deviceAgentID !== undefined) {
      writer.uint32(10).string(message.deviceAgentID);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_ChatAssignmentAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_ChatAssignmentAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.deviceAgentID = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_ChatAssignmentAction {
    return { deviceAgentID: isSet(object.deviceAgentID) ? globalThis.String(object.deviceAgentID) : undefined };
  },

  toJSON(message: SyncActionValue_ChatAssignmentAction): unknown {
    const obj: any = {};
    if (message.deviceAgentID !== undefined) {
      obj.deviceAgentID = message.deviceAgentID;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_ChatAssignmentAction>, I>>(
    base?: I,
  ): SyncActionValue_ChatAssignmentAction {
    return SyncActionValue_ChatAssignmentAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_ChatAssignmentAction>, I>>(
    object: I,
  ): SyncActionValue_ChatAssignmentAction {
    const message = createBaseSyncActionValue_ChatAssignmentAction();
    message.deviceAgentID = object.deviceAgentID ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_ChatAssignmentOpenedStatusAction(): SyncActionValue_ChatAssignmentOpenedStatusAction {
  return { chatOpened: undefined };
}

export const SyncActionValue_ChatAssignmentOpenedStatusAction: MessageFns<
  SyncActionValue_ChatAssignmentOpenedStatusAction
> = {
  encode(
    message: SyncActionValue_ChatAssignmentOpenedStatusAction,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.chatOpened !== undefined) {
      writer.uint32(8).bool(message.chatOpened);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_ChatAssignmentOpenedStatusAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_ChatAssignmentOpenedStatusAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.chatOpened = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_ChatAssignmentOpenedStatusAction {
    return { chatOpened: isSet(object.chatOpened) ? globalThis.Boolean(object.chatOpened) : undefined };
  },

  toJSON(message: SyncActionValue_ChatAssignmentOpenedStatusAction): unknown {
    const obj: any = {};
    if (message.chatOpened !== undefined) {
      obj.chatOpened = message.chatOpened;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_ChatAssignmentOpenedStatusAction>, I>>(
    base?: I,
  ): SyncActionValue_ChatAssignmentOpenedStatusAction {
    return SyncActionValue_ChatAssignmentOpenedStatusAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_ChatAssignmentOpenedStatusAction>, I>>(
    object: I,
  ): SyncActionValue_ChatAssignmentOpenedStatusAction {
    const message = createBaseSyncActionValue_ChatAssignmentOpenedStatusAction();
    message.chatOpened = object.chatOpened ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_ClearChatAction(): SyncActionValue_ClearChatAction {
  return { messageRange: undefined };
}

export const SyncActionValue_ClearChatAction: MessageFns<SyncActionValue_ClearChatAction> = {
  encode(message: SyncActionValue_ClearChatAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.messageRange !== undefined) {
      SyncActionValue_SyncActionMessageRange.encode(message.messageRange, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_ClearChatAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_ClearChatAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.messageRange = SyncActionValue_SyncActionMessageRange.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_ClearChatAction {
    return {
      messageRange: isSet(object.messageRange)
        ? SyncActionValue_SyncActionMessageRange.fromJSON(object.messageRange)
        : undefined,
    };
  },

  toJSON(message: SyncActionValue_ClearChatAction): unknown {
    const obj: any = {};
    if (message.messageRange !== undefined) {
      obj.messageRange = SyncActionValue_SyncActionMessageRange.toJSON(message.messageRange);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_ClearChatAction>, I>>(base?: I): SyncActionValue_ClearChatAction {
    return SyncActionValue_ClearChatAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_ClearChatAction>, I>>(
    object: I,
  ): SyncActionValue_ClearChatAction {
    const message = createBaseSyncActionValue_ClearChatAction();
    message.messageRange = (object.messageRange !== undefined && object.messageRange !== null)
      ? SyncActionValue_SyncActionMessageRange.fromPartial(object.messageRange)
      : undefined;
    return message;
  },
};

function createBaseSyncActionValue_ContactAction(): SyncActionValue_ContactAction {
  return {
    fullName: undefined,
    firstName: undefined,
    lidJid: undefined,
    saveOnPrimaryAddressbook: undefined,
    pnJid: undefined,
    username: undefined,
  };
}

export const SyncActionValue_ContactAction: MessageFns<SyncActionValue_ContactAction> = {
  encode(message: SyncActionValue_ContactAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fullName !== undefined) {
      writer.uint32(10).string(message.fullName);
    }
    if (message.firstName !== undefined) {
      writer.uint32(18).string(message.firstName);
    }
    if (message.lidJid !== undefined) {
      writer.uint32(26).string(message.lidJid);
    }
    if (message.saveOnPrimaryAddressbook !== undefined) {
      writer.uint32(32).bool(message.saveOnPrimaryAddressbook);
    }
    if (message.pnJid !== undefined) {
      writer.uint32(42).string(message.pnJid);
    }
    if (message.username !== undefined) {
      writer.uint32(50).string(message.username);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_ContactAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_ContactAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fullName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.lidJid = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.saveOnPrimaryAddressbook = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.pnJid = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.username = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_ContactAction {
    return {
      fullName: isSet(object.fullName) ? globalThis.String(object.fullName) : undefined,
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : undefined,
      lidJid: isSet(object.lidJid) ? globalThis.String(object.lidJid) : undefined,
      saveOnPrimaryAddressbook: isSet(object.saveOnPrimaryAddressbook)
        ? globalThis.Boolean(object.saveOnPrimaryAddressbook)
        : undefined,
      pnJid: isSet(object.pnJid) ? globalThis.String(object.pnJid) : undefined,
      username: isSet(object.username) ? globalThis.String(object.username) : undefined,
    };
  },

  toJSON(message: SyncActionValue_ContactAction): unknown {
    const obj: any = {};
    if (message.fullName !== undefined) {
      obj.fullName = message.fullName;
    }
    if (message.firstName !== undefined) {
      obj.firstName = message.firstName;
    }
    if (message.lidJid !== undefined) {
      obj.lidJid = message.lidJid;
    }
    if (message.saveOnPrimaryAddressbook !== undefined) {
      obj.saveOnPrimaryAddressbook = message.saveOnPrimaryAddressbook;
    }
    if (message.pnJid !== undefined) {
      obj.pnJid = message.pnJid;
    }
    if (message.username !== undefined) {
      obj.username = message.username;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_ContactAction>, I>>(base?: I): SyncActionValue_ContactAction {
    return SyncActionValue_ContactAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_ContactAction>, I>>(
    object: I,
  ): SyncActionValue_ContactAction {
    const message = createBaseSyncActionValue_ContactAction();
    message.fullName = object.fullName ?? undefined;
    message.firstName = object.firstName ?? undefined;
    message.lidJid = object.lidJid ?? undefined;
    message.saveOnPrimaryAddressbook = object.saveOnPrimaryAddressbook ?? undefined;
    message.pnJid = object.pnJid ?? undefined;
    message.username = object.username ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_CtwaPerCustomerDataSharingAction(): SyncActionValue_CtwaPerCustomerDataSharingAction {
  return { isCtwaPerCustomerDataSharingEnabled: undefined };
}

export const SyncActionValue_CtwaPerCustomerDataSharingAction: MessageFns<
  SyncActionValue_CtwaPerCustomerDataSharingAction
> = {
  encode(
    message: SyncActionValue_CtwaPerCustomerDataSharingAction,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.isCtwaPerCustomerDataSharingEnabled !== undefined) {
      writer.uint32(8).bool(message.isCtwaPerCustomerDataSharingEnabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_CtwaPerCustomerDataSharingAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_CtwaPerCustomerDataSharingAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isCtwaPerCustomerDataSharingEnabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_CtwaPerCustomerDataSharingAction {
    return {
      isCtwaPerCustomerDataSharingEnabled: isSet(object.isCtwaPerCustomerDataSharingEnabled)
        ? globalThis.Boolean(object.isCtwaPerCustomerDataSharingEnabled)
        : undefined,
    };
  },

  toJSON(message: SyncActionValue_CtwaPerCustomerDataSharingAction): unknown {
    const obj: any = {};
    if (message.isCtwaPerCustomerDataSharingEnabled !== undefined) {
      obj.isCtwaPerCustomerDataSharingEnabled = message.isCtwaPerCustomerDataSharingEnabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_CtwaPerCustomerDataSharingAction>, I>>(
    base?: I,
  ): SyncActionValue_CtwaPerCustomerDataSharingAction {
    return SyncActionValue_CtwaPerCustomerDataSharingAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_CtwaPerCustomerDataSharingAction>, I>>(
    object: I,
  ): SyncActionValue_CtwaPerCustomerDataSharingAction {
    const message = createBaseSyncActionValue_CtwaPerCustomerDataSharingAction();
    message.isCtwaPerCustomerDataSharingEnabled = object.isCtwaPerCustomerDataSharingEnabled ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_CustomPaymentMethod(): SyncActionValue_CustomPaymentMethod {
  return { credentialId: "", country: "", type: "", metadata: [] };
}

export const SyncActionValue_CustomPaymentMethod: MessageFns<SyncActionValue_CustomPaymentMethod> = {
  encode(message: SyncActionValue_CustomPaymentMethod, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.credentialId !== "") {
      writer.uint32(10).string(message.credentialId);
    }
    if (message.country !== "") {
      writer.uint32(18).string(message.country);
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    for (const v of message.metadata) {
      SyncActionValue_CustomPaymentMethodMetadata.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_CustomPaymentMethod {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_CustomPaymentMethod();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.credentialId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.country = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.metadata.push(SyncActionValue_CustomPaymentMethodMetadata.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_CustomPaymentMethod {
    return {
      credentialId: isSet(object.credentialId) ? globalThis.String(object.credentialId) : "",
      country: isSet(object.country) ? globalThis.String(object.country) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      metadata: globalThis.Array.isArray(object?.metadata)
        ? object.metadata.map((e: any) => SyncActionValue_CustomPaymentMethodMetadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SyncActionValue_CustomPaymentMethod): unknown {
    const obj: any = {};
    if (message.credentialId !== "") {
      obj.credentialId = message.credentialId;
    }
    if (message.country !== "") {
      obj.country = message.country;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.metadata?.length) {
      obj.metadata = message.metadata.map((e) => SyncActionValue_CustomPaymentMethodMetadata.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_CustomPaymentMethod>, I>>(
    base?: I,
  ): SyncActionValue_CustomPaymentMethod {
    return SyncActionValue_CustomPaymentMethod.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_CustomPaymentMethod>, I>>(
    object: I,
  ): SyncActionValue_CustomPaymentMethod {
    const message = createBaseSyncActionValue_CustomPaymentMethod();
    message.credentialId = object.credentialId ?? "";
    message.country = object.country ?? "";
    message.type = object.type ?? "";
    message.metadata = object.metadata?.map((e) => SyncActionValue_CustomPaymentMethodMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSyncActionValue_CustomPaymentMethodMetadata(): SyncActionValue_CustomPaymentMethodMetadata {
  return { key: "", value: "" };
}

export const SyncActionValue_CustomPaymentMethodMetadata: MessageFns<SyncActionValue_CustomPaymentMethodMetadata> = {
  encode(
    message: SyncActionValue_CustomPaymentMethodMetadata,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_CustomPaymentMethodMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_CustomPaymentMethodMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_CustomPaymentMethodMetadata {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: SyncActionValue_CustomPaymentMethodMetadata): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_CustomPaymentMethodMetadata>, I>>(
    base?: I,
  ): SyncActionValue_CustomPaymentMethodMetadata {
    return SyncActionValue_CustomPaymentMethodMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_CustomPaymentMethodMetadata>, I>>(
    object: I,
  ): SyncActionValue_CustomPaymentMethodMetadata {
    const message = createBaseSyncActionValue_CustomPaymentMethodMetadata();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseSyncActionValue_CustomPaymentMethodsAction(): SyncActionValue_CustomPaymentMethodsAction {
  return { customPaymentMethods: [] };
}

export const SyncActionValue_CustomPaymentMethodsAction: MessageFns<SyncActionValue_CustomPaymentMethodsAction> = {
  encode(message: SyncActionValue_CustomPaymentMethodsAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.customPaymentMethods) {
      SyncActionValue_CustomPaymentMethod.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_CustomPaymentMethodsAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_CustomPaymentMethodsAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.customPaymentMethods.push(SyncActionValue_CustomPaymentMethod.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_CustomPaymentMethodsAction {
    return {
      customPaymentMethods: globalThis.Array.isArray(object?.customPaymentMethods)
        ? object.customPaymentMethods.map((e: any) => SyncActionValue_CustomPaymentMethod.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SyncActionValue_CustomPaymentMethodsAction): unknown {
    const obj: any = {};
    if (message.customPaymentMethods?.length) {
      obj.customPaymentMethods = message.customPaymentMethods.map((e) => SyncActionValue_CustomPaymentMethod.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_CustomPaymentMethodsAction>, I>>(
    base?: I,
  ): SyncActionValue_CustomPaymentMethodsAction {
    return SyncActionValue_CustomPaymentMethodsAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_CustomPaymentMethodsAction>, I>>(
    object: I,
  ): SyncActionValue_CustomPaymentMethodsAction {
    const message = createBaseSyncActionValue_CustomPaymentMethodsAction();
    message.customPaymentMethods =
      object.customPaymentMethods?.map((e) => SyncActionValue_CustomPaymentMethod.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSyncActionValue_DeleteChatAction(): SyncActionValue_DeleteChatAction {
  return { messageRange: undefined };
}

export const SyncActionValue_DeleteChatAction: MessageFns<SyncActionValue_DeleteChatAction> = {
  encode(message: SyncActionValue_DeleteChatAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.messageRange !== undefined) {
      SyncActionValue_SyncActionMessageRange.encode(message.messageRange, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_DeleteChatAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_DeleteChatAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.messageRange = SyncActionValue_SyncActionMessageRange.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_DeleteChatAction {
    return {
      messageRange: isSet(object.messageRange)
        ? SyncActionValue_SyncActionMessageRange.fromJSON(object.messageRange)
        : undefined,
    };
  },

  toJSON(message: SyncActionValue_DeleteChatAction): unknown {
    const obj: any = {};
    if (message.messageRange !== undefined) {
      obj.messageRange = SyncActionValue_SyncActionMessageRange.toJSON(message.messageRange);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_DeleteChatAction>, I>>(
    base?: I,
  ): SyncActionValue_DeleteChatAction {
    return SyncActionValue_DeleteChatAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_DeleteChatAction>, I>>(
    object: I,
  ): SyncActionValue_DeleteChatAction {
    const message = createBaseSyncActionValue_DeleteChatAction();
    message.messageRange = (object.messageRange !== undefined && object.messageRange !== null)
      ? SyncActionValue_SyncActionMessageRange.fromPartial(object.messageRange)
      : undefined;
    return message;
  },
};

function createBaseSyncActionValue_DeleteIndividualCallLogAction(): SyncActionValue_DeleteIndividualCallLogAction {
  return { peerJid: undefined, isIncoming: undefined };
}

export const SyncActionValue_DeleteIndividualCallLogAction: MessageFns<SyncActionValue_DeleteIndividualCallLogAction> =
  {
    encode(
      message: SyncActionValue_DeleteIndividualCallLogAction,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.peerJid !== undefined) {
        writer.uint32(10).string(message.peerJid);
      }
      if (message.isIncoming !== undefined) {
        writer.uint32(16).bool(message.isIncoming);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_DeleteIndividualCallLogAction {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseSyncActionValue_DeleteIndividualCallLogAction();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.peerJid = reader.string();
            continue;
          }
          case 2: {
            if (tag !== 16) {
              break;
            }

            message.isIncoming = reader.bool();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): SyncActionValue_DeleteIndividualCallLogAction {
      return {
        peerJid: isSet(object.peerJid) ? globalThis.String(object.peerJid) : undefined,
        isIncoming: isSet(object.isIncoming) ? globalThis.Boolean(object.isIncoming) : undefined,
      };
    },

    toJSON(message: SyncActionValue_DeleteIndividualCallLogAction): unknown {
      const obj: any = {};
      if (message.peerJid !== undefined) {
        obj.peerJid = message.peerJid;
      }
      if (message.isIncoming !== undefined) {
        obj.isIncoming = message.isIncoming;
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<SyncActionValue_DeleteIndividualCallLogAction>, I>>(
      base?: I,
    ): SyncActionValue_DeleteIndividualCallLogAction {
      return SyncActionValue_DeleteIndividualCallLogAction.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<SyncActionValue_DeleteIndividualCallLogAction>, I>>(
      object: I,
    ): SyncActionValue_DeleteIndividualCallLogAction {
      const message = createBaseSyncActionValue_DeleteIndividualCallLogAction();
      message.peerJid = object.peerJid ?? undefined;
      message.isIncoming = object.isIncoming ?? undefined;
      return message;
    },
  };

function createBaseSyncActionValue_DeleteMessageForMeAction(): SyncActionValue_DeleteMessageForMeAction {
  return { deleteMedia: undefined, messageTimestamp: undefined };
}

export const SyncActionValue_DeleteMessageForMeAction: MessageFns<SyncActionValue_DeleteMessageForMeAction> = {
  encode(message: SyncActionValue_DeleteMessageForMeAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deleteMedia !== undefined) {
      writer.uint32(8).bool(message.deleteMedia);
    }
    if (message.messageTimestamp !== undefined) {
      writer.uint32(16).int64(message.messageTimestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_DeleteMessageForMeAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_DeleteMessageForMeAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.deleteMedia = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.messageTimestamp = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_DeleteMessageForMeAction {
    return {
      deleteMedia: isSet(object.deleteMedia) ? globalThis.Boolean(object.deleteMedia) : undefined,
      messageTimestamp: isSet(object.messageTimestamp) ? globalThis.Number(object.messageTimestamp) : undefined,
    };
  },

  toJSON(message: SyncActionValue_DeleteMessageForMeAction): unknown {
    const obj: any = {};
    if (message.deleteMedia !== undefined) {
      obj.deleteMedia = message.deleteMedia;
    }
    if (message.messageTimestamp !== undefined) {
      obj.messageTimestamp = Math.round(message.messageTimestamp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_DeleteMessageForMeAction>, I>>(
    base?: I,
  ): SyncActionValue_DeleteMessageForMeAction {
    return SyncActionValue_DeleteMessageForMeAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_DeleteMessageForMeAction>, I>>(
    object: I,
  ): SyncActionValue_DeleteMessageForMeAction {
    const message = createBaseSyncActionValue_DeleteMessageForMeAction();
    message.deleteMedia = object.deleteMedia ?? undefined;
    message.messageTimestamp = object.messageTimestamp ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_ExternalWebBetaAction(): SyncActionValue_ExternalWebBetaAction {
  return { isOptIn: undefined };
}

export const SyncActionValue_ExternalWebBetaAction: MessageFns<SyncActionValue_ExternalWebBetaAction> = {
  encode(message: SyncActionValue_ExternalWebBetaAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isOptIn !== undefined) {
      writer.uint32(8).bool(message.isOptIn);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_ExternalWebBetaAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_ExternalWebBetaAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isOptIn = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_ExternalWebBetaAction {
    return { isOptIn: isSet(object.isOptIn) ? globalThis.Boolean(object.isOptIn) : undefined };
  },

  toJSON(message: SyncActionValue_ExternalWebBetaAction): unknown {
    const obj: any = {};
    if (message.isOptIn !== undefined) {
      obj.isOptIn = message.isOptIn;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_ExternalWebBetaAction>, I>>(
    base?: I,
  ): SyncActionValue_ExternalWebBetaAction {
    return SyncActionValue_ExternalWebBetaAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_ExternalWebBetaAction>, I>>(
    object: I,
  ): SyncActionValue_ExternalWebBetaAction {
    const message = createBaseSyncActionValue_ExternalWebBetaAction();
    message.isOptIn = object.isOptIn ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_FavoritesAction(): SyncActionValue_FavoritesAction {
  return { favorites: [] };
}

export const SyncActionValue_FavoritesAction: MessageFns<SyncActionValue_FavoritesAction> = {
  encode(message: SyncActionValue_FavoritesAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.favorites) {
      SyncActionValue_FavoritesAction_Favorite.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_FavoritesAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_FavoritesAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.favorites.push(SyncActionValue_FavoritesAction_Favorite.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_FavoritesAction {
    return {
      favorites: globalThis.Array.isArray(object?.favorites)
        ? object.favorites.map((e: any) => SyncActionValue_FavoritesAction_Favorite.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SyncActionValue_FavoritesAction): unknown {
    const obj: any = {};
    if (message.favorites?.length) {
      obj.favorites = message.favorites.map((e) => SyncActionValue_FavoritesAction_Favorite.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_FavoritesAction>, I>>(base?: I): SyncActionValue_FavoritesAction {
    return SyncActionValue_FavoritesAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_FavoritesAction>, I>>(
    object: I,
  ): SyncActionValue_FavoritesAction {
    const message = createBaseSyncActionValue_FavoritesAction();
    message.favorites = object.favorites?.map((e) => SyncActionValue_FavoritesAction_Favorite.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSyncActionValue_FavoritesAction_Favorite(): SyncActionValue_FavoritesAction_Favorite {
  return { id: undefined };
}

export const SyncActionValue_FavoritesAction_Favorite: MessageFns<SyncActionValue_FavoritesAction_Favorite> = {
  encode(message: SyncActionValue_FavoritesAction_Favorite, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_FavoritesAction_Favorite {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_FavoritesAction_Favorite();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_FavoritesAction_Favorite {
    return { id: isSet(object.id) ? globalThis.String(object.id) : undefined };
  },

  toJSON(message: SyncActionValue_FavoritesAction_Favorite): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_FavoritesAction_Favorite>, I>>(
    base?: I,
  ): SyncActionValue_FavoritesAction_Favorite {
    return SyncActionValue_FavoritesAction_Favorite.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_FavoritesAction_Favorite>, I>>(
    object: I,
  ): SyncActionValue_FavoritesAction_Favorite {
    const message = createBaseSyncActionValue_FavoritesAction_Favorite();
    message.id = object.id ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_KeyExpiration(): SyncActionValue_KeyExpiration {
  return { expiredKeyEpoch: undefined };
}

export const SyncActionValue_KeyExpiration: MessageFns<SyncActionValue_KeyExpiration> = {
  encode(message: SyncActionValue_KeyExpiration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.expiredKeyEpoch !== undefined) {
      writer.uint32(8).int32(message.expiredKeyEpoch);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_KeyExpiration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_KeyExpiration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.expiredKeyEpoch = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_KeyExpiration {
    return { expiredKeyEpoch: isSet(object.expiredKeyEpoch) ? globalThis.Number(object.expiredKeyEpoch) : undefined };
  },

  toJSON(message: SyncActionValue_KeyExpiration): unknown {
    const obj: any = {};
    if (message.expiredKeyEpoch !== undefined) {
      obj.expiredKeyEpoch = Math.round(message.expiredKeyEpoch);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_KeyExpiration>, I>>(base?: I): SyncActionValue_KeyExpiration {
    return SyncActionValue_KeyExpiration.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_KeyExpiration>, I>>(
    object: I,
  ): SyncActionValue_KeyExpiration {
    const message = createBaseSyncActionValue_KeyExpiration();
    message.expiredKeyEpoch = object.expiredKeyEpoch ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_LabelAssociationAction(): SyncActionValue_LabelAssociationAction {
  return { labeled: undefined };
}

export const SyncActionValue_LabelAssociationAction: MessageFns<SyncActionValue_LabelAssociationAction> = {
  encode(message: SyncActionValue_LabelAssociationAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.labeled !== undefined) {
      writer.uint32(8).bool(message.labeled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_LabelAssociationAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_LabelAssociationAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.labeled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_LabelAssociationAction {
    return { labeled: isSet(object.labeled) ? globalThis.Boolean(object.labeled) : undefined };
  },

  toJSON(message: SyncActionValue_LabelAssociationAction): unknown {
    const obj: any = {};
    if (message.labeled !== undefined) {
      obj.labeled = message.labeled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_LabelAssociationAction>, I>>(
    base?: I,
  ): SyncActionValue_LabelAssociationAction {
    return SyncActionValue_LabelAssociationAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_LabelAssociationAction>, I>>(
    object: I,
  ): SyncActionValue_LabelAssociationAction {
    const message = createBaseSyncActionValue_LabelAssociationAction();
    message.labeled = object.labeled ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_LabelEditAction(): SyncActionValue_LabelEditAction {
  return {
    name: undefined,
    color: undefined,
    predefinedId: undefined,
    deleted: undefined,
    orderIndex: undefined,
    isActive: undefined,
    type: undefined,
    isImmutable: undefined,
  };
}

export const SyncActionValue_LabelEditAction: MessageFns<SyncActionValue_LabelEditAction> = {
  encode(message: SyncActionValue_LabelEditAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.color !== undefined) {
      writer.uint32(16).int32(message.color);
    }
    if (message.predefinedId !== undefined) {
      writer.uint32(24).int32(message.predefinedId);
    }
    if (message.deleted !== undefined) {
      writer.uint32(32).bool(message.deleted);
    }
    if (message.orderIndex !== undefined) {
      writer.uint32(40).int32(message.orderIndex);
    }
    if (message.isActive !== undefined) {
      writer.uint32(48).bool(message.isActive);
    }
    if (message.type !== undefined) {
      writer.uint32(56).int32(message.type);
    }
    if (message.isImmutable !== undefined) {
      writer.uint32(64).bool(message.isImmutable);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_LabelEditAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_LabelEditAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.color = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.predefinedId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.deleted = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.orderIndex = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.isImmutable = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_LabelEditAction {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      color: isSet(object.color) ? globalThis.Number(object.color) : undefined,
      predefinedId: isSet(object.predefinedId) ? globalThis.Number(object.predefinedId) : undefined,
      deleted: isSet(object.deleted) ? globalThis.Boolean(object.deleted) : undefined,
      orderIndex: isSet(object.orderIndex) ? globalThis.Number(object.orderIndex) : undefined,
      isActive: isSet(object.isActive) ? globalThis.Boolean(object.isActive) : undefined,
      type: isSet(object.type) ? syncActionValue_LabelEditAction_ListTypeFromJSON(object.type) : undefined,
      isImmutable: isSet(object.isImmutable) ? globalThis.Boolean(object.isImmutable) : undefined,
    };
  },

  toJSON(message: SyncActionValue_LabelEditAction): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.color !== undefined) {
      obj.color = Math.round(message.color);
    }
    if (message.predefinedId !== undefined) {
      obj.predefinedId = Math.round(message.predefinedId);
    }
    if (message.deleted !== undefined) {
      obj.deleted = message.deleted;
    }
    if (message.orderIndex !== undefined) {
      obj.orderIndex = Math.round(message.orderIndex);
    }
    if (message.isActive !== undefined) {
      obj.isActive = message.isActive;
    }
    if (message.type !== undefined) {
      obj.type = syncActionValue_LabelEditAction_ListTypeToJSON(message.type);
    }
    if (message.isImmutable !== undefined) {
      obj.isImmutable = message.isImmutable;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_LabelEditAction>, I>>(base?: I): SyncActionValue_LabelEditAction {
    return SyncActionValue_LabelEditAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_LabelEditAction>, I>>(
    object: I,
  ): SyncActionValue_LabelEditAction {
    const message = createBaseSyncActionValue_LabelEditAction();
    message.name = object.name ?? undefined;
    message.color = object.color ?? undefined;
    message.predefinedId = object.predefinedId ?? undefined;
    message.deleted = object.deleted ?? undefined;
    message.orderIndex = object.orderIndex ?? undefined;
    message.isActive = object.isActive ?? undefined;
    message.type = object.type ?? undefined;
    message.isImmutable = object.isImmutable ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_LabelReorderingAction(): SyncActionValue_LabelReorderingAction {
  return { sortedLabelIds: [] };
}

export const SyncActionValue_LabelReorderingAction: MessageFns<SyncActionValue_LabelReorderingAction> = {
  encode(message: SyncActionValue_LabelReorderingAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.sortedLabelIds) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_LabelReorderingAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_LabelReorderingAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.sortedLabelIds.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.sortedLabelIds.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_LabelReorderingAction {
    return {
      sortedLabelIds: globalThis.Array.isArray(object?.sortedLabelIds)
        ? object.sortedLabelIds.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: SyncActionValue_LabelReorderingAction): unknown {
    const obj: any = {};
    if (message.sortedLabelIds?.length) {
      obj.sortedLabelIds = message.sortedLabelIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_LabelReorderingAction>, I>>(
    base?: I,
  ): SyncActionValue_LabelReorderingAction {
    return SyncActionValue_LabelReorderingAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_LabelReorderingAction>, I>>(
    object: I,
  ): SyncActionValue_LabelReorderingAction {
    const message = createBaseSyncActionValue_LabelReorderingAction();
    message.sortedLabelIds = object.sortedLabelIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseSyncActionValue_LidContactAction(): SyncActionValue_LidContactAction {
  return { fullName: undefined, firstName: undefined, username: undefined, saveOnPrimaryAddressbook: undefined };
}

export const SyncActionValue_LidContactAction: MessageFns<SyncActionValue_LidContactAction> = {
  encode(message: SyncActionValue_LidContactAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fullName !== undefined) {
      writer.uint32(10).string(message.fullName);
    }
    if (message.firstName !== undefined) {
      writer.uint32(18).string(message.firstName);
    }
    if (message.username !== undefined) {
      writer.uint32(26).string(message.username);
    }
    if (message.saveOnPrimaryAddressbook !== undefined) {
      writer.uint32(32).bool(message.saveOnPrimaryAddressbook);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_LidContactAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_LidContactAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fullName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.saveOnPrimaryAddressbook = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_LidContactAction {
    return {
      fullName: isSet(object.fullName) ? globalThis.String(object.fullName) : undefined,
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : undefined,
      username: isSet(object.username) ? globalThis.String(object.username) : undefined,
      saveOnPrimaryAddressbook: isSet(object.saveOnPrimaryAddressbook)
        ? globalThis.Boolean(object.saveOnPrimaryAddressbook)
        : undefined,
    };
  },

  toJSON(message: SyncActionValue_LidContactAction): unknown {
    const obj: any = {};
    if (message.fullName !== undefined) {
      obj.fullName = message.fullName;
    }
    if (message.firstName !== undefined) {
      obj.firstName = message.firstName;
    }
    if (message.username !== undefined) {
      obj.username = message.username;
    }
    if (message.saveOnPrimaryAddressbook !== undefined) {
      obj.saveOnPrimaryAddressbook = message.saveOnPrimaryAddressbook;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_LidContactAction>, I>>(
    base?: I,
  ): SyncActionValue_LidContactAction {
    return SyncActionValue_LidContactAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_LidContactAction>, I>>(
    object: I,
  ): SyncActionValue_LidContactAction {
    const message = createBaseSyncActionValue_LidContactAction();
    message.fullName = object.fullName ?? undefined;
    message.firstName = object.firstName ?? undefined;
    message.username = object.username ?? undefined;
    message.saveOnPrimaryAddressbook = object.saveOnPrimaryAddressbook ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_LocaleSetting(): SyncActionValue_LocaleSetting {
  return { locale: undefined };
}

export const SyncActionValue_LocaleSetting: MessageFns<SyncActionValue_LocaleSetting> = {
  encode(message: SyncActionValue_LocaleSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.locale !== undefined) {
      writer.uint32(10).string(message.locale);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_LocaleSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_LocaleSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.locale = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_LocaleSetting {
    return { locale: isSet(object.locale) ? globalThis.String(object.locale) : undefined };
  },

  toJSON(message: SyncActionValue_LocaleSetting): unknown {
    const obj: any = {};
    if (message.locale !== undefined) {
      obj.locale = message.locale;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_LocaleSetting>, I>>(base?: I): SyncActionValue_LocaleSetting {
    return SyncActionValue_LocaleSetting.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_LocaleSetting>, I>>(
    object: I,
  ): SyncActionValue_LocaleSetting {
    const message = createBaseSyncActionValue_LocaleSetting();
    message.locale = object.locale ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_LockChatAction(): SyncActionValue_LockChatAction {
  return { locked: undefined };
}

export const SyncActionValue_LockChatAction: MessageFns<SyncActionValue_LockChatAction> = {
  encode(message: SyncActionValue_LockChatAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.locked !== undefined) {
      writer.uint32(8).bool(message.locked);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_LockChatAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_LockChatAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.locked = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_LockChatAction {
    return { locked: isSet(object.locked) ? globalThis.Boolean(object.locked) : undefined };
  },

  toJSON(message: SyncActionValue_LockChatAction): unknown {
    const obj: any = {};
    if (message.locked !== undefined) {
      obj.locked = message.locked;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_LockChatAction>, I>>(base?: I): SyncActionValue_LockChatAction {
    return SyncActionValue_LockChatAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_LockChatAction>, I>>(
    object: I,
  ): SyncActionValue_LockChatAction {
    const message = createBaseSyncActionValue_LockChatAction();
    message.locked = object.locked ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_MarkChatAsReadAction(): SyncActionValue_MarkChatAsReadAction {
  return { read: undefined, messageRange: undefined };
}

export const SyncActionValue_MarkChatAsReadAction: MessageFns<SyncActionValue_MarkChatAsReadAction> = {
  encode(message: SyncActionValue_MarkChatAsReadAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.read !== undefined) {
      writer.uint32(8).bool(message.read);
    }
    if (message.messageRange !== undefined) {
      SyncActionValue_SyncActionMessageRange.encode(message.messageRange, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_MarkChatAsReadAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_MarkChatAsReadAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.read = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.messageRange = SyncActionValue_SyncActionMessageRange.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_MarkChatAsReadAction {
    return {
      read: isSet(object.read) ? globalThis.Boolean(object.read) : undefined,
      messageRange: isSet(object.messageRange)
        ? SyncActionValue_SyncActionMessageRange.fromJSON(object.messageRange)
        : undefined,
    };
  },

  toJSON(message: SyncActionValue_MarkChatAsReadAction): unknown {
    const obj: any = {};
    if (message.read !== undefined) {
      obj.read = message.read;
    }
    if (message.messageRange !== undefined) {
      obj.messageRange = SyncActionValue_SyncActionMessageRange.toJSON(message.messageRange);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_MarkChatAsReadAction>, I>>(
    base?: I,
  ): SyncActionValue_MarkChatAsReadAction {
    return SyncActionValue_MarkChatAsReadAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_MarkChatAsReadAction>, I>>(
    object: I,
  ): SyncActionValue_MarkChatAsReadAction {
    const message = createBaseSyncActionValue_MarkChatAsReadAction();
    message.read = object.read ?? undefined;
    message.messageRange = (object.messageRange !== undefined && object.messageRange !== null)
      ? SyncActionValue_SyncActionMessageRange.fromPartial(object.messageRange)
      : undefined;
    return message;
  },
};

function createBaseSyncActionValue_MarketingMessageAction(): SyncActionValue_MarketingMessageAction {
  return {
    name: undefined,
    message: undefined,
    type: undefined,
    createdAt: undefined,
    lastSentAt: undefined,
    isDeleted: undefined,
    mediaId: undefined,
  };
}

export const SyncActionValue_MarketingMessageAction: MessageFns<SyncActionValue_MarketingMessageAction> = {
  encode(message: SyncActionValue_MarketingMessageAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.message !== undefined) {
      writer.uint32(18).string(message.message);
    }
    if (message.type !== undefined) {
      writer.uint32(24).int32(message.type);
    }
    if (message.createdAt !== undefined) {
      writer.uint32(32).int64(message.createdAt);
    }
    if (message.lastSentAt !== undefined) {
      writer.uint32(40).int64(message.lastSentAt);
    }
    if (message.isDeleted !== undefined) {
      writer.uint32(48).bool(message.isDeleted);
    }
    if (message.mediaId !== undefined) {
      writer.uint32(58).string(message.mediaId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_MarketingMessageAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_MarketingMessageAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.createdAt = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.lastSentAt = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isDeleted = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.mediaId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_MarketingMessageAction {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      message: isSet(object.message) ? globalThis.String(object.message) : undefined,
      type: isSet(object.type)
        ? syncActionValue_MarketingMessageAction_MarketingMessagePrototypeTypeFromJSON(object.type)
        : undefined,
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : undefined,
      lastSentAt: isSet(object.lastSentAt) ? globalThis.Number(object.lastSentAt) : undefined,
      isDeleted: isSet(object.isDeleted) ? globalThis.Boolean(object.isDeleted) : undefined,
      mediaId: isSet(object.mediaId) ? globalThis.String(object.mediaId) : undefined,
    };
  },

  toJSON(message: SyncActionValue_MarketingMessageAction): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.message !== undefined) {
      obj.message = message.message;
    }
    if (message.type !== undefined) {
      obj.type = syncActionValue_MarketingMessageAction_MarketingMessagePrototypeTypeToJSON(message.type);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.lastSentAt !== undefined) {
      obj.lastSentAt = Math.round(message.lastSentAt);
    }
    if (message.isDeleted !== undefined) {
      obj.isDeleted = message.isDeleted;
    }
    if (message.mediaId !== undefined) {
      obj.mediaId = message.mediaId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_MarketingMessageAction>, I>>(
    base?: I,
  ): SyncActionValue_MarketingMessageAction {
    return SyncActionValue_MarketingMessageAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_MarketingMessageAction>, I>>(
    object: I,
  ): SyncActionValue_MarketingMessageAction {
    const message = createBaseSyncActionValue_MarketingMessageAction();
    message.name = object.name ?? undefined;
    message.message = object.message ?? undefined;
    message.type = object.type ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.lastSentAt = object.lastSentAt ?? undefined;
    message.isDeleted = object.isDeleted ?? undefined;
    message.mediaId = object.mediaId ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_MarketingMessageBroadcastAction(): SyncActionValue_MarketingMessageBroadcastAction {
  return { repliedCount: undefined };
}

export const SyncActionValue_MarketingMessageBroadcastAction: MessageFns<
  SyncActionValue_MarketingMessageBroadcastAction
> = {
  encode(
    message: SyncActionValue_MarketingMessageBroadcastAction,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.repliedCount !== undefined) {
      writer.uint32(8).int32(message.repliedCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_MarketingMessageBroadcastAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_MarketingMessageBroadcastAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.repliedCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_MarketingMessageBroadcastAction {
    return { repliedCount: isSet(object.repliedCount) ? globalThis.Number(object.repliedCount) : undefined };
  },

  toJSON(message: SyncActionValue_MarketingMessageBroadcastAction): unknown {
    const obj: any = {};
    if (message.repliedCount !== undefined) {
      obj.repliedCount = Math.round(message.repliedCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_MarketingMessageBroadcastAction>, I>>(
    base?: I,
  ): SyncActionValue_MarketingMessageBroadcastAction {
    return SyncActionValue_MarketingMessageBroadcastAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_MarketingMessageBroadcastAction>, I>>(
    object: I,
  ): SyncActionValue_MarketingMessageBroadcastAction {
    const message = createBaseSyncActionValue_MarketingMessageBroadcastAction();
    message.repliedCount = object.repliedCount ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_MerchantPaymentPartnerAction(): SyncActionValue_MerchantPaymentPartnerAction {
  return { status: 0, country: "", gatewayName: undefined, credentialId: undefined };
}

export const SyncActionValue_MerchantPaymentPartnerAction: MessageFns<SyncActionValue_MerchantPaymentPartnerAction> = {
  encode(
    message: SyncActionValue_MerchantPaymentPartnerAction,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    if (message.country !== "") {
      writer.uint32(18).string(message.country);
    }
    if (message.gatewayName !== undefined) {
      writer.uint32(26).string(message.gatewayName);
    }
    if (message.credentialId !== undefined) {
      writer.uint32(34).string(message.credentialId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_MerchantPaymentPartnerAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_MerchantPaymentPartnerAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.country = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.gatewayName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.credentialId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_MerchantPaymentPartnerAction {
    return {
      status: isSet(object.status) ? syncActionValue_MerchantPaymentPartnerAction_StatusFromJSON(object.status) : 0,
      country: isSet(object.country) ? globalThis.String(object.country) : "",
      gatewayName: isSet(object.gatewayName) ? globalThis.String(object.gatewayName) : undefined,
      credentialId: isSet(object.credentialId) ? globalThis.String(object.credentialId) : undefined,
    };
  },

  toJSON(message: SyncActionValue_MerchantPaymentPartnerAction): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = syncActionValue_MerchantPaymentPartnerAction_StatusToJSON(message.status);
    }
    if (message.country !== "") {
      obj.country = message.country;
    }
    if (message.gatewayName !== undefined) {
      obj.gatewayName = message.gatewayName;
    }
    if (message.credentialId !== undefined) {
      obj.credentialId = message.credentialId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_MerchantPaymentPartnerAction>, I>>(
    base?: I,
  ): SyncActionValue_MerchantPaymentPartnerAction {
    return SyncActionValue_MerchantPaymentPartnerAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_MerchantPaymentPartnerAction>, I>>(
    object: I,
  ): SyncActionValue_MerchantPaymentPartnerAction {
    const message = createBaseSyncActionValue_MerchantPaymentPartnerAction();
    message.status = object.status ?? 0;
    message.country = object.country ?? "";
    message.gatewayName = object.gatewayName ?? undefined;
    message.credentialId = object.credentialId ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_MuteAction(): SyncActionValue_MuteAction {
  return { muted: undefined, muteEndTimestamp: undefined, autoMuted: undefined };
}

export const SyncActionValue_MuteAction: MessageFns<SyncActionValue_MuteAction> = {
  encode(message: SyncActionValue_MuteAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.muted !== undefined) {
      writer.uint32(8).bool(message.muted);
    }
    if (message.muteEndTimestamp !== undefined) {
      writer.uint32(16).int64(message.muteEndTimestamp);
    }
    if (message.autoMuted !== undefined) {
      writer.uint32(24).bool(message.autoMuted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_MuteAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_MuteAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.muted = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.muteEndTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.autoMuted = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_MuteAction {
    return {
      muted: isSet(object.muted) ? globalThis.Boolean(object.muted) : undefined,
      muteEndTimestamp: isSet(object.muteEndTimestamp) ? globalThis.Number(object.muteEndTimestamp) : undefined,
      autoMuted: isSet(object.autoMuted) ? globalThis.Boolean(object.autoMuted) : undefined,
    };
  },

  toJSON(message: SyncActionValue_MuteAction): unknown {
    const obj: any = {};
    if (message.muted !== undefined) {
      obj.muted = message.muted;
    }
    if (message.muteEndTimestamp !== undefined) {
      obj.muteEndTimestamp = Math.round(message.muteEndTimestamp);
    }
    if (message.autoMuted !== undefined) {
      obj.autoMuted = message.autoMuted;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_MuteAction>, I>>(base?: I): SyncActionValue_MuteAction {
    return SyncActionValue_MuteAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_MuteAction>, I>>(object: I): SyncActionValue_MuteAction {
    const message = createBaseSyncActionValue_MuteAction();
    message.muted = object.muted ?? undefined;
    message.muteEndTimestamp = object.muteEndTimestamp ?? undefined;
    message.autoMuted = object.autoMuted ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_NoteEditAction(): SyncActionValue_NoteEditAction {
  return {
    type: undefined,
    chatJid: undefined,
    createdAt: undefined,
    deleted: undefined,
    unstructuredContent: undefined,
  };
}

export const SyncActionValue_NoteEditAction: MessageFns<SyncActionValue_NoteEditAction> = {
  encode(message: SyncActionValue_NoteEditAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== undefined) {
      writer.uint32(8).int32(message.type);
    }
    if (message.chatJid !== undefined) {
      writer.uint32(18).string(message.chatJid);
    }
    if (message.createdAt !== undefined) {
      writer.uint32(24).int64(message.createdAt);
    }
    if (message.deleted !== undefined) {
      writer.uint32(32).bool(message.deleted);
    }
    if (message.unstructuredContent !== undefined) {
      writer.uint32(42).string(message.unstructuredContent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_NoteEditAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_NoteEditAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.chatJid = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.createdAt = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.deleted = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.unstructuredContent = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_NoteEditAction {
    return {
      type: isSet(object.type) ? syncActionValue_NoteEditAction_NoteTypeFromJSON(object.type) : undefined,
      chatJid: isSet(object.chatJid) ? globalThis.String(object.chatJid) : undefined,
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : undefined,
      deleted: isSet(object.deleted) ? globalThis.Boolean(object.deleted) : undefined,
      unstructuredContent: isSet(object.unstructuredContent)
        ? globalThis.String(object.unstructuredContent)
        : undefined,
    };
  },

  toJSON(message: SyncActionValue_NoteEditAction): unknown {
    const obj: any = {};
    if (message.type !== undefined) {
      obj.type = syncActionValue_NoteEditAction_NoteTypeToJSON(message.type);
    }
    if (message.chatJid !== undefined) {
      obj.chatJid = message.chatJid;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.deleted !== undefined) {
      obj.deleted = message.deleted;
    }
    if (message.unstructuredContent !== undefined) {
      obj.unstructuredContent = message.unstructuredContent;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_NoteEditAction>, I>>(base?: I): SyncActionValue_NoteEditAction {
    return SyncActionValue_NoteEditAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_NoteEditAction>, I>>(
    object: I,
  ): SyncActionValue_NoteEditAction {
    const message = createBaseSyncActionValue_NoteEditAction();
    message.type = object.type ?? undefined;
    message.chatJid = object.chatJid ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.deleted = object.deleted ?? undefined;
    message.unstructuredContent = object.unstructuredContent ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_NotificationActivitySettingAction(): SyncActionValue_NotificationActivitySettingAction {
  return { notificationActivitySetting: undefined };
}

export const SyncActionValue_NotificationActivitySettingAction: MessageFns<
  SyncActionValue_NotificationActivitySettingAction
> = {
  encode(
    message: SyncActionValue_NotificationActivitySettingAction,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.notificationActivitySetting !== undefined) {
      writer.uint32(8).int32(message.notificationActivitySetting);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_NotificationActivitySettingAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_NotificationActivitySettingAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.notificationActivitySetting = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_NotificationActivitySettingAction {
    return {
      notificationActivitySetting: isSet(object.notificationActivitySetting)
        ? syncActionValue_NotificationActivitySettingAction_NotificationActivitySettingFromJSON(
          object.notificationActivitySetting,
        )
        : undefined,
    };
  },

  toJSON(message: SyncActionValue_NotificationActivitySettingAction): unknown {
    const obj: any = {};
    if (message.notificationActivitySetting !== undefined) {
      obj.notificationActivitySetting =
        syncActionValue_NotificationActivitySettingAction_NotificationActivitySettingToJSON(
          message.notificationActivitySetting,
        );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_NotificationActivitySettingAction>, I>>(
    base?: I,
  ): SyncActionValue_NotificationActivitySettingAction {
    return SyncActionValue_NotificationActivitySettingAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_NotificationActivitySettingAction>, I>>(
    object: I,
  ): SyncActionValue_NotificationActivitySettingAction {
    const message = createBaseSyncActionValue_NotificationActivitySettingAction();
    message.notificationActivitySetting = object.notificationActivitySetting ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_NuxAction(): SyncActionValue_NuxAction {
  return { acknowledged: undefined };
}

export const SyncActionValue_NuxAction: MessageFns<SyncActionValue_NuxAction> = {
  encode(message: SyncActionValue_NuxAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.acknowledged !== undefined) {
      writer.uint32(8).bool(message.acknowledged);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_NuxAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_NuxAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.acknowledged = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_NuxAction {
    return { acknowledged: isSet(object.acknowledged) ? globalThis.Boolean(object.acknowledged) : undefined };
  },

  toJSON(message: SyncActionValue_NuxAction): unknown {
    const obj: any = {};
    if (message.acknowledged !== undefined) {
      obj.acknowledged = message.acknowledged;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_NuxAction>, I>>(base?: I): SyncActionValue_NuxAction {
    return SyncActionValue_NuxAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_NuxAction>, I>>(object: I): SyncActionValue_NuxAction {
    const message = createBaseSyncActionValue_NuxAction();
    message.acknowledged = object.acknowledged ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_PaymentInfoAction(): SyncActionValue_PaymentInfoAction {
  return { cpi: undefined };
}

export const SyncActionValue_PaymentInfoAction: MessageFns<SyncActionValue_PaymentInfoAction> = {
  encode(message: SyncActionValue_PaymentInfoAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cpi !== undefined) {
      writer.uint32(10).string(message.cpi);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_PaymentInfoAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_PaymentInfoAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cpi = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_PaymentInfoAction {
    return { cpi: isSet(object.cpi) ? globalThis.String(object.cpi) : undefined };
  },

  toJSON(message: SyncActionValue_PaymentInfoAction): unknown {
    const obj: any = {};
    if (message.cpi !== undefined) {
      obj.cpi = message.cpi;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_PaymentInfoAction>, I>>(
    base?: I,
  ): SyncActionValue_PaymentInfoAction {
    return SyncActionValue_PaymentInfoAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_PaymentInfoAction>, I>>(
    object: I,
  ): SyncActionValue_PaymentInfoAction {
    const message = createBaseSyncActionValue_PaymentInfoAction();
    message.cpi = object.cpi ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_PaymentTosAction(): SyncActionValue_PaymentTosAction {
  return { paymentNotice: 0, accepted: false };
}

export const SyncActionValue_PaymentTosAction: MessageFns<SyncActionValue_PaymentTosAction> = {
  encode(message: SyncActionValue_PaymentTosAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.paymentNotice !== 0) {
      writer.uint32(8).int32(message.paymentNotice);
    }
    if (message.accepted !== false) {
      writer.uint32(16).bool(message.accepted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_PaymentTosAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_PaymentTosAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.paymentNotice = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.accepted = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_PaymentTosAction {
    return {
      paymentNotice: isSet(object.paymentNotice)
        ? syncActionValue_PaymentTosAction_PaymentNoticeFromJSON(object.paymentNotice)
        : 0,
      accepted: isSet(object.accepted) ? globalThis.Boolean(object.accepted) : false,
    };
  },

  toJSON(message: SyncActionValue_PaymentTosAction): unknown {
    const obj: any = {};
    if (message.paymentNotice !== 0) {
      obj.paymentNotice = syncActionValue_PaymentTosAction_PaymentNoticeToJSON(message.paymentNotice);
    }
    if (message.accepted !== false) {
      obj.accepted = message.accepted;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_PaymentTosAction>, I>>(
    base?: I,
  ): SyncActionValue_PaymentTosAction {
    return SyncActionValue_PaymentTosAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_PaymentTosAction>, I>>(
    object: I,
  ): SyncActionValue_PaymentTosAction {
    const message = createBaseSyncActionValue_PaymentTosAction();
    message.paymentNotice = object.paymentNotice ?? 0;
    message.accepted = object.accepted ?? false;
    return message;
  },
};

function createBaseSyncActionValue_PinAction(): SyncActionValue_PinAction {
  return { pinned: undefined };
}

export const SyncActionValue_PinAction: MessageFns<SyncActionValue_PinAction> = {
  encode(message: SyncActionValue_PinAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pinned !== undefined) {
      writer.uint32(8).bool(message.pinned);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_PinAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_PinAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pinned = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_PinAction {
    return { pinned: isSet(object.pinned) ? globalThis.Boolean(object.pinned) : undefined };
  },

  toJSON(message: SyncActionValue_PinAction): unknown {
    const obj: any = {};
    if (message.pinned !== undefined) {
      obj.pinned = message.pinned;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_PinAction>, I>>(base?: I): SyncActionValue_PinAction {
    return SyncActionValue_PinAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_PinAction>, I>>(object: I): SyncActionValue_PinAction {
    const message = createBaseSyncActionValue_PinAction();
    message.pinned = object.pinned ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_PnForLidChatAction(): SyncActionValue_PnForLidChatAction {
  return { pnJid: undefined };
}

export const SyncActionValue_PnForLidChatAction: MessageFns<SyncActionValue_PnForLidChatAction> = {
  encode(message: SyncActionValue_PnForLidChatAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pnJid !== undefined) {
      writer.uint32(10).string(message.pnJid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_PnForLidChatAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_PnForLidChatAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pnJid = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_PnForLidChatAction {
    return { pnJid: isSet(object.pnJid) ? globalThis.String(object.pnJid) : undefined };
  },

  toJSON(message: SyncActionValue_PnForLidChatAction): unknown {
    const obj: any = {};
    if (message.pnJid !== undefined) {
      obj.pnJid = message.pnJid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_PnForLidChatAction>, I>>(
    base?: I,
  ): SyncActionValue_PnForLidChatAction {
    return SyncActionValue_PnForLidChatAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_PnForLidChatAction>, I>>(
    object: I,
  ): SyncActionValue_PnForLidChatAction {
    const message = createBaseSyncActionValue_PnForLidChatAction();
    message.pnJid = object.pnJid ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_PrimaryFeature(): SyncActionValue_PrimaryFeature {
  return { flags: [] };
}

export const SyncActionValue_PrimaryFeature: MessageFns<SyncActionValue_PrimaryFeature> = {
  encode(message: SyncActionValue_PrimaryFeature, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.flags) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_PrimaryFeature {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_PrimaryFeature();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.flags.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_PrimaryFeature {
    return { flags: globalThis.Array.isArray(object?.flags) ? object.flags.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: SyncActionValue_PrimaryFeature): unknown {
    const obj: any = {};
    if (message.flags?.length) {
      obj.flags = message.flags;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_PrimaryFeature>, I>>(base?: I): SyncActionValue_PrimaryFeature {
    return SyncActionValue_PrimaryFeature.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_PrimaryFeature>, I>>(
    object: I,
  ): SyncActionValue_PrimaryFeature {
    const message = createBaseSyncActionValue_PrimaryFeature();
    message.flags = object.flags?.map((e) => e) || [];
    return message;
  },
};

function createBaseSyncActionValue_PrimaryVersionAction(): SyncActionValue_PrimaryVersionAction {
  return { version: undefined };
}

export const SyncActionValue_PrimaryVersionAction: MessageFns<SyncActionValue_PrimaryVersionAction> = {
  encode(message: SyncActionValue_PrimaryVersionAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== undefined) {
      writer.uint32(10).string(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_PrimaryVersionAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_PrimaryVersionAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.version = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_PrimaryVersionAction {
    return { version: isSet(object.version) ? globalThis.String(object.version) : undefined };
  },

  toJSON(message: SyncActionValue_PrimaryVersionAction): unknown {
    const obj: any = {};
    if (message.version !== undefined) {
      obj.version = message.version;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_PrimaryVersionAction>, I>>(
    base?: I,
  ): SyncActionValue_PrimaryVersionAction {
    return SyncActionValue_PrimaryVersionAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_PrimaryVersionAction>, I>>(
    object: I,
  ): SyncActionValue_PrimaryVersionAction {
    const message = createBaseSyncActionValue_PrimaryVersionAction();
    message.version = object.version ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_PrivacySettingDisableLinkPreviewsAction(): SyncActionValue_PrivacySettingDisableLinkPreviewsAction {
  return { isPreviewsDisabled: undefined };
}

export const SyncActionValue_PrivacySettingDisableLinkPreviewsAction: MessageFns<
  SyncActionValue_PrivacySettingDisableLinkPreviewsAction
> = {
  encode(
    message: SyncActionValue_PrivacySettingDisableLinkPreviewsAction,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.isPreviewsDisabled !== undefined) {
      writer.uint32(8).bool(message.isPreviewsDisabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_PrivacySettingDisableLinkPreviewsAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_PrivacySettingDisableLinkPreviewsAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isPreviewsDisabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_PrivacySettingDisableLinkPreviewsAction {
    return {
      isPreviewsDisabled: isSet(object.isPreviewsDisabled) ? globalThis.Boolean(object.isPreviewsDisabled) : undefined,
    };
  },

  toJSON(message: SyncActionValue_PrivacySettingDisableLinkPreviewsAction): unknown {
    const obj: any = {};
    if (message.isPreviewsDisabled !== undefined) {
      obj.isPreviewsDisabled = message.isPreviewsDisabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_PrivacySettingDisableLinkPreviewsAction>, I>>(
    base?: I,
  ): SyncActionValue_PrivacySettingDisableLinkPreviewsAction {
    return SyncActionValue_PrivacySettingDisableLinkPreviewsAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_PrivacySettingDisableLinkPreviewsAction>, I>>(
    object: I,
  ): SyncActionValue_PrivacySettingDisableLinkPreviewsAction {
    const message = createBaseSyncActionValue_PrivacySettingDisableLinkPreviewsAction();
    message.isPreviewsDisabled = object.isPreviewsDisabled ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_PrivacySettingRelayAllCalls(): SyncActionValue_PrivacySettingRelayAllCalls {
  return { isEnabled: undefined };
}

export const SyncActionValue_PrivacySettingRelayAllCalls: MessageFns<SyncActionValue_PrivacySettingRelayAllCalls> = {
  encode(
    message: SyncActionValue_PrivacySettingRelayAllCalls,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.isEnabled !== undefined) {
      writer.uint32(8).bool(message.isEnabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_PrivacySettingRelayAllCalls {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_PrivacySettingRelayAllCalls();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isEnabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_PrivacySettingRelayAllCalls {
    return { isEnabled: isSet(object.isEnabled) ? globalThis.Boolean(object.isEnabled) : undefined };
  },

  toJSON(message: SyncActionValue_PrivacySettingRelayAllCalls): unknown {
    const obj: any = {};
    if (message.isEnabled !== undefined) {
      obj.isEnabled = message.isEnabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_PrivacySettingRelayAllCalls>, I>>(
    base?: I,
  ): SyncActionValue_PrivacySettingRelayAllCalls {
    return SyncActionValue_PrivacySettingRelayAllCalls.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_PrivacySettingRelayAllCalls>, I>>(
    object: I,
  ): SyncActionValue_PrivacySettingRelayAllCalls {
    const message = createBaseSyncActionValue_PrivacySettingRelayAllCalls();
    message.isEnabled = object.isEnabled ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_PushNameSetting(): SyncActionValue_PushNameSetting {
  return { name: undefined };
}

export const SyncActionValue_PushNameSetting: MessageFns<SyncActionValue_PushNameSetting> = {
  encode(message: SyncActionValue_PushNameSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_PushNameSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_PushNameSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_PushNameSetting {
    return { name: isSet(object.name) ? globalThis.String(object.name) : undefined };
  },

  toJSON(message: SyncActionValue_PushNameSetting): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_PushNameSetting>, I>>(base?: I): SyncActionValue_PushNameSetting {
    return SyncActionValue_PushNameSetting.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_PushNameSetting>, I>>(
    object: I,
  ): SyncActionValue_PushNameSetting {
    const message = createBaseSyncActionValue_PushNameSetting();
    message.name = object.name ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_QuickReplyAction(): SyncActionValue_QuickReplyAction {
  return { shortcut: undefined, message: undefined, keywords: [], count: undefined, deleted: undefined };
}

export const SyncActionValue_QuickReplyAction: MessageFns<SyncActionValue_QuickReplyAction> = {
  encode(message: SyncActionValue_QuickReplyAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.shortcut !== undefined) {
      writer.uint32(10).string(message.shortcut);
    }
    if (message.message !== undefined) {
      writer.uint32(18).string(message.message);
    }
    for (const v of message.keywords) {
      writer.uint32(26).string(v!);
    }
    if (message.count !== undefined) {
      writer.uint32(32).int32(message.count);
    }
    if (message.deleted !== undefined) {
      writer.uint32(40).bool(message.deleted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_QuickReplyAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_QuickReplyAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.shortcut = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.keywords.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.deleted = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_QuickReplyAction {
    return {
      shortcut: isSet(object.shortcut) ? globalThis.String(object.shortcut) : undefined,
      message: isSet(object.message) ? globalThis.String(object.message) : undefined,
      keywords: globalThis.Array.isArray(object?.keywords) ? object.keywords.map((e: any) => globalThis.String(e)) : [],
      count: isSet(object.count) ? globalThis.Number(object.count) : undefined,
      deleted: isSet(object.deleted) ? globalThis.Boolean(object.deleted) : undefined,
    };
  },

  toJSON(message: SyncActionValue_QuickReplyAction): unknown {
    const obj: any = {};
    if (message.shortcut !== undefined) {
      obj.shortcut = message.shortcut;
    }
    if (message.message !== undefined) {
      obj.message = message.message;
    }
    if (message.keywords?.length) {
      obj.keywords = message.keywords;
    }
    if (message.count !== undefined) {
      obj.count = Math.round(message.count);
    }
    if (message.deleted !== undefined) {
      obj.deleted = message.deleted;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_QuickReplyAction>, I>>(
    base?: I,
  ): SyncActionValue_QuickReplyAction {
    return SyncActionValue_QuickReplyAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_QuickReplyAction>, I>>(
    object: I,
  ): SyncActionValue_QuickReplyAction {
    const message = createBaseSyncActionValue_QuickReplyAction();
    message.shortcut = object.shortcut ?? undefined;
    message.message = object.message ?? undefined;
    message.keywords = object.keywords?.map((e) => e) || [];
    message.count = object.count ?? undefined;
    message.deleted = object.deleted ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_RecentEmojiWeightsAction(): SyncActionValue_RecentEmojiWeightsAction {
  return { weights: [] };
}

export const SyncActionValue_RecentEmojiWeightsAction: MessageFns<SyncActionValue_RecentEmojiWeightsAction> = {
  encode(message: SyncActionValue_RecentEmojiWeightsAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.weights) {
      RecentEmojiWeight.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_RecentEmojiWeightsAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_RecentEmojiWeightsAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.weights.push(RecentEmojiWeight.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_RecentEmojiWeightsAction {
    return {
      weights: globalThis.Array.isArray(object?.weights)
        ? object.weights.map((e: any) => RecentEmojiWeight.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SyncActionValue_RecentEmojiWeightsAction): unknown {
    const obj: any = {};
    if (message.weights?.length) {
      obj.weights = message.weights.map((e) => RecentEmojiWeight.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_RecentEmojiWeightsAction>, I>>(
    base?: I,
  ): SyncActionValue_RecentEmojiWeightsAction {
    return SyncActionValue_RecentEmojiWeightsAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_RecentEmojiWeightsAction>, I>>(
    object: I,
  ): SyncActionValue_RecentEmojiWeightsAction {
    const message = createBaseSyncActionValue_RecentEmojiWeightsAction();
    message.weights = object.weights?.map((e) => RecentEmojiWeight.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSyncActionValue_RemoveRecentStickerAction(): SyncActionValue_RemoveRecentStickerAction {
  return { lastStickerSentTs: undefined };
}

export const SyncActionValue_RemoveRecentStickerAction: MessageFns<SyncActionValue_RemoveRecentStickerAction> = {
  encode(message: SyncActionValue_RemoveRecentStickerAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lastStickerSentTs !== undefined) {
      writer.uint32(8).int64(message.lastStickerSentTs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_RemoveRecentStickerAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_RemoveRecentStickerAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.lastStickerSentTs = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_RemoveRecentStickerAction {
    return {
      lastStickerSentTs: isSet(object.lastStickerSentTs) ? globalThis.Number(object.lastStickerSentTs) : undefined,
    };
  },

  toJSON(message: SyncActionValue_RemoveRecentStickerAction): unknown {
    const obj: any = {};
    if (message.lastStickerSentTs !== undefined) {
      obj.lastStickerSentTs = Math.round(message.lastStickerSentTs);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_RemoveRecentStickerAction>, I>>(
    base?: I,
  ): SyncActionValue_RemoveRecentStickerAction {
    return SyncActionValue_RemoveRecentStickerAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_RemoveRecentStickerAction>, I>>(
    object: I,
  ): SyncActionValue_RemoveRecentStickerAction {
    const message = createBaseSyncActionValue_RemoveRecentStickerAction();
    message.lastStickerSentTs = object.lastStickerSentTs ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_SecurityNotificationSetting(): SyncActionValue_SecurityNotificationSetting {
  return { showNotification: undefined };
}

export const SyncActionValue_SecurityNotificationSetting: MessageFns<SyncActionValue_SecurityNotificationSetting> = {
  encode(
    message: SyncActionValue_SecurityNotificationSetting,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.showNotification !== undefined) {
      writer.uint32(8).bool(message.showNotification);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_SecurityNotificationSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_SecurityNotificationSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.showNotification = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_SecurityNotificationSetting {
    return {
      showNotification: isSet(object.showNotification) ? globalThis.Boolean(object.showNotification) : undefined,
    };
  },

  toJSON(message: SyncActionValue_SecurityNotificationSetting): unknown {
    const obj: any = {};
    if (message.showNotification !== undefined) {
      obj.showNotification = message.showNotification;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_SecurityNotificationSetting>, I>>(
    base?: I,
  ): SyncActionValue_SecurityNotificationSetting {
    return SyncActionValue_SecurityNotificationSetting.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_SecurityNotificationSetting>, I>>(
    object: I,
  ): SyncActionValue_SecurityNotificationSetting {
    const message = createBaseSyncActionValue_SecurityNotificationSetting();
    message.showNotification = object.showNotification ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_StarAction(): SyncActionValue_StarAction {
  return { starred: undefined };
}

export const SyncActionValue_StarAction: MessageFns<SyncActionValue_StarAction> = {
  encode(message: SyncActionValue_StarAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.starred !== undefined) {
      writer.uint32(8).bool(message.starred);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_StarAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_StarAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.starred = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_StarAction {
    return { starred: isSet(object.starred) ? globalThis.Boolean(object.starred) : undefined };
  },

  toJSON(message: SyncActionValue_StarAction): unknown {
    const obj: any = {};
    if (message.starred !== undefined) {
      obj.starred = message.starred;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_StarAction>, I>>(base?: I): SyncActionValue_StarAction {
    return SyncActionValue_StarAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_StarAction>, I>>(object: I): SyncActionValue_StarAction {
    const message = createBaseSyncActionValue_StarAction();
    message.starred = object.starred ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_StatusPrivacyAction(): SyncActionValue_StatusPrivacyAction {
  return { mode: undefined, userJid: [] };
}

export const SyncActionValue_StatusPrivacyAction: MessageFns<SyncActionValue_StatusPrivacyAction> = {
  encode(message: SyncActionValue_StatusPrivacyAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mode !== undefined) {
      writer.uint32(8).int32(message.mode);
    }
    for (const v of message.userJid) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_StatusPrivacyAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_StatusPrivacyAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.mode = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userJid.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_StatusPrivacyAction {
    return {
      mode: isSet(object.mode)
        ? syncActionValue_StatusPrivacyAction_StatusDistributionModeFromJSON(object.mode)
        : undefined,
      userJid: globalThis.Array.isArray(object?.userJid) ? object.userJid.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: SyncActionValue_StatusPrivacyAction): unknown {
    const obj: any = {};
    if (message.mode !== undefined) {
      obj.mode = syncActionValue_StatusPrivacyAction_StatusDistributionModeToJSON(message.mode);
    }
    if (message.userJid?.length) {
      obj.userJid = message.userJid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_StatusPrivacyAction>, I>>(
    base?: I,
  ): SyncActionValue_StatusPrivacyAction {
    return SyncActionValue_StatusPrivacyAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_StatusPrivacyAction>, I>>(
    object: I,
  ): SyncActionValue_StatusPrivacyAction {
    const message = createBaseSyncActionValue_StatusPrivacyAction();
    message.mode = object.mode ?? undefined;
    message.userJid = object.userJid?.map((e) => e) || [];
    return message;
  },
};

function createBaseSyncActionValue_StickerAction(): SyncActionValue_StickerAction {
  return {
    url: undefined,
    fileEncSha256: undefined,
    mediaKey: undefined,
    mimetype: undefined,
    height: undefined,
    width: undefined,
    directPath: undefined,
    fileLength: undefined,
    isFavorite: undefined,
    deviceIdHint: undefined,
    isLottie: undefined,
  };
}

export const SyncActionValue_StickerAction: MessageFns<SyncActionValue_StickerAction> = {
  encode(message: SyncActionValue_StickerAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== undefined) {
      writer.uint32(10).string(message.url);
    }
    if (message.fileEncSha256 !== undefined) {
      writer.uint32(18).bytes(message.fileEncSha256);
    }
    if (message.mediaKey !== undefined) {
      writer.uint32(26).bytes(message.mediaKey);
    }
    if (message.mimetype !== undefined) {
      writer.uint32(34).string(message.mimetype);
    }
    if (message.height !== undefined) {
      writer.uint32(40).uint32(message.height);
    }
    if (message.width !== undefined) {
      writer.uint32(48).uint32(message.width);
    }
    if (message.directPath !== undefined) {
      writer.uint32(58).string(message.directPath);
    }
    if (message.fileLength !== undefined) {
      writer.uint32(64).uint64(message.fileLength);
    }
    if (message.isFavorite !== undefined) {
      writer.uint32(72).bool(message.isFavorite);
    }
    if (message.deviceIdHint !== undefined) {
      writer.uint32(80).uint32(message.deviceIdHint);
    }
    if (message.isLottie !== undefined) {
      writer.uint32(88).bool(message.isLottie);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_StickerAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_StickerAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fileEncSha256 = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.mediaKey = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.mimetype = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.height = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.width = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.directPath = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.fileLength = longToNumber(reader.uint64());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.isFavorite = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.deviceIdHint = reader.uint32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.isLottie = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_StickerAction {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : undefined,
      fileEncSha256: isSet(object.fileEncSha256) ? bytesFromBase64(object.fileEncSha256) : undefined,
      mediaKey: isSet(object.mediaKey) ? bytesFromBase64(object.mediaKey) : undefined,
      mimetype: isSet(object.mimetype) ? globalThis.String(object.mimetype) : undefined,
      height: isSet(object.height) ? globalThis.Number(object.height) : undefined,
      width: isSet(object.width) ? globalThis.Number(object.width) : undefined,
      directPath: isSet(object.directPath) ? globalThis.String(object.directPath) : undefined,
      fileLength: isSet(object.fileLength) ? globalThis.Number(object.fileLength) : undefined,
      isFavorite: isSet(object.isFavorite) ? globalThis.Boolean(object.isFavorite) : undefined,
      deviceIdHint: isSet(object.deviceIdHint) ? globalThis.Number(object.deviceIdHint) : undefined,
      isLottie: isSet(object.isLottie) ? globalThis.Boolean(object.isLottie) : undefined,
    };
  },

  toJSON(message: SyncActionValue_StickerAction): unknown {
    const obj: any = {};
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    if (message.fileEncSha256 !== undefined) {
      obj.fileEncSha256 = base64FromBytes(message.fileEncSha256);
    }
    if (message.mediaKey !== undefined) {
      obj.mediaKey = base64FromBytes(message.mediaKey);
    }
    if (message.mimetype !== undefined) {
      obj.mimetype = message.mimetype;
    }
    if (message.height !== undefined) {
      obj.height = Math.round(message.height);
    }
    if (message.width !== undefined) {
      obj.width = Math.round(message.width);
    }
    if (message.directPath !== undefined) {
      obj.directPath = message.directPath;
    }
    if (message.fileLength !== undefined) {
      obj.fileLength = Math.round(message.fileLength);
    }
    if (message.isFavorite !== undefined) {
      obj.isFavorite = message.isFavorite;
    }
    if (message.deviceIdHint !== undefined) {
      obj.deviceIdHint = Math.round(message.deviceIdHint);
    }
    if (message.isLottie !== undefined) {
      obj.isLottie = message.isLottie;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_StickerAction>, I>>(base?: I): SyncActionValue_StickerAction {
    return SyncActionValue_StickerAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_StickerAction>, I>>(
    object: I,
  ): SyncActionValue_StickerAction {
    const message = createBaseSyncActionValue_StickerAction();
    message.url = object.url ?? undefined;
    message.fileEncSha256 = object.fileEncSha256 ?? undefined;
    message.mediaKey = object.mediaKey ?? undefined;
    message.mimetype = object.mimetype ?? undefined;
    message.height = object.height ?? undefined;
    message.width = object.width ?? undefined;
    message.directPath = object.directPath ?? undefined;
    message.fileLength = object.fileLength ?? undefined;
    message.isFavorite = object.isFavorite ?? undefined;
    message.deviceIdHint = object.deviceIdHint ?? undefined;
    message.isLottie = object.isLottie ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_SubscriptionAction(): SyncActionValue_SubscriptionAction {
  return { isDeactivated: undefined, isAutoRenewing: undefined, expirationDate: undefined };
}

export const SyncActionValue_SubscriptionAction: MessageFns<SyncActionValue_SubscriptionAction> = {
  encode(message: SyncActionValue_SubscriptionAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isDeactivated !== undefined) {
      writer.uint32(8).bool(message.isDeactivated);
    }
    if (message.isAutoRenewing !== undefined) {
      writer.uint32(16).bool(message.isAutoRenewing);
    }
    if (message.expirationDate !== undefined) {
      writer.uint32(24).int64(message.expirationDate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_SubscriptionAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_SubscriptionAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isDeactivated = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isAutoRenewing = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.expirationDate = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_SubscriptionAction {
    return {
      isDeactivated: isSet(object.isDeactivated) ? globalThis.Boolean(object.isDeactivated) : undefined,
      isAutoRenewing: isSet(object.isAutoRenewing) ? globalThis.Boolean(object.isAutoRenewing) : undefined,
      expirationDate: isSet(object.expirationDate) ? globalThis.Number(object.expirationDate) : undefined,
    };
  },

  toJSON(message: SyncActionValue_SubscriptionAction): unknown {
    const obj: any = {};
    if (message.isDeactivated !== undefined) {
      obj.isDeactivated = message.isDeactivated;
    }
    if (message.isAutoRenewing !== undefined) {
      obj.isAutoRenewing = message.isAutoRenewing;
    }
    if (message.expirationDate !== undefined) {
      obj.expirationDate = Math.round(message.expirationDate);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_SubscriptionAction>, I>>(
    base?: I,
  ): SyncActionValue_SubscriptionAction {
    return SyncActionValue_SubscriptionAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_SubscriptionAction>, I>>(
    object: I,
  ): SyncActionValue_SubscriptionAction {
    const message = createBaseSyncActionValue_SubscriptionAction();
    message.isDeactivated = object.isDeactivated ?? undefined;
    message.isAutoRenewing = object.isAutoRenewing ?? undefined;
    message.expirationDate = object.expirationDate ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_SyncActionMessage(): SyncActionValue_SyncActionMessage {
  return { key: undefined, timestamp: undefined };
}

export const SyncActionValue_SyncActionMessage: MessageFns<SyncActionValue_SyncActionMessage> = {
  encode(message: SyncActionValue_SyncActionMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined) {
      MessageKey.encode(message.key, writer.uint32(10).fork()).join();
    }
    if (message.timestamp !== undefined) {
      writer.uint32(16).int64(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_SyncActionMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_SyncActionMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_SyncActionMessage {
    return {
      key: isSet(object.key) ? MessageKey.fromJSON(object.key) : undefined,
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : undefined,
    };
  },

  toJSON(message: SyncActionValue_SyncActionMessage): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = MessageKey.toJSON(message.key);
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = Math.round(message.timestamp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_SyncActionMessage>, I>>(
    base?: I,
  ): SyncActionValue_SyncActionMessage {
    return SyncActionValue_SyncActionMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_SyncActionMessage>, I>>(
    object: I,
  ): SyncActionValue_SyncActionMessage {
    const message = createBaseSyncActionValue_SyncActionMessage();
    message.key = (object.key !== undefined && object.key !== null) ? MessageKey.fromPartial(object.key) : undefined;
    message.timestamp = object.timestamp ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_SyncActionMessageRange(): SyncActionValue_SyncActionMessageRange {
  return { lastMessageTimestamp: undefined, lastSystemMessageTimestamp: undefined, messages: [] };
}

export const SyncActionValue_SyncActionMessageRange: MessageFns<SyncActionValue_SyncActionMessageRange> = {
  encode(message: SyncActionValue_SyncActionMessageRange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lastMessageTimestamp !== undefined) {
      writer.uint32(8).int64(message.lastMessageTimestamp);
    }
    if (message.lastSystemMessageTimestamp !== undefined) {
      writer.uint32(16).int64(message.lastSystemMessageTimestamp);
    }
    for (const v of message.messages) {
      SyncActionValue_SyncActionMessage.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_SyncActionMessageRange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_SyncActionMessageRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.lastMessageTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.lastSystemMessageTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.messages.push(SyncActionValue_SyncActionMessage.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_SyncActionMessageRange {
    return {
      lastMessageTimestamp: isSet(object.lastMessageTimestamp)
        ? globalThis.Number(object.lastMessageTimestamp)
        : undefined,
      lastSystemMessageTimestamp: isSet(object.lastSystemMessageTimestamp)
        ? globalThis.Number(object.lastSystemMessageTimestamp)
        : undefined,
      messages: globalThis.Array.isArray(object?.messages)
        ? object.messages.map((e: any) => SyncActionValue_SyncActionMessage.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SyncActionValue_SyncActionMessageRange): unknown {
    const obj: any = {};
    if (message.lastMessageTimestamp !== undefined) {
      obj.lastMessageTimestamp = Math.round(message.lastMessageTimestamp);
    }
    if (message.lastSystemMessageTimestamp !== undefined) {
      obj.lastSystemMessageTimestamp = Math.round(message.lastSystemMessageTimestamp);
    }
    if (message.messages?.length) {
      obj.messages = message.messages.map((e) => SyncActionValue_SyncActionMessage.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_SyncActionMessageRange>, I>>(
    base?: I,
  ): SyncActionValue_SyncActionMessageRange {
    return SyncActionValue_SyncActionMessageRange.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_SyncActionMessageRange>, I>>(
    object: I,
  ): SyncActionValue_SyncActionMessageRange {
    const message = createBaseSyncActionValue_SyncActionMessageRange();
    message.lastMessageTimestamp = object.lastMessageTimestamp ?? undefined;
    message.lastSystemMessageTimestamp = object.lastSystemMessageTimestamp ?? undefined;
    message.messages = object.messages?.map((e) => SyncActionValue_SyncActionMessage.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSyncActionValue_TimeFormatAction(): SyncActionValue_TimeFormatAction {
  return { isTwentyFourHourFormatEnabled: undefined };
}

export const SyncActionValue_TimeFormatAction: MessageFns<SyncActionValue_TimeFormatAction> = {
  encode(message: SyncActionValue_TimeFormatAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isTwentyFourHourFormatEnabled !== undefined) {
      writer.uint32(8).bool(message.isTwentyFourHourFormatEnabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_TimeFormatAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_TimeFormatAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isTwentyFourHourFormatEnabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_TimeFormatAction {
    return {
      isTwentyFourHourFormatEnabled: isSet(object.isTwentyFourHourFormatEnabled)
        ? globalThis.Boolean(object.isTwentyFourHourFormatEnabled)
        : undefined,
    };
  },

  toJSON(message: SyncActionValue_TimeFormatAction): unknown {
    const obj: any = {};
    if (message.isTwentyFourHourFormatEnabled !== undefined) {
      obj.isTwentyFourHourFormatEnabled = message.isTwentyFourHourFormatEnabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_TimeFormatAction>, I>>(
    base?: I,
  ): SyncActionValue_TimeFormatAction {
    return SyncActionValue_TimeFormatAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_TimeFormatAction>, I>>(
    object: I,
  ): SyncActionValue_TimeFormatAction {
    const message = createBaseSyncActionValue_TimeFormatAction();
    message.isTwentyFourHourFormatEnabled = object.isTwentyFourHourFormatEnabled ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_UnarchiveChatsSetting(): SyncActionValue_UnarchiveChatsSetting {
  return { unarchiveChats: undefined };
}

export const SyncActionValue_UnarchiveChatsSetting: MessageFns<SyncActionValue_UnarchiveChatsSetting> = {
  encode(message: SyncActionValue_UnarchiveChatsSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.unarchiveChats !== undefined) {
      writer.uint32(8).bool(message.unarchiveChats);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_UnarchiveChatsSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_UnarchiveChatsSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.unarchiveChats = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_UnarchiveChatsSetting {
    return { unarchiveChats: isSet(object.unarchiveChats) ? globalThis.Boolean(object.unarchiveChats) : undefined };
  },

  toJSON(message: SyncActionValue_UnarchiveChatsSetting): unknown {
    const obj: any = {};
    if (message.unarchiveChats !== undefined) {
      obj.unarchiveChats = message.unarchiveChats;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_UnarchiveChatsSetting>, I>>(
    base?: I,
  ): SyncActionValue_UnarchiveChatsSetting {
    return SyncActionValue_UnarchiveChatsSetting.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_UnarchiveChatsSetting>, I>>(
    object: I,
  ): SyncActionValue_UnarchiveChatsSetting {
    const message = createBaseSyncActionValue_UnarchiveChatsSetting();
    message.unarchiveChats = object.unarchiveChats ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_UserStatusMuteAction(): SyncActionValue_UserStatusMuteAction {
  return { muted: undefined };
}

export const SyncActionValue_UserStatusMuteAction: MessageFns<SyncActionValue_UserStatusMuteAction> = {
  encode(message: SyncActionValue_UserStatusMuteAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.muted !== undefined) {
      writer.uint32(8).bool(message.muted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_UserStatusMuteAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_UserStatusMuteAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.muted = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_UserStatusMuteAction {
    return { muted: isSet(object.muted) ? globalThis.Boolean(object.muted) : undefined };
  },

  toJSON(message: SyncActionValue_UserStatusMuteAction): unknown {
    const obj: any = {};
    if (message.muted !== undefined) {
      obj.muted = message.muted;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_UserStatusMuteAction>, I>>(
    base?: I,
  ): SyncActionValue_UserStatusMuteAction {
    return SyncActionValue_UserStatusMuteAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_UserStatusMuteAction>, I>>(
    object: I,
  ): SyncActionValue_UserStatusMuteAction {
    const message = createBaseSyncActionValue_UserStatusMuteAction();
    message.muted = object.muted ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_UsernameChatStartModeAction(): SyncActionValue_UsernameChatStartModeAction {
  return { chatStartMode: undefined };
}

export const SyncActionValue_UsernameChatStartModeAction: MessageFns<SyncActionValue_UsernameChatStartModeAction> = {
  encode(
    message: SyncActionValue_UsernameChatStartModeAction,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.chatStartMode !== undefined) {
      writer.uint32(8).int32(message.chatStartMode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_UsernameChatStartModeAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_UsernameChatStartModeAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.chatStartMode = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_UsernameChatStartModeAction {
    return {
      chatStartMode: isSet(object.chatStartMode)
        ? syncActionValue_UsernameChatStartModeAction_ChatStartModeFromJSON(object.chatStartMode)
        : undefined,
    };
  },

  toJSON(message: SyncActionValue_UsernameChatStartModeAction): unknown {
    const obj: any = {};
    if (message.chatStartMode !== undefined) {
      obj.chatStartMode = syncActionValue_UsernameChatStartModeAction_ChatStartModeToJSON(message.chatStartMode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_UsernameChatStartModeAction>, I>>(
    base?: I,
  ): SyncActionValue_UsernameChatStartModeAction {
    return SyncActionValue_UsernameChatStartModeAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_UsernameChatStartModeAction>, I>>(
    object: I,
  ): SyncActionValue_UsernameChatStartModeAction {
    const message = createBaseSyncActionValue_UsernameChatStartModeAction();
    message.chatStartMode = object.chatStartMode ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_WaffleAccountLinkStateAction(): SyncActionValue_WaffleAccountLinkStateAction {
  return { linkState: undefined };
}

export const SyncActionValue_WaffleAccountLinkStateAction: MessageFns<SyncActionValue_WaffleAccountLinkStateAction> = {
  encode(
    message: SyncActionValue_WaffleAccountLinkStateAction,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.linkState !== undefined) {
      writer.uint32(16).int32(message.linkState);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_WaffleAccountLinkStateAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_WaffleAccountLinkStateAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.linkState = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_WaffleAccountLinkStateAction {
    return {
      linkState: isSet(object.linkState)
        ? syncActionValue_WaffleAccountLinkStateAction_AccountLinkStateFromJSON(object.linkState)
        : undefined,
    };
  },

  toJSON(message: SyncActionValue_WaffleAccountLinkStateAction): unknown {
    const obj: any = {};
    if (message.linkState !== undefined) {
      obj.linkState = syncActionValue_WaffleAccountLinkStateAction_AccountLinkStateToJSON(message.linkState);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_WaffleAccountLinkStateAction>, I>>(
    base?: I,
  ): SyncActionValue_WaffleAccountLinkStateAction {
    return SyncActionValue_WaffleAccountLinkStateAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_WaffleAccountLinkStateAction>, I>>(
    object: I,
  ): SyncActionValue_WaffleAccountLinkStateAction {
    const message = createBaseSyncActionValue_WaffleAccountLinkStateAction();
    message.linkState = object.linkState ?? undefined;
    return message;
  },
};

function createBaseSyncActionValue_WamoUserIdentifierAction(): SyncActionValue_WamoUserIdentifierAction {
  return { identifier: undefined };
}

export const SyncActionValue_WamoUserIdentifierAction: MessageFns<SyncActionValue_WamoUserIdentifierAction> = {
  encode(message: SyncActionValue_WamoUserIdentifierAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identifier !== undefined) {
      writer.uint32(10).string(message.identifier);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncActionValue_WamoUserIdentifierAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncActionValue_WamoUserIdentifierAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identifier = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncActionValue_WamoUserIdentifierAction {
    return { identifier: isSet(object.identifier) ? globalThis.String(object.identifier) : undefined };
  },

  toJSON(message: SyncActionValue_WamoUserIdentifierAction): unknown {
    const obj: any = {};
    if (message.identifier !== undefined) {
      obj.identifier = message.identifier;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncActionValue_WamoUserIdentifierAction>, I>>(
    base?: I,
  ): SyncActionValue_WamoUserIdentifierAction {
    return SyncActionValue_WamoUserIdentifierAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncActionValue_WamoUserIdentifierAction>, I>>(
    object: I,
  ): SyncActionValue_WamoUserIdentifierAction {
    const message = createBaseSyncActionValue_WamoUserIdentifierAction();
    message.identifier = object.identifier ?? undefined;
    return message;
  },
};

function createBaseSyncdIndex(): SyncdIndex {
  return { blob: undefined };
}

export const SyncdIndex: MessageFns<SyncdIndex> = {
  encode(message: SyncdIndex, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blob !== undefined) {
      writer.uint32(10).bytes(message.blob);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncdIndex {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncdIndex();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.blob = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncdIndex {
    return { blob: isSet(object.blob) ? bytesFromBase64(object.blob) : undefined };
  },

  toJSON(message: SyncdIndex): unknown {
    const obj: any = {};
    if (message.blob !== undefined) {
      obj.blob = base64FromBytes(message.blob);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncdIndex>, I>>(base?: I): SyncdIndex {
    return SyncdIndex.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncdIndex>, I>>(object: I): SyncdIndex {
    const message = createBaseSyncdIndex();
    message.blob = object.blob ?? undefined;
    return message;
  },
};

function createBaseSyncdMutation(): SyncdMutation {
  return { operation: undefined, record: undefined };
}

export const SyncdMutation: MessageFns<SyncdMutation> = {
  encode(message: SyncdMutation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operation !== undefined) {
      writer.uint32(8).int32(message.operation);
    }
    if (message.record !== undefined) {
      SyncdRecord.encode(message.record, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncdMutation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncdMutation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.operation = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.record = SyncdRecord.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncdMutation {
    return {
      operation: isSet(object.operation) ? syncdMutation_SyncdOperationFromJSON(object.operation) : undefined,
      record: isSet(object.record) ? SyncdRecord.fromJSON(object.record) : undefined,
    };
  },

  toJSON(message: SyncdMutation): unknown {
    const obj: any = {};
    if (message.operation !== undefined) {
      obj.operation = syncdMutation_SyncdOperationToJSON(message.operation);
    }
    if (message.record !== undefined) {
      obj.record = SyncdRecord.toJSON(message.record);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncdMutation>, I>>(base?: I): SyncdMutation {
    return SyncdMutation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncdMutation>, I>>(object: I): SyncdMutation {
    const message = createBaseSyncdMutation();
    message.operation = object.operation ?? undefined;
    message.record = (object.record !== undefined && object.record !== null)
      ? SyncdRecord.fromPartial(object.record)
      : undefined;
    return message;
  },
};

function createBaseSyncdMutations(): SyncdMutations {
  return { mutations: [] };
}

export const SyncdMutations: MessageFns<SyncdMutations> = {
  encode(message: SyncdMutations, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.mutations) {
      SyncdMutation.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncdMutations {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncdMutations();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mutations.push(SyncdMutation.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncdMutations {
    return {
      mutations: globalThis.Array.isArray(object?.mutations)
        ? object.mutations.map((e: any) => SyncdMutation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SyncdMutations): unknown {
    const obj: any = {};
    if (message.mutations?.length) {
      obj.mutations = message.mutations.map((e) => SyncdMutation.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncdMutations>, I>>(base?: I): SyncdMutations {
    return SyncdMutations.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncdMutations>, I>>(object: I): SyncdMutations {
    const message = createBaseSyncdMutations();
    message.mutations = object.mutations?.map((e) => SyncdMutation.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSyncdPatch(): SyncdPatch {
  return {
    version: undefined,
    mutations: [],
    externalMutations: undefined,
    snapshotMac: undefined,
    patchMac: undefined,
    keyId: undefined,
    exitCode: undefined,
    deviceIndex: undefined,
    clientDebugData: undefined,
  };
}

export const SyncdPatch: MessageFns<SyncdPatch> = {
  encode(message: SyncdPatch, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== undefined) {
      SyncdVersion.encode(message.version, writer.uint32(10).fork()).join();
    }
    for (const v of message.mutations) {
      SyncdMutation.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.externalMutations !== undefined) {
      ExternalBlobReference.encode(message.externalMutations, writer.uint32(26).fork()).join();
    }
    if (message.snapshotMac !== undefined) {
      writer.uint32(34).bytes(message.snapshotMac);
    }
    if (message.patchMac !== undefined) {
      writer.uint32(42).bytes(message.patchMac);
    }
    if (message.keyId !== undefined) {
      KeyId.encode(message.keyId, writer.uint32(50).fork()).join();
    }
    if (message.exitCode !== undefined) {
      ExitCode.encode(message.exitCode, writer.uint32(58).fork()).join();
    }
    if (message.deviceIndex !== undefined) {
      writer.uint32(64).uint32(message.deviceIndex);
    }
    if (message.clientDebugData !== undefined) {
      writer.uint32(74).bytes(message.clientDebugData);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncdPatch {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncdPatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.version = SyncdVersion.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.mutations.push(SyncdMutation.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.externalMutations = ExternalBlobReference.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.snapshotMac = reader.bytes();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.patchMac = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.keyId = KeyId.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.exitCode = ExitCode.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.deviceIndex = reader.uint32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.clientDebugData = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncdPatch {
    return {
      version: isSet(object.version) ? SyncdVersion.fromJSON(object.version) : undefined,
      mutations: globalThis.Array.isArray(object?.mutations)
        ? object.mutations.map((e: any) => SyncdMutation.fromJSON(e))
        : [],
      externalMutations: isSet(object.externalMutations)
        ? ExternalBlobReference.fromJSON(object.externalMutations)
        : undefined,
      snapshotMac: isSet(object.snapshotMac) ? bytesFromBase64(object.snapshotMac) : undefined,
      patchMac: isSet(object.patchMac) ? bytesFromBase64(object.patchMac) : undefined,
      keyId: isSet(object.keyId) ? KeyId.fromJSON(object.keyId) : undefined,
      exitCode: isSet(object.exitCode) ? ExitCode.fromJSON(object.exitCode) : undefined,
      deviceIndex: isSet(object.deviceIndex) ? globalThis.Number(object.deviceIndex) : undefined,
      clientDebugData: isSet(object.clientDebugData) ? bytesFromBase64(object.clientDebugData) : undefined,
    };
  },

  toJSON(message: SyncdPatch): unknown {
    const obj: any = {};
    if (message.version !== undefined) {
      obj.version = SyncdVersion.toJSON(message.version);
    }
    if (message.mutations?.length) {
      obj.mutations = message.mutations.map((e) => SyncdMutation.toJSON(e));
    }
    if (message.externalMutations !== undefined) {
      obj.externalMutations = ExternalBlobReference.toJSON(message.externalMutations);
    }
    if (message.snapshotMac !== undefined) {
      obj.snapshotMac = base64FromBytes(message.snapshotMac);
    }
    if (message.patchMac !== undefined) {
      obj.patchMac = base64FromBytes(message.patchMac);
    }
    if (message.keyId !== undefined) {
      obj.keyId = KeyId.toJSON(message.keyId);
    }
    if (message.exitCode !== undefined) {
      obj.exitCode = ExitCode.toJSON(message.exitCode);
    }
    if (message.deviceIndex !== undefined) {
      obj.deviceIndex = Math.round(message.deviceIndex);
    }
    if (message.clientDebugData !== undefined) {
      obj.clientDebugData = base64FromBytes(message.clientDebugData);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncdPatch>, I>>(base?: I): SyncdPatch {
    return SyncdPatch.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncdPatch>, I>>(object: I): SyncdPatch {
    const message = createBaseSyncdPatch();
    message.version = (object.version !== undefined && object.version !== null)
      ? SyncdVersion.fromPartial(object.version)
      : undefined;
    message.mutations = object.mutations?.map((e) => SyncdMutation.fromPartial(e)) || [];
    message.externalMutations = (object.externalMutations !== undefined && object.externalMutations !== null)
      ? ExternalBlobReference.fromPartial(object.externalMutations)
      : undefined;
    message.snapshotMac = object.snapshotMac ?? undefined;
    message.patchMac = object.patchMac ?? undefined;
    message.keyId = (object.keyId !== undefined && object.keyId !== null) ? KeyId.fromPartial(object.keyId) : undefined;
    message.exitCode = (object.exitCode !== undefined && object.exitCode !== null)
      ? ExitCode.fromPartial(object.exitCode)
      : undefined;
    message.deviceIndex = object.deviceIndex ?? undefined;
    message.clientDebugData = object.clientDebugData ?? undefined;
    return message;
  },
};

function createBaseSyncdRecord(): SyncdRecord {
  return { index: undefined, value: undefined, keyId: undefined };
}

export const SyncdRecord: MessageFns<SyncdRecord> = {
  encode(message: SyncdRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== undefined) {
      SyncdIndex.encode(message.index, writer.uint32(10).fork()).join();
    }
    if (message.value !== undefined) {
      SyncdValue.encode(message.value, writer.uint32(18).fork()).join();
    }
    if (message.keyId !== undefined) {
      KeyId.encode(message.keyId, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncdRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncdRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.index = SyncdIndex.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = SyncdValue.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.keyId = KeyId.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncdRecord {
    return {
      index: isSet(object.index) ? SyncdIndex.fromJSON(object.index) : undefined,
      value: isSet(object.value) ? SyncdValue.fromJSON(object.value) : undefined,
      keyId: isSet(object.keyId) ? KeyId.fromJSON(object.keyId) : undefined,
    };
  },

  toJSON(message: SyncdRecord): unknown {
    const obj: any = {};
    if (message.index !== undefined) {
      obj.index = SyncdIndex.toJSON(message.index);
    }
    if (message.value !== undefined) {
      obj.value = SyncdValue.toJSON(message.value);
    }
    if (message.keyId !== undefined) {
      obj.keyId = KeyId.toJSON(message.keyId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncdRecord>, I>>(base?: I): SyncdRecord {
    return SyncdRecord.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncdRecord>, I>>(object: I): SyncdRecord {
    const message = createBaseSyncdRecord();
    message.index = (object.index !== undefined && object.index !== null)
      ? SyncdIndex.fromPartial(object.index)
      : undefined;
    message.value = (object.value !== undefined && object.value !== null)
      ? SyncdValue.fromPartial(object.value)
      : undefined;
    message.keyId = (object.keyId !== undefined && object.keyId !== null) ? KeyId.fromPartial(object.keyId) : undefined;
    return message;
  },
};

function createBaseSyncdSnapshot(): SyncdSnapshot {
  return { version: undefined, records: [], mac: undefined, keyId: undefined };
}

export const SyncdSnapshot: MessageFns<SyncdSnapshot> = {
  encode(message: SyncdSnapshot, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== undefined) {
      SyncdVersion.encode(message.version, writer.uint32(10).fork()).join();
    }
    for (const v of message.records) {
      SyncdRecord.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.mac !== undefined) {
      writer.uint32(26).bytes(message.mac);
    }
    if (message.keyId !== undefined) {
      KeyId.encode(message.keyId, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncdSnapshot {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncdSnapshot();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.version = SyncdVersion.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.records.push(SyncdRecord.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.mac = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.keyId = KeyId.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncdSnapshot {
    return {
      version: isSet(object.version) ? SyncdVersion.fromJSON(object.version) : undefined,
      records: globalThis.Array.isArray(object?.records) ? object.records.map((e: any) => SyncdRecord.fromJSON(e)) : [],
      mac: isSet(object.mac) ? bytesFromBase64(object.mac) : undefined,
      keyId: isSet(object.keyId) ? KeyId.fromJSON(object.keyId) : undefined,
    };
  },

  toJSON(message: SyncdSnapshot): unknown {
    const obj: any = {};
    if (message.version !== undefined) {
      obj.version = SyncdVersion.toJSON(message.version);
    }
    if (message.records?.length) {
      obj.records = message.records.map((e) => SyncdRecord.toJSON(e));
    }
    if (message.mac !== undefined) {
      obj.mac = base64FromBytes(message.mac);
    }
    if (message.keyId !== undefined) {
      obj.keyId = KeyId.toJSON(message.keyId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncdSnapshot>, I>>(base?: I): SyncdSnapshot {
    return SyncdSnapshot.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncdSnapshot>, I>>(object: I): SyncdSnapshot {
    const message = createBaseSyncdSnapshot();
    message.version = (object.version !== undefined && object.version !== null)
      ? SyncdVersion.fromPartial(object.version)
      : undefined;
    message.records = object.records?.map((e) => SyncdRecord.fromPartial(e)) || [];
    message.mac = object.mac ?? undefined;
    message.keyId = (object.keyId !== undefined && object.keyId !== null) ? KeyId.fromPartial(object.keyId) : undefined;
    return message;
  },
};

function createBaseSyncdValue(): SyncdValue {
  return { blob: undefined };
}

export const SyncdValue: MessageFns<SyncdValue> = {
  encode(message: SyncdValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.blob !== undefined) {
      writer.uint32(10).bytes(message.blob);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncdValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncdValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.blob = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncdValue {
    return { blob: isSet(object.blob) ? bytesFromBase64(object.blob) : undefined };
  },

  toJSON(message: SyncdValue): unknown {
    const obj: any = {};
    if (message.blob !== undefined) {
      obj.blob = base64FromBytes(message.blob);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncdValue>, I>>(base?: I): SyncdValue {
    return SyncdValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncdValue>, I>>(object: I): SyncdValue {
    const message = createBaseSyncdValue();
    message.blob = object.blob ?? undefined;
    return message;
  },
};

function createBaseSyncdVersion(): SyncdVersion {
  return { version: undefined };
}

export const SyncdVersion: MessageFns<SyncdVersion> = {
  encode(message: SyncdVersion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== undefined) {
      writer.uint32(8).uint64(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SyncdVersion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSyncdVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.version = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SyncdVersion {
    return { version: isSet(object.version) ? globalThis.Number(object.version) : undefined };
  },

  toJSON(message: SyncdVersion): unknown {
    const obj: any = {};
    if (message.version !== undefined) {
      obj.version = Math.round(message.version);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SyncdVersion>, I>>(base?: I): SyncdVersion {
    return SyncdVersion.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SyncdVersion>, I>>(object: I): SyncdVersion {
    const message = createBaseSyncdVersion();
    message.version = object.version ?? undefined;
    return message;
  },
};

function createBaseTapLinkAction(): TapLinkAction {
  return { title: undefined, tapUrl: undefined };
}

export const TapLinkAction: MessageFns<TapLinkAction> = {
  encode(message: TapLinkAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== undefined) {
      writer.uint32(10).string(message.title);
    }
    if (message.tapUrl !== undefined) {
      writer.uint32(18).string(message.tapUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TapLinkAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTapLinkAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tapUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TapLinkAction {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : undefined,
      tapUrl: isSet(object.tapUrl) ? globalThis.String(object.tapUrl) : undefined,
    };
  },

  toJSON(message: TapLinkAction): unknown {
    const obj: any = {};
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.tapUrl !== undefined) {
      obj.tapUrl = message.tapUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TapLinkAction>, I>>(base?: I): TapLinkAction {
    return TapLinkAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TapLinkAction>, I>>(object: I): TapLinkAction {
    const message = createBaseTapLinkAction();
    message.title = object.title ?? undefined;
    message.tapUrl = object.tapUrl ?? undefined;
    return message;
  },
};

function createBaseTemplateButton(): TemplateButton {
  return { index: undefined, quickReplyButton: undefined, urlButton: undefined, callButton: undefined };
}

export const TemplateButton: MessageFns<TemplateButton> = {
  encode(message: TemplateButton, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== undefined) {
      writer.uint32(32).uint32(message.index);
    }
    if (message.quickReplyButton !== undefined) {
      TemplateButton_QuickReplyButton.encode(message.quickReplyButton, writer.uint32(10).fork()).join();
    }
    if (message.urlButton !== undefined) {
      TemplateButton_URLButton.encode(message.urlButton, writer.uint32(18).fork()).join();
    }
    if (message.callButton !== undefined) {
      TemplateButton_CallButton.encode(message.callButton, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TemplateButton {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTemplateButton();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.index = reader.uint32();
          continue;
        }
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.quickReplyButton = TemplateButton_QuickReplyButton.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.urlButton = TemplateButton_URLButton.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.callButton = TemplateButton_CallButton.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TemplateButton {
    return {
      index: isSet(object.index) ? globalThis.Number(object.index) : undefined,
      quickReplyButton: isSet(object.quickReplyButton)
        ? TemplateButton_QuickReplyButton.fromJSON(object.quickReplyButton)
        : undefined,
      urlButton: isSet(object.urlButton) ? TemplateButton_URLButton.fromJSON(object.urlButton) : undefined,
      callButton: isSet(object.callButton) ? TemplateButton_CallButton.fromJSON(object.callButton) : undefined,
    };
  },

  toJSON(message: TemplateButton): unknown {
    const obj: any = {};
    if (message.index !== undefined) {
      obj.index = Math.round(message.index);
    }
    if (message.quickReplyButton !== undefined) {
      obj.quickReplyButton = TemplateButton_QuickReplyButton.toJSON(message.quickReplyButton);
    }
    if (message.urlButton !== undefined) {
      obj.urlButton = TemplateButton_URLButton.toJSON(message.urlButton);
    }
    if (message.callButton !== undefined) {
      obj.callButton = TemplateButton_CallButton.toJSON(message.callButton);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TemplateButton>, I>>(base?: I): TemplateButton {
    return TemplateButton.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TemplateButton>, I>>(object: I): TemplateButton {
    const message = createBaseTemplateButton();
    message.index = object.index ?? undefined;
    message.quickReplyButton = (object.quickReplyButton !== undefined && object.quickReplyButton !== null)
      ? TemplateButton_QuickReplyButton.fromPartial(object.quickReplyButton)
      : undefined;
    message.urlButton = (object.urlButton !== undefined && object.urlButton !== null)
      ? TemplateButton_URLButton.fromPartial(object.urlButton)
      : undefined;
    message.callButton = (object.callButton !== undefined && object.callButton !== null)
      ? TemplateButton_CallButton.fromPartial(object.callButton)
      : undefined;
    return message;
  },
};

function createBaseTemplateButton_CallButton(): TemplateButton_CallButton {
  return { displayText: undefined, phoneNumber: undefined };
}

export const TemplateButton_CallButton: MessageFns<TemplateButton_CallButton> = {
  encode(message: TemplateButton_CallButton, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayText !== undefined) {
      Message_HighlyStructuredMessage.encode(message.displayText, writer.uint32(10).fork()).join();
    }
    if (message.phoneNumber !== undefined) {
      Message_HighlyStructuredMessage.encode(message.phoneNumber, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TemplateButton_CallButton {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTemplateButton_CallButton();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.displayText = Message_HighlyStructuredMessage.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.phoneNumber = Message_HighlyStructuredMessage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TemplateButton_CallButton {
    return {
      displayText: isSet(object.displayText) ? Message_HighlyStructuredMessage.fromJSON(object.displayText) : undefined,
      phoneNumber: isSet(object.phoneNumber) ? Message_HighlyStructuredMessage.fromJSON(object.phoneNumber) : undefined,
    };
  },

  toJSON(message: TemplateButton_CallButton): unknown {
    const obj: any = {};
    if (message.displayText !== undefined) {
      obj.displayText = Message_HighlyStructuredMessage.toJSON(message.displayText);
    }
    if (message.phoneNumber !== undefined) {
      obj.phoneNumber = Message_HighlyStructuredMessage.toJSON(message.phoneNumber);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TemplateButton_CallButton>, I>>(base?: I): TemplateButton_CallButton {
    return TemplateButton_CallButton.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TemplateButton_CallButton>, I>>(object: I): TemplateButton_CallButton {
    const message = createBaseTemplateButton_CallButton();
    message.displayText = (object.displayText !== undefined && object.displayText !== null)
      ? Message_HighlyStructuredMessage.fromPartial(object.displayText)
      : undefined;
    message.phoneNumber = (object.phoneNumber !== undefined && object.phoneNumber !== null)
      ? Message_HighlyStructuredMessage.fromPartial(object.phoneNumber)
      : undefined;
    return message;
  },
};

function createBaseTemplateButton_QuickReplyButton(): TemplateButton_QuickReplyButton {
  return { displayText: undefined, id: undefined };
}

export const TemplateButton_QuickReplyButton: MessageFns<TemplateButton_QuickReplyButton> = {
  encode(message: TemplateButton_QuickReplyButton, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayText !== undefined) {
      Message_HighlyStructuredMessage.encode(message.displayText, writer.uint32(10).fork()).join();
    }
    if (message.id !== undefined) {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TemplateButton_QuickReplyButton {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTemplateButton_QuickReplyButton();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.displayText = Message_HighlyStructuredMessage.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TemplateButton_QuickReplyButton {
    return {
      displayText: isSet(object.displayText) ? Message_HighlyStructuredMessage.fromJSON(object.displayText) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
    };
  },

  toJSON(message: TemplateButton_QuickReplyButton): unknown {
    const obj: any = {};
    if (message.displayText !== undefined) {
      obj.displayText = Message_HighlyStructuredMessage.toJSON(message.displayText);
    }
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TemplateButton_QuickReplyButton>, I>>(base?: I): TemplateButton_QuickReplyButton {
    return TemplateButton_QuickReplyButton.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TemplateButton_QuickReplyButton>, I>>(
    object: I,
  ): TemplateButton_QuickReplyButton {
    const message = createBaseTemplateButton_QuickReplyButton();
    message.displayText = (object.displayText !== undefined && object.displayText !== null)
      ? Message_HighlyStructuredMessage.fromPartial(object.displayText)
      : undefined;
    message.id = object.id ?? undefined;
    return message;
  },
};

function createBaseTemplateButton_URLButton(): TemplateButton_URLButton {
  return { displayText: undefined, url: undefined };
}

export const TemplateButton_URLButton: MessageFns<TemplateButton_URLButton> = {
  encode(message: TemplateButton_URLButton, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.displayText !== undefined) {
      Message_HighlyStructuredMessage.encode(message.displayText, writer.uint32(10).fork()).join();
    }
    if (message.url !== undefined) {
      Message_HighlyStructuredMessage.encode(message.url, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TemplateButton_URLButton {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTemplateButton_URLButton();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.displayText = Message_HighlyStructuredMessage.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.url = Message_HighlyStructuredMessage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TemplateButton_URLButton {
    return {
      displayText: isSet(object.displayText) ? Message_HighlyStructuredMessage.fromJSON(object.displayText) : undefined,
      url: isSet(object.url) ? Message_HighlyStructuredMessage.fromJSON(object.url) : undefined,
    };
  },

  toJSON(message: TemplateButton_URLButton): unknown {
    const obj: any = {};
    if (message.displayText !== undefined) {
      obj.displayText = Message_HighlyStructuredMessage.toJSON(message.displayText);
    }
    if (message.url !== undefined) {
      obj.url = Message_HighlyStructuredMessage.toJSON(message.url);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TemplateButton_URLButton>, I>>(base?: I): TemplateButton_URLButton {
    return TemplateButton_URLButton.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TemplateButton_URLButton>, I>>(object: I): TemplateButton_URLButton {
    const message = createBaseTemplateButton_URLButton();
    message.displayText = (object.displayText !== undefined && object.displayText !== null)
      ? Message_HighlyStructuredMessage.fromPartial(object.displayText)
      : undefined;
    message.url = (object.url !== undefined && object.url !== null)
      ? Message_HighlyStructuredMessage.fromPartial(object.url)
      : undefined;
    return message;
  },
};

function createBaseUrlTrackingMap(): UrlTrackingMap {
  return { urlTrackingMapElements: [] };
}

export const UrlTrackingMap: MessageFns<UrlTrackingMap> = {
  encode(message: UrlTrackingMap, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.urlTrackingMapElements) {
      UrlTrackingMap_UrlTrackingMapElement.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UrlTrackingMap {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUrlTrackingMap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.urlTrackingMapElements.push(UrlTrackingMap_UrlTrackingMapElement.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UrlTrackingMap {
    return {
      urlTrackingMapElements: globalThis.Array.isArray(object?.urlTrackingMapElements)
        ? object.urlTrackingMapElements.map((e: any) => UrlTrackingMap_UrlTrackingMapElement.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UrlTrackingMap): unknown {
    const obj: any = {};
    if (message.urlTrackingMapElements?.length) {
      obj.urlTrackingMapElements = message.urlTrackingMapElements.map((e) =>
        UrlTrackingMap_UrlTrackingMapElement.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UrlTrackingMap>, I>>(base?: I): UrlTrackingMap {
    return UrlTrackingMap.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UrlTrackingMap>, I>>(object: I): UrlTrackingMap {
    const message = createBaseUrlTrackingMap();
    message.urlTrackingMapElements =
      object.urlTrackingMapElements?.map((e) => UrlTrackingMap_UrlTrackingMapElement.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUrlTrackingMap_UrlTrackingMapElement(): UrlTrackingMap_UrlTrackingMapElement {
  return { originalUrl: undefined, unconsentedUsersUrl: undefined, consentedUsersUrl: undefined, cardIndex: undefined };
}

export const UrlTrackingMap_UrlTrackingMapElement: MessageFns<UrlTrackingMap_UrlTrackingMapElement> = {
  encode(message: UrlTrackingMap_UrlTrackingMapElement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.originalUrl !== undefined) {
      writer.uint32(10).string(message.originalUrl);
    }
    if (message.unconsentedUsersUrl !== undefined) {
      writer.uint32(18).string(message.unconsentedUsersUrl);
    }
    if (message.consentedUsersUrl !== undefined) {
      writer.uint32(26).string(message.consentedUsersUrl);
    }
    if (message.cardIndex !== undefined) {
      writer.uint32(32).uint32(message.cardIndex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UrlTrackingMap_UrlTrackingMapElement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUrlTrackingMap_UrlTrackingMapElement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.originalUrl = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.unconsentedUsersUrl = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.consentedUsersUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.cardIndex = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UrlTrackingMap_UrlTrackingMapElement {
    return {
      originalUrl: isSet(object.originalUrl) ? globalThis.String(object.originalUrl) : undefined,
      unconsentedUsersUrl: isSet(object.unconsentedUsersUrl)
        ? globalThis.String(object.unconsentedUsersUrl)
        : undefined,
      consentedUsersUrl: isSet(object.consentedUsersUrl) ? globalThis.String(object.consentedUsersUrl) : undefined,
      cardIndex: isSet(object.cardIndex) ? globalThis.Number(object.cardIndex) : undefined,
    };
  },

  toJSON(message: UrlTrackingMap_UrlTrackingMapElement): unknown {
    const obj: any = {};
    if (message.originalUrl !== undefined) {
      obj.originalUrl = message.originalUrl;
    }
    if (message.unconsentedUsersUrl !== undefined) {
      obj.unconsentedUsersUrl = message.unconsentedUsersUrl;
    }
    if (message.consentedUsersUrl !== undefined) {
      obj.consentedUsersUrl = message.consentedUsersUrl;
    }
    if (message.cardIndex !== undefined) {
      obj.cardIndex = Math.round(message.cardIndex);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UrlTrackingMap_UrlTrackingMapElement>, I>>(
    base?: I,
  ): UrlTrackingMap_UrlTrackingMapElement {
    return UrlTrackingMap_UrlTrackingMapElement.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UrlTrackingMap_UrlTrackingMapElement>, I>>(
    object: I,
  ): UrlTrackingMap_UrlTrackingMapElement {
    const message = createBaseUrlTrackingMap_UrlTrackingMapElement();
    message.originalUrl = object.originalUrl ?? undefined;
    message.unconsentedUsersUrl = object.unconsentedUsersUrl ?? undefined;
    message.consentedUsersUrl = object.consentedUsersUrl ?? undefined;
    message.cardIndex = object.cardIndex ?? undefined;
    return message;
  },
};

function createBaseUserPassword(): UserPassword {
  return { encoding: undefined, transformer: undefined, transformerArg: [], transformedData: undefined };
}

export const UserPassword: MessageFns<UserPassword> = {
  encode(message: UserPassword, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.encoding !== undefined) {
      writer.uint32(8).int32(message.encoding);
    }
    if (message.transformer !== undefined) {
      writer.uint32(16).int32(message.transformer);
    }
    for (const v of message.transformerArg) {
      UserPassword_TransformerArg.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.transformedData !== undefined) {
      writer.uint32(34).bytes(message.transformedData);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserPassword {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserPassword();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.encoding = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.transformer = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.transformerArg.push(UserPassword_TransformerArg.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.transformedData = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserPassword {
    return {
      encoding: isSet(object.encoding) ? userPassword_EncodingFromJSON(object.encoding) : undefined,
      transformer: isSet(object.transformer) ? userPassword_TransformerFromJSON(object.transformer) : undefined,
      transformerArg: globalThis.Array.isArray(object?.transformerArg)
        ? object.transformerArg.map((e: any) => UserPassword_TransformerArg.fromJSON(e))
        : [],
      transformedData: isSet(object.transformedData) ? bytesFromBase64(object.transformedData) : undefined,
    };
  },

  toJSON(message: UserPassword): unknown {
    const obj: any = {};
    if (message.encoding !== undefined) {
      obj.encoding = userPassword_EncodingToJSON(message.encoding);
    }
    if (message.transformer !== undefined) {
      obj.transformer = userPassword_TransformerToJSON(message.transformer);
    }
    if (message.transformerArg?.length) {
      obj.transformerArg = message.transformerArg.map((e) => UserPassword_TransformerArg.toJSON(e));
    }
    if (message.transformedData !== undefined) {
      obj.transformedData = base64FromBytes(message.transformedData);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserPassword>, I>>(base?: I): UserPassword {
    return UserPassword.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserPassword>, I>>(object: I): UserPassword {
    const message = createBaseUserPassword();
    message.encoding = object.encoding ?? undefined;
    message.transformer = object.transformer ?? undefined;
    message.transformerArg = object.transformerArg?.map((e) => UserPassword_TransformerArg.fromPartial(e)) || [];
    message.transformedData = object.transformedData ?? undefined;
    return message;
  },
};

function createBaseUserPassword_TransformerArg(): UserPassword_TransformerArg {
  return { key: undefined, value: undefined };
}

export const UserPassword_TransformerArg: MessageFns<UserPassword_TransformerArg> = {
  encode(message: UserPassword_TransformerArg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined) {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      UserPassword_TransformerArg_Value.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserPassword_TransformerArg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserPassword_TransformerArg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = UserPassword_TransformerArg_Value.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserPassword_TransformerArg {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : undefined,
      value: isSet(object.value) ? UserPassword_TransformerArg_Value.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: UserPassword_TransformerArg): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = UserPassword_TransformerArg_Value.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserPassword_TransformerArg>, I>>(base?: I): UserPassword_TransformerArg {
    return UserPassword_TransformerArg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserPassword_TransformerArg>, I>>(object: I): UserPassword_TransformerArg {
    const message = createBaseUserPassword_TransformerArg();
    message.key = object.key ?? undefined;
    message.value = (object.value !== undefined && object.value !== null)
      ? UserPassword_TransformerArg_Value.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseUserPassword_TransformerArg_Value(): UserPassword_TransformerArg_Value {
  return { asBlob: undefined, asUnsignedInteger: undefined };
}

export const UserPassword_TransformerArg_Value: MessageFns<UserPassword_TransformerArg_Value> = {
  encode(message: UserPassword_TransformerArg_Value, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.asBlob !== undefined) {
      writer.uint32(10).bytes(message.asBlob);
    }
    if (message.asUnsignedInteger !== undefined) {
      writer.uint32(16).uint32(message.asUnsignedInteger);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserPassword_TransformerArg_Value {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserPassword_TransformerArg_Value();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.asBlob = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.asUnsignedInteger = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserPassword_TransformerArg_Value {
    return {
      asBlob: isSet(object.asBlob) ? bytesFromBase64(object.asBlob) : undefined,
      asUnsignedInteger: isSet(object.asUnsignedInteger) ? globalThis.Number(object.asUnsignedInteger) : undefined,
    };
  },

  toJSON(message: UserPassword_TransformerArg_Value): unknown {
    const obj: any = {};
    if (message.asBlob !== undefined) {
      obj.asBlob = base64FromBytes(message.asBlob);
    }
    if (message.asUnsignedInteger !== undefined) {
      obj.asUnsignedInteger = Math.round(message.asUnsignedInteger);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserPassword_TransformerArg_Value>, I>>(
    base?: I,
  ): UserPassword_TransformerArg_Value {
    return UserPassword_TransformerArg_Value.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserPassword_TransformerArg_Value>, I>>(
    object: I,
  ): UserPassword_TransformerArg_Value {
    const message = createBaseUserPassword_TransformerArg_Value();
    message.asBlob = object.asBlob ?? undefined;
    message.asUnsignedInteger = object.asUnsignedInteger ?? undefined;
    return message;
  },
};

function createBaseUserReceipt(): UserReceipt {
  return {
    userJid: "",
    receiptTimestamp: undefined,
    readTimestamp: undefined,
    playedTimestamp: undefined,
    pendingDeviceJid: [],
    deliveredDeviceJid: [],
  };
}

export const UserReceipt: MessageFns<UserReceipt> = {
  encode(message: UserReceipt, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userJid !== "") {
      writer.uint32(10).string(message.userJid);
    }
    if (message.receiptTimestamp !== undefined) {
      writer.uint32(16).int64(message.receiptTimestamp);
    }
    if (message.readTimestamp !== undefined) {
      writer.uint32(24).int64(message.readTimestamp);
    }
    if (message.playedTimestamp !== undefined) {
      writer.uint32(32).int64(message.playedTimestamp);
    }
    for (const v of message.pendingDeviceJid) {
      writer.uint32(42).string(v!);
    }
    for (const v of message.deliveredDeviceJid) {
      writer.uint32(50).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserReceipt {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserReceipt();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userJid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.receiptTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.readTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.playedTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.pendingDeviceJid.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.deliveredDeviceJid.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserReceipt {
    return {
      userJid: isSet(object.userJid) ? globalThis.String(object.userJid) : "",
      receiptTimestamp: isSet(object.receiptTimestamp) ? globalThis.Number(object.receiptTimestamp) : undefined,
      readTimestamp: isSet(object.readTimestamp) ? globalThis.Number(object.readTimestamp) : undefined,
      playedTimestamp: isSet(object.playedTimestamp) ? globalThis.Number(object.playedTimestamp) : undefined,
      pendingDeviceJid: globalThis.Array.isArray(object?.pendingDeviceJid)
        ? object.pendingDeviceJid.map((e: any) => globalThis.String(e))
        : [],
      deliveredDeviceJid: globalThis.Array.isArray(object?.deliveredDeviceJid)
        ? object.deliveredDeviceJid.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: UserReceipt): unknown {
    const obj: any = {};
    if (message.userJid !== "") {
      obj.userJid = message.userJid;
    }
    if (message.receiptTimestamp !== undefined) {
      obj.receiptTimestamp = Math.round(message.receiptTimestamp);
    }
    if (message.readTimestamp !== undefined) {
      obj.readTimestamp = Math.round(message.readTimestamp);
    }
    if (message.playedTimestamp !== undefined) {
      obj.playedTimestamp = Math.round(message.playedTimestamp);
    }
    if (message.pendingDeviceJid?.length) {
      obj.pendingDeviceJid = message.pendingDeviceJid;
    }
    if (message.deliveredDeviceJid?.length) {
      obj.deliveredDeviceJid = message.deliveredDeviceJid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserReceipt>, I>>(base?: I): UserReceipt {
    return UserReceipt.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserReceipt>, I>>(object: I): UserReceipt {
    const message = createBaseUserReceipt();
    message.userJid = object.userJid ?? "";
    message.receiptTimestamp = object.receiptTimestamp ?? undefined;
    message.readTimestamp = object.readTimestamp ?? undefined;
    message.playedTimestamp = object.playedTimestamp ?? undefined;
    message.pendingDeviceJid = object.pendingDeviceJid?.map((e) => e) || [];
    message.deliveredDeviceJid = object.deliveredDeviceJid?.map((e) => e) || [];
    return message;
  },
};

function createBaseVerifiedNameCertificate(): VerifiedNameCertificate {
  return { details: undefined, signature: undefined, serverSignature: undefined };
}

export const VerifiedNameCertificate: MessageFns<VerifiedNameCertificate> = {
  encode(message: VerifiedNameCertificate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.details !== undefined) {
      writer.uint32(10).bytes(message.details);
    }
    if (message.signature !== undefined) {
      writer.uint32(18).bytes(message.signature);
    }
    if (message.serverSignature !== undefined) {
      writer.uint32(26).bytes(message.serverSignature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifiedNameCertificate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifiedNameCertificate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.details = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signature = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.serverSignature = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifiedNameCertificate {
    return {
      details: isSet(object.details) ? bytesFromBase64(object.details) : undefined,
      signature: isSet(object.signature) ? bytesFromBase64(object.signature) : undefined,
      serverSignature: isSet(object.serverSignature) ? bytesFromBase64(object.serverSignature) : undefined,
    };
  },

  toJSON(message: VerifiedNameCertificate): unknown {
    const obj: any = {};
    if (message.details !== undefined) {
      obj.details = base64FromBytes(message.details);
    }
    if (message.signature !== undefined) {
      obj.signature = base64FromBytes(message.signature);
    }
    if (message.serverSignature !== undefined) {
      obj.serverSignature = base64FromBytes(message.serverSignature);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VerifiedNameCertificate>, I>>(base?: I): VerifiedNameCertificate {
    return VerifiedNameCertificate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerifiedNameCertificate>, I>>(object: I): VerifiedNameCertificate {
    const message = createBaseVerifiedNameCertificate();
    message.details = object.details ?? undefined;
    message.signature = object.signature ?? undefined;
    message.serverSignature = object.serverSignature ?? undefined;
    return message;
  },
};

function createBaseVerifiedNameCertificate_Details(): VerifiedNameCertificate_Details {
  return { serial: undefined, issuer: undefined, verifiedName: undefined, localizedNames: [], issueTime: undefined };
}

export const VerifiedNameCertificate_Details: MessageFns<VerifiedNameCertificate_Details> = {
  encode(message: VerifiedNameCertificate_Details, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serial !== undefined) {
      writer.uint32(8).uint64(message.serial);
    }
    if (message.issuer !== undefined) {
      writer.uint32(18).string(message.issuer);
    }
    if (message.verifiedName !== undefined) {
      writer.uint32(34).string(message.verifiedName);
    }
    for (const v of message.localizedNames) {
      LocalizedName.encode(v!, writer.uint32(66).fork()).join();
    }
    if (message.issueTime !== undefined) {
      writer.uint32(80).uint64(message.issueTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerifiedNameCertificate_Details {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifiedNameCertificate_Details();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.serial = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.issuer = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.verifiedName = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.localizedNames.push(LocalizedName.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.issueTime = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifiedNameCertificate_Details {
    return {
      serial: isSet(object.serial) ? globalThis.Number(object.serial) : undefined,
      issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : undefined,
      verifiedName: isSet(object.verifiedName) ? globalThis.String(object.verifiedName) : undefined,
      localizedNames: globalThis.Array.isArray(object?.localizedNames)
        ? object.localizedNames.map((e: any) => LocalizedName.fromJSON(e))
        : [],
      issueTime: isSet(object.issueTime) ? globalThis.Number(object.issueTime) : undefined,
    };
  },

  toJSON(message: VerifiedNameCertificate_Details): unknown {
    const obj: any = {};
    if (message.serial !== undefined) {
      obj.serial = Math.round(message.serial);
    }
    if (message.issuer !== undefined) {
      obj.issuer = message.issuer;
    }
    if (message.verifiedName !== undefined) {
      obj.verifiedName = message.verifiedName;
    }
    if (message.localizedNames?.length) {
      obj.localizedNames = message.localizedNames.map((e) => LocalizedName.toJSON(e));
    }
    if (message.issueTime !== undefined) {
      obj.issueTime = Math.round(message.issueTime);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VerifiedNameCertificate_Details>, I>>(base?: I): VerifiedNameCertificate_Details {
    return VerifiedNameCertificate_Details.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerifiedNameCertificate_Details>, I>>(
    object: I,
  ): VerifiedNameCertificate_Details {
    const message = createBaseVerifiedNameCertificate_Details();
    message.serial = object.serial ?? undefined;
    message.issuer = object.issuer ?? undefined;
    message.verifiedName = object.verifiedName ?? undefined;
    message.localizedNames = object.localizedNames?.map((e) => LocalizedName.fromPartial(e)) || [];
    message.issueTime = object.issueTime ?? undefined;
    return message;
  },
};

function createBaseWallpaperSettings(): WallpaperSettings {
  return { filename: undefined, opacity: undefined };
}

export const WallpaperSettings: MessageFns<WallpaperSettings> = {
  encode(message: WallpaperSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filename !== undefined) {
      writer.uint32(10).string(message.filename);
    }
    if (message.opacity !== undefined) {
      writer.uint32(16).uint32(message.opacity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WallpaperSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWallpaperSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filename = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.opacity = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WallpaperSettings {
    return {
      filename: isSet(object.filename) ? globalThis.String(object.filename) : undefined,
      opacity: isSet(object.opacity) ? globalThis.Number(object.opacity) : undefined,
    };
  },

  toJSON(message: WallpaperSettings): unknown {
    const obj: any = {};
    if (message.filename !== undefined) {
      obj.filename = message.filename;
    }
    if (message.opacity !== undefined) {
      obj.opacity = Math.round(message.opacity);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WallpaperSettings>, I>>(base?: I): WallpaperSettings {
    return WallpaperSettings.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WallpaperSettings>, I>>(object: I): WallpaperSettings {
    const message = createBaseWallpaperSettings();
    message.filename = object.filename ?? undefined;
    message.opacity = object.opacity ?? undefined;
    return message;
  },
};

function createBaseWebFeatures(): WebFeatures {
  return {
    labelsDisplay: undefined,
    voipIndividualOutgoing: undefined,
    groupsV3: undefined,
    groupsV3Create: undefined,
    changeNumberV2: undefined,
    queryStatusV3Thumbnail: undefined,
    liveLocations: undefined,
    queryVname: undefined,
    voipIndividualIncoming: undefined,
    quickRepliesQuery: undefined,
    payments: undefined,
    stickerPackQuery: undefined,
    liveLocationsFinal: undefined,
    labelsEdit: undefined,
    mediaUpload: undefined,
    mediaUploadRichQuickReplies: undefined,
    vnameV2: undefined,
    videoPlaybackUrl: undefined,
    statusRanking: undefined,
    voipIndividualVideo: undefined,
    thirdPartyStickers: undefined,
    frequentlyForwardedSetting: undefined,
    groupsV4JoinPermission: undefined,
    recentStickers: undefined,
    catalog: undefined,
    starredStickers: undefined,
    voipGroupCall: undefined,
    templateMessage: undefined,
    templateMessageInteractivity: undefined,
    ephemeralMessages: undefined,
    e2ENotificationSync: undefined,
    recentStickersV2: undefined,
    recentStickersV3: undefined,
    userNotice: undefined,
    support: undefined,
    groupUiiCleanup: undefined,
    groupDogfoodingInternalOnly: undefined,
    settingsSync: undefined,
    archiveV2: undefined,
    ephemeralAllowGroupMembers: undefined,
    ephemeral24HDuration: undefined,
    mdForceUpgrade: undefined,
    disappearingMode: undefined,
    externalMdOptInAvailable: undefined,
    noDeleteMessageTimeLimit: undefined,
  };
}

export const WebFeatures: MessageFns<WebFeatures> = {
  encode(message: WebFeatures, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.labelsDisplay !== undefined) {
      writer.uint32(8).int32(message.labelsDisplay);
    }
    if (message.voipIndividualOutgoing !== undefined) {
      writer.uint32(16).int32(message.voipIndividualOutgoing);
    }
    if (message.groupsV3 !== undefined) {
      writer.uint32(24).int32(message.groupsV3);
    }
    if (message.groupsV3Create !== undefined) {
      writer.uint32(32).int32(message.groupsV3Create);
    }
    if (message.changeNumberV2 !== undefined) {
      writer.uint32(40).int32(message.changeNumberV2);
    }
    if (message.queryStatusV3Thumbnail !== undefined) {
      writer.uint32(48).int32(message.queryStatusV3Thumbnail);
    }
    if (message.liveLocations !== undefined) {
      writer.uint32(56).int32(message.liveLocations);
    }
    if (message.queryVname !== undefined) {
      writer.uint32(64).int32(message.queryVname);
    }
    if (message.voipIndividualIncoming !== undefined) {
      writer.uint32(72).int32(message.voipIndividualIncoming);
    }
    if (message.quickRepliesQuery !== undefined) {
      writer.uint32(80).int32(message.quickRepliesQuery);
    }
    if (message.payments !== undefined) {
      writer.uint32(88).int32(message.payments);
    }
    if (message.stickerPackQuery !== undefined) {
      writer.uint32(96).int32(message.stickerPackQuery);
    }
    if (message.liveLocationsFinal !== undefined) {
      writer.uint32(104).int32(message.liveLocationsFinal);
    }
    if (message.labelsEdit !== undefined) {
      writer.uint32(112).int32(message.labelsEdit);
    }
    if (message.mediaUpload !== undefined) {
      writer.uint32(120).int32(message.mediaUpload);
    }
    if (message.mediaUploadRichQuickReplies !== undefined) {
      writer.uint32(144).int32(message.mediaUploadRichQuickReplies);
    }
    if (message.vnameV2 !== undefined) {
      writer.uint32(152).int32(message.vnameV2);
    }
    if (message.videoPlaybackUrl !== undefined) {
      writer.uint32(160).int32(message.videoPlaybackUrl);
    }
    if (message.statusRanking !== undefined) {
      writer.uint32(168).int32(message.statusRanking);
    }
    if (message.voipIndividualVideo !== undefined) {
      writer.uint32(176).int32(message.voipIndividualVideo);
    }
    if (message.thirdPartyStickers !== undefined) {
      writer.uint32(184).int32(message.thirdPartyStickers);
    }
    if (message.frequentlyForwardedSetting !== undefined) {
      writer.uint32(192).int32(message.frequentlyForwardedSetting);
    }
    if (message.groupsV4JoinPermission !== undefined) {
      writer.uint32(200).int32(message.groupsV4JoinPermission);
    }
    if (message.recentStickers !== undefined) {
      writer.uint32(208).int32(message.recentStickers);
    }
    if (message.catalog !== undefined) {
      writer.uint32(216).int32(message.catalog);
    }
    if (message.starredStickers !== undefined) {
      writer.uint32(224).int32(message.starredStickers);
    }
    if (message.voipGroupCall !== undefined) {
      writer.uint32(232).int32(message.voipGroupCall);
    }
    if (message.templateMessage !== undefined) {
      writer.uint32(240).int32(message.templateMessage);
    }
    if (message.templateMessageInteractivity !== undefined) {
      writer.uint32(248).int32(message.templateMessageInteractivity);
    }
    if (message.ephemeralMessages !== undefined) {
      writer.uint32(256).int32(message.ephemeralMessages);
    }
    if (message.e2ENotificationSync !== undefined) {
      writer.uint32(264).int32(message.e2ENotificationSync);
    }
    if (message.recentStickersV2 !== undefined) {
      writer.uint32(272).int32(message.recentStickersV2);
    }
    if (message.recentStickersV3 !== undefined) {
      writer.uint32(288).int32(message.recentStickersV3);
    }
    if (message.userNotice !== undefined) {
      writer.uint32(296).int32(message.userNotice);
    }
    if (message.support !== undefined) {
      writer.uint32(312).int32(message.support);
    }
    if (message.groupUiiCleanup !== undefined) {
      writer.uint32(320).int32(message.groupUiiCleanup);
    }
    if (message.groupDogfoodingInternalOnly !== undefined) {
      writer.uint32(328).int32(message.groupDogfoodingInternalOnly);
    }
    if (message.settingsSync !== undefined) {
      writer.uint32(336).int32(message.settingsSync);
    }
    if (message.archiveV2 !== undefined) {
      writer.uint32(344).int32(message.archiveV2);
    }
    if (message.ephemeralAllowGroupMembers !== undefined) {
      writer.uint32(352).int32(message.ephemeralAllowGroupMembers);
    }
    if (message.ephemeral24HDuration !== undefined) {
      writer.uint32(360).int32(message.ephemeral24HDuration);
    }
    if (message.mdForceUpgrade !== undefined) {
      writer.uint32(368).int32(message.mdForceUpgrade);
    }
    if (message.disappearingMode !== undefined) {
      writer.uint32(376).int32(message.disappearingMode);
    }
    if (message.externalMdOptInAvailable !== undefined) {
      writer.uint32(384).int32(message.externalMdOptInAvailable);
    }
    if (message.noDeleteMessageTimeLimit !== undefined) {
      writer.uint32(392).int32(message.noDeleteMessageTimeLimit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebFeatures {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebFeatures();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.labelsDisplay = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.voipIndividualOutgoing = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.groupsV3 = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.groupsV3Create = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.changeNumberV2 = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.queryStatusV3Thumbnail = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.liveLocations = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.queryVname = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.voipIndividualIncoming = reader.int32() as any;
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.quickRepliesQuery = reader.int32() as any;
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.payments = reader.int32() as any;
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.stickerPackQuery = reader.int32() as any;
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.liveLocationsFinal = reader.int32() as any;
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.labelsEdit = reader.int32() as any;
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.mediaUpload = reader.int32() as any;
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.mediaUploadRichQuickReplies = reader.int32() as any;
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.vnameV2 = reader.int32() as any;
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.videoPlaybackUrl = reader.int32() as any;
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.statusRanking = reader.int32() as any;
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.voipIndividualVideo = reader.int32() as any;
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.thirdPartyStickers = reader.int32() as any;
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.frequentlyForwardedSetting = reader.int32() as any;
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.groupsV4JoinPermission = reader.int32() as any;
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.recentStickers = reader.int32() as any;
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.catalog = reader.int32() as any;
          continue;
        }
        case 28: {
          if (tag !== 224) {
            break;
          }

          message.starredStickers = reader.int32() as any;
          continue;
        }
        case 29: {
          if (tag !== 232) {
            break;
          }

          message.voipGroupCall = reader.int32() as any;
          continue;
        }
        case 30: {
          if (tag !== 240) {
            break;
          }

          message.templateMessage = reader.int32() as any;
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.templateMessageInteractivity = reader.int32() as any;
          continue;
        }
        case 32: {
          if (tag !== 256) {
            break;
          }

          message.ephemeralMessages = reader.int32() as any;
          continue;
        }
        case 33: {
          if (tag !== 264) {
            break;
          }

          message.e2ENotificationSync = reader.int32() as any;
          continue;
        }
        case 34: {
          if (tag !== 272) {
            break;
          }

          message.recentStickersV2 = reader.int32() as any;
          continue;
        }
        case 36: {
          if (tag !== 288) {
            break;
          }

          message.recentStickersV3 = reader.int32() as any;
          continue;
        }
        case 37: {
          if (tag !== 296) {
            break;
          }

          message.userNotice = reader.int32() as any;
          continue;
        }
        case 39: {
          if (tag !== 312) {
            break;
          }

          message.support = reader.int32() as any;
          continue;
        }
        case 40: {
          if (tag !== 320) {
            break;
          }

          message.groupUiiCleanup = reader.int32() as any;
          continue;
        }
        case 41: {
          if (tag !== 328) {
            break;
          }

          message.groupDogfoodingInternalOnly = reader.int32() as any;
          continue;
        }
        case 42: {
          if (tag !== 336) {
            break;
          }

          message.settingsSync = reader.int32() as any;
          continue;
        }
        case 43: {
          if (tag !== 344) {
            break;
          }

          message.archiveV2 = reader.int32() as any;
          continue;
        }
        case 44: {
          if (tag !== 352) {
            break;
          }

          message.ephemeralAllowGroupMembers = reader.int32() as any;
          continue;
        }
        case 45: {
          if (tag !== 360) {
            break;
          }

          message.ephemeral24HDuration = reader.int32() as any;
          continue;
        }
        case 46: {
          if (tag !== 368) {
            break;
          }

          message.mdForceUpgrade = reader.int32() as any;
          continue;
        }
        case 47: {
          if (tag !== 376) {
            break;
          }

          message.disappearingMode = reader.int32() as any;
          continue;
        }
        case 48: {
          if (tag !== 384) {
            break;
          }

          message.externalMdOptInAvailable = reader.int32() as any;
          continue;
        }
        case 49: {
          if (tag !== 392) {
            break;
          }

          message.noDeleteMessageTimeLimit = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebFeatures {
    return {
      labelsDisplay: isSet(object.labelsDisplay) ? webFeatures_FlagFromJSON(object.labelsDisplay) : undefined,
      voipIndividualOutgoing: isSet(object.voipIndividualOutgoing)
        ? webFeatures_FlagFromJSON(object.voipIndividualOutgoing)
        : undefined,
      groupsV3: isSet(object.groupsV3) ? webFeatures_FlagFromJSON(object.groupsV3) : undefined,
      groupsV3Create: isSet(object.groupsV3Create) ? webFeatures_FlagFromJSON(object.groupsV3Create) : undefined,
      changeNumberV2: isSet(object.changeNumberV2) ? webFeatures_FlagFromJSON(object.changeNumberV2) : undefined,
      queryStatusV3Thumbnail: isSet(object.queryStatusV3Thumbnail)
        ? webFeatures_FlagFromJSON(object.queryStatusV3Thumbnail)
        : undefined,
      liveLocations: isSet(object.liveLocations) ? webFeatures_FlagFromJSON(object.liveLocations) : undefined,
      queryVname: isSet(object.queryVname) ? webFeatures_FlagFromJSON(object.queryVname) : undefined,
      voipIndividualIncoming: isSet(object.voipIndividualIncoming)
        ? webFeatures_FlagFromJSON(object.voipIndividualIncoming)
        : undefined,
      quickRepliesQuery: isSet(object.quickRepliesQuery)
        ? webFeatures_FlagFromJSON(object.quickRepliesQuery)
        : undefined,
      payments: isSet(object.payments) ? webFeatures_FlagFromJSON(object.payments) : undefined,
      stickerPackQuery: isSet(object.stickerPackQuery) ? webFeatures_FlagFromJSON(object.stickerPackQuery) : undefined,
      liveLocationsFinal: isSet(object.liveLocationsFinal)
        ? webFeatures_FlagFromJSON(object.liveLocationsFinal)
        : undefined,
      labelsEdit: isSet(object.labelsEdit) ? webFeatures_FlagFromJSON(object.labelsEdit) : undefined,
      mediaUpload: isSet(object.mediaUpload) ? webFeatures_FlagFromJSON(object.mediaUpload) : undefined,
      mediaUploadRichQuickReplies: isSet(object.mediaUploadRichQuickReplies)
        ? webFeatures_FlagFromJSON(object.mediaUploadRichQuickReplies)
        : undefined,
      vnameV2: isSet(object.vnameV2) ? webFeatures_FlagFromJSON(object.vnameV2) : undefined,
      videoPlaybackUrl: isSet(object.videoPlaybackUrl) ? webFeatures_FlagFromJSON(object.videoPlaybackUrl) : undefined,
      statusRanking: isSet(object.statusRanking) ? webFeatures_FlagFromJSON(object.statusRanking) : undefined,
      voipIndividualVideo: isSet(object.voipIndividualVideo)
        ? webFeatures_FlagFromJSON(object.voipIndividualVideo)
        : undefined,
      thirdPartyStickers: isSet(object.thirdPartyStickers)
        ? webFeatures_FlagFromJSON(object.thirdPartyStickers)
        : undefined,
      frequentlyForwardedSetting: isSet(object.frequentlyForwardedSetting)
        ? webFeatures_FlagFromJSON(object.frequentlyForwardedSetting)
        : undefined,
      groupsV4JoinPermission: isSet(object.groupsV4JoinPermission)
        ? webFeatures_FlagFromJSON(object.groupsV4JoinPermission)
        : undefined,
      recentStickers: isSet(object.recentStickers) ? webFeatures_FlagFromJSON(object.recentStickers) : undefined,
      catalog: isSet(object.catalog) ? webFeatures_FlagFromJSON(object.catalog) : undefined,
      starredStickers: isSet(object.starredStickers) ? webFeatures_FlagFromJSON(object.starredStickers) : undefined,
      voipGroupCall: isSet(object.voipGroupCall) ? webFeatures_FlagFromJSON(object.voipGroupCall) : undefined,
      templateMessage: isSet(object.templateMessage) ? webFeatures_FlagFromJSON(object.templateMessage) : undefined,
      templateMessageInteractivity: isSet(object.templateMessageInteractivity)
        ? webFeatures_FlagFromJSON(object.templateMessageInteractivity)
        : undefined,
      ephemeralMessages: isSet(object.ephemeralMessages)
        ? webFeatures_FlagFromJSON(object.ephemeralMessages)
        : undefined,
      e2ENotificationSync: isSet(object.e2ENotificationSync)
        ? webFeatures_FlagFromJSON(object.e2ENotificationSync)
        : undefined,
      recentStickersV2: isSet(object.recentStickersV2) ? webFeatures_FlagFromJSON(object.recentStickersV2) : undefined,
      recentStickersV3: isSet(object.recentStickersV3) ? webFeatures_FlagFromJSON(object.recentStickersV3) : undefined,
      userNotice: isSet(object.userNotice) ? webFeatures_FlagFromJSON(object.userNotice) : undefined,
      support: isSet(object.support) ? webFeatures_FlagFromJSON(object.support) : undefined,
      groupUiiCleanup: isSet(object.groupUiiCleanup) ? webFeatures_FlagFromJSON(object.groupUiiCleanup) : undefined,
      groupDogfoodingInternalOnly: isSet(object.groupDogfoodingInternalOnly)
        ? webFeatures_FlagFromJSON(object.groupDogfoodingInternalOnly)
        : undefined,
      settingsSync: isSet(object.settingsSync) ? webFeatures_FlagFromJSON(object.settingsSync) : undefined,
      archiveV2: isSet(object.archiveV2) ? webFeatures_FlagFromJSON(object.archiveV2) : undefined,
      ephemeralAllowGroupMembers: isSet(object.ephemeralAllowGroupMembers)
        ? webFeatures_FlagFromJSON(object.ephemeralAllowGroupMembers)
        : undefined,
      ephemeral24HDuration: isSet(object.ephemeral24HDuration)
        ? webFeatures_FlagFromJSON(object.ephemeral24HDuration)
        : undefined,
      mdForceUpgrade: isSet(object.mdForceUpgrade) ? webFeatures_FlagFromJSON(object.mdForceUpgrade) : undefined,
      disappearingMode: isSet(object.disappearingMode) ? webFeatures_FlagFromJSON(object.disappearingMode) : undefined,
      externalMdOptInAvailable: isSet(object.externalMdOptInAvailable)
        ? webFeatures_FlagFromJSON(object.externalMdOptInAvailable)
        : undefined,
      noDeleteMessageTimeLimit: isSet(object.noDeleteMessageTimeLimit)
        ? webFeatures_FlagFromJSON(object.noDeleteMessageTimeLimit)
        : undefined,
    };
  },

  toJSON(message: WebFeatures): unknown {
    const obj: any = {};
    if (message.labelsDisplay !== undefined) {
      obj.labelsDisplay = webFeatures_FlagToJSON(message.labelsDisplay);
    }
    if (message.voipIndividualOutgoing !== undefined) {
      obj.voipIndividualOutgoing = webFeatures_FlagToJSON(message.voipIndividualOutgoing);
    }
    if (message.groupsV3 !== undefined) {
      obj.groupsV3 = webFeatures_FlagToJSON(message.groupsV3);
    }
    if (message.groupsV3Create !== undefined) {
      obj.groupsV3Create = webFeatures_FlagToJSON(message.groupsV3Create);
    }
    if (message.changeNumberV2 !== undefined) {
      obj.changeNumberV2 = webFeatures_FlagToJSON(message.changeNumberV2);
    }
    if (message.queryStatusV3Thumbnail !== undefined) {
      obj.queryStatusV3Thumbnail = webFeatures_FlagToJSON(message.queryStatusV3Thumbnail);
    }
    if (message.liveLocations !== undefined) {
      obj.liveLocations = webFeatures_FlagToJSON(message.liveLocations);
    }
    if (message.queryVname !== undefined) {
      obj.queryVname = webFeatures_FlagToJSON(message.queryVname);
    }
    if (message.voipIndividualIncoming !== undefined) {
      obj.voipIndividualIncoming = webFeatures_FlagToJSON(message.voipIndividualIncoming);
    }
    if (message.quickRepliesQuery !== undefined) {
      obj.quickRepliesQuery = webFeatures_FlagToJSON(message.quickRepliesQuery);
    }
    if (message.payments !== undefined) {
      obj.payments = webFeatures_FlagToJSON(message.payments);
    }
    if (message.stickerPackQuery !== undefined) {
      obj.stickerPackQuery = webFeatures_FlagToJSON(message.stickerPackQuery);
    }
    if (message.liveLocationsFinal !== undefined) {
      obj.liveLocationsFinal = webFeatures_FlagToJSON(message.liveLocationsFinal);
    }
    if (message.labelsEdit !== undefined) {
      obj.labelsEdit = webFeatures_FlagToJSON(message.labelsEdit);
    }
    if (message.mediaUpload !== undefined) {
      obj.mediaUpload = webFeatures_FlagToJSON(message.mediaUpload);
    }
    if (message.mediaUploadRichQuickReplies !== undefined) {
      obj.mediaUploadRichQuickReplies = webFeatures_FlagToJSON(message.mediaUploadRichQuickReplies);
    }
    if (message.vnameV2 !== undefined) {
      obj.vnameV2 = webFeatures_FlagToJSON(message.vnameV2);
    }
    if (message.videoPlaybackUrl !== undefined) {
      obj.videoPlaybackUrl = webFeatures_FlagToJSON(message.videoPlaybackUrl);
    }
    if (message.statusRanking !== undefined) {
      obj.statusRanking = webFeatures_FlagToJSON(message.statusRanking);
    }
    if (message.voipIndividualVideo !== undefined) {
      obj.voipIndividualVideo = webFeatures_FlagToJSON(message.voipIndividualVideo);
    }
    if (message.thirdPartyStickers !== undefined) {
      obj.thirdPartyStickers = webFeatures_FlagToJSON(message.thirdPartyStickers);
    }
    if (message.frequentlyForwardedSetting !== undefined) {
      obj.frequentlyForwardedSetting = webFeatures_FlagToJSON(message.frequentlyForwardedSetting);
    }
    if (message.groupsV4JoinPermission !== undefined) {
      obj.groupsV4JoinPermission = webFeatures_FlagToJSON(message.groupsV4JoinPermission);
    }
    if (message.recentStickers !== undefined) {
      obj.recentStickers = webFeatures_FlagToJSON(message.recentStickers);
    }
    if (message.catalog !== undefined) {
      obj.catalog = webFeatures_FlagToJSON(message.catalog);
    }
    if (message.starredStickers !== undefined) {
      obj.starredStickers = webFeatures_FlagToJSON(message.starredStickers);
    }
    if (message.voipGroupCall !== undefined) {
      obj.voipGroupCall = webFeatures_FlagToJSON(message.voipGroupCall);
    }
    if (message.templateMessage !== undefined) {
      obj.templateMessage = webFeatures_FlagToJSON(message.templateMessage);
    }
    if (message.templateMessageInteractivity !== undefined) {
      obj.templateMessageInteractivity = webFeatures_FlagToJSON(message.templateMessageInteractivity);
    }
    if (message.ephemeralMessages !== undefined) {
      obj.ephemeralMessages = webFeatures_FlagToJSON(message.ephemeralMessages);
    }
    if (message.e2ENotificationSync !== undefined) {
      obj.e2ENotificationSync = webFeatures_FlagToJSON(message.e2ENotificationSync);
    }
    if (message.recentStickersV2 !== undefined) {
      obj.recentStickersV2 = webFeatures_FlagToJSON(message.recentStickersV2);
    }
    if (message.recentStickersV3 !== undefined) {
      obj.recentStickersV3 = webFeatures_FlagToJSON(message.recentStickersV3);
    }
    if (message.userNotice !== undefined) {
      obj.userNotice = webFeatures_FlagToJSON(message.userNotice);
    }
    if (message.support !== undefined) {
      obj.support = webFeatures_FlagToJSON(message.support);
    }
    if (message.groupUiiCleanup !== undefined) {
      obj.groupUiiCleanup = webFeatures_FlagToJSON(message.groupUiiCleanup);
    }
    if (message.groupDogfoodingInternalOnly !== undefined) {
      obj.groupDogfoodingInternalOnly = webFeatures_FlagToJSON(message.groupDogfoodingInternalOnly);
    }
    if (message.settingsSync !== undefined) {
      obj.settingsSync = webFeatures_FlagToJSON(message.settingsSync);
    }
    if (message.archiveV2 !== undefined) {
      obj.archiveV2 = webFeatures_FlagToJSON(message.archiveV2);
    }
    if (message.ephemeralAllowGroupMembers !== undefined) {
      obj.ephemeralAllowGroupMembers = webFeatures_FlagToJSON(message.ephemeralAllowGroupMembers);
    }
    if (message.ephemeral24HDuration !== undefined) {
      obj.ephemeral24HDuration = webFeatures_FlagToJSON(message.ephemeral24HDuration);
    }
    if (message.mdForceUpgrade !== undefined) {
      obj.mdForceUpgrade = webFeatures_FlagToJSON(message.mdForceUpgrade);
    }
    if (message.disappearingMode !== undefined) {
      obj.disappearingMode = webFeatures_FlagToJSON(message.disappearingMode);
    }
    if (message.externalMdOptInAvailable !== undefined) {
      obj.externalMdOptInAvailable = webFeatures_FlagToJSON(message.externalMdOptInAvailable);
    }
    if (message.noDeleteMessageTimeLimit !== undefined) {
      obj.noDeleteMessageTimeLimit = webFeatures_FlagToJSON(message.noDeleteMessageTimeLimit);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebFeatures>, I>>(base?: I): WebFeatures {
    return WebFeatures.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebFeatures>, I>>(object: I): WebFeatures {
    const message = createBaseWebFeatures();
    message.labelsDisplay = object.labelsDisplay ?? undefined;
    message.voipIndividualOutgoing = object.voipIndividualOutgoing ?? undefined;
    message.groupsV3 = object.groupsV3 ?? undefined;
    message.groupsV3Create = object.groupsV3Create ?? undefined;
    message.changeNumberV2 = object.changeNumberV2 ?? undefined;
    message.queryStatusV3Thumbnail = object.queryStatusV3Thumbnail ?? undefined;
    message.liveLocations = object.liveLocations ?? undefined;
    message.queryVname = object.queryVname ?? undefined;
    message.voipIndividualIncoming = object.voipIndividualIncoming ?? undefined;
    message.quickRepliesQuery = object.quickRepliesQuery ?? undefined;
    message.payments = object.payments ?? undefined;
    message.stickerPackQuery = object.stickerPackQuery ?? undefined;
    message.liveLocationsFinal = object.liveLocationsFinal ?? undefined;
    message.labelsEdit = object.labelsEdit ?? undefined;
    message.mediaUpload = object.mediaUpload ?? undefined;
    message.mediaUploadRichQuickReplies = object.mediaUploadRichQuickReplies ?? undefined;
    message.vnameV2 = object.vnameV2 ?? undefined;
    message.videoPlaybackUrl = object.videoPlaybackUrl ?? undefined;
    message.statusRanking = object.statusRanking ?? undefined;
    message.voipIndividualVideo = object.voipIndividualVideo ?? undefined;
    message.thirdPartyStickers = object.thirdPartyStickers ?? undefined;
    message.frequentlyForwardedSetting = object.frequentlyForwardedSetting ?? undefined;
    message.groupsV4JoinPermission = object.groupsV4JoinPermission ?? undefined;
    message.recentStickers = object.recentStickers ?? undefined;
    message.catalog = object.catalog ?? undefined;
    message.starredStickers = object.starredStickers ?? undefined;
    message.voipGroupCall = object.voipGroupCall ?? undefined;
    message.templateMessage = object.templateMessage ?? undefined;
    message.templateMessageInteractivity = object.templateMessageInteractivity ?? undefined;
    message.ephemeralMessages = object.ephemeralMessages ?? undefined;
    message.e2ENotificationSync = object.e2ENotificationSync ?? undefined;
    message.recentStickersV2 = object.recentStickersV2 ?? undefined;
    message.recentStickersV3 = object.recentStickersV3 ?? undefined;
    message.userNotice = object.userNotice ?? undefined;
    message.support = object.support ?? undefined;
    message.groupUiiCleanup = object.groupUiiCleanup ?? undefined;
    message.groupDogfoodingInternalOnly = object.groupDogfoodingInternalOnly ?? undefined;
    message.settingsSync = object.settingsSync ?? undefined;
    message.archiveV2 = object.archiveV2 ?? undefined;
    message.ephemeralAllowGroupMembers = object.ephemeralAllowGroupMembers ?? undefined;
    message.ephemeral24HDuration = object.ephemeral24HDuration ?? undefined;
    message.mdForceUpgrade = object.mdForceUpgrade ?? undefined;
    message.disappearingMode = object.disappearingMode ?? undefined;
    message.externalMdOptInAvailable = object.externalMdOptInAvailable ?? undefined;
    message.noDeleteMessageTimeLimit = object.noDeleteMessageTimeLimit ?? undefined;
    return message;
  },
};

function createBaseWebMessageInfo(): WebMessageInfo {
  return {
    key: undefined,
    message: undefined,
    messageTimestamp: undefined,
    status: undefined,
    participant: undefined,
    messageC2STimestamp: undefined,
    ignore: undefined,
    starred: undefined,
    broadcast: undefined,
    pushName: undefined,
    mediaCiphertextSha256: undefined,
    multicast: undefined,
    urlText: undefined,
    urlNumber: undefined,
    messageStubType: undefined,
    clearMedia: undefined,
    messageStubParameters: [],
    duration: undefined,
    labels: [],
    paymentInfo: undefined,
    finalLiveLocation: undefined,
    quotedPaymentInfo: undefined,
    ephemeralStartTimestamp: undefined,
    ephemeralDuration: undefined,
    ephemeralOffToOn: undefined,
    ephemeralOutOfSync: undefined,
    bizPrivacyStatus: undefined,
    verifiedBizName: undefined,
    mediaData: undefined,
    photoChange: undefined,
    userReceipt: [],
    reactions: [],
    quotedStickerData: undefined,
    futureproofData: undefined,
    statusPsa: undefined,
    pollUpdates: [],
    pollAdditionalMetadata: undefined,
    agentId: undefined,
    statusAlreadyViewed: undefined,
    messageSecret: undefined,
    keepInChat: undefined,
    originalSelfAuthorUserJidString: undefined,
    revokeMessageTimestamp: undefined,
    pinInChat: undefined,
    premiumMessageInfo: undefined,
    is1PBizBotMessage: undefined,
    isGroupHistoryMessage: undefined,
    botMessageInvokerJid: undefined,
    commentMetadata: undefined,
    eventResponses: [],
    reportingTokenInfo: undefined,
    newsletterServerId: undefined,
    eventAdditionalMetadata: undefined,
    isMentionedInStatus: undefined,
    statusMentions: [],
    targetMessageId: undefined,
    messageAddOns: [],
    statusMentionMessageInfo: undefined,
    isSupportAiMessage: undefined,
    statusMentionSources: [],
    supportAiCitations: [],
    botTargetId: undefined,
  };
}

export const WebMessageInfo: MessageFns<WebMessageInfo> = {
  encode(message: WebMessageInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined) {
      MessageKey.encode(message.key, writer.uint32(10).fork()).join();
    }
    if (message.message !== undefined) {
      Message.encode(message.message, writer.uint32(18).fork()).join();
    }
    if (message.messageTimestamp !== undefined) {
      writer.uint32(24).uint64(message.messageTimestamp);
    }
    if (message.status !== undefined) {
      writer.uint32(32).int32(message.status);
    }
    if (message.participant !== undefined) {
      writer.uint32(42).string(message.participant);
    }
    if (message.messageC2STimestamp !== undefined) {
      writer.uint32(48).uint64(message.messageC2STimestamp);
    }
    if (message.ignore !== undefined) {
      writer.uint32(128).bool(message.ignore);
    }
    if (message.starred !== undefined) {
      writer.uint32(136).bool(message.starred);
    }
    if (message.broadcast !== undefined) {
      writer.uint32(144).bool(message.broadcast);
    }
    if (message.pushName !== undefined) {
      writer.uint32(154).string(message.pushName);
    }
    if (message.mediaCiphertextSha256 !== undefined) {
      writer.uint32(162).bytes(message.mediaCiphertextSha256);
    }
    if (message.multicast !== undefined) {
      writer.uint32(168).bool(message.multicast);
    }
    if (message.urlText !== undefined) {
      writer.uint32(176).bool(message.urlText);
    }
    if (message.urlNumber !== undefined) {
      writer.uint32(184).bool(message.urlNumber);
    }
    if (message.messageStubType !== undefined) {
      writer.uint32(192).int32(message.messageStubType);
    }
    if (message.clearMedia !== undefined) {
      writer.uint32(200).bool(message.clearMedia);
    }
    for (const v of message.messageStubParameters) {
      writer.uint32(210).string(v!);
    }
    if (message.duration !== undefined) {
      writer.uint32(216).uint32(message.duration);
    }
    for (const v of message.labels) {
      writer.uint32(226).string(v!);
    }
    if (message.paymentInfo !== undefined) {
      PaymentInfo.encode(message.paymentInfo, writer.uint32(234).fork()).join();
    }
    if (message.finalLiveLocation !== undefined) {
      Message_LiveLocationMessage.encode(message.finalLiveLocation, writer.uint32(242).fork()).join();
    }
    if (message.quotedPaymentInfo !== undefined) {
      PaymentInfo.encode(message.quotedPaymentInfo, writer.uint32(250).fork()).join();
    }
    if (message.ephemeralStartTimestamp !== undefined) {
      writer.uint32(256).uint64(message.ephemeralStartTimestamp);
    }
    if (message.ephemeralDuration !== undefined) {
      writer.uint32(264).uint32(message.ephemeralDuration);
    }
    if (message.ephemeralOffToOn !== undefined) {
      writer.uint32(272).bool(message.ephemeralOffToOn);
    }
    if (message.ephemeralOutOfSync !== undefined) {
      writer.uint32(280).bool(message.ephemeralOutOfSync);
    }
    if (message.bizPrivacyStatus !== undefined) {
      writer.uint32(288).int32(message.bizPrivacyStatus);
    }
    if (message.verifiedBizName !== undefined) {
      writer.uint32(298).string(message.verifiedBizName);
    }
    if (message.mediaData !== undefined) {
      MediaData.encode(message.mediaData, writer.uint32(306).fork()).join();
    }
    if (message.photoChange !== undefined) {
      PhotoChange.encode(message.photoChange, writer.uint32(314).fork()).join();
    }
    for (const v of message.userReceipt) {
      UserReceipt.encode(v!, writer.uint32(322).fork()).join();
    }
    for (const v of message.reactions) {
      Reaction.encode(v!, writer.uint32(330).fork()).join();
    }
    if (message.quotedStickerData !== undefined) {
      MediaData.encode(message.quotedStickerData, writer.uint32(338).fork()).join();
    }
    if (message.futureproofData !== undefined) {
      writer.uint32(346).bytes(message.futureproofData);
    }
    if (message.statusPsa !== undefined) {
      StatusPSA.encode(message.statusPsa, writer.uint32(354).fork()).join();
    }
    for (const v of message.pollUpdates) {
      PollUpdate.encode(v!, writer.uint32(362).fork()).join();
    }
    if (message.pollAdditionalMetadata !== undefined) {
      PollAdditionalMetadata.encode(message.pollAdditionalMetadata, writer.uint32(370).fork()).join();
    }
    if (message.agentId !== undefined) {
      writer.uint32(378).string(message.agentId);
    }
    if (message.statusAlreadyViewed !== undefined) {
      writer.uint32(384).bool(message.statusAlreadyViewed);
    }
    if (message.messageSecret !== undefined) {
      writer.uint32(394).bytes(message.messageSecret);
    }
    if (message.keepInChat !== undefined) {
      KeepInChat.encode(message.keepInChat, writer.uint32(402).fork()).join();
    }
    if (message.originalSelfAuthorUserJidString !== undefined) {
      writer.uint32(410).string(message.originalSelfAuthorUserJidString);
    }
    if (message.revokeMessageTimestamp !== undefined) {
      writer.uint32(416).uint64(message.revokeMessageTimestamp);
    }
    if (message.pinInChat !== undefined) {
      PinInChat.encode(message.pinInChat, writer.uint32(434).fork()).join();
    }
    if (message.premiumMessageInfo !== undefined) {
      PremiumMessageInfo.encode(message.premiumMessageInfo, writer.uint32(442).fork()).join();
    }
    if (message.is1PBizBotMessage !== undefined) {
      writer.uint32(448).bool(message.is1PBizBotMessage);
    }
    if (message.isGroupHistoryMessage !== undefined) {
      writer.uint32(456).bool(message.isGroupHistoryMessage);
    }
    if (message.botMessageInvokerJid !== undefined) {
      writer.uint32(466).string(message.botMessageInvokerJid);
    }
    if (message.commentMetadata !== undefined) {
      CommentMetadata.encode(message.commentMetadata, writer.uint32(474).fork()).join();
    }
    for (const v of message.eventResponses) {
      EventResponse.encode(v!, writer.uint32(490).fork()).join();
    }
    if (message.reportingTokenInfo !== undefined) {
      ReportingTokenInfo.encode(message.reportingTokenInfo, writer.uint32(498).fork()).join();
    }
    if (message.newsletterServerId !== undefined) {
      writer.uint32(504).uint64(message.newsletterServerId);
    }
    if (message.eventAdditionalMetadata !== undefined) {
      EventAdditionalMetadata.encode(message.eventAdditionalMetadata, writer.uint32(514).fork()).join();
    }
    if (message.isMentionedInStatus !== undefined) {
      writer.uint32(520).bool(message.isMentionedInStatus);
    }
    for (const v of message.statusMentions) {
      writer.uint32(530).string(v!);
    }
    if (message.targetMessageId !== undefined) {
      MessageKey.encode(message.targetMessageId, writer.uint32(538).fork()).join();
    }
    for (const v of message.messageAddOns) {
      MessageAddOn.encode(v!, writer.uint32(546).fork()).join();
    }
    if (message.statusMentionMessageInfo !== undefined) {
      StatusMentionMessage.encode(message.statusMentionMessageInfo, writer.uint32(554).fork()).join();
    }
    if (message.isSupportAiMessage !== undefined) {
      writer.uint32(560).bool(message.isSupportAiMessage);
    }
    for (const v of message.statusMentionSources) {
      writer.uint32(570).string(v!);
    }
    for (const v of message.supportAiCitations) {
      Citation.encode(v!, writer.uint32(578).fork()).join();
    }
    if (message.botTargetId !== undefined) {
      writer.uint32(586).string(message.botTargetId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebMessageInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebMessageInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = Message.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.messageTimestamp = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.participant = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.messageC2STimestamp = longToNumber(reader.uint64());
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.ignore = reader.bool();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.starred = reader.bool();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.broadcast = reader.bool();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.pushName = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.mediaCiphertextSha256 = reader.bytes();
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.multicast = reader.bool();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.urlText = reader.bool();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.urlNumber = reader.bool();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.messageStubType = reader.int32() as any;
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.clearMedia = reader.bool();
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.messageStubParameters.push(reader.string());
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.duration = reader.uint32();
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.labels.push(reader.string());
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.paymentInfo = PaymentInfo.decode(reader, reader.uint32());
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.finalLiveLocation = Message_LiveLocationMessage.decode(reader, reader.uint32());
          continue;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.quotedPaymentInfo = PaymentInfo.decode(reader, reader.uint32());
          continue;
        }
        case 32: {
          if (tag !== 256) {
            break;
          }

          message.ephemeralStartTimestamp = longToNumber(reader.uint64());
          continue;
        }
        case 33: {
          if (tag !== 264) {
            break;
          }

          message.ephemeralDuration = reader.uint32();
          continue;
        }
        case 34: {
          if (tag !== 272) {
            break;
          }

          message.ephemeralOffToOn = reader.bool();
          continue;
        }
        case 35: {
          if (tag !== 280) {
            break;
          }

          message.ephemeralOutOfSync = reader.bool();
          continue;
        }
        case 36: {
          if (tag !== 288) {
            break;
          }

          message.bizPrivacyStatus = reader.int32() as any;
          continue;
        }
        case 37: {
          if (tag !== 298) {
            break;
          }

          message.verifiedBizName = reader.string();
          continue;
        }
        case 38: {
          if (tag !== 306) {
            break;
          }

          message.mediaData = MediaData.decode(reader, reader.uint32());
          continue;
        }
        case 39: {
          if (tag !== 314) {
            break;
          }

          message.photoChange = PhotoChange.decode(reader, reader.uint32());
          continue;
        }
        case 40: {
          if (tag !== 322) {
            break;
          }

          message.userReceipt.push(UserReceipt.decode(reader, reader.uint32()));
          continue;
        }
        case 41: {
          if (tag !== 330) {
            break;
          }

          message.reactions.push(Reaction.decode(reader, reader.uint32()));
          continue;
        }
        case 42: {
          if (tag !== 338) {
            break;
          }

          message.quotedStickerData = MediaData.decode(reader, reader.uint32());
          continue;
        }
        case 43: {
          if (tag !== 346) {
            break;
          }

          message.futureproofData = reader.bytes();
          continue;
        }
        case 44: {
          if (tag !== 354) {
            break;
          }

          message.statusPsa = StatusPSA.decode(reader, reader.uint32());
          continue;
        }
        case 45: {
          if (tag !== 362) {
            break;
          }

          message.pollUpdates.push(PollUpdate.decode(reader, reader.uint32()));
          continue;
        }
        case 46: {
          if (tag !== 370) {
            break;
          }

          message.pollAdditionalMetadata = PollAdditionalMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 47: {
          if (tag !== 378) {
            break;
          }

          message.agentId = reader.string();
          continue;
        }
        case 48: {
          if (tag !== 384) {
            break;
          }

          message.statusAlreadyViewed = reader.bool();
          continue;
        }
        case 49: {
          if (tag !== 394) {
            break;
          }

          message.messageSecret = reader.bytes();
          continue;
        }
        case 50: {
          if (tag !== 402) {
            break;
          }

          message.keepInChat = KeepInChat.decode(reader, reader.uint32());
          continue;
        }
        case 51: {
          if (tag !== 410) {
            break;
          }

          message.originalSelfAuthorUserJidString = reader.string();
          continue;
        }
        case 52: {
          if (tag !== 416) {
            break;
          }

          message.revokeMessageTimestamp = longToNumber(reader.uint64());
          continue;
        }
        case 54: {
          if (tag !== 434) {
            break;
          }

          message.pinInChat = PinInChat.decode(reader, reader.uint32());
          continue;
        }
        case 55: {
          if (tag !== 442) {
            break;
          }

          message.premiumMessageInfo = PremiumMessageInfo.decode(reader, reader.uint32());
          continue;
        }
        case 56: {
          if (tag !== 448) {
            break;
          }

          message.is1PBizBotMessage = reader.bool();
          continue;
        }
        case 57: {
          if (tag !== 456) {
            break;
          }

          message.isGroupHistoryMessage = reader.bool();
          continue;
        }
        case 58: {
          if (tag !== 466) {
            break;
          }

          message.botMessageInvokerJid = reader.string();
          continue;
        }
        case 59: {
          if (tag !== 474) {
            break;
          }

          message.commentMetadata = CommentMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 61: {
          if (tag !== 490) {
            break;
          }

          message.eventResponses.push(EventResponse.decode(reader, reader.uint32()));
          continue;
        }
        case 62: {
          if (tag !== 498) {
            break;
          }

          message.reportingTokenInfo = ReportingTokenInfo.decode(reader, reader.uint32());
          continue;
        }
        case 63: {
          if (tag !== 504) {
            break;
          }

          message.newsletterServerId = longToNumber(reader.uint64());
          continue;
        }
        case 64: {
          if (tag !== 514) {
            break;
          }

          message.eventAdditionalMetadata = EventAdditionalMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 65: {
          if (tag !== 520) {
            break;
          }

          message.isMentionedInStatus = reader.bool();
          continue;
        }
        case 66: {
          if (tag !== 530) {
            break;
          }

          message.statusMentions.push(reader.string());
          continue;
        }
        case 67: {
          if (tag !== 538) {
            break;
          }

          message.targetMessageId = MessageKey.decode(reader, reader.uint32());
          continue;
        }
        case 68: {
          if (tag !== 546) {
            break;
          }

          message.messageAddOns.push(MessageAddOn.decode(reader, reader.uint32()));
          continue;
        }
        case 69: {
          if (tag !== 554) {
            break;
          }

          message.statusMentionMessageInfo = StatusMentionMessage.decode(reader, reader.uint32());
          continue;
        }
        case 70: {
          if (tag !== 560) {
            break;
          }

          message.isSupportAiMessage = reader.bool();
          continue;
        }
        case 71: {
          if (tag !== 570) {
            break;
          }

          message.statusMentionSources.push(reader.string());
          continue;
        }
        case 72: {
          if (tag !== 578) {
            break;
          }

          message.supportAiCitations.push(Citation.decode(reader, reader.uint32()));
          continue;
        }
        case 73: {
          if (tag !== 586) {
            break;
          }

          message.botTargetId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebMessageInfo {
    return {
      key: isSet(object.key) ? MessageKey.fromJSON(object.key) : undefined,
      message: isSet(object.message) ? Message.fromJSON(object.message) : undefined,
      messageTimestamp: isSet(object.messageTimestamp) ? globalThis.Number(object.messageTimestamp) : undefined,
      status: isSet(object.status) ? webMessageInfo_StatusFromJSON(object.status) : undefined,
      participant: isSet(object.participant) ? globalThis.String(object.participant) : undefined,
      messageC2STimestamp: isSet(object.messageC2STimestamp)
        ? globalThis.Number(object.messageC2STimestamp)
        : undefined,
      ignore: isSet(object.ignore) ? globalThis.Boolean(object.ignore) : undefined,
      starred: isSet(object.starred) ? globalThis.Boolean(object.starred) : undefined,
      broadcast: isSet(object.broadcast) ? globalThis.Boolean(object.broadcast) : undefined,
      pushName: isSet(object.pushName) ? globalThis.String(object.pushName) : undefined,
      mediaCiphertextSha256: isSet(object.mediaCiphertextSha256)
        ? bytesFromBase64(object.mediaCiphertextSha256)
        : undefined,
      multicast: isSet(object.multicast) ? globalThis.Boolean(object.multicast) : undefined,
      urlText: isSet(object.urlText) ? globalThis.Boolean(object.urlText) : undefined,
      urlNumber: isSet(object.urlNumber) ? globalThis.Boolean(object.urlNumber) : undefined,
      messageStubType: isSet(object.messageStubType)
        ? webMessageInfo_StubTypeFromJSON(object.messageStubType)
        : undefined,
      clearMedia: isSet(object.clearMedia) ? globalThis.Boolean(object.clearMedia) : undefined,
      messageStubParameters: globalThis.Array.isArray(object?.messageStubParameters)
        ? object.messageStubParameters.map((e: any) => globalThis.String(e))
        : [],
      duration: isSet(object.duration) ? globalThis.Number(object.duration) : undefined,
      labels: globalThis.Array.isArray(object?.labels) ? object.labels.map((e: any) => globalThis.String(e)) : [],
      paymentInfo: isSet(object.paymentInfo) ? PaymentInfo.fromJSON(object.paymentInfo) : undefined,
      finalLiveLocation: isSet(object.finalLiveLocation)
        ? Message_LiveLocationMessage.fromJSON(object.finalLiveLocation)
        : undefined,
      quotedPaymentInfo: isSet(object.quotedPaymentInfo) ? PaymentInfo.fromJSON(object.quotedPaymentInfo) : undefined,
      ephemeralStartTimestamp: isSet(object.ephemeralStartTimestamp)
        ? globalThis.Number(object.ephemeralStartTimestamp)
        : undefined,
      ephemeralDuration: isSet(object.ephemeralDuration) ? globalThis.Number(object.ephemeralDuration) : undefined,
      ephemeralOffToOn: isSet(object.ephemeralOffToOn) ? globalThis.Boolean(object.ephemeralOffToOn) : undefined,
      ephemeralOutOfSync: isSet(object.ephemeralOutOfSync) ? globalThis.Boolean(object.ephemeralOutOfSync) : undefined,
      bizPrivacyStatus: isSet(object.bizPrivacyStatus)
        ? webMessageInfo_BizPrivacyStatusFromJSON(object.bizPrivacyStatus)
        : undefined,
      verifiedBizName: isSet(object.verifiedBizName) ? globalThis.String(object.verifiedBizName) : undefined,
      mediaData: isSet(object.mediaData) ? MediaData.fromJSON(object.mediaData) : undefined,
      photoChange: isSet(object.photoChange) ? PhotoChange.fromJSON(object.photoChange) : undefined,
      userReceipt: globalThis.Array.isArray(object?.userReceipt)
        ? object.userReceipt.map((e: any) => UserReceipt.fromJSON(e))
        : [],
      reactions: globalThis.Array.isArray(object?.reactions)
        ? object.reactions.map((e: any) => Reaction.fromJSON(e))
        : [],
      quotedStickerData: isSet(object.quotedStickerData) ? MediaData.fromJSON(object.quotedStickerData) : undefined,
      futureproofData: isSet(object.futureproofData) ? bytesFromBase64(object.futureproofData) : undefined,
      statusPsa: isSet(object.statusPsa) ? StatusPSA.fromJSON(object.statusPsa) : undefined,
      pollUpdates: globalThis.Array.isArray(object?.pollUpdates)
        ? object.pollUpdates.map((e: any) => PollUpdate.fromJSON(e))
        : [],
      pollAdditionalMetadata: isSet(object.pollAdditionalMetadata)
        ? PollAdditionalMetadata.fromJSON(object.pollAdditionalMetadata)
        : undefined,
      agentId: isSet(object.agentId) ? globalThis.String(object.agentId) : undefined,
      statusAlreadyViewed: isSet(object.statusAlreadyViewed)
        ? globalThis.Boolean(object.statusAlreadyViewed)
        : undefined,
      messageSecret: isSet(object.messageSecret) ? bytesFromBase64(object.messageSecret) : undefined,
      keepInChat: isSet(object.keepInChat) ? KeepInChat.fromJSON(object.keepInChat) : undefined,
      originalSelfAuthorUserJidString: isSet(object.originalSelfAuthorUserJidString)
        ? globalThis.String(object.originalSelfAuthorUserJidString)
        : undefined,
      revokeMessageTimestamp: isSet(object.revokeMessageTimestamp)
        ? globalThis.Number(object.revokeMessageTimestamp)
        : undefined,
      pinInChat: isSet(object.pinInChat) ? PinInChat.fromJSON(object.pinInChat) : undefined,
      premiumMessageInfo: isSet(object.premiumMessageInfo)
        ? PremiumMessageInfo.fromJSON(object.premiumMessageInfo)
        : undefined,
      is1PBizBotMessage: isSet(object.is1PBizBotMessage) ? globalThis.Boolean(object.is1PBizBotMessage) : undefined,
      isGroupHistoryMessage: isSet(object.isGroupHistoryMessage)
        ? globalThis.Boolean(object.isGroupHistoryMessage)
        : undefined,
      botMessageInvokerJid: isSet(object.botMessageInvokerJid)
        ? globalThis.String(object.botMessageInvokerJid)
        : undefined,
      commentMetadata: isSet(object.commentMetadata) ? CommentMetadata.fromJSON(object.commentMetadata) : undefined,
      eventResponses: globalThis.Array.isArray(object?.eventResponses)
        ? object.eventResponses.map((e: any) => EventResponse.fromJSON(e))
        : [],
      reportingTokenInfo: isSet(object.reportingTokenInfo)
        ? ReportingTokenInfo.fromJSON(object.reportingTokenInfo)
        : undefined,
      newsletterServerId: isSet(object.newsletterServerId) ? globalThis.Number(object.newsletterServerId) : undefined,
      eventAdditionalMetadata: isSet(object.eventAdditionalMetadata)
        ? EventAdditionalMetadata.fromJSON(object.eventAdditionalMetadata)
        : undefined,
      isMentionedInStatus: isSet(object.isMentionedInStatus)
        ? globalThis.Boolean(object.isMentionedInStatus)
        : undefined,
      statusMentions: globalThis.Array.isArray(object?.statusMentions)
        ? object.statusMentions.map((e: any) => globalThis.String(e))
        : [],
      targetMessageId: isSet(object.targetMessageId) ? MessageKey.fromJSON(object.targetMessageId) : undefined,
      messageAddOns: globalThis.Array.isArray(object?.messageAddOns)
        ? object.messageAddOns.map((e: any) => MessageAddOn.fromJSON(e))
        : [],
      statusMentionMessageInfo: isSet(object.statusMentionMessageInfo)
        ? StatusMentionMessage.fromJSON(object.statusMentionMessageInfo)
        : undefined,
      isSupportAiMessage: isSet(object.isSupportAiMessage) ? globalThis.Boolean(object.isSupportAiMessage) : undefined,
      statusMentionSources: globalThis.Array.isArray(object?.statusMentionSources)
        ? object.statusMentionSources.map((e: any) => globalThis.String(e))
        : [],
      supportAiCitations: globalThis.Array.isArray(object?.supportAiCitations)
        ? object.supportAiCitations.map((e: any) => Citation.fromJSON(e))
        : [],
      botTargetId: isSet(object.botTargetId) ? globalThis.String(object.botTargetId) : undefined,
    };
  },

  toJSON(message: WebMessageInfo): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = MessageKey.toJSON(message.key);
    }
    if (message.message !== undefined) {
      obj.message = Message.toJSON(message.message);
    }
    if (message.messageTimestamp !== undefined) {
      obj.messageTimestamp = Math.round(message.messageTimestamp);
    }
    if (message.status !== undefined) {
      obj.status = webMessageInfo_StatusToJSON(message.status);
    }
    if (message.participant !== undefined) {
      obj.participant = message.participant;
    }
    if (message.messageC2STimestamp !== undefined) {
      obj.messageC2STimestamp = Math.round(message.messageC2STimestamp);
    }
    if (message.ignore !== undefined) {
      obj.ignore = message.ignore;
    }
    if (message.starred !== undefined) {
      obj.starred = message.starred;
    }
    if (message.broadcast !== undefined) {
      obj.broadcast = message.broadcast;
    }
    if (message.pushName !== undefined) {
      obj.pushName = message.pushName;
    }
    if (message.mediaCiphertextSha256 !== undefined) {
      obj.mediaCiphertextSha256 = base64FromBytes(message.mediaCiphertextSha256);
    }
    if (message.multicast !== undefined) {
      obj.multicast = message.multicast;
    }
    if (message.urlText !== undefined) {
      obj.urlText = message.urlText;
    }
    if (message.urlNumber !== undefined) {
      obj.urlNumber = message.urlNumber;
    }
    if (message.messageStubType !== undefined) {
      obj.messageStubType = webMessageInfo_StubTypeToJSON(message.messageStubType);
    }
    if (message.clearMedia !== undefined) {
      obj.clearMedia = message.clearMedia;
    }
    if (message.messageStubParameters?.length) {
      obj.messageStubParameters = message.messageStubParameters;
    }
    if (message.duration !== undefined) {
      obj.duration = Math.round(message.duration);
    }
    if (message.labels?.length) {
      obj.labels = message.labels;
    }
    if (message.paymentInfo !== undefined) {
      obj.paymentInfo = PaymentInfo.toJSON(message.paymentInfo);
    }
    if (message.finalLiveLocation !== undefined) {
      obj.finalLiveLocation = Message_LiveLocationMessage.toJSON(message.finalLiveLocation);
    }
    if (message.quotedPaymentInfo !== undefined) {
      obj.quotedPaymentInfo = PaymentInfo.toJSON(message.quotedPaymentInfo);
    }
    if (message.ephemeralStartTimestamp !== undefined) {
      obj.ephemeralStartTimestamp = Math.round(message.ephemeralStartTimestamp);
    }
    if (message.ephemeralDuration !== undefined) {
      obj.ephemeralDuration = Math.round(message.ephemeralDuration);
    }
    if (message.ephemeralOffToOn !== undefined) {
      obj.ephemeralOffToOn = message.ephemeralOffToOn;
    }
    if (message.ephemeralOutOfSync !== undefined) {
      obj.ephemeralOutOfSync = message.ephemeralOutOfSync;
    }
    if (message.bizPrivacyStatus !== undefined) {
      obj.bizPrivacyStatus = webMessageInfo_BizPrivacyStatusToJSON(message.bizPrivacyStatus);
    }
    if (message.verifiedBizName !== undefined) {
      obj.verifiedBizName = message.verifiedBizName;
    }
    if (message.mediaData !== undefined) {
      obj.mediaData = MediaData.toJSON(message.mediaData);
    }
    if (message.photoChange !== undefined) {
      obj.photoChange = PhotoChange.toJSON(message.photoChange);
    }
    if (message.userReceipt?.length) {
      obj.userReceipt = message.userReceipt.map((e) => UserReceipt.toJSON(e));
    }
    if (message.reactions?.length) {
      obj.reactions = message.reactions.map((e) => Reaction.toJSON(e));
    }
    if (message.quotedStickerData !== undefined) {
      obj.quotedStickerData = MediaData.toJSON(message.quotedStickerData);
    }
    if (message.futureproofData !== undefined) {
      obj.futureproofData = base64FromBytes(message.futureproofData);
    }
    if (message.statusPsa !== undefined) {
      obj.statusPsa = StatusPSA.toJSON(message.statusPsa);
    }
    if (message.pollUpdates?.length) {
      obj.pollUpdates = message.pollUpdates.map((e) => PollUpdate.toJSON(e));
    }
    if (message.pollAdditionalMetadata !== undefined) {
      obj.pollAdditionalMetadata = PollAdditionalMetadata.toJSON(message.pollAdditionalMetadata);
    }
    if (message.agentId !== undefined) {
      obj.agentId = message.agentId;
    }
    if (message.statusAlreadyViewed !== undefined) {
      obj.statusAlreadyViewed = message.statusAlreadyViewed;
    }
    if (message.messageSecret !== undefined) {
      obj.messageSecret = base64FromBytes(message.messageSecret);
    }
    if (message.keepInChat !== undefined) {
      obj.keepInChat = KeepInChat.toJSON(message.keepInChat);
    }
    if (message.originalSelfAuthorUserJidString !== undefined) {
      obj.originalSelfAuthorUserJidString = message.originalSelfAuthorUserJidString;
    }
    if (message.revokeMessageTimestamp !== undefined) {
      obj.revokeMessageTimestamp = Math.round(message.revokeMessageTimestamp);
    }
    if (message.pinInChat !== undefined) {
      obj.pinInChat = PinInChat.toJSON(message.pinInChat);
    }
    if (message.premiumMessageInfo !== undefined) {
      obj.premiumMessageInfo = PremiumMessageInfo.toJSON(message.premiumMessageInfo);
    }
    if (message.is1PBizBotMessage !== undefined) {
      obj.is1PBizBotMessage = message.is1PBizBotMessage;
    }
    if (message.isGroupHistoryMessage !== undefined) {
      obj.isGroupHistoryMessage = message.isGroupHistoryMessage;
    }
    if (message.botMessageInvokerJid !== undefined) {
      obj.botMessageInvokerJid = message.botMessageInvokerJid;
    }
    if (message.commentMetadata !== undefined) {
      obj.commentMetadata = CommentMetadata.toJSON(message.commentMetadata);
    }
    if (message.eventResponses?.length) {
      obj.eventResponses = message.eventResponses.map((e) => EventResponse.toJSON(e));
    }
    if (message.reportingTokenInfo !== undefined) {
      obj.reportingTokenInfo = ReportingTokenInfo.toJSON(message.reportingTokenInfo);
    }
    if (message.newsletterServerId !== undefined) {
      obj.newsletterServerId = Math.round(message.newsletterServerId);
    }
    if (message.eventAdditionalMetadata !== undefined) {
      obj.eventAdditionalMetadata = EventAdditionalMetadata.toJSON(message.eventAdditionalMetadata);
    }
    if (message.isMentionedInStatus !== undefined) {
      obj.isMentionedInStatus = message.isMentionedInStatus;
    }
    if (message.statusMentions?.length) {
      obj.statusMentions = message.statusMentions;
    }
    if (message.targetMessageId !== undefined) {
      obj.targetMessageId = MessageKey.toJSON(message.targetMessageId);
    }
    if (message.messageAddOns?.length) {
      obj.messageAddOns = message.messageAddOns.map((e) => MessageAddOn.toJSON(e));
    }
    if (message.statusMentionMessageInfo !== undefined) {
      obj.statusMentionMessageInfo = StatusMentionMessage.toJSON(message.statusMentionMessageInfo);
    }
    if (message.isSupportAiMessage !== undefined) {
      obj.isSupportAiMessage = message.isSupportAiMessage;
    }
    if (message.statusMentionSources?.length) {
      obj.statusMentionSources = message.statusMentionSources;
    }
    if (message.supportAiCitations?.length) {
      obj.supportAiCitations = message.supportAiCitations.map((e) => Citation.toJSON(e));
    }
    if (message.botTargetId !== undefined) {
      obj.botTargetId = message.botTargetId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebMessageInfo>, I>>(base?: I): WebMessageInfo {
    return WebMessageInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebMessageInfo>, I>>(object: I): WebMessageInfo {
    const message = createBaseWebMessageInfo();
    message.key = (object.key !== undefined && object.key !== null) ? MessageKey.fromPartial(object.key) : undefined;
    message.message = (object.message !== undefined && object.message !== null)
      ? Message.fromPartial(object.message)
      : undefined;
    message.messageTimestamp = object.messageTimestamp ?? undefined;
    message.status = object.status ?? undefined;
    message.participant = object.participant ?? undefined;
    message.messageC2STimestamp = object.messageC2STimestamp ?? undefined;
    message.ignore = object.ignore ?? undefined;
    message.starred = object.starred ?? undefined;
    message.broadcast = object.broadcast ?? undefined;
    message.pushName = object.pushName ?? undefined;
    message.mediaCiphertextSha256 = object.mediaCiphertextSha256 ?? undefined;
    message.multicast = object.multicast ?? undefined;
    message.urlText = object.urlText ?? undefined;
    message.urlNumber = object.urlNumber ?? undefined;
    message.messageStubType = object.messageStubType ?? undefined;
    message.clearMedia = object.clearMedia ?? undefined;
    message.messageStubParameters = object.messageStubParameters?.map((e) => e) || [];
    message.duration = object.duration ?? undefined;
    message.labels = object.labels?.map((e) => e) || [];
    message.paymentInfo = (object.paymentInfo !== undefined && object.paymentInfo !== null)
      ? PaymentInfo.fromPartial(object.paymentInfo)
      : undefined;
    message.finalLiveLocation = (object.finalLiveLocation !== undefined && object.finalLiveLocation !== null)
      ? Message_LiveLocationMessage.fromPartial(object.finalLiveLocation)
      : undefined;
    message.quotedPaymentInfo = (object.quotedPaymentInfo !== undefined && object.quotedPaymentInfo !== null)
      ? PaymentInfo.fromPartial(object.quotedPaymentInfo)
      : undefined;
    message.ephemeralStartTimestamp = object.ephemeralStartTimestamp ?? undefined;
    message.ephemeralDuration = object.ephemeralDuration ?? undefined;
    message.ephemeralOffToOn = object.ephemeralOffToOn ?? undefined;
    message.ephemeralOutOfSync = object.ephemeralOutOfSync ?? undefined;
    message.bizPrivacyStatus = object.bizPrivacyStatus ?? undefined;
    message.verifiedBizName = object.verifiedBizName ?? undefined;
    message.mediaData = (object.mediaData !== undefined && object.mediaData !== null)
      ? MediaData.fromPartial(object.mediaData)
      : undefined;
    message.photoChange = (object.photoChange !== undefined && object.photoChange !== null)
      ? PhotoChange.fromPartial(object.photoChange)
      : undefined;
    message.userReceipt = object.userReceipt?.map((e) => UserReceipt.fromPartial(e)) || [];
    message.reactions = object.reactions?.map((e) => Reaction.fromPartial(e)) || [];
    message.quotedStickerData = (object.quotedStickerData !== undefined && object.quotedStickerData !== null)
      ? MediaData.fromPartial(object.quotedStickerData)
      : undefined;
    message.futureproofData = object.futureproofData ?? undefined;
    message.statusPsa = (object.statusPsa !== undefined && object.statusPsa !== null)
      ? StatusPSA.fromPartial(object.statusPsa)
      : undefined;
    message.pollUpdates = object.pollUpdates?.map((e) => PollUpdate.fromPartial(e)) || [];
    message.pollAdditionalMetadata =
      (object.pollAdditionalMetadata !== undefined && object.pollAdditionalMetadata !== null)
        ? PollAdditionalMetadata.fromPartial(object.pollAdditionalMetadata)
        : undefined;
    message.agentId = object.agentId ?? undefined;
    message.statusAlreadyViewed = object.statusAlreadyViewed ?? undefined;
    message.messageSecret = object.messageSecret ?? undefined;
    message.keepInChat = (object.keepInChat !== undefined && object.keepInChat !== null)
      ? KeepInChat.fromPartial(object.keepInChat)
      : undefined;
    message.originalSelfAuthorUserJidString = object.originalSelfAuthorUserJidString ?? undefined;
    message.revokeMessageTimestamp = object.revokeMessageTimestamp ?? undefined;
    message.pinInChat = (object.pinInChat !== undefined && object.pinInChat !== null)
      ? PinInChat.fromPartial(object.pinInChat)
      : undefined;
    message.premiumMessageInfo = (object.premiumMessageInfo !== undefined && object.premiumMessageInfo !== null)
      ? PremiumMessageInfo.fromPartial(object.premiumMessageInfo)
      : undefined;
    message.is1PBizBotMessage = object.is1PBizBotMessage ?? undefined;
    message.isGroupHistoryMessage = object.isGroupHistoryMessage ?? undefined;
    message.botMessageInvokerJid = object.botMessageInvokerJid ?? undefined;
    message.commentMetadata = (object.commentMetadata !== undefined && object.commentMetadata !== null)
      ? CommentMetadata.fromPartial(object.commentMetadata)
      : undefined;
    message.eventResponses = object.eventResponses?.map((e) => EventResponse.fromPartial(e)) || [];
    message.reportingTokenInfo = (object.reportingTokenInfo !== undefined && object.reportingTokenInfo !== null)
      ? ReportingTokenInfo.fromPartial(object.reportingTokenInfo)
      : undefined;
    message.newsletterServerId = object.newsletterServerId ?? undefined;
    message.eventAdditionalMetadata =
      (object.eventAdditionalMetadata !== undefined && object.eventAdditionalMetadata !== null)
        ? EventAdditionalMetadata.fromPartial(object.eventAdditionalMetadata)
        : undefined;
    message.isMentionedInStatus = object.isMentionedInStatus ?? undefined;
    message.statusMentions = object.statusMentions?.map((e) => e) || [];
    message.targetMessageId = (object.targetMessageId !== undefined && object.targetMessageId !== null)
      ? MessageKey.fromPartial(object.targetMessageId)
      : undefined;
    message.messageAddOns = object.messageAddOns?.map((e) => MessageAddOn.fromPartial(e)) || [];
    message.statusMentionMessageInfo =
      (object.statusMentionMessageInfo !== undefined && object.statusMentionMessageInfo !== null)
        ? StatusMentionMessage.fromPartial(object.statusMentionMessageInfo)
        : undefined;
    message.isSupportAiMessage = object.isSupportAiMessage ?? undefined;
    message.statusMentionSources = object.statusMentionSources?.map((e) => e) || [];
    message.supportAiCitations = object.supportAiCitations?.map((e) => Citation.fromPartial(e)) || [];
    message.botTargetId = object.botTargetId ?? undefined;
    return message;
  },
};

function createBaseWebNotificationsInfo(): WebNotificationsInfo {
  return { timestamp: undefined, unreadChats: undefined, notifyMessageCount: undefined, notifyMessages: [] };
}

export const WebNotificationsInfo: MessageFns<WebNotificationsInfo> = {
  encode(message: WebNotificationsInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timestamp !== undefined) {
      writer.uint32(16).uint64(message.timestamp);
    }
    if (message.unreadChats !== undefined) {
      writer.uint32(24).uint32(message.unreadChats);
    }
    if (message.notifyMessageCount !== undefined) {
      writer.uint32(32).uint32(message.notifyMessageCount);
    }
    for (const v of message.notifyMessages) {
      WebMessageInfo.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebNotificationsInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebNotificationsInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.timestamp = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.unreadChats = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.notifyMessageCount = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.notifyMessages.push(WebMessageInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebNotificationsInfo {
    return {
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : undefined,
      unreadChats: isSet(object.unreadChats) ? globalThis.Number(object.unreadChats) : undefined,
      notifyMessageCount: isSet(object.notifyMessageCount) ? globalThis.Number(object.notifyMessageCount) : undefined,
      notifyMessages: globalThis.Array.isArray(object?.notifyMessages)
        ? object.notifyMessages.map((e: any) => WebMessageInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WebNotificationsInfo): unknown {
    const obj: any = {};
    if (message.timestamp !== undefined) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.unreadChats !== undefined) {
      obj.unreadChats = Math.round(message.unreadChats);
    }
    if (message.notifyMessageCount !== undefined) {
      obj.notifyMessageCount = Math.round(message.notifyMessageCount);
    }
    if (message.notifyMessages?.length) {
      obj.notifyMessages = message.notifyMessages.map((e) => WebMessageInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebNotificationsInfo>, I>>(base?: I): WebNotificationsInfo {
    return WebNotificationsInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebNotificationsInfo>, I>>(object: I): WebNotificationsInfo {
    const message = createBaseWebNotificationsInfo();
    message.timestamp = object.timestamp ?? undefined;
    message.unreadChats = object.unreadChats ?? undefined;
    message.notifyMessageCount = object.notifyMessageCount ?? undefined;
    message.notifyMessages = object.notifyMessages?.map((e) => WebMessageInfo.fromPartial(e)) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
